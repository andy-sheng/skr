package com.wali.live.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wali.live.dao.WatchHistoryInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WATCH_HISTORY_INFO.
*/
public class WatchHistoryInfoDao extends AbstractDao<WatchHistoryInfo, String> {

    public static final String TABLENAME = "WATCH_HISTORY_INFO";

    /**
     * Properties of entity WatchHistoryInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Avatar = new Property(2, Long.class, "avatar", false, "AVATAR");
        public final static Property UserNickname = new Property(3, String.class, "userNickname", false, "USER_NICKNAME");
        public final static Property Signature = new Property(4, String.class, "signature", false, "SIGNATURE");
        public final static Property Gender = new Property(5, Integer.class, "gender", false, "GENDER");
        public final static Property Level = new Property(6, Integer.class, "level", false, "LEVEL");
        public final static Property CertificationType = new Property(7, Integer.class, "certificationType", false, "CERTIFICATION_TYPE");
        public final static Property IsFollowing = new Property(8, Boolean.class, "isFollowing", false, "IS_FOLLOWING");
        public final static Property IsBothway = new Property(9, Boolean.class, "isBothway", false, "IS_BOTHWAY");
        public final static Property WatchTime = new Property(10, Long.class, "watchTime", false, "WATCH_TIME");
        public final static Property IsWatch = new Property(11, Boolean.class, "isWatch", false, "IS_WATCH");
        public final static Property FromType = new Property(12, Integer.class, "fromType", false, "FROM_TYPE");
    };


    public WatchHistoryInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WatchHistoryInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WATCH_HISTORY_INFO' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'USER_ID' INTEGER," + // 1: userId
                "'AVATAR' INTEGER," + // 2: avatar
                "'USER_NICKNAME' TEXT," + // 3: userNickname
                "'SIGNATURE' TEXT," + // 4: signature
                "'GENDER' INTEGER," + // 5: gender
                "'LEVEL' INTEGER," + // 6: level
                "'CERTIFICATION_TYPE' INTEGER," + // 7: certificationType
                "'IS_FOLLOWING' INTEGER," + // 8: isFollowing
                "'IS_BOTHWAY' INTEGER," + // 9: isBothway
                "'WATCH_TIME' INTEGER," + // 10: watchTime
                "'IS_WATCH' INTEGER," + // 11: isWatch
                "'FROM_TYPE' INTEGER);"); // 12: fromType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WATCH_HISTORY_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WatchHistoryInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindLong(3, avatar);
        }
 
        String userNickname = entity.getUserNickname();
        if (userNickname != null) {
            stmt.bindString(4, userNickname);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(5, signature);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(7, level);
        }
 
        Integer certificationType = entity.getCertificationType();
        if (certificationType != null) {
            stmt.bindLong(8, certificationType);
        }
 
        Boolean isFollowing = entity.getIsFollowing();
        if (isFollowing != null) {
            stmt.bindLong(9, isFollowing ? 1l: 0l);
        }
 
        Boolean isBothway = entity.getIsBothway();
        if (isBothway != null) {
            stmt.bindLong(10, isBothway ? 1l: 0l);
        }
 
        Long watchTime = entity.getWatchTime();
        if (watchTime != null) {
            stmt.bindLong(11, watchTime);
        }
 
        Boolean isWatch = entity.getIsWatch();
        if (isWatch != null) {
            stmt.bindLong(12, isWatch ? 1l: 0l);
        }
 
        Integer fromType = entity.getFromType();
        if (fromType != null) {
            stmt.bindLong(13, fromType);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WatchHistoryInfo readEntity(Cursor cursor, int offset) {
        WatchHistoryInfo entity = new WatchHistoryInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userNickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // signature
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // level
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // certificationType
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isFollowing
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isBothway
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // watchTime
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isWatch
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // fromType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WatchHistoryInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUserNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSignature(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLevel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCertificationType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsFollowing(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsBothway(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setWatchTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setIsWatch(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setFromType(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(WatchHistoryInfo entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(WatchHistoryInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
