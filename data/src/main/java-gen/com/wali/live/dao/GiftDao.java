package com.wali.live.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wali.live.dao.Gift;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GIFT.
*/
public class GiftDao extends AbstractDao<Gift, Long> {

    public static final String TABLENAME = "GIFT";

    /**
     * Properties of entity Gift.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GiftId = new Property(1, int.class, "giftId", false, "GIFT_ID");
        public final static Property SortId = new Property(2, Integer.class, "sortId", false, "SORT_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Price = new Property(4, Integer.class, "price", false, "PRICE");
        public final static Property EmpiricValue = new Property(5, Integer.class, "empiricValue", false, "EMPIRIC_VALUE");
        public final static Property Picture = new Property(6, String.class, "picture", false, "PICTURE");
        public final static Property CanContinuous = new Property(7, Boolean.class, "canContinuous", false, "CAN_CONTINUOUS");
        public final static Property LanguageStr = new Property(8, String.class, "languageStr", false, "LANGUAGE_STR");
        public final static Property ResourceUrl = new Property(9, String.class, "resourceUrl", false, "RESOURCE_URL");
        public final static Property CanSale = new Property(10, Boolean.class, "canSale", false, "CAN_SALE");
        public final static Property Catagory = new Property(11, Integer.class, "catagory", false, "CATAGORY");
        public final static Property IsAllowActivitySet = new Property(12, String.class, "isAllowActivitySet", false, "IS_ALLOW_ACTIVITY_SET");
        public final static Property OriginalPrice = new Property(13, Integer.class, "originalPrice", false, "ORIGINAL_PRICE");
        public final static Property Icon = new Property(14, String.class, "icon", false, "ICON");
        public final static Property Comment = new Property(15, String.class, "comment", false, "COMMENT");
        public final static Property GifUrl = new Property(16, String.class, "gifUrl", false, "GIF_URL");
        public final static Property LowerLimitLevel = new Property(17, Integer.class, "lowerLimitLevel", false, "LOWER_LIMIT_LEVEL");
        public final static Property OriginGiftType = new Property(18, Integer.class, "originGiftType", false, "ORIGIN_GIFT_TYPE");
        public final static Property BuyType = new Property(19, Integer.class, "buyType", false, "BUY_TYPE");
    };


    public GiftDao(DaoConfig config) {
        super(config);
    }
    
    public GiftDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GIFT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'GIFT_ID' INTEGER NOT NULL ," + // 1: giftId
                "'SORT_ID' INTEGER," + // 2: sortId
                "'NAME' TEXT," + // 3: name
                "'PRICE' INTEGER," + // 4: price
                "'EMPIRIC_VALUE' INTEGER," + // 5: empiricValue
                "'PICTURE' TEXT," + // 6: picture
                "'CAN_CONTINUOUS' INTEGER," + // 7: canContinuous
                "'LANGUAGE_STR' TEXT," + // 8: languageStr
                "'RESOURCE_URL' TEXT," + // 9: resourceUrl
                "'CAN_SALE' INTEGER," + // 10: canSale
                "'CATAGORY' INTEGER," + // 11: catagory
                "'IS_ALLOW_ACTIVITY_SET' TEXT," + // 12: isAllowActivitySet
                "'ORIGINAL_PRICE' INTEGER," + // 13: originalPrice
                "'ICON' TEXT," + // 14: icon
                "'COMMENT' TEXT," + // 15: comment
                "'GIF_URL' TEXT," + // 16: gifUrl
                "'LOWER_LIMIT_LEVEL' INTEGER," + // 17: lowerLimitLevel
                "'ORIGIN_GIFT_TYPE' INTEGER," + // 18: originGiftType
                "'BUY_TYPE' INTEGER);"); // 19: buyType
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_GIFT_GIFT_ID ON GIFT" +
                " (GIFT_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GIFT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Gift entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGiftId());
 
        Integer sortId = entity.getSortId();
        if (sortId != null) {
            stmt.bindLong(3, sortId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Integer price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(5, price);
        }
 
        Integer empiricValue = entity.getEmpiricValue();
        if (empiricValue != null) {
            stmt.bindLong(6, empiricValue);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(7, picture);
        }
 
        Boolean canContinuous = entity.getCanContinuous();
        if (canContinuous != null) {
            stmt.bindLong(8, canContinuous ? 1l: 0l);
        }
 
        String languageStr = entity.getLanguageStr();
        if (languageStr != null) {
            stmt.bindString(9, languageStr);
        }
 
        String resourceUrl = entity.getResourceUrl();
        if (resourceUrl != null) {
            stmt.bindString(10, resourceUrl);
        }
 
        Boolean canSale = entity.getCanSale();
        if (canSale != null) {
            stmt.bindLong(11, canSale ? 1l: 0l);
        }
 
        Integer catagory = entity.getCatagory();
        if (catagory != null) {
            stmt.bindLong(12, catagory);
        }
 
        String isAllowActivitySet = entity.getIsAllowActivitySet();
        if (isAllowActivitySet != null) {
            stmt.bindString(13, isAllowActivitySet);
        }
 
        Integer originalPrice = entity.getOriginalPrice();
        if (originalPrice != null) {
            stmt.bindLong(14, originalPrice);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(15, icon);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(16, comment);
        }
 
        String gifUrl = entity.getGifUrl();
        if (gifUrl != null) {
            stmt.bindString(17, gifUrl);
        }
 
        Integer lowerLimitLevel = entity.getLowerLimitLevel();
        if (lowerLimitLevel != null) {
            stmt.bindLong(18, lowerLimitLevel);
        }
 
        Integer originGiftType = entity.getOriginGiftType();
        if (originGiftType != null) {
            stmt.bindLong(19, originGiftType);
        }
 
        Integer buyType = entity.getBuyType();
        if (buyType != null) {
            stmt.bindLong(20, buyType);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Gift readEntity(Cursor cursor, int offset) {
        Gift entity = new Gift( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // giftId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sortId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // empiricValue
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // picture
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // canContinuous
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // languageStr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // resourceUrl
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // canSale
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // catagory
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // isAllowActivitySet
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // originalPrice
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // icon
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // comment
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // gifUrl
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // lowerLimitLevel
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // originGiftType
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19) // buyType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Gift entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGiftId(cursor.getInt(offset + 1));
        entity.setSortId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEmpiricValue(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPicture(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCanContinuous(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setLanguageStr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setResourceUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCanSale(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setCatagory(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setIsAllowActivitySet(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOriginalPrice(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setIcon(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setComment(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setGifUrl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLowerLimitLevel(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setOriginGiftType(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setBuyType(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Gift entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Gift entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
