package com.wali.live.dao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.wali.live.proto.LiveMessageProto;
// KEEP INCLUDES END
import android.text.TextUtils;

import com.base.log.MyLog;
import com.google.protobuf.ByteString;
import com.mi.live.data.account.UserAccountManager;
import com.mi.live.data.assist.Attachment;
/**
 * Entity mapped to table SIXIN_MESSAGE.
 */
public class SixinMessage {

    private Long id;
    private long target;
    private String targetName;
    private Long sender;
    private Integer msgTyppe;
    private Long msgSeq;
    private Long senderMsgId;
    private Long sentTime;
    private Long receivedTime;
    private Boolean isInbound;
    private Integer msgStatus;
    private Integer outboundStatus;
    private String body;
    private String ext;
    private long locaLUserId;
    private Integer certificationType;
    private int targetType;
    private int serverStoreStatus;
    private int groupLevel;
    private String groupHonor;
    private int groupMedalId;

    // KEEP FIELDS - put your custom fields here
    // Todo 这里的类型暂时和安平保持一致
    public static final int S_MSG_TYPE_DRAFT = -10;                 // 草稿类消息,在输入框编辑完之后保存的草稿
    public static final int S_MSG_TYPE_TEXT = 100;
    public static final int S_MSG_TYPE_PIC = 102;
    public static final int S_MSG_TYPE_VOICE = 103;
    public static final int S_MSG_TYPE_INVITE_INTO_GROUP = 104;     // 邀请入群
    public static final int S_MSG_TYPE_POSTER = 105;                // 图文信息，只能系统推送
    public static final int S_MSG_TYPE_AT = 106;                    // at 消息
    public static final int S_MSG_TYPE_TEXT_LINK = 107;             // 系统推送的文字+链接
    public static final int S_MSG_TYPE_LIST = 108;                  // VIP客服发送的List消息类型，108是本地定义的，注意服务器应避免使用该msg_type
    public static final int S_MSG_TYPE_NOTIFY = 200;                // 群通知
    public static final int S_MSG_TYPE_ENTER_GROUP = 201;           // 加群通知
    public static final int S_MSG_TYPE_LEAVE_GROUP = 202;           // 踢出群通知
    public static final int S_MSG_TYPE_QUIT_GROUP = 203;            // 退出群
    public static final int S_MSG_CUSTOME_TYPE_LOADING_FOOT = -101; // 客户端自己的messageType,用来显示loading fotter;
    public static final int S_MSG_TYPE_CANCEL_FOUCS = 204;          // 取消关注

    public static final int STATUS_NOT_INBOUND = 0;         // 自己发出的消息
    public static final int STATUS_IS_INBOUND = 1;          // 收到的消息

    public static final int OUTBOUND_STATUS_NOT_SET = 0;    // 对于收到的消息，设置这个
    public static final int OUTBOUND_STATUS_UNSENT = 1;     // 未发送的消息，但是富媒体已经上传成功
    public static final int OUTBOUND_STATUS_SENT = 2;       // 发送成功
    public static final int OUTBOUND_STATUS_RECEIVED = 3;
    public static final int OUTBOUND_STATUS_READ = 4;       // 发出消息的内容已经被对方消费。比如文字消息已经被读，语音文字已经被播放等

    public static final int INBOUND_STATUS_READ = 5;        // 接收的消息还是已读
    public static final int INBOUND_STATUS_UNREAD = 6;      // 接收的消息是未读
    public static final int SERVER_STORE_STATUS_DELETE = 7; // 解散的消息是删除状态

    public static final int MSG_STATUS_ONLY_ME_FOUCS = 0;   // 关注了对方
    public static final int MSG_STATUS_UNFOUCS = 1;         // 未关注对方
    public static final int MSG_STATUE_BOTHFOUCS = 2;       // 双向关注

    public static final int TARGET_TYPE_VFANS = 2;          // 消息是宠爱团的，宠爱团消息不在私信列表展示
    public static final int TARGET_TYPE_GROUP = 1;          // 消息是发自群的
    public static final int TARGET_TYPE_USER = 0;           // 消息的发自单人的

    private Attachment mAtt;
    // KEEP FIELDS END

    public SixinMessage() {
    }

    public SixinMessage(Long id) {
        this.id = id;
    }

    public SixinMessage(Long id, long target, String targetName, Long sender, Integer msgTyppe, Long msgSeq, Long senderMsgId, Long sentTime, Long receivedTime, Boolean isInbound, Integer msgStatus, Integer outboundStatus, String body, String ext, long locaLUserId, Integer certificationType, int targetType, int serverStoreStatus, int groupLevel, String groupHonor, int groupMedalId) {
        this.id = id;
        this.target = target;
        this.targetName = targetName;
        this.sender = sender;
        this.msgTyppe = msgTyppe;
        this.msgSeq = msgSeq;
        this.senderMsgId = senderMsgId;
        this.sentTime = sentTime;
        this.receivedTime = receivedTime;
        this.isInbound = isInbound;
        this.msgStatus = msgStatus;
        this.outboundStatus = outboundStatus;
        this.body = body;
        this.ext = ext;
        this.locaLUserId = locaLUserId;
        this.certificationType = certificationType;
        this.targetType = targetType;
        this.serverStoreStatus = serverStoreStatus;
        this.groupLevel = groupLevel;
        this.groupHonor = groupHonor;
        this.groupMedalId = groupMedalId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getTarget() {
        return target;
    }

    public void setTarget(long target) {
        this.target = target;
    }

    public String getTargetName() {
        return targetName;
    }

    public void setTargetName(String targetName) {
        this.targetName = targetName;
    }

    public Long getSender() {
        return sender;
    }

    public void setSender(Long sender) {
        this.sender = sender;
    }

    public Integer getMsgTyppe() {
        return msgTyppe;
    }

    public void setMsgTyppe(Integer msgTyppe) {
        this.msgTyppe = msgTyppe;
    }

    public Long getMsgSeq() {
        return msgSeq;
    }

    public void setMsgSeq(Long msgSeq) {
        this.msgSeq = msgSeq;
    }

    public Long getSenderMsgId() {
        return senderMsgId;
    }

    public void setSenderMsgId(Long senderMsgId) {
        this.senderMsgId = senderMsgId;
    }

    public Long getSentTime() {
        return sentTime;
    }

    public void setSentTime(Long sentTime) {
        this.sentTime = sentTime;
    }

    public Long getReceivedTime() {
        return receivedTime;
    }

    public void setReceivedTime(Long receivedTime) {
        this.receivedTime = receivedTime;
    }

    public Boolean getIsInbound() {
        return isInbound;
    }

    public void setIsInbound(Boolean isInbound) {
        this.isInbound = isInbound;
    }

    public Integer getMsgStatus() {
        return msgStatus;
    }

    public void setMsgStatus(Integer msgStatus) {
        this.msgStatus = msgStatus;
    }

    public Integer getOutboundStatus() {
        return outboundStatus;
    }

    public void setOutboundStatus(Integer outboundStatus) {
        this.outboundStatus = outboundStatus;
    }

    public String getBody() {
        return body;
    }

    public void setBody(String body) {
        this.body = body;
    }

    public String getExt() {
        return ext;
    }

    public void setExt(String ext) {
        this.ext = ext;
    }

    public long getLocaLUserId() {
        return locaLUserId;
    }

    public void setLocaLUserId(long locaLUserId) {
        this.locaLUserId = locaLUserId;
    }

    public Integer getCertificationType() {
        return certificationType;
    }

    public void setCertificationType(Integer certificationType) {
        this.certificationType = certificationType;
    }

    public int getTargetType() {
        return targetType;
    }

    public void setTargetType(int targetType) {
        this.targetType = targetType;
    }

    public int getServerStoreStatus() {
        return serverStoreStatus;
    }

    public void setServerStoreStatus(int serverStoreStatus) {
        this.serverStoreStatus = serverStoreStatus;
    }

    public int getGroupLevel() {
        return groupLevel;
    }

    public void setGroupLevel(int groupLevel) {
        this.groupLevel = groupLevel;
    }

    public String getGroupHonor() {
        return groupHonor;
    }

    public void setGroupHonor(String groupHonor) {
        this.groupHonor = groupHonor;
    }

    public int getGroupMedalId() {
        return groupMedalId;
    }

    public void setGroupMedalId(int groupMedalId) {
        this.groupMedalId = groupMedalId;
    }

    // KEEP METHODS - put your custom methods here

    public Attachment getAtt() {
        if (!TextUtils.isEmpty(ext)) {
            mAtt = new Attachment();
            mAtt.parseJSONString(ext);
        }
        return mAtt;
    }

    // =============================================
    /**
     * 请原谅我加一个字段，专门用来处理999号客服的消息同步问题
     * 虽然我也知道这么做不好，但是真没想出其他办法了
     * 这个变量默认是UNREAD的，不会影响之前的逻辑,只有999号才会设置为READ，因为产品的要求是999号同步的消息不能出现小红点
     */
    private IS_READ isRead = IS_READ.UNREAD;

    public enum IS_READ {
        UNREAD(0),
        READ(1);

        private int isRead;

        public int getIsRead() {
            return isRead;
        }

        IS_READ(int isRead) {
            this.isRead = isRead;
        }
    }
    // =============================================

    public IS_READ getIsRead() {
        return isRead;
    }

    public void setIsRead(IS_READ isRead) {
        this.isRead = isRead;
    }

    public SixinMessage(LiveMessageProto.Message message) {
        long mySelfId = UserAccountManager.getInstance().getUuidAsLong();
        long target = message.getFromUser() == mySelfId ? message.getToUser() : message.getFromUser();
        setIsInbound(message.getFromUser() != mySelfId);
        long sender = getIsInbound() ? target : mySelfId;
        setTarget(target);
        setSender(sender);
        setSenderMsgId(message.getCid());
        setMsgSeq((long) message.getMsgSeq());
        setSentTime(message.getTimestamp());
        setReceivedTime(message.getTimestamp());
        if (Math.abs(message.getTimestamp() - System.currentTimeMillis()) > 2 * 60 * 1000) { //客户端（ˇˍˇ）　想～要的效果是消息显示在发送的地方和ack无关，但是客户端时间可能和网络时间严重不一致，有严重不一致则按照ack更新下
            setReceivedTime(message.getTimestamp());
        } else {
            setReceivedTime(System.currentTimeMillis());
        }
        setMsgTyppe(message.getMsgType());
        setBody(message.getMsgBody());

        setTargetName(message.getFromUserNickName());
        if (!getIsInbound()) {
            setOutboundStatus(OUTBOUND_STATUS_RECEIVED);
        } else {
            setOutboundStatus(OUTBOUND_STATUS_NOT_SET);
        }
        setMsgStatus(message.getMsgStatus());
        setLocaLUserId(mySelfId);
        parseExt(message.getMsgExt(), msgTyppe);
        setCertificationType(message.getCertificationType());
        setTargetType(SixinMessage.TARGET_TYPE_USER);
        setServerStoreStatus(INBOUND_STATUS_UNREAD);
    }

    public void updateSixinMessage(SixinMessage sixinMessage) {
        if (sixinMessage.getId() != null) {
            id = sixinMessage.getId();
        }
        if (sixinMessage.getMsgSeq() != null) {
            msgSeq = sixinMessage.getMsgSeq();
        }
        if (sixinMessage.getSentTime() != null) {
            sentTime = sixinMessage.getSentTime();
        }
        if (sixinMessage.getReceivedTime() != null) {
            receivedTime = sixinMessage.getReceivedTime();
        }
        if (sixinMessage.getMsgStatus() != null) {
            msgStatus = sixinMessage.getMsgStatus();
        }
        if (sixinMessage.getOutboundStatus() != null) {
            outboundStatus = sixinMessage.getOutboundStatus();
        }

        locaLUserId = sixinMessage.getLocaLUserId();
        if (sixinMessage.getIsInbound()) {
            certificationType = sixinMessage.getCertificationType();
        } else {
            certificationType = 0;
        }
        groupLevel = sixinMessage.getGroupLevel();
        if (TextUtils.isEmpty(sixinMessage.getGroupHonor())) {
            groupHonor = sixinMessage.getGroupHonor();
        }
        groupMedalId = sixinMessage.getGroupMedalId();
    }


    public void parseExt(ByteString extData, int msgTyppe, String... supportBody) {//把富媒体数据转换成json数据存储在ext字段中
        if (extData != null) {
            MyLog.v("testSixin" + extData.size());
            switch (msgTyppe) {
                case S_MSG_TYPE_PIC: {
                    setMsgTyppe(S_MSG_TYPE_PIC);
                    try {
                        LiveMessageProto.ImageBodyExt imageBodyExt = LiveMessageProto.ImageBodyExt.parseFrom(extData);
                        if (imageBodyExt != null) {
                            mAtt = new Attachment();
                            mAtt.setMimeType(imageBodyExt.getMimeType());
                            mAtt.setUrl(imageBodyExt.getUrl());
                            mAtt.setWidth(imageBodyExt.getWidth());
                            mAtt.setHeight(imageBodyExt.getHeight());
                            mAtt.setFileSize(imageBodyExt.getSize());
                            mAtt.setIsOriginal(imageBodyExt.getIsOriginal());
                            ext = mAtt.toJSONString();
                        }
                    } catch (Exception e) {
                        MyLog.e(e);
                    }
                }
                break;
                case S_MSG_TYPE_TEXT: {
                    setMsgTyppe(S_MSG_TYPE_TEXT);
                }
                break;
                case S_MSG_TYPE_LIST:{
                    setMsgTyppe(msgTyppe);
                }
                break;

                default:
                    setMsgTyppe(S_MSG_TYPE_TEXT);
                    if (supportBody != null && supportBody.length > 0) { //兼容文案
                        setBody(supportBody[0]);
                    }
                    break;
            }
        }
    }

    public boolean extNeedNull = true;

    public boolean isExtNeedNull() {
        return extNeedNull;
    }

    public ByteString toExt() {
        ByteString result = null;
        try {
            if (!TextUtils.isEmpty(ext)) {
                if (mAtt == null) {
                    mAtt = new Attachment();
                }
                mAtt.parseJSONString(ext);
            }
            if (mAtt != null) {
                switch (msgTyppe) {
                    case S_MSG_TYPE_PIC: {
                        extNeedNull = false;
                        if (!TextUtils.isEmpty(mAtt.getUrl())) {
                            int size = mAtt.getSize() > 0 ? mAtt.getSize() : (int) mAtt.getFileSize();
                            LiveMessageProto.ImageBodyExt builder = LiveMessageProto.ImageBodyExt.newBuilder().
                                    setMimeType(mAtt.getMimeType()).setUrl(mAtt.getUrl()).setWidth(mAtt.getWidth()).setHeight(mAtt.getHeight()).
                                    setSize(size).setIsOriginal(mAtt.isOriginal).build();
                            result = builder.toByteString();
                        }
                    }
                    break;
                }
            }
        }catch(Exception e){
            MyLog.e(e);
        }
        return result;
    }
    // KEEP METHODS END

}
