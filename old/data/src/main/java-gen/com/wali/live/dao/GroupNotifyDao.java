package com.wali.live.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wali.live.dao.GroupNotify;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GROUP_NOTIFY.
*/
public class GroupNotifyDao extends AbstractDao<GroupNotify, Long> {

    public static final String TABLENAME = "GROUP_NOTIFY";

    /**
     * Properties of entity GroupNotify.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property NotifyId = new Property(0, long.class, "notifyId", true, "NOTIFY_ID");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
        public final static Property Status = new Property(3, Integer.class, "status", false, "STATUS");
        public final static Property Candidate = new Property(4, Long.class, "candidate", false, "CANDIDATE");
        public final static Property CandidateName = new Property(5, String.class, "candidateName", false, "CANDIDATE_NAME");
        public final static Property CandidateTs = new Property(6, Long.class, "candidateTs", false, "CANDIDATE_TS");
        public final static Property GroupId = new Property(7, Long.class, "groupId", false, "GROUP_ID");
        public final static Property GroupOwner = new Property(8, Long.class, "groupOwner", false, "GROUP_OWNER");
        public final static Property GroupName = new Property(9, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupIcon = new Property(10, String.class, "groupIcon", false, "GROUP_ICON");
        public final static Property GroupOwnerTs = new Property(11, Long.class, "groupOwnerTs", false, "GROUP_OWNER_TS");
        public final static Property Msg = new Property(12, String.class, "msg", false, "MSG");
        public final static Property MsgBrief = new Property(13, String.class, "msgBrief", false, "MSG_BRIEF");
        public final static Property Content = new Property(14, String.class, "content", false, "CONTENT");
        public final static Property LocalUserId = new Property(15, long.class, "localUserId", false, "LOCAL_USER_ID");
    };


    public GroupNotifyDao(DaoConfig config) {
        super(config);
    }
    
    public GroupNotifyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GROUP_NOTIFY' (" + //
                "'NOTIFY_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: notifyId
                "'TYPE' INTEGER," + // 1: type
                "'TIME' INTEGER," + // 2: time
                "'STATUS' INTEGER," + // 3: status
                "'CANDIDATE' INTEGER," + // 4: candidate
                "'CANDIDATE_NAME' TEXT," + // 5: candidateName
                "'CANDIDATE_TS' INTEGER," + // 6: candidateTs
                "'GROUP_ID' INTEGER," + // 7: groupId
                "'GROUP_OWNER' INTEGER," + // 8: groupOwner
                "'GROUP_NAME' TEXT," + // 9: groupName
                "'GROUP_ICON' TEXT," + // 10: groupIcon
                "'GROUP_OWNER_TS' INTEGER," + // 11: groupOwnerTs
                "'MSG' TEXT," + // 12: msg
                "'MSG_BRIEF' TEXT," + // 13: msgBrief
                "'CONTENT' TEXT," + // 14: content
                "'LOCAL_USER_ID' INTEGER NOT NULL );"); // 15: localUserId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_GROUP_NOTIFY_NOTIFY_ID ON GROUP_NOTIFY" +
                " (NOTIFY_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_GROUP_NOTIFY_LOCAL_USER_ID ON GROUP_NOTIFY" +
                " (LOCAL_USER_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_NOTIFY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GroupNotify entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getNotifyId());
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(4, status);
        }
 
        Long candidate = entity.getCandidate();
        if (candidate != null) {
            stmt.bindLong(5, candidate);
        }
 
        String candidateName = entity.getCandidateName();
        if (candidateName != null) {
            stmt.bindString(6, candidateName);
        }
 
        Long candidateTs = entity.getCandidateTs();
        if (candidateTs != null) {
            stmt.bindLong(7, candidateTs);
        }
 
        Long groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(8, groupId);
        }
 
        Long groupOwner = entity.getGroupOwner();
        if (groupOwner != null) {
            stmt.bindLong(9, groupOwner);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(10, groupName);
        }
 
        String groupIcon = entity.getGroupIcon();
        if (groupIcon != null) {
            stmt.bindString(11, groupIcon);
        }
 
        Long groupOwnerTs = entity.getGroupOwnerTs();
        if (groupOwnerTs != null) {
            stmt.bindLong(12, groupOwnerTs);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(13, msg);
        }
 
        String msgBrief = entity.getMsgBrief();
        if (msgBrief != null) {
            stmt.bindString(14, msgBrief);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(15, content);
        }
        stmt.bindLong(16, entity.getLocalUserId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GroupNotify readEntity(Cursor cursor, int offset) {
        GroupNotify entity = new GroupNotify( //
            cursor.getLong(offset + 0), // notifyId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // candidate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // candidateName
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // candidateTs
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // groupId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // groupOwner
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // groupName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // groupIcon
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // groupOwnerTs
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // msg
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // msgBrief
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // content
            cursor.getLong(offset + 15) // localUserId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GroupNotify entity, int offset) {
        entity.setNotifyId(cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCandidate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCandidateName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCandidateTs(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setGroupId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setGroupOwner(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setGroupName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGroupIcon(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGroupOwnerTs(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setMsg(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMsgBrief(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setContent(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLocalUserId(cursor.getLong(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GroupNotify entity, long rowId) {
        entity.setNotifyId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GroupNotify entity) {
        if(entity != null) {
            return entity.getNotifyId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
