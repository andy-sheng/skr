package com.wali.live.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wali.live.dao.RegionCn;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REGION_CN.
*/
public class RegionCnDao extends AbstractDao<RegionCn, Void> {

    public static final String TABLENAME = "REGION_CN";

    /**
     * Properties of entity RegionCn.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IsHot = new Property(0, Boolean.class, "isHot", false, "IS_HOT");
        public final static Property Country = new Property(1, String.class, "Country", false, "COUNTRY");
        public final static Property CountryCode = new Property(2, String.class, "CountryCode", false, "COUNTRY_CODE");
    };


    public RegionCnDao(DaoConfig config) {
        super(config);
    }
    
    public RegionCnDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REGION_CN' (" + //
                "'IS_HOT' INTEGER," + // 0: isHot
                "'COUNTRY' TEXT," + // 1: Country
                "'COUNTRY_CODE' TEXT);"); // 2: CountryCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REGION_CN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RegionCn entity) {
        stmt.clearBindings();
 
        Boolean isHot = entity.getIsHot();
        if (isHot != null) {
            stmt.bindLong(1, isHot ? 1l: 0l);
        }
 
        String Country = entity.getCountry();
        if (Country != null) {
            stmt.bindString(2, Country);
        }
 
        String CountryCode = entity.getCountryCode();
        if (CountryCode != null) {
            stmt.bindString(3, CountryCode);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public RegionCn readEntity(Cursor cursor, int offset) {
        RegionCn entity = new RegionCn( //
            cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0, // isHot
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Country
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // CountryCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RegionCn entity, int offset) {
        entity.setIsHot(cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0);
        entity.setCountry(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountryCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(RegionCn entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(RegionCn entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
