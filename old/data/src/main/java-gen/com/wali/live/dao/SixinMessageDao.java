package com.wali.live.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wali.live.dao.SixinMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SIXIN_MESSAGE.
*/
public class SixinMessageDao extends AbstractDao<SixinMessage, Long> {

    public static final String TABLENAME = "SIXIN_MESSAGE";

    /**
     * Properties of entity SixinMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Target = new Property(1, long.class, "target", false, "TARGET");
        public final static Property TargetName = new Property(2, String.class, "targetName", false, "TARGET_NAME");
        public final static Property Sender = new Property(3, Long.class, "sender", false, "SENDER");
        public final static Property MsgTyppe = new Property(4, Integer.class, "msgTyppe", false, "MSG_TYPPE");
        public final static Property MsgSeq = new Property(5, Long.class, "msgSeq", false, "MSG_SEQ");
        public final static Property SenderMsgId = new Property(6, Long.class, "senderMsgId", false, "SENDER_MSG_ID");
        public final static Property SentTime = new Property(7, Long.class, "sentTime", false, "SENT_TIME");
        public final static Property ReceivedTime = new Property(8, Long.class, "receivedTime", false, "RECEIVED_TIME");
        public final static Property IsInbound = new Property(9, Boolean.class, "isInbound", false, "IS_INBOUND");
        public final static Property MsgStatus = new Property(10, Integer.class, "msgStatus", false, "MSG_STATUS");
        public final static Property OutboundStatus = new Property(11, Integer.class, "outboundStatus", false, "OUTBOUND_STATUS");
        public final static Property Body = new Property(12, String.class, "body", false, "BODY");
        public final static Property Ext = new Property(13, String.class, "ext", false, "EXT");
        public final static Property LocaLUserId = new Property(14, long.class, "locaLUserId", false, "LOCA_LUSER_ID");
        public final static Property CertificationType = new Property(15, Integer.class, "certificationType", false, "CERTIFICATION_TYPE");
        public final static Property TargetType = new Property(16, int.class, "targetType", false, "TARGET_TYPE");
        public final static Property ServerStoreStatus = new Property(17, int.class, "serverStoreStatus", false, "SERVER_STORE_STATUS");
        public final static Property GroupLevel = new Property(18, int.class, "groupLevel", false, "GROUP_LEVEL");
        public final static Property GroupHonor = new Property(19, String.class, "groupHonor", false, "GROUP_HONOR");
        public final static Property GroupMedalId = new Property(20, int.class, "groupMedalId", false, "GROUP_MEDAL_ID");
    };


    public SixinMessageDao(DaoConfig config) {
        super(config);
    }
    
    public SixinMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SIXIN_MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TARGET' INTEGER NOT NULL ," + // 1: target
                "'TARGET_NAME' TEXT," + // 2: targetName
                "'SENDER' INTEGER," + // 3: sender
                "'MSG_TYPPE' INTEGER," + // 4: msgTyppe
                "'MSG_SEQ' INTEGER," + // 5: msgSeq
                "'SENDER_MSG_ID' INTEGER," + // 6: senderMsgId
                "'SENT_TIME' INTEGER," + // 7: sentTime
                "'RECEIVED_TIME' INTEGER," + // 8: receivedTime
                "'IS_INBOUND' INTEGER," + // 9: isInbound
                "'MSG_STATUS' INTEGER," + // 10: msgStatus
                "'OUTBOUND_STATUS' INTEGER," + // 11: outboundStatus
                "'BODY' TEXT," + // 12: body
                "'EXT' TEXT," + // 13: ext
                "'LOCA_LUSER_ID' INTEGER NOT NULL ," + // 14: locaLUserId
                "'CERTIFICATION_TYPE' INTEGER," + // 15: certificationType
                "'TARGET_TYPE' INTEGER NOT NULL ," + // 16: targetType
                "'SERVER_STORE_STATUS' INTEGER NOT NULL ," + // 17: serverStoreStatus
                "'GROUP_LEVEL' INTEGER NOT NULL ," + // 18: groupLevel
                "'GROUP_HONOR' TEXT," + // 19: groupHonor
                "'GROUP_MEDAL_ID' INTEGER NOT NULL );"); // 20: groupMedalId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SIXIN_MESSAGE_TARGET ON SIXIN_MESSAGE" +
                " (TARGET);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SIXIN_MESSAGE_LOCA_LUSER_ID ON SIXIN_MESSAGE" +
                " (LOCA_LUSER_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SIXIN_MESSAGE_TARGET_TYPE ON SIXIN_MESSAGE" +
                " (TARGET_TYPE);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SIXIN_MESSAGE_SERVER_STORE_STATUS ON SIXIN_MESSAGE" +
                " (SERVER_STORE_STATUS);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SIXIN_MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SixinMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTarget());
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(3, targetName);
        }
 
        Long sender = entity.getSender();
        if (sender != null) {
            stmt.bindLong(4, sender);
        }
 
        Integer msgTyppe = entity.getMsgTyppe();
        if (msgTyppe != null) {
            stmt.bindLong(5, msgTyppe);
        }
 
        Long msgSeq = entity.getMsgSeq();
        if (msgSeq != null) {
            stmt.bindLong(6, msgSeq);
        }
 
        Long senderMsgId = entity.getSenderMsgId();
        if (senderMsgId != null) {
            stmt.bindLong(7, senderMsgId);
        }
 
        Long sentTime = entity.getSentTime();
        if (sentTime != null) {
            stmt.bindLong(8, sentTime);
        }
 
        Long receivedTime = entity.getReceivedTime();
        if (receivedTime != null) {
            stmt.bindLong(9, receivedTime);
        }
 
        Boolean isInbound = entity.getIsInbound();
        if (isInbound != null) {
            stmt.bindLong(10, isInbound ? 1l: 0l);
        }
 
        Integer msgStatus = entity.getMsgStatus();
        if (msgStatus != null) {
            stmt.bindLong(11, msgStatus);
        }
 
        Integer outboundStatus = entity.getOutboundStatus();
        if (outboundStatus != null) {
            stmt.bindLong(12, outboundStatus);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(13, body);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(14, ext);
        }
        stmt.bindLong(15, entity.getLocaLUserId());
 
        Integer certificationType = entity.getCertificationType();
        if (certificationType != null) {
            stmt.bindLong(16, certificationType);
        }
        stmt.bindLong(17, entity.getTargetType());
        stmt.bindLong(18, entity.getServerStoreStatus());
        stmt.bindLong(19, entity.getGroupLevel());
 
        String groupHonor = entity.getGroupHonor();
        if (groupHonor != null) {
            stmt.bindString(20, groupHonor);
        }
        stmt.bindLong(21, entity.getGroupMedalId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SixinMessage readEntity(Cursor cursor, int offset) {
        SixinMessage entity = new SixinMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // target
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // targetName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // sender
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // msgTyppe
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // msgSeq
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // senderMsgId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // sentTime
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // receivedTime
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isInbound
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // msgStatus
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // outboundStatus
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // body
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ext
            cursor.getLong(offset + 14), // locaLUserId
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // certificationType
            cursor.getInt(offset + 16), // targetType
            cursor.getInt(offset + 17), // serverStoreStatus
            cursor.getInt(offset + 18), // groupLevel
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // groupHonor
            cursor.getInt(offset + 20) // groupMedalId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SixinMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTarget(cursor.getLong(offset + 1));
        entity.setTargetName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSender(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setMsgTyppe(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMsgSeq(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSenderMsgId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSentTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setReceivedTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIsInbound(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setMsgStatus(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setOutboundStatus(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setBody(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExt(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLocaLUserId(cursor.getLong(offset + 14));
        entity.setCertificationType(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setTargetType(cursor.getInt(offset + 16));
        entity.setServerStoreStatus(cursor.getInt(offset + 17));
        entity.setGroupLevel(cursor.getInt(offset + 18));
        entity.setGroupHonor(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setGroupMedalId(cursor.getInt(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SixinMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SixinMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
