package com.common.core.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.common.core.account.UserAccount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ACCOUNT".
*/
public class UserAccountDao extends AbstractDao<UserAccount, Long> {

    public static final String TABLENAME = "USER_ACCOUNT";

    /**
     * Properties of entity UserAccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property IsLogOff = new Property(5, boolean.class, "isLogOff", false, "IS_LOG_OFF");
        public final static Property ThirdId = new Property(6, String.class, "thirdId", false, "THIRD_ID");
        public final static Property ChannelId = new Property(7, int.class, "channelId", false, "CHANNEL_ID");
        public final static Property NeedEditUserInfo = new Property(8, boolean.class, "needEditUserInfo", false, "NEED_EDIT_USER_INFO");
        public final static Property ServiceToken = new Property(9, String.class, "serviceToken", false, "SERVICE_TOKEN");
        public final static Property SecretToken = new Property(10, String.class, "secretToken", false, "SECRET_TOKEN");
        public final static Property Sex = new Property(11, int.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(12, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Ext = new Property(13, String.class, "ext", false, "EXT");
    }


    public UserAccountDao(DaoConfig config) {
        super(config);
    }
    
    public UserAccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"UID\" TEXT NOT NULL ," + // 1: uid
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"AVATAR\" TEXT," + // 3: avatar
                "\"PASSWORD\" TEXT," + // 4: password
                "\"IS_LOG_OFF\" INTEGER NOT NULL ," + // 5: isLogOff
                "\"THIRD_ID\" TEXT," + // 6: thirdId
                "\"CHANNEL_ID\" INTEGER NOT NULL ," + // 7: channelId
                "\"NEED_EDIT_USER_INFO\" INTEGER NOT NULL ," + // 8: needEditUserInfo
                "\"SERVICE_TOKEN\" TEXT," + // 9: serviceToken
                "\"SECRET_TOKEN\" TEXT," + // 10: secretToken
                "\"SEX\" INTEGER NOT NULL ," + // 11: sex
                "\"BIRTHDAY\" TEXT," + // 12: birthday
                "\"EXT\" TEXT);"); // 13: ext
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_ACCOUNT_UID_DESC ON USER_ACCOUNT" +
                " (\"UID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserAccount entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUid());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
        stmt.bindLong(6, entity.getIsLogOff() ? 1L: 0L);
 
        String thirdId = entity.getThirdId();
        if (thirdId != null) {
            stmt.bindString(7, thirdId);
        }
        stmt.bindLong(8, entity.getChannelId());
        stmt.bindLong(9, entity.getNeedEditUserInfo() ? 1L: 0L);
 
        String serviceToken = entity.getServiceToken();
        if (serviceToken != null) {
            stmt.bindString(10, serviceToken);
        }
 
        String secretToken = entity.getSecretToken();
        if (secretToken != null) {
            stmt.bindString(11, secretToken);
        }
        stmt.bindLong(12, entity.getSex());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(13, birthday);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(14, ext);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserAccount entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUid());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
        stmt.bindLong(6, entity.getIsLogOff() ? 1L: 0L);
 
        String thirdId = entity.getThirdId();
        if (thirdId != null) {
            stmt.bindString(7, thirdId);
        }
        stmt.bindLong(8, entity.getChannelId());
        stmt.bindLong(9, entity.getNeedEditUserInfo() ? 1L: 0L);
 
        String serviceToken = entity.getServiceToken();
        if (serviceToken != null) {
            stmt.bindString(10, serviceToken);
        }
 
        String secretToken = entity.getSecretToken();
        if (secretToken != null) {
            stmt.bindString(11, secretToken);
        }
        stmt.bindLong(12, entity.getSex());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(13, birthday);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(14, ext);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserAccount readEntity(Cursor cursor, int offset) {
        UserAccount entity = new UserAccount( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.getShort(offset + 5) != 0, // isLogOff
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // thirdId
            cursor.getInt(offset + 7), // channelId
            cursor.getShort(offset + 8) != 0, // needEditUserInfo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // serviceToken
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // secretToken
            cursor.getInt(offset + 11), // sex
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // birthday
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // ext
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserAccount entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsLogOff(cursor.getShort(offset + 5) != 0);
        entity.setThirdId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChannelId(cursor.getInt(offset + 7));
        entity.setNeedEditUserInfo(cursor.getShort(offset + 8) != 0);
        entity.setServiceToken(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSecretToken(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSex(cursor.getInt(offset + 11));
        entity.setBirthday(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExt(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserAccount entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserAccount entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserAccount entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
