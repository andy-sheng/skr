package com.common.core.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.common.core.userinfo.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "AVATAR");
        public final static Property UserNickname = new Property(3, String.class, "userNickname", false, "USER_NICKNAME");
        public final static Property UserDisplayname = new Property(4, String.class, "userDisplayname", false, "USER_DISPLAYNAME");
        public final static Property Letter = new Property(5, String.class, "letter", false, "LETTER");
        public final static Property UpdateTime = new Property(6, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Sex = new Property(7, int.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(8, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Relative = new Property(9, int.class, "relative", false, "RELATIVE");
        public final static Property Block = new Property(10, int.class, "block", false, "BLOCK");
        public final static Property IsSystem = new Property(11, int.class, "isSystem", false, "IS_SYSTEM");
        public final static Property Ext = new Property(12, String.class, "ext", false, "EXT");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"AVATAR\" TEXT," + // 2: avatar
                "\"USER_NICKNAME\" TEXT," + // 3: userNickname
                "\"USER_DISPLAYNAME\" TEXT," + // 4: userDisplayname
                "\"LETTER\" TEXT," + // 5: letter
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 6: updateTime
                "\"SEX\" INTEGER NOT NULL ," + // 7: sex
                "\"BIRTHDAY\" TEXT," + // 8: birthday
                "\"RELATIVE\" INTEGER NOT NULL ," + // 9: relative
                "\"BLOCK\" INTEGER NOT NULL ," + // 10: block
                "\"IS_SYSTEM\" INTEGER NOT NULL ," + // 11: isSystem
                "\"EXT\" TEXT);"); // 12: ext
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_INFO_USER_ID_DESC ON USER_INFO" +
                " (\"USER_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUserId());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String userNickname = entity.getUserNickname();
        if (userNickname != null) {
            stmt.bindString(4, userNickname);
        }
 
        String userDisplayname = entity.getUserDisplayname();
        if (userDisplayname != null) {
            stmt.bindString(5, userDisplayname);
        }
 
        String letter = entity.getLetter();
        if (letter != null) {
            stmt.bindString(6, letter);
        }
        stmt.bindLong(7, entity.getUpdateTime());
        stmt.bindLong(8, entity.getSex());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(9, birthday);
        }
        stmt.bindLong(10, entity.getRelative());
        stmt.bindLong(11, entity.getBlock());
        stmt.bindLong(12, entity.getIsSystem());
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(13, ext);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUserId());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String userNickname = entity.getUserNickname();
        if (userNickname != null) {
            stmt.bindString(4, userNickname);
        }
 
        String userDisplayname = entity.getUserDisplayname();
        if (userDisplayname != null) {
            stmt.bindString(5, userDisplayname);
        }
 
        String letter = entity.getLetter();
        if (letter != null) {
            stmt.bindString(6, letter);
        }
        stmt.bindLong(7, entity.getUpdateTime());
        stmt.bindLong(8, entity.getSex());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(9, birthday);
        }
        stmt.bindLong(10, entity.getRelative());
        stmt.bindLong(11, entity.getBlock());
        stmt.bindLong(12, entity.getIsSystem());
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(13, ext);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userNickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userDisplayname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // letter
            cursor.getLong(offset + 6), // updateTime
            cursor.getInt(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // birthday
            cursor.getInt(offset + 9), // relative
            cursor.getInt(offset + 10), // block
            cursor.getInt(offset + 11), // isSystem
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // ext
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserDisplayname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLetter(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdateTime(cursor.getLong(offset + 6));
        entity.setSex(cursor.getInt(offset + 7));
        entity.setBirthday(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRelative(cursor.getInt(offset + 9));
        entity.setBlock(cursor.getInt(offset + 10));
        entity.setIsSystem(cursor.getInt(offset + 11));
        entity.setExt(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
