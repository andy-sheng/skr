package com.common.core.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.common.core.userinfo.remark.RemarkDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMARK_DB".
*/
public class RemarkDBDao extends AbstractDao<RemarkDB, Long> {

    public static final String TABLENAME = "REMARK_DB";

    /**
     * Properties of entity RemarkDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserID = new Property(0, Long.class, "userID", true, "_id");
        public final static Property RemarkContent = new Property(1, String.class, "remarkContent", false, "REMARK_CONTENT");
    }


    public RemarkDBDao(DaoConfig config) {
        super(config);
    }
    
    public RemarkDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMARK_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: userID
                "\"REMARK_CONTENT\" TEXT);"); // 1: remarkContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMARK_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RemarkDB entity) {
        stmt.clearBindings();
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(1, userID);
        }
 
        String remarkContent = entity.getRemarkContent();
        if (remarkContent != null) {
            stmt.bindString(2, remarkContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RemarkDB entity) {
        stmt.clearBindings();
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(1, userID);
        }
 
        String remarkContent = entity.getRemarkContent();
        if (remarkContent != null) {
            stmt.bindString(2, remarkContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RemarkDB readEntity(Cursor cursor, int offset) {
        RemarkDB entity = new RemarkDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // remarkContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RemarkDB entity, int offset) {
        entity.setUserID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemarkContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RemarkDB entity, long rowId) {
        entity.setUserID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RemarkDB entity) {
        if(entity != null) {
            return entity.getUserID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RemarkDB entity) {
        return entity.getUserID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
