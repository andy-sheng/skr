// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Common.proto
package com.zq.live.proto.Common;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class VipInfo extends Message<VipInfo, VipInfo.Builder> {
  public static final ProtoAdapter<VipInfo> ADAPTER = new ProtoAdapter_VipInfo();

  private static final long serialVersionUID = 0L;

  public static final EVIPType DEFAULT_VIPTYPE = EVIPType.EVT_UNKNOWN;

  public static final String DEFAULT_DESC = "";

  /**
   * 认证类型
   */
  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.Common.EVIPType#ADAPTER"
  )
  private final EVIPType vipType;

  /**
   * 认证描述
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String desc;

  public VipInfo(EVIPType vipType, String desc) {
    this(vipType, desc, ByteString.EMPTY);
  }

  public VipInfo(EVIPType vipType, String desc, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.vipType = vipType;
    this.desc = desc;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.vipType = vipType;
    builder.desc = desc;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VipInfo)) return false;
    VipInfo o = (VipInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(vipType, o.vipType)
        && Internal.equals(desc, o.desc);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (vipType != null ? vipType.hashCode() : 0);
      result = result * 37 + (desc != null ? desc.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (vipType != null) builder.append(", vipType=").append(vipType);
    if (desc != null) builder.append(", desc=").append(desc);
    return builder.replace(0, 2, "VipInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return VipInfo.ADAPTER.encode(this);
  }

  public static final VipInfo parseFrom(byte[] data) throws IOException {
    VipInfo c = null;
       c = VipInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 认证类型
   */
  public EVIPType getVipType() {
    if(vipType==null){
        return new EVIPType.Builder().build();
    }
    return vipType;
  }

  /**
   * 认证描述
   */
  public String getDesc() {
    if(desc==null){
        return DEFAULT_DESC;
    }
    return desc;
  }

  /**
   * 认证类型
   */
  public boolean hasVipType() {
    return vipType!=null;
  }

  /**
   * 认证描述
   */
  public boolean hasDesc() {
    return desc!=null;
  }

  public static final class Builder extends Message.Builder<VipInfo, Builder> {
    private EVIPType vipType;

    private String desc;

    public Builder() {
    }

    /**
     * 认证类型
     */
    public Builder setVipType(EVIPType vipType) {
      this.vipType = vipType;
      return this;
    }

    /**
     * 认证描述
     */
    public Builder setDesc(String desc) {
      this.desc = desc;
      return this;
    }

    @Override
    public VipInfo build() {
      return new VipInfo(vipType, desc, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VipInfo extends ProtoAdapter<VipInfo> {
    public ProtoAdapter_VipInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, VipInfo.class);
    }

    @Override
    public int encodedSize(VipInfo value) {
      return EVIPType.ADAPTER.encodedSizeWithTag(1, value.vipType)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.desc)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VipInfo value) throws IOException {
      EVIPType.ADAPTER.encodeWithTag(writer, 1, value.vipType);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.desc);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VipInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.setVipType(EVIPType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.setDesc(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VipInfo redact(VipInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
