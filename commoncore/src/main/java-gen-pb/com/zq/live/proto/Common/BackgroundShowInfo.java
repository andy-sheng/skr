// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Common.proto
package com.zq.live.proto.Common;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 背景效果
 */
public final class BackgroundShowInfo extends Message<BackgroundShowInfo, BackgroundShowInfo.Builder> {
  public static final ProtoAdapter<BackgroundShowInfo> ADAPTER = new ProtoAdapter_BackgroundShowInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_SOURCESJSON = "";

  public static final String DEFAULT_BGCOLOR = "";

  /**
   * 资源，使用效果
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String sourcesJson;

  /**
   * 背景颜色
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String bgColor;

  public BackgroundShowInfo(String sourcesJson, String bgColor) {
    this(sourcesJson, bgColor, ByteString.EMPTY);
  }

  public BackgroundShowInfo(String sourcesJson, String bgColor, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.sourcesJson = sourcesJson;
    this.bgColor = bgColor;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.sourcesJson = sourcesJson;
    builder.bgColor = bgColor;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BackgroundShowInfo)) return false;
    BackgroundShowInfo o = (BackgroundShowInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(sourcesJson, o.sourcesJson)
        && Internal.equals(bgColor, o.bgColor);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (sourcesJson != null ? sourcesJson.hashCode() : 0);
      result = result * 37 + (bgColor != null ? bgColor.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (sourcesJson != null) builder.append(", sourcesJson=").append(sourcesJson);
    if (bgColor != null) builder.append(", bgColor=").append(bgColor);
    return builder.replace(0, 2, "BackgroundShowInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return BackgroundShowInfo.ADAPTER.encode(this);
  }

  public static final BackgroundShowInfo parseFrom(byte[] data) throws IOException {
    BackgroundShowInfo c = null;
       c = BackgroundShowInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 资源，使用效果
   */
  public String getSourcesJson() {
    if(sourcesJson==null){
        return DEFAULT_SOURCESJSON;
    }
    return sourcesJson;
  }

  /**
   * 背景颜色
   */
  public String getBgColor() {
    if(bgColor==null){
        return DEFAULT_BGCOLOR;
    }
    return bgColor;
  }

  /**
   * 资源，使用效果
   */
  public boolean hasSourcesJson() {
    return sourcesJson!=null;
  }

  /**
   * 背景颜色
   */
  public boolean hasBgColor() {
    return bgColor!=null;
  }

  public static final class Builder extends Message.Builder<BackgroundShowInfo, Builder> {
    private String sourcesJson;

    private String bgColor;

    public Builder() {
    }

    /**
     * 资源，使用效果
     */
    public Builder setSourcesJson(String sourcesJson) {
      this.sourcesJson = sourcesJson;
      return this;
    }

    /**
     * 背景颜色
     */
    public Builder setBgColor(String bgColor) {
      this.bgColor = bgColor;
      return this;
    }

    @Override
    public BackgroundShowInfo build() {
      return new BackgroundShowInfo(sourcesJson, bgColor, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BackgroundShowInfo extends ProtoAdapter<BackgroundShowInfo> {
    public ProtoAdapter_BackgroundShowInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, BackgroundShowInfo.class);
    }

    @Override
    public int encodedSize(BackgroundShowInfo value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.sourcesJson)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.bgColor)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BackgroundShowInfo value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.sourcesJson);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.bgColor);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BackgroundShowInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setSourcesJson(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setBgColor(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BackgroundShowInfo redact(BackgroundShowInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
