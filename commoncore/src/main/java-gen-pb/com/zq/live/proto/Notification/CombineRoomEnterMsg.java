// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Notification.proto
package com.zq.live.proto.Notification;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.AgoraTokenInfo;
import com.zq.live.proto.Common.CombineRoomConfig;
import com.zq.live.proto.Common.ESceneType;
import com.zq.live.proto.Common.GamePanelInfo;
import com.zq.live.proto.Common.UserInfo;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class CombineRoomEnterMsg extends Message<CombineRoomEnterMsg, CombineRoomEnterMsg.Builder> {
  public static final ProtoAdapter<CombineRoomEnterMsg> ADAPTER = new ProtoAdapter_CombineRoomEnterMsg();

  private static final long serialVersionUID = 0L;

  public static final ECombineRoomEnterType DEFAULT_ENTERTYPE = ECombineRoomEnterType.CRET_UNKNOWN;

  public static final Integer DEFAULT_ROOMID = 0;

  public static final Long DEFAULT_CREATEDTIMEMS = 0L;

  public static final Long DEFAULT_PASSEDTIMEMS = 0L;

  public static final Boolean DEFAULT_NEEDMASKUSERINFO = false;

  public static final ESceneType DEFAULT_CURRENTSCENETYPE = ESceneType.ST_Unknown;

  /**
   * 进房方式
   */
  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.Notification.ECombineRoomEnterType#ADAPTER"
  )
  private final ECombineRoomEnterType enterType;

  /**
   * 房间ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roomID;

  /**
   * 房间创建的时间戳
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long createdTimeMs;

  /**
   * 房间已经经历的毫秒数
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long passedTimeMs;

  /**
   * 玩家信息
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Common.UserInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<UserInfo> users;

  /**
   * 配置信息
   */
  @WireField(
      tag = 6,
      adapter = "com.zq.live.proto.Common.CombineRoomConfig#ADAPTER"
  )
  private final CombineRoomConfig config;

  /**
   * 声网token
   */
  @WireField(
      tag = 7,
      adapter = "com.zq.live.proto.Common.AgoraTokenInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<AgoraTokenInfo> tokens;

  /**
   * 是否需要隐藏用户信息
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean needMaskUserInfo;

  /**
   * 当前场景类型
   */
  @WireField(
      tag = 9,
      adapter = "com.zq.live.proto.Common.ESceneType#ADAPTER"
  )
  private final ESceneType currentSceneType;

  /**
   * 游戏面板信息
   */
  @WireField(
      tag = 10,
      adapter = "com.zq.live.proto.Common.GamePanelInfo#ADAPTER"
  )
  private final GamePanelInfo gamePanelInfo;

  public CombineRoomEnterMsg(ECombineRoomEnterType enterType, Integer roomID, Long createdTimeMs,
      Long passedTimeMs, List<UserInfo> users, CombineRoomConfig config,
      List<AgoraTokenInfo> tokens, Boolean needMaskUserInfo, ESceneType currentSceneType,
      GamePanelInfo gamePanelInfo) {
    this(enterType, roomID, createdTimeMs, passedTimeMs, users, config, tokens, needMaskUserInfo, currentSceneType, gamePanelInfo, ByteString.EMPTY);
  }

  public CombineRoomEnterMsg(ECombineRoomEnterType enterType, Integer roomID, Long createdTimeMs,
      Long passedTimeMs, List<UserInfo> users, CombineRoomConfig config,
      List<AgoraTokenInfo> tokens, Boolean needMaskUserInfo, ESceneType currentSceneType,
      GamePanelInfo gamePanelInfo, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.enterType = enterType;
    this.roomID = roomID;
    this.createdTimeMs = createdTimeMs;
    this.passedTimeMs = passedTimeMs;
    this.users = Internal.immutableCopyOf("users", users);
    this.config = config;
    this.tokens = Internal.immutableCopyOf("tokens", tokens);
    this.needMaskUserInfo = needMaskUserInfo;
    this.currentSceneType = currentSceneType;
    this.gamePanelInfo = gamePanelInfo;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.enterType = enterType;
    builder.roomID = roomID;
    builder.createdTimeMs = createdTimeMs;
    builder.passedTimeMs = passedTimeMs;
    builder.users = Internal.copyOf("users", users);
    builder.config = config;
    builder.tokens = Internal.copyOf("tokens", tokens);
    builder.needMaskUserInfo = needMaskUserInfo;
    builder.currentSceneType = currentSceneType;
    builder.gamePanelInfo = gamePanelInfo;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CombineRoomEnterMsg)) return false;
    CombineRoomEnterMsg o = (CombineRoomEnterMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(enterType, o.enterType)
        && Internal.equals(roomID, o.roomID)
        && Internal.equals(createdTimeMs, o.createdTimeMs)
        && Internal.equals(passedTimeMs, o.passedTimeMs)
        && users.equals(o.users)
        && Internal.equals(config, o.config)
        && tokens.equals(o.tokens)
        && Internal.equals(needMaskUserInfo, o.needMaskUserInfo)
        && Internal.equals(currentSceneType, o.currentSceneType)
        && Internal.equals(gamePanelInfo, o.gamePanelInfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (enterType != null ? enterType.hashCode() : 0);
      result = result * 37 + (roomID != null ? roomID.hashCode() : 0);
      result = result * 37 + (createdTimeMs != null ? createdTimeMs.hashCode() : 0);
      result = result * 37 + (passedTimeMs != null ? passedTimeMs.hashCode() : 0);
      result = result * 37 + users.hashCode();
      result = result * 37 + (config != null ? config.hashCode() : 0);
      result = result * 37 + tokens.hashCode();
      result = result * 37 + (needMaskUserInfo != null ? needMaskUserInfo.hashCode() : 0);
      result = result * 37 + (currentSceneType != null ? currentSceneType.hashCode() : 0);
      result = result * 37 + (gamePanelInfo != null ? gamePanelInfo.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (enterType != null) builder.append(", enterType=").append(enterType);
    if (roomID != null) builder.append(", roomID=").append(roomID);
    if (createdTimeMs != null) builder.append(", createdTimeMs=").append(createdTimeMs);
    if (passedTimeMs != null) builder.append(", passedTimeMs=").append(passedTimeMs);
    if (!users.isEmpty()) builder.append(", users=").append(users);
    if (config != null) builder.append(", config=").append(config);
    if (!tokens.isEmpty()) builder.append(", tokens=").append(tokens);
    if (needMaskUserInfo != null) builder.append(", needMaskUserInfo=").append(needMaskUserInfo);
    if (currentSceneType != null) builder.append(", currentSceneType=").append(currentSceneType);
    if (gamePanelInfo != null) builder.append(", gamePanelInfo=").append(gamePanelInfo);
    return builder.replace(0, 2, "CombineRoomEnterMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return CombineRoomEnterMsg.ADAPTER.encode(this);
  }

  public static final CombineRoomEnterMsg parseFrom(byte[] data) throws IOException {
    CombineRoomEnterMsg c = null;
       c = CombineRoomEnterMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 进房方式
   */
  public ECombineRoomEnterType getEnterType() {
    if(enterType==null){
        return new ECombineRoomEnterType.Builder().build();
    }
    return enterType;
  }

  /**
   * 房间ID
   */
  public Integer getRoomID() {
    if(roomID==null){
        return DEFAULT_ROOMID;
    }
    return roomID;
  }

  /**
   * 房间创建的时间戳
   */
  public Long getCreatedTimeMs() {
    if(createdTimeMs==null){
        return DEFAULT_CREATEDTIMEMS;
    }
    return createdTimeMs;
  }

  /**
   * 房间已经经历的毫秒数
   */
  public Long getPassedTimeMs() {
    if(passedTimeMs==null){
        return DEFAULT_PASSEDTIMEMS;
    }
    return passedTimeMs;
  }

  /**
   * 玩家信息
   */
  public List<UserInfo> getUsersList() {
    if(users==null){
        return new java.util.ArrayList<UserInfo>();
    }
    return users;
  }

  /**
   * 配置信息
   */
  public CombineRoomConfig getConfig() {
    if(config==null){
        return new CombineRoomConfig.Builder().build();
    }
    return config;
  }

  /**
   * 声网token
   */
  public List<AgoraTokenInfo> getTokensList() {
    if(tokens==null){
        return new java.util.ArrayList<AgoraTokenInfo>();
    }
    return tokens;
  }

  /**
   * 是否需要隐藏用户信息
   */
  public Boolean getNeedMaskUserInfo() {
    if(needMaskUserInfo==null){
        return DEFAULT_NEEDMASKUSERINFO;
    }
    return needMaskUserInfo;
  }

  /**
   * 当前场景类型
   */
  public ESceneType getCurrentSceneType() {
    if(currentSceneType==null){
        return new ESceneType.Builder().build();
    }
    return currentSceneType;
  }

  /**
   * 游戏面板信息
   */
  public GamePanelInfo getGamePanelInfo() {
    if(gamePanelInfo==null){
        return new GamePanelInfo.Builder().build();
    }
    return gamePanelInfo;
  }

  /**
   * 进房方式
   */
  public boolean hasEnterType() {
    return enterType!=null;
  }

  /**
   * 房间ID
   */
  public boolean hasRoomID() {
    return roomID!=null;
  }

  /**
   * 房间创建的时间戳
   */
  public boolean hasCreatedTimeMs() {
    return createdTimeMs!=null;
  }

  /**
   * 房间已经经历的毫秒数
   */
  public boolean hasPassedTimeMs() {
    return passedTimeMs!=null;
  }

  /**
   * 玩家信息
   */
  public boolean hasUsersList() {
    return users!=null;
  }

  /**
   * 配置信息
   */
  public boolean hasConfig() {
    return config!=null;
  }

  /**
   * 声网token
   */
  public boolean hasTokensList() {
    return tokens!=null;
  }

  /**
   * 是否需要隐藏用户信息
   */
  public boolean hasNeedMaskUserInfo() {
    return needMaskUserInfo!=null;
  }

  /**
   * 当前场景类型
   */
  public boolean hasCurrentSceneType() {
    return currentSceneType!=null;
  }

  /**
   * 游戏面板信息
   */
  public boolean hasGamePanelInfo() {
    return gamePanelInfo!=null;
  }

  public static final class Builder extends Message.Builder<CombineRoomEnterMsg, Builder> {
    private ECombineRoomEnterType enterType;

    private Integer roomID;

    private Long createdTimeMs;

    private Long passedTimeMs;

    private List<UserInfo> users;

    private CombineRoomConfig config;

    private List<AgoraTokenInfo> tokens;

    private Boolean needMaskUserInfo;

    private ESceneType currentSceneType;

    private GamePanelInfo gamePanelInfo;

    public Builder() {
      users = Internal.newMutableList();
      tokens = Internal.newMutableList();
    }

    /**
     * 进房方式
     */
    public Builder setEnterType(ECombineRoomEnterType enterType) {
      this.enterType = enterType;
      return this;
    }

    /**
     * 房间ID
     */
    public Builder setRoomID(Integer roomID) {
      this.roomID = roomID;
      return this;
    }

    /**
     * 房间创建的时间戳
     */
    public Builder setCreatedTimeMs(Long createdTimeMs) {
      this.createdTimeMs = createdTimeMs;
      return this;
    }

    /**
     * 房间已经经历的毫秒数
     */
    public Builder setPassedTimeMs(Long passedTimeMs) {
      this.passedTimeMs = passedTimeMs;
      return this;
    }

    /**
     * 玩家信息
     */
    public Builder addAllUsers(List<UserInfo> users) {
      Internal.checkElementsNotNull(users);
      this.users = users;
      return this;
    }

    /**
     * 配置信息
     */
    public Builder setConfig(CombineRoomConfig config) {
      this.config = config;
      return this;
    }

    /**
     * 声网token
     */
    public Builder addAllTokens(List<AgoraTokenInfo> tokens) {
      Internal.checkElementsNotNull(tokens);
      this.tokens = tokens;
      return this;
    }

    /**
     * 是否需要隐藏用户信息
     */
    public Builder setNeedMaskUserInfo(Boolean needMaskUserInfo) {
      this.needMaskUserInfo = needMaskUserInfo;
      return this;
    }

    /**
     * 当前场景类型
     */
    public Builder setCurrentSceneType(ESceneType currentSceneType) {
      this.currentSceneType = currentSceneType;
      return this;
    }

    /**
     * 游戏面板信息
     */
    public Builder setGamePanelInfo(GamePanelInfo gamePanelInfo) {
      this.gamePanelInfo = gamePanelInfo;
      return this;
    }

    @Override
    public CombineRoomEnterMsg build() {
      return new CombineRoomEnterMsg(enterType, roomID, createdTimeMs, passedTimeMs, users, config, tokens, needMaskUserInfo, currentSceneType, gamePanelInfo, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CombineRoomEnterMsg extends ProtoAdapter<CombineRoomEnterMsg> {
    public ProtoAdapter_CombineRoomEnterMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, CombineRoomEnterMsg.class);
    }

    @Override
    public int encodedSize(CombineRoomEnterMsg value) {
      return ECombineRoomEnterType.ADAPTER.encodedSizeWithTag(1, value.enterType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.roomID)
          + ProtoAdapter.SINT64.encodedSizeWithTag(3, value.createdTimeMs)
          + ProtoAdapter.SINT64.encodedSizeWithTag(4, value.passedTimeMs)
          + UserInfo.ADAPTER.asRepeated().encodedSizeWithTag(5, value.users)
          + CombineRoomConfig.ADAPTER.encodedSizeWithTag(6, value.config)
          + AgoraTokenInfo.ADAPTER.asRepeated().encodedSizeWithTag(7, value.tokens)
          + ProtoAdapter.BOOL.encodedSizeWithTag(8, value.needMaskUserInfo)
          + ESceneType.ADAPTER.encodedSizeWithTag(9, value.currentSceneType)
          + GamePanelInfo.ADAPTER.encodedSizeWithTag(10, value.gamePanelInfo)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CombineRoomEnterMsg value) throws IOException {
      ECombineRoomEnterType.ADAPTER.encodeWithTag(writer, 1, value.enterType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.roomID);
      ProtoAdapter.SINT64.encodeWithTag(writer, 3, value.createdTimeMs);
      ProtoAdapter.SINT64.encodeWithTag(writer, 4, value.passedTimeMs);
      UserInfo.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.users);
      CombineRoomConfig.ADAPTER.encodeWithTag(writer, 6, value.config);
      AgoraTokenInfo.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.tokens);
      ProtoAdapter.BOOL.encodeWithTag(writer, 8, value.needMaskUserInfo);
      ESceneType.ADAPTER.encodeWithTag(writer, 9, value.currentSceneType);
      GamePanelInfo.ADAPTER.encodeWithTag(writer, 10, value.gamePanelInfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CombineRoomEnterMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.setEnterType(ECombineRoomEnterType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.setRoomID(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setCreatedTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 4: builder.setPassedTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 5: builder.users.add(UserInfo.ADAPTER.decode(reader)); break;
          case 6: builder.setConfig(CombineRoomConfig.ADAPTER.decode(reader)); break;
          case 7: builder.tokens.add(AgoraTokenInfo.ADAPTER.decode(reader)); break;
          case 8: builder.setNeedMaskUserInfo(ProtoAdapter.BOOL.decode(reader)); break;
          case 9: {
            try {
              builder.setCurrentSceneType(ESceneType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 10: builder.setGamePanelInfo(GamePanelInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CombineRoomEnterMsg redact(CombineRoomEnterMsg value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.users, UserInfo.ADAPTER);
      if (builder.config != null) builder.config = CombineRoomConfig.ADAPTER.redact(builder.config);
      Internal.redactElements(builder.tokens, AgoraTokenInfo.ADAPTER);
      if (builder.gamePanelInfo != null) builder.gamePanelInfo = GamePanelInfo.ADAPTER.redact(builder.gamePanelInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
