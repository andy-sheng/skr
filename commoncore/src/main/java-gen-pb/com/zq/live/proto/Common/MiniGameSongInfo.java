// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: common.proto
package com.zq.live.proto.Common;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class MiniGameSongInfo extends Message<MiniGameSongInfo, MiniGameSongInfo.Builder> {
  public static final ProtoAdapter<MiniGameSongInfo> ADAPTER = new ProtoAdapter_MiniGameSongInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_SONGURL = "";

  public static final String DEFAULT_SONGNAME = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String songURL;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String songName;

  public MiniGameSongInfo(String songURL, String songName) {
    this(songURL, songName, ByteString.EMPTY);
  }

  public MiniGameSongInfo(String songURL, String songName, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.songURL = songURL;
    this.songName = songName;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.songURL = songURL;
    builder.songName = songName;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MiniGameSongInfo)) return false;
    MiniGameSongInfo o = (MiniGameSongInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(songURL, o.songURL)
        && Internal.equals(songName, o.songName);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (songURL != null ? songURL.hashCode() : 0);
      result = result * 37 + (songName != null ? songName.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (songURL != null) builder.append(", songURL=").append(songURL);
    if (songName != null) builder.append(", songName=").append(songName);
    return builder.replace(0, 2, "MiniGameSongInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MiniGameSongInfo.ADAPTER.encode(this);
  }

  public static final MiniGameSongInfo parseFrom(byte[] data) throws IOException {
    MiniGameSongInfo c = null;
       c = MiniGameSongInfo.ADAPTER.decode(data);
    return c;
  }

  public String getSongURL() {
    if(songURL==null){
        return DEFAULT_SONGURL;
    }
    return songURL;
  }

  public String getSongName() {
    if(songName==null){
        return DEFAULT_SONGNAME;
    }
    return songName;
  }

  public boolean hasSongURL() {
    return songURL!=null;
  }

  public boolean hasSongName() {
    return songName!=null;
  }

  public static final class Builder extends Message.Builder<MiniGameSongInfo, Builder> {
    private String songURL;

    private String songName;

    public Builder() {
    }

    public Builder setSongURL(String songURL) {
      this.songURL = songURL;
      return this;
    }

    public Builder setSongName(String songName) {
      this.songName = songName;
      return this;
    }

    @Override
    public MiniGameSongInfo build() {
      return new MiniGameSongInfo(songURL, songName, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MiniGameSongInfo extends ProtoAdapter<MiniGameSongInfo> {
    public ProtoAdapter_MiniGameSongInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, MiniGameSongInfo.class);
    }

    @Override
    public int encodedSize(MiniGameSongInfo value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.songURL)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.songName)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MiniGameSongInfo value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.songURL);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.songName);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MiniGameSongInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setSongURL(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setSongName(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MiniGameSongInfo redact(MiniGameSongInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
