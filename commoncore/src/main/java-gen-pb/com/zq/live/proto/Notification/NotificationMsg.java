// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: notification.proto
package com.zq.live.proto.Notification;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.UserInfo;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
 * --proto_path=./proto --java_out=./commoncore/src/main/java-gen-pb/ notification.proto
 * 房间消息：此结构会通过pb编码后，通过系统消息通道到达客户端
 */
public final class NotificationMsg extends Message<NotificationMsg, NotificationMsg.Builder> {
  public static final ProtoAdapter<NotificationMsg> ADAPTER = new ProtoAdapter_NotificationMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_TIMEMS = 0L;

  public static final ENotificationMsgType DEFAULT_MSGTYPE = ENotificationMsgType.NM_UNKNOWN;

  public static final Integer DEFAULT_ROOMID = 0;

  public static final Long DEFAULT_NO = 0L;

  public static final EMsgPosType DEFAULT_POSTYPE = EMsgPosType.EPT_UNKNOWN;

  /**
   * 消息产生时间，单位毫秒
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long timeMs;

  /**
   * 消息类型
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.Notification.ENotificationMsgType#ADAPTER"
  )
  private final ENotificationMsgType msgType;

  /**
   * 房间ID,若不需要为0
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roomID;

  /**
   * 消息序号
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long no;

  /**
   * 消息显示位置类型
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Notification.EMsgPosType#ADAPTER"
  )
  private final EMsgPosType posType;

  /**
   * 发送者简要信息
   */
  @WireField(
      tag = 6,
      adapter = "com.zq.live.proto.Common.UserInfo#ADAPTER"
  )
  private final UserInfo sender;

  @WireField(
      tag = 10,
      adapter = "com.zq.live.proto.Notification.FollowMsg#ADAPTER"
  )
  private final FollowMsg followMsg;

  @WireField(
      tag = 11,
      adapter = "com.zq.live.proto.Notification.InviteStandMsg#ADAPTER"
  )
  private final InviteStandMsg inviteStandMsg;

  @WireField(
      tag = 12,
      adapter = "com.zq.live.proto.Notification.SysWarningMsg#ADAPTER"
  )
  private final SysWarningMsg sysWarningMsg;

  /**
   * 双人房邀请信令
   */
  @WireField(
      tag = 13,
      adapter = "com.zq.live.proto.Notification.CombineRoomInviteMsg#ADAPTER"
  )
  private final CombineRoomInviteMsg inviteMsg;

  /**
   * 双人房进房信令
   */
  @WireField(
      tag = 14,
      adapter = "com.zq.live.proto.Notification.CombineRoomEnterMsg#ADAPTER"
  )
  private final CombineRoomEnterMsg enterMsg;

  /**
   * 双人房拒绝邀请信令
   */
  @WireField(
      tag = 15,
      adapter = "com.zq.live.proto.Notification.CombineRoomRefuseMsg#ADAPTER"
  )
  private final CombineRoomRefuseMsg refuseMsg;

  /**
   * 双人房邀请信令
   */
  @WireField(
      tag = 16,
      adapter = "com.zq.live.proto.Notification.CombineRoomInviteV2Msg#ADAPTER"
  )
  private final CombineRoomInviteV2Msg inviteV2Msg;

  /**
   * 点赞feed信令
   */
  @WireField(
      tag = 17,
      adapter = "com.zq.live.proto.Notification.FeedLikeMsg#ADAPTER"
  )
  private final FeedLikeMsg feedLikeMsg;

  /**
   * 评论喜欢信令
   */
  @WireField(
      tag = 18,
      adapter = "com.zq.live.proto.Notification.FeedCommentLikeMsg#ADAPTER"
  )
  private final FeedCommentLikeMsg feedCommentLikeMsg;

  /**
   * 评论增加信令
   */
  @WireField(
      tag = 19,
      adapter = "com.zq.live.proto.Notification.FeedCommentAddMsg#ADAPTER"
  )
  private final FeedCommentAddMsg feedCommentAddMsg;

  /**
   * 点赞帖子 信令
   */
  @WireField(
      tag = 20,
      adapter = "com.zq.live.proto.Notification.PostsLikeMsg#ADAPTER"
  )
  private final PostsLikeMsg postsLikeMsg;

  /**
   * 点赞帖子评论 信令
   */
  @WireField(
      tag = 21,
      adapter = "com.zq.live.proto.Notification.PostsCommentLikeMsg#ADAPTER"
  )
  private final PostsCommentLikeMsg postsCommentLikeMsg;

  /**
   * 增加帖子评论 信令
   */
  @WireField(
      tag = 22,
      adapter = "com.zq.live.proto.Notification.PostsCommentAddMsg#ADAPTER"
  )
  private final PostsCommentAddMsg postsCommentAddMsg;

  /**
   * 排麦房邀请用户
   */
  @WireField(
      tag = 23,
      adapter = "com.zq.live.proto.Notification.InviteMicMsg#ADAPTER"
  )
  private final InviteMicMsg inviteMicMsg;

  /**
   * 特别关注发帖子
   */
  @WireField(
      tag = 24,
      adapter = "com.zq.live.proto.Notification.SpFollowNewPostMsg#ADAPTER"
  )
  private final SpFollowNewPostMsg spFollowNewPostMsg;

  /**
   * 特别关注更新相册
   */
  @WireField(
      tag = 25,
      adapter = "com.zq.live.proto.Notification.SpFollowUpdateAlbumMsg#ADAPTER"
  )
  private final SpFollowUpdateAlbumMsg spFollowUpdateAlbumMsg;

  /**
   * 收到礼物的信息
   */
  @WireField(
      tag = 26,
      adapter = "com.zq.live.proto.Notification.GiftReceivesMsg#ADAPTER"
  )
  private final GiftReceivesMsg giftReceivesMsg;

  /**
   * 小剧场邀请用户
   */
  @WireField(
      tag = 27,
      adapter = "com.zq.live.proto.Notification.InvitePartyMsg#ADAPTER"
  )
  private final InvitePartyMsg invitePartyMsg;

  /**
   * 家族信息发生变更
   */
  @WireField(
      tag = 28,
      adapter = "com.zq.live.proto.Notification.ClubInfoChangeMsg#ADAPTER"
  )
  private final ClubInfoChangeMsg clubInfoChangeMsg;

  /**
   * 接唱房进房信令
   */
  @WireField(
      tag = 29,
      adapter = "com.zq.live.proto.Notification.RelayRoomEnterMsg#ADAPTER"
  )
  private final RelayRoomEnterMsg relayRoomEnterMsg;

  /**
   * 接唱房拒绝邀请信令
   */
  @WireField(
      tag = 30,
      adapter = "com.zq.live.proto.Notification.RelayRoomRefuseMsg#ADAPTER"
  )
  private final RelayRoomRefuseMsg relayRoomRefuseMsg;

  /**
   * 接唱房邀请信令
   */
  @WireField(
      tag = 31,
      adapter = "com.zq.live.proto.Notification.RelayRoomInviteMsg#ADAPTER"
  )
  private final RelayRoomInviteMsg relayRoomInviteMsg;

  public NotificationMsg(Long timeMs, ENotificationMsgType msgType, Integer roomID, Long no,
      EMsgPosType posType, UserInfo sender, FollowMsg followMsg, InviteStandMsg inviteStandMsg,
      SysWarningMsg sysWarningMsg, CombineRoomInviteMsg inviteMsg, CombineRoomEnterMsg enterMsg,
      CombineRoomRefuseMsg refuseMsg, CombineRoomInviteV2Msg inviteV2Msg, FeedLikeMsg feedLikeMsg,
      FeedCommentLikeMsg feedCommentLikeMsg, FeedCommentAddMsg feedCommentAddMsg,
      PostsLikeMsg postsLikeMsg, PostsCommentLikeMsg postsCommentLikeMsg,
      PostsCommentAddMsg postsCommentAddMsg, InviteMicMsg inviteMicMsg,
      SpFollowNewPostMsg spFollowNewPostMsg, SpFollowUpdateAlbumMsg spFollowUpdateAlbumMsg,
      GiftReceivesMsg giftReceivesMsg, InvitePartyMsg invitePartyMsg,
      ClubInfoChangeMsg clubInfoChangeMsg, RelayRoomEnterMsg relayRoomEnterMsg,
      RelayRoomRefuseMsg relayRoomRefuseMsg, RelayRoomInviteMsg relayRoomInviteMsg) {
    this(timeMs, msgType, roomID, no, posType, sender, followMsg, inviteStandMsg, sysWarningMsg, inviteMsg, enterMsg, refuseMsg, inviteV2Msg, feedLikeMsg, feedCommentLikeMsg, feedCommentAddMsg, postsLikeMsg, postsCommentLikeMsg, postsCommentAddMsg, inviteMicMsg, spFollowNewPostMsg, spFollowUpdateAlbumMsg, giftReceivesMsg, invitePartyMsg, clubInfoChangeMsg, relayRoomEnterMsg, relayRoomRefuseMsg, relayRoomInviteMsg, ByteString.EMPTY);
  }

  public NotificationMsg(Long timeMs, ENotificationMsgType msgType, Integer roomID, Long no,
      EMsgPosType posType, UserInfo sender, FollowMsg followMsg, InviteStandMsg inviteStandMsg,
      SysWarningMsg sysWarningMsg, CombineRoomInviteMsg inviteMsg, CombineRoomEnterMsg enterMsg,
      CombineRoomRefuseMsg refuseMsg, CombineRoomInviteV2Msg inviteV2Msg, FeedLikeMsg feedLikeMsg,
      FeedCommentLikeMsg feedCommentLikeMsg, FeedCommentAddMsg feedCommentAddMsg,
      PostsLikeMsg postsLikeMsg, PostsCommentLikeMsg postsCommentLikeMsg,
      PostsCommentAddMsg postsCommentAddMsg, InviteMicMsg inviteMicMsg,
      SpFollowNewPostMsg spFollowNewPostMsg, SpFollowUpdateAlbumMsg spFollowUpdateAlbumMsg,
      GiftReceivesMsg giftReceivesMsg, InvitePartyMsg invitePartyMsg,
      ClubInfoChangeMsg clubInfoChangeMsg, RelayRoomEnterMsg relayRoomEnterMsg,
      RelayRoomRefuseMsg relayRoomRefuseMsg, RelayRoomInviteMsg relayRoomInviteMsg,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.timeMs = timeMs;
    this.msgType = msgType;
    this.roomID = roomID;
    this.no = no;
    this.posType = posType;
    this.sender = sender;
    this.followMsg = followMsg;
    this.inviteStandMsg = inviteStandMsg;
    this.sysWarningMsg = sysWarningMsg;
    this.inviteMsg = inviteMsg;
    this.enterMsg = enterMsg;
    this.refuseMsg = refuseMsg;
    this.inviteV2Msg = inviteV2Msg;
    this.feedLikeMsg = feedLikeMsg;
    this.feedCommentLikeMsg = feedCommentLikeMsg;
    this.feedCommentAddMsg = feedCommentAddMsg;
    this.postsLikeMsg = postsLikeMsg;
    this.postsCommentLikeMsg = postsCommentLikeMsg;
    this.postsCommentAddMsg = postsCommentAddMsg;
    this.inviteMicMsg = inviteMicMsg;
    this.spFollowNewPostMsg = spFollowNewPostMsg;
    this.spFollowUpdateAlbumMsg = spFollowUpdateAlbumMsg;
    this.giftReceivesMsg = giftReceivesMsg;
    this.invitePartyMsg = invitePartyMsg;
    this.clubInfoChangeMsg = clubInfoChangeMsg;
    this.relayRoomEnterMsg = relayRoomEnterMsg;
    this.relayRoomRefuseMsg = relayRoomRefuseMsg;
    this.relayRoomInviteMsg = relayRoomInviteMsg;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.timeMs = timeMs;
    builder.msgType = msgType;
    builder.roomID = roomID;
    builder.no = no;
    builder.posType = posType;
    builder.sender = sender;
    builder.followMsg = followMsg;
    builder.inviteStandMsg = inviteStandMsg;
    builder.sysWarningMsg = sysWarningMsg;
    builder.inviteMsg = inviteMsg;
    builder.enterMsg = enterMsg;
    builder.refuseMsg = refuseMsg;
    builder.inviteV2Msg = inviteV2Msg;
    builder.feedLikeMsg = feedLikeMsg;
    builder.feedCommentLikeMsg = feedCommentLikeMsg;
    builder.feedCommentAddMsg = feedCommentAddMsg;
    builder.postsLikeMsg = postsLikeMsg;
    builder.postsCommentLikeMsg = postsCommentLikeMsg;
    builder.postsCommentAddMsg = postsCommentAddMsg;
    builder.inviteMicMsg = inviteMicMsg;
    builder.spFollowNewPostMsg = spFollowNewPostMsg;
    builder.spFollowUpdateAlbumMsg = spFollowUpdateAlbumMsg;
    builder.giftReceivesMsg = giftReceivesMsg;
    builder.invitePartyMsg = invitePartyMsg;
    builder.clubInfoChangeMsg = clubInfoChangeMsg;
    builder.relayRoomEnterMsg = relayRoomEnterMsg;
    builder.relayRoomRefuseMsg = relayRoomRefuseMsg;
    builder.relayRoomInviteMsg = relayRoomInviteMsg;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof NotificationMsg)) return false;
    NotificationMsg o = (NotificationMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(timeMs, o.timeMs)
        && Internal.equals(msgType, o.msgType)
        && Internal.equals(roomID, o.roomID)
        && Internal.equals(no, o.no)
        && Internal.equals(posType, o.posType)
        && Internal.equals(sender, o.sender)
        && Internal.equals(followMsg, o.followMsg)
        && Internal.equals(inviteStandMsg, o.inviteStandMsg)
        && Internal.equals(sysWarningMsg, o.sysWarningMsg)
        && Internal.equals(inviteMsg, o.inviteMsg)
        && Internal.equals(enterMsg, o.enterMsg)
        && Internal.equals(refuseMsg, o.refuseMsg)
        && Internal.equals(inviteV2Msg, o.inviteV2Msg)
        && Internal.equals(feedLikeMsg, o.feedLikeMsg)
        && Internal.equals(feedCommentLikeMsg, o.feedCommentLikeMsg)
        && Internal.equals(feedCommentAddMsg, o.feedCommentAddMsg)
        && Internal.equals(postsLikeMsg, o.postsLikeMsg)
        && Internal.equals(postsCommentLikeMsg, o.postsCommentLikeMsg)
        && Internal.equals(postsCommentAddMsg, o.postsCommentAddMsg)
        && Internal.equals(inviteMicMsg, o.inviteMicMsg)
        && Internal.equals(spFollowNewPostMsg, o.spFollowNewPostMsg)
        && Internal.equals(spFollowUpdateAlbumMsg, o.spFollowUpdateAlbumMsg)
        && Internal.equals(giftReceivesMsg, o.giftReceivesMsg)
        && Internal.equals(invitePartyMsg, o.invitePartyMsg)
        && Internal.equals(clubInfoChangeMsg, o.clubInfoChangeMsg)
        && Internal.equals(relayRoomEnterMsg, o.relayRoomEnterMsg)
        && Internal.equals(relayRoomRefuseMsg, o.relayRoomRefuseMsg)
        && Internal.equals(relayRoomInviteMsg, o.relayRoomInviteMsg);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (timeMs != null ? timeMs.hashCode() : 0);
      result = result * 37 + (msgType != null ? msgType.hashCode() : 0);
      result = result * 37 + (roomID != null ? roomID.hashCode() : 0);
      result = result * 37 + (no != null ? no.hashCode() : 0);
      result = result * 37 + (posType != null ? posType.hashCode() : 0);
      result = result * 37 + (sender != null ? sender.hashCode() : 0);
      result = result * 37 + (followMsg != null ? followMsg.hashCode() : 0);
      result = result * 37 + (inviteStandMsg != null ? inviteStandMsg.hashCode() : 0);
      result = result * 37 + (sysWarningMsg != null ? sysWarningMsg.hashCode() : 0);
      result = result * 37 + (inviteMsg != null ? inviteMsg.hashCode() : 0);
      result = result * 37 + (enterMsg != null ? enterMsg.hashCode() : 0);
      result = result * 37 + (refuseMsg != null ? refuseMsg.hashCode() : 0);
      result = result * 37 + (inviteV2Msg != null ? inviteV2Msg.hashCode() : 0);
      result = result * 37 + (feedLikeMsg != null ? feedLikeMsg.hashCode() : 0);
      result = result * 37 + (feedCommentLikeMsg != null ? feedCommentLikeMsg.hashCode() : 0);
      result = result * 37 + (feedCommentAddMsg != null ? feedCommentAddMsg.hashCode() : 0);
      result = result * 37 + (postsLikeMsg != null ? postsLikeMsg.hashCode() : 0);
      result = result * 37 + (postsCommentLikeMsg != null ? postsCommentLikeMsg.hashCode() : 0);
      result = result * 37 + (postsCommentAddMsg != null ? postsCommentAddMsg.hashCode() : 0);
      result = result * 37 + (inviteMicMsg != null ? inviteMicMsg.hashCode() : 0);
      result = result * 37 + (spFollowNewPostMsg != null ? spFollowNewPostMsg.hashCode() : 0);
      result = result * 37 + (spFollowUpdateAlbumMsg != null ? spFollowUpdateAlbumMsg.hashCode() : 0);
      result = result * 37 + (giftReceivesMsg != null ? giftReceivesMsg.hashCode() : 0);
      result = result * 37 + (invitePartyMsg != null ? invitePartyMsg.hashCode() : 0);
      result = result * 37 + (clubInfoChangeMsg != null ? clubInfoChangeMsg.hashCode() : 0);
      result = result * 37 + (relayRoomEnterMsg != null ? relayRoomEnterMsg.hashCode() : 0);
      result = result * 37 + (relayRoomRefuseMsg != null ? relayRoomRefuseMsg.hashCode() : 0);
      result = result * 37 + (relayRoomInviteMsg != null ? relayRoomInviteMsg.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (timeMs != null) builder.append(", timeMs=").append(timeMs);
    if (msgType != null) builder.append(", msgType=").append(msgType);
    if (roomID != null) builder.append(", roomID=").append(roomID);
    if (no != null) builder.append(", no=").append(no);
    if (posType != null) builder.append(", posType=").append(posType);
    if (sender != null) builder.append(", sender=").append(sender);
    if (followMsg != null) builder.append(", followMsg=").append(followMsg);
    if (inviteStandMsg != null) builder.append(", inviteStandMsg=").append(inviteStandMsg);
    if (sysWarningMsg != null) builder.append(", sysWarningMsg=").append(sysWarningMsg);
    if (inviteMsg != null) builder.append(", inviteMsg=").append(inviteMsg);
    if (enterMsg != null) builder.append(", enterMsg=").append(enterMsg);
    if (refuseMsg != null) builder.append(", refuseMsg=").append(refuseMsg);
    if (inviteV2Msg != null) builder.append(", inviteV2Msg=").append(inviteV2Msg);
    if (feedLikeMsg != null) builder.append(", feedLikeMsg=").append(feedLikeMsg);
    if (feedCommentLikeMsg != null) builder.append(", feedCommentLikeMsg=").append(feedCommentLikeMsg);
    if (feedCommentAddMsg != null) builder.append(", feedCommentAddMsg=").append(feedCommentAddMsg);
    if (postsLikeMsg != null) builder.append(", postsLikeMsg=").append(postsLikeMsg);
    if (postsCommentLikeMsg != null) builder.append(", postsCommentLikeMsg=").append(postsCommentLikeMsg);
    if (postsCommentAddMsg != null) builder.append(", postsCommentAddMsg=").append(postsCommentAddMsg);
    if (inviteMicMsg != null) builder.append(", inviteMicMsg=").append(inviteMicMsg);
    if (spFollowNewPostMsg != null) builder.append(", spFollowNewPostMsg=").append(spFollowNewPostMsg);
    if (spFollowUpdateAlbumMsg != null) builder.append(", spFollowUpdateAlbumMsg=").append(spFollowUpdateAlbumMsg);
    if (giftReceivesMsg != null) builder.append(", giftReceivesMsg=").append(giftReceivesMsg);
    if (invitePartyMsg != null) builder.append(", invitePartyMsg=").append(invitePartyMsg);
    if (clubInfoChangeMsg != null) builder.append(", clubInfoChangeMsg=").append(clubInfoChangeMsg);
    if (relayRoomEnterMsg != null) builder.append(", relayRoomEnterMsg=").append(relayRoomEnterMsg);
    if (relayRoomRefuseMsg != null) builder.append(", relayRoomRefuseMsg=").append(relayRoomRefuseMsg);
    if (relayRoomInviteMsg != null) builder.append(", relayRoomInviteMsg=").append(relayRoomInviteMsg);
    return builder.replace(0, 2, "NotificationMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return NotificationMsg.ADAPTER.encode(this);
  }

  public static final NotificationMsg parseFrom(byte[] data) throws IOException {
    NotificationMsg c = null;
       c = NotificationMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 消息产生时间，单位毫秒
   */
  public Long getTimeMs() {
    if(timeMs==null){
        return DEFAULT_TIMEMS;
    }
    return timeMs;
  }

  /**
   * 消息类型
   */
  public ENotificationMsgType getMsgType() {
    if(msgType==null){
        return new ENotificationMsgType.Builder().build();
    }
    return msgType;
  }

  /**
   * 房间ID,若不需要为0
   */
  public Integer getRoomID() {
    if(roomID==null){
        return DEFAULT_ROOMID;
    }
    return roomID;
  }

  /**
   * 消息序号
   */
  public Long getNo() {
    if(no==null){
        return DEFAULT_NO;
    }
    return no;
  }

  /**
   * 消息显示位置类型
   */
  public EMsgPosType getPosType() {
    if(posType==null){
        return new EMsgPosType.Builder().build();
    }
    return posType;
  }

  /**
   * 发送者简要信息
   */
  public UserInfo getSender() {
    if(sender==null){
        return new UserInfo.Builder().build();
    }
    return sender;
  }

  public FollowMsg getFollowMsg() {
    if(followMsg==null){
        return new FollowMsg.Builder().build();
    }
    return followMsg;
  }

  public InviteStandMsg getInviteStandMsg() {
    if(inviteStandMsg==null){
        return new InviteStandMsg.Builder().build();
    }
    return inviteStandMsg;
  }

  public SysWarningMsg getSysWarningMsg() {
    if(sysWarningMsg==null){
        return new SysWarningMsg.Builder().build();
    }
    return sysWarningMsg;
  }

  /**
   * 双人房邀请信令
   */
  public CombineRoomInviteMsg getInviteMsg() {
    if(inviteMsg==null){
        return new CombineRoomInviteMsg.Builder().build();
    }
    return inviteMsg;
  }

  /**
   * 双人房进房信令
   */
  public CombineRoomEnterMsg getEnterMsg() {
    if(enterMsg==null){
        return new CombineRoomEnterMsg.Builder().build();
    }
    return enterMsg;
  }

  /**
   * 双人房拒绝邀请信令
   */
  public CombineRoomRefuseMsg getRefuseMsg() {
    if(refuseMsg==null){
        return new CombineRoomRefuseMsg.Builder().build();
    }
    return refuseMsg;
  }

  /**
   * 双人房邀请信令
   */
  public CombineRoomInviteV2Msg getInviteV2Msg() {
    if(inviteV2Msg==null){
        return new CombineRoomInviteV2Msg.Builder().build();
    }
    return inviteV2Msg;
  }

  /**
   * 点赞feed信令
   */
  public FeedLikeMsg getFeedLikeMsg() {
    if(feedLikeMsg==null){
        return new FeedLikeMsg.Builder().build();
    }
    return feedLikeMsg;
  }

  /**
   * 评论喜欢信令
   */
  public FeedCommentLikeMsg getFeedCommentLikeMsg() {
    if(feedCommentLikeMsg==null){
        return new FeedCommentLikeMsg.Builder().build();
    }
    return feedCommentLikeMsg;
  }

  /**
   * 评论增加信令
   */
  public FeedCommentAddMsg getFeedCommentAddMsg() {
    if(feedCommentAddMsg==null){
        return new FeedCommentAddMsg.Builder().build();
    }
    return feedCommentAddMsg;
  }

  /**
   * 点赞帖子 信令
   */
  public PostsLikeMsg getPostsLikeMsg() {
    if(postsLikeMsg==null){
        return new PostsLikeMsg.Builder().build();
    }
    return postsLikeMsg;
  }

  /**
   * 点赞帖子评论 信令
   */
  public PostsCommentLikeMsg getPostsCommentLikeMsg() {
    if(postsCommentLikeMsg==null){
        return new PostsCommentLikeMsg.Builder().build();
    }
    return postsCommentLikeMsg;
  }

  /**
   * 增加帖子评论 信令
   */
  public PostsCommentAddMsg getPostsCommentAddMsg() {
    if(postsCommentAddMsg==null){
        return new PostsCommentAddMsg.Builder().build();
    }
    return postsCommentAddMsg;
  }

  /**
   * 排麦房邀请用户
   */
  public InviteMicMsg getInviteMicMsg() {
    if(inviteMicMsg==null){
        return new InviteMicMsg.Builder().build();
    }
    return inviteMicMsg;
  }

  /**
   * 特别关注发帖子
   */
  public SpFollowNewPostMsg getSpFollowNewPostMsg() {
    if(spFollowNewPostMsg==null){
        return new SpFollowNewPostMsg.Builder().build();
    }
    return spFollowNewPostMsg;
  }

  /**
   * 特别关注更新相册
   */
  public SpFollowUpdateAlbumMsg getSpFollowUpdateAlbumMsg() {
    if(spFollowUpdateAlbumMsg==null){
        return new SpFollowUpdateAlbumMsg.Builder().build();
    }
    return spFollowUpdateAlbumMsg;
  }

  /**
   * 收到礼物的信息
   */
  public GiftReceivesMsg getGiftReceivesMsg() {
    if(giftReceivesMsg==null){
        return new GiftReceivesMsg.Builder().build();
    }
    return giftReceivesMsg;
  }

  /**
   * 小剧场邀请用户
   */
  public InvitePartyMsg getInvitePartyMsg() {
    if(invitePartyMsg==null){
        return new InvitePartyMsg.Builder().build();
    }
    return invitePartyMsg;
  }

  /**
   * 家族信息发生变更
   */
  public ClubInfoChangeMsg getClubInfoChangeMsg() {
    if(clubInfoChangeMsg==null){
        return new ClubInfoChangeMsg.Builder().build();
    }
    return clubInfoChangeMsg;
  }

  /**
   * 接唱房进房信令
   */
  public RelayRoomEnterMsg getRelayRoomEnterMsg() {
    if(relayRoomEnterMsg==null){
        return new RelayRoomEnterMsg.Builder().build();
    }
    return relayRoomEnterMsg;
  }

  /**
   * 接唱房拒绝邀请信令
   */
  public RelayRoomRefuseMsg getRelayRoomRefuseMsg() {
    if(relayRoomRefuseMsg==null){
        return new RelayRoomRefuseMsg.Builder().build();
    }
    return relayRoomRefuseMsg;
  }

  /**
   * 接唱房邀请信令
   */
  public RelayRoomInviteMsg getRelayRoomInviteMsg() {
    if(relayRoomInviteMsg==null){
        return new RelayRoomInviteMsg.Builder().build();
    }
    return relayRoomInviteMsg;
  }

  /**
   * 消息产生时间，单位毫秒
   */
  public boolean hasTimeMs() {
    return timeMs!=null;
  }

  /**
   * 消息类型
   */
  public boolean hasMsgType() {
    return msgType!=null;
  }

  /**
   * 房间ID,若不需要为0
   */
  public boolean hasRoomID() {
    return roomID!=null;
  }

  /**
   * 消息序号
   */
  public boolean hasNo() {
    return no!=null;
  }

  /**
   * 消息显示位置类型
   */
  public boolean hasPosType() {
    return posType!=null;
  }

  /**
   * 发送者简要信息
   */
  public boolean hasSender() {
    return sender!=null;
  }

  public boolean hasFollowMsg() {
    return followMsg!=null;
  }

  public boolean hasInviteStandMsg() {
    return inviteStandMsg!=null;
  }

  public boolean hasSysWarningMsg() {
    return sysWarningMsg!=null;
  }

  /**
   * 双人房邀请信令
   */
  public boolean hasInviteMsg() {
    return inviteMsg!=null;
  }

  /**
   * 双人房进房信令
   */
  public boolean hasEnterMsg() {
    return enterMsg!=null;
  }

  /**
   * 双人房拒绝邀请信令
   */
  public boolean hasRefuseMsg() {
    return refuseMsg!=null;
  }

  /**
   * 双人房邀请信令
   */
  public boolean hasInviteV2Msg() {
    return inviteV2Msg!=null;
  }

  /**
   * 点赞feed信令
   */
  public boolean hasFeedLikeMsg() {
    return feedLikeMsg!=null;
  }

  /**
   * 评论喜欢信令
   */
  public boolean hasFeedCommentLikeMsg() {
    return feedCommentLikeMsg!=null;
  }

  /**
   * 评论增加信令
   */
  public boolean hasFeedCommentAddMsg() {
    return feedCommentAddMsg!=null;
  }

  /**
   * 点赞帖子 信令
   */
  public boolean hasPostsLikeMsg() {
    return postsLikeMsg!=null;
  }

  /**
   * 点赞帖子评论 信令
   */
  public boolean hasPostsCommentLikeMsg() {
    return postsCommentLikeMsg!=null;
  }

  /**
   * 增加帖子评论 信令
   */
  public boolean hasPostsCommentAddMsg() {
    return postsCommentAddMsg!=null;
  }

  /**
   * 排麦房邀请用户
   */
  public boolean hasInviteMicMsg() {
    return inviteMicMsg!=null;
  }

  /**
   * 特别关注发帖子
   */
  public boolean hasSpFollowNewPostMsg() {
    return spFollowNewPostMsg!=null;
  }

  /**
   * 特别关注更新相册
   */
  public boolean hasSpFollowUpdateAlbumMsg() {
    return spFollowUpdateAlbumMsg!=null;
  }

  /**
   * 收到礼物的信息
   */
  public boolean hasGiftReceivesMsg() {
    return giftReceivesMsg!=null;
  }

  /**
   * 小剧场邀请用户
   */
  public boolean hasInvitePartyMsg() {
    return invitePartyMsg!=null;
  }

  /**
   * 家族信息发生变更
   */
  public boolean hasClubInfoChangeMsg() {
    return clubInfoChangeMsg!=null;
  }

  /**
   * 接唱房进房信令
   */
  public boolean hasRelayRoomEnterMsg() {
    return relayRoomEnterMsg!=null;
  }

  /**
   * 接唱房拒绝邀请信令
   */
  public boolean hasRelayRoomRefuseMsg() {
    return relayRoomRefuseMsg!=null;
  }

  /**
   * 接唱房邀请信令
   */
  public boolean hasRelayRoomInviteMsg() {
    return relayRoomInviteMsg!=null;
  }

  public static final class Builder extends Message.Builder<NotificationMsg, Builder> {
    private Long timeMs;

    private ENotificationMsgType msgType;

    private Integer roomID;

    private Long no;

    private EMsgPosType posType;

    private UserInfo sender;

    private FollowMsg followMsg;

    private InviteStandMsg inviteStandMsg;

    private SysWarningMsg sysWarningMsg;

    private CombineRoomInviteMsg inviteMsg;

    private CombineRoomEnterMsg enterMsg;

    private CombineRoomRefuseMsg refuseMsg;

    private CombineRoomInviteV2Msg inviteV2Msg;

    private FeedLikeMsg feedLikeMsg;

    private FeedCommentLikeMsg feedCommentLikeMsg;

    private FeedCommentAddMsg feedCommentAddMsg;

    private PostsLikeMsg postsLikeMsg;

    private PostsCommentLikeMsg postsCommentLikeMsg;

    private PostsCommentAddMsg postsCommentAddMsg;

    private InviteMicMsg inviteMicMsg;

    private SpFollowNewPostMsg spFollowNewPostMsg;

    private SpFollowUpdateAlbumMsg spFollowUpdateAlbumMsg;

    private GiftReceivesMsg giftReceivesMsg;

    private InvitePartyMsg invitePartyMsg;

    private ClubInfoChangeMsg clubInfoChangeMsg;

    private RelayRoomEnterMsg relayRoomEnterMsg;

    private RelayRoomRefuseMsg relayRoomRefuseMsg;

    private RelayRoomInviteMsg relayRoomInviteMsg;

    public Builder() {
    }

    /**
     * 消息产生时间，单位毫秒
     */
    public Builder setTimeMs(Long timeMs) {
      this.timeMs = timeMs;
      return this;
    }

    /**
     * 消息类型
     */
    public Builder setMsgType(ENotificationMsgType msgType) {
      this.msgType = msgType;
      return this;
    }

    /**
     * 房间ID,若不需要为0
     */
    public Builder setRoomID(Integer roomID) {
      this.roomID = roomID;
      return this;
    }

    /**
     * 消息序号
     */
    public Builder setNo(Long no) {
      this.no = no;
      return this;
    }

    /**
     * 消息显示位置类型
     */
    public Builder setPosType(EMsgPosType posType) {
      this.posType = posType;
      return this;
    }

    /**
     * 发送者简要信息
     */
    public Builder setSender(UserInfo sender) {
      this.sender = sender;
      return this;
    }

    public Builder setFollowMsg(FollowMsg followMsg) {
      this.followMsg = followMsg;
      return this;
    }

    public Builder setInviteStandMsg(InviteStandMsg inviteStandMsg) {
      this.inviteStandMsg = inviteStandMsg;
      return this;
    }

    public Builder setSysWarningMsg(SysWarningMsg sysWarningMsg) {
      this.sysWarningMsg = sysWarningMsg;
      return this;
    }

    /**
     * 双人房邀请信令
     */
    public Builder setInviteMsg(CombineRoomInviteMsg inviteMsg) {
      this.inviteMsg = inviteMsg;
      return this;
    }

    /**
     * 双人房进房信令
     */
    public Builder setEnterMsg(CombineRoomEnterMsg enterMsg) {
      this.enterMsg = enterMsg;
      return this;
    }

    /**
     * 双人房拒绝邀请信令
     */
    public Builder setRefuseMsg(CombineRoomRefuseMsg refuseMsg) {
      this.refuseMsg = refuseMsg;
      return this;
    }

    /**
     * 双人房邀请信令
     */
    public Builder setInviteV2Msg(CombineRoomInviteV2Msg inviteV2Msg) {
      this.inviteV2Msg = inviteV2Msg;
      return this;
    }

    /**
     * 点赞feed信令
     */
    public Builder setFeedLikeMsg(FeedLikeMsg feedLikeMsg) {
      this.feedLikeMsg = feedLikeMsg;
      return this;
    }

    /**
     * 评论喜欢信令
     */
    public Builder setFeedCommentLikeMsg(FeedCommentLikeMsg feedCommentLikeMsg) {
      this.feedCommentLikeMsg = feedCommentLikeMsg;
      return this;
    }

    /**
     * 评论增加信令
     */
    public Builder setFeedCommentAddMsg(FeedCommentAddMsg feedCommentAddMsg) {
      this.feedCommentAddMsg = feedCommentAddMsg;
      return this;
    }

    /**
     * 点赞帖子 信令
     */
    public Builder setPostsLikeMsg(PostsLikeMsg postsLikeMsg) {
      this.postsLikeMsg = postsLikeMsg;
      return this;
    }

    /**
     * 点赞帖子评论 信令
     */
    public Builder setPostsCommentLikeMsg(PostsCommentLikeMsg postsCommentLikeMsg) {
      this.postsCommentLikeMsg = postsCommentLikeMsg;
      return this;
    }

    /**
     * 增加帖子评论 信令
     */
    public Builder setPostsCommentAddMsg(PostsCommentAddMsg postsCommentAddMsg) {
      this.postsCommentAddMsg = postsCommentAddMsg;
      return this;
    }

    /**
     * 排麦房邀请用户
     */
    public Builder setInviteMicMsg(InviteMicMsg inviteMicMsg) {
      this.inviteMicMsg = inviteMicMsg;
      return this;
    }

    /**
     * 特别关注发帖子
     */
    public Builder setSpFollowNewPostMsg(SpFollowNewPostMsg spFollowNewPostMsg) {
      this.spFollowNewPostMsg = spFollowNewPostMsg;
      return this;
    }

    /**
     * 特别关注更新相册
     */
    public Builder setSpFollowUpdateAlbumMsg(SpFollowUpdateAlbumMsg spFollowUpdateAlbumMsg) {
      this.spFollowUpdateAlbumMsg = spFollowUpdateAlbumMsg;
      return this;
    }

    /**
     * 收到礼物的信息
     */
    public Builder setGiftReceivesMsg(GiftReceivesMsg giftReceivesMsg) {
      this.giftReceivesMsg = giftReceivesMsg;
      return this;
    }

    /**
     * 小剧场邀请用户
     */
    public Builder setInvitePartyMsg(InvitePartyMsg invitePartyMsg) {
      this.invitePartyMsg = invitePartyMsg;
      return this;
    }

    /**
     * 家族信息发生变更
     */
    public Builder setClubInfoChangeMsg(ClubInfoChangeMsg clubInfoChangeMsg) {
      this.clubInfoChangeMsg = clubInfoChangeMsg;
      return this;
    }

    /**
     * 接唱房进房信令
     */
    public Builder setRelayRoomEnterMsg(RelayRoomEnterMsg relayRoomEnterMsg) {
      this.relayRoomEnterMsg = relayRoomEnterMsg;
      return this;
    }

    /**
     * 接唱房拒绝邀请信令
     */
    public Builder setRelayRoomRefuseMsg(RelayRoomRefuseMsg relayRoomRefuseMsg) {
      this.relayRoomRefuseMsg = relayRoomRefuseMsg;
      return this;
    }

    /**
     * 接唱房邀请信令
     */
    public Builder setRelayRoomInviteMsg(RelayRoomInviteMsg relayRoomInviteMsg) {
      this.relayRoomInviteMsg = relayRoomInviteMsg;
      return this;
    }

    @Override
    public NotificationMsg build() {
      return new NotificationMsg(timeMs, msgType, roomID, no, posType, sender, followMsg, inviteStandMsg, sysWarningMsg, inviteMsg, enterMsg, refuseMsg, inviteV2Msg, feedLikeMsg, feedCommentLikeMsg, feedCommentAddMsg, postsLikeMsg, postsCommentLikeMsg, postsCommentAddMsg, inviteMicMsg, spFollowNewPostMsg, spFollowUpdateAlbumMsg, giftReceivesMsg, invitePartyMsg, clubInfoChangeMsg, relayRoomEnterMsg, relayRoomRefuseMsg, relayRoomInviteMsg, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_NotificationMsg extends ProtoAdapter<NotificationMsg> {
    public ProtoAdapter_NotificationMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, NotificationMsg.class);
    }

    @Override
    public int encodedSize(NotificationMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.timeMs)
          + ENotificationMsgType.ADAPTER.encodedSizeWithTag(2, value.msgType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.roomID)
          + ProtoAdapter.SINT64.encodedSizeWithTag(4, value.no)
          + EMsgPosType.ADAPTER.encodedSizeWithTag(5, value.posType)
          + UserInfo.ADAPTER.encodedSizeWithTag(6, value.sender)
          + FollowMsg.ADAPTER.encodedSizeWithTag(10, value.followMsg)
          + InviteStandMsg.ADAPTER.encodedSizeWithTag(11, value.inviteStandMsg)
          + SysWarningMsg.ADAPTER.encodedSizeWithTag(12, value.sysWarningMsg)
          + CombineRoomInviteMsg.ADAPTER.encodedSizeWithTag(13, value.inviteMsg)
          + CombineRoomEnterMsg.ADAPTER.encodedSizeWithTag(14, value.enterMsg)
          + CombineRoomRefuseMsg.ADAPTER.encodedSizeWithTag(15, value.refuseMsg)
          + CombineRoomInviteV2Msg.ADAPTER.encodedSizeWithTag(16, value.inviteV2Msg)
          + FeedLikeMsg.ADAPTER.encodedSizeWithTag(17, value.feedLikeMsg)
          + FeedCommentLikeMsg.ADAPTER.encodedSizeWithTag(18, value.feedCommentLikeMsg)
          + FeedCommentAddMsg.ADAPTER.encodedSizeWithTag(19, value.feedCommentAddMsg)
          + PostsLikeMsg.ADAPTER.encodedSizeWithTag(20, value.postsLikeMsg)
          + PostsCommentLikeMsg.ADAPTER.encodedSizeWithTag(21, value.postsCommentLikeMsg)
          + PostsCommentAddMsg.ADAPTER.encodedSizeWithTag(22, value.postsCommentAddMsg)
          + InviteMicMsg.ADAPTER.encodedSizeWithTag(23, value.inviteMicMsg)
          + SpFollowNewPostMsg.ADAPTER.encodedSizeWithTag(24, value.spFollowNewPostMsg)
          + SpFollowUpdateAlbumMsg.ADAPTER.encodedSizeWithTag(25, value.spFollowUpdateAlbumMsg)
          + GiftReceivesMsg.ADAPTER.encodedSizeWithTag(26, value.giftReceivesMsg)
          + InvitePartyMsg.ADAPTER.encodedSizeWithTag(27, value.invitePartyMsg)
          + ClubInfoChangeMsg.ADAPTER.encodedSizeWithTag(28, value.clubInfoChangeMsg)
          + RelayRoomEnterMsg.ADAPTER.encodedSizeWithTag(29, value.relayRoomEnterMsg)
          + RelayRoomRefuseMsg.ADAPTER.encodedSizeWithTag(30, value.relayRoomRefuseMsg)
          + RelayRoomInviteMsg.ADAPTER.encodedSizeWithTag(31, value.relayRoomInviteMsg)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, NotificationMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.timeMs);
      ENotificationMsgType.ADAPTER.encodeWithTag(writer, 2, value.msgType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.roomID);
      ProtoAdapter.SINT64.encodeWithTag(writer, 4, value.no);
      EMsgPosType.ADAPTER.encodeWithTag(writer, 5, value.posType);
      UserInfo.ADAPTER.encodeWithTag(writer, 6, value.sender);
      FollowMsg.ADAPTER.encodeWithTag(writer, 10, value.followMsg);
      InviteStandMsg.ADAPTER.encodeWithTag(writer, 11, value.inviteStandMsg);
      SysWarningMsg.ADAPTER.encodeWithTag(writer, 12, value.sysWarningMsg);
      CombineRoomInviteMsg.ADAPTER.encodeWithTag(writer, 13, value.inviteMsg);
      CombineRoomEnterMsg.ADAPTER.encodeWithTag(writer, 14, value.enterMsg);
      CombineRoomRefuseMsg.ADAPTER.encodeWithTag(writer, 15, value.refuseMsg);
      CombineRoomInviteV2Msg.ADAPTER.encodeWithTag(writer, 16, value.inviteV2Msg);
      FeedLikeMsg.ADAPTER.encodeWithTag(writer, 17, value.feedLikeMsg);
      FeedCommentLikeMsg.ADAPTER.encodeWithTag(writer, 18, value.feedCommentLikeMsg);
      FeedCommentAddMsg.ADAPTER.encodeWithTag(writer, 19, value.feedCommentAddMsg);
      PostsLikeMsg.ADAPTER.encodeWithTag(writer, 20, value.postsLikeMsg);
      PostsCommentLikeMsg.ADAPTER.encodeWithTag(writer, 21, value.postsCommentLikeMsg);
      PostsCommentAddMsg.ADAPTER.encodeWithTag(writer, 22, value.postsCommentAddMsg);
      InviteMicMsg.ADAPTER.encodeWithTag(writer, 23, value.inviteMicMsg);
      SpFollowNewPostMsg.ADAPTER.encodeWithTag(writer, 24, value.spFollowNewPostMsg);
      SpFollowUpdateAlbumMsg.ADAPTER.encodeWithTag(writer, 25, value.spFollowUpdateAlbumMsg);
      GiftReceivesMsg.ADAPTER.encodeWithTag(writer, 26, value.giftReceivesMsg);
      InvitePartyMsg.ADAPTER.encodeWithTag(writer, 27, value.invitePartyMsg);
      ClubInfoChangeMsg.ADAPTER.encodeWithTag(writer, 28, value.clubInfoChangeMsg);
      RelayRoomEnterMsg.ADAPTER.encodeWithTag(writer, 29, value.relayRoomEnterMsg);
      RelayRoomRefuseMsg.ADAPTER.encodeWithTag(writer, 30, value.relayRoomRefuseMsg);
      RelayRoomInviteMsg.ADAPTER.encodeWithTag(writer, 31, value.relayRoomInviteMsg);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public NotificationMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: {
            try {
              builder.setMsgType(ENotificationMsgType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setRoomID(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setNo(ProtoAdapter.SINT64.decode(reader)); break;
          case 5: {
            try {
              builder.setPosType(EMsgPosType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 6: builder.setSender(UserInfo.ADAPTER.decode(reader)); break;
          case 10: builder.setFollowMsg(FollowMsg.ADAPTER.decode(reader)); break;
          case 11: builder.setInviteStandMsg(InviteStandMsg.ADAPTER.decode(reader)); break;
          case 12: builder.setSysWarningMsg(SysWarningMsg.ADAPTER.decode(reader)); break;
          case 13: builder.setInviteMsg(CombineRoomInviteMsg.ADAPTER.decode(reader)); break;
          case 14: builder.setEnterMsg(CombineRoomEnterMsg.ADAPTER.decode(reader)); break;
          case 15: builder.setRefuseMsg(CombineRoomRefuseMsg.ADAPTER.decode(reader)); break;
          case 16: builder.setInviteV2Msg(CombineRoomInviteV2Msg.ADAPTER.decode(reader)); break;
          case 17: builder.setFeedLikeMsg(FeedLikeMsg.ADAPTER.decode(reader)); break;
          case 18: builder.setFeedCommentLikeMsg(FeedCommentLikeMsg.ADAPTER.decode(reader)); break;
          case 19: builder.setFeedCommentAddMsg(FeedCommentAddMsg.ADAPTER.decode(reader)); break;
          case 20: builder.setPostsLikeMsg(PostsLikeMsg.ADAPTER.decode(reader)); break;
          case 21: builder.setPostsCommentLikeMsg(PostsCommentLikeMsg.ADAPTER.decode(reader)); break;
          case 22: builder.setPostsCommentAddMsg(PostsCommentAddMsg.ADAPTER.decode(reader)); break;
          case 23: builder.setInviteMicMsg(InviteMicMsg.ADAPTER.decode(reader)); break;
          case 24: builder.setSpFollowNewPostMsg(SpFollowNewPostMsg.ADAPTER.decode(reader)); break;
          case 25: builder.setSpFollowUpdateAlbumMsg(SpFollowUpdateAlbumMsg.ADAPTER.decode(reader)); break;
          case 26: builder.setGiftReceivesMsg(GiftReceivesMsg.ADAPTER.decode(reader)); break;
          case 27: builder.setInvitePartyMsg(InvitePartyMsg.ADAPTER.decode(reader)); break;
          case 28: builder.setClubInfoChangeMsg(ClubInfoChangeMsg.ADAPTER.decode(reader)); break;
          case 29: builder.setRelayRoomEnterMsg(RelayRoomEnterMsg.ADAPTER.decode(reader)); break;
          case 30: builder.setRelayRoomRefuseMsg(RelayRoomRefuseMsg.ADAPTER.decode(reader)); break;
          case 31: builder.setRelayRoomInviteMsg(RelayRoomInviteMsg.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public NotificationMsg redact(NotificationMsg value) {
      Builder builder = value.newBuilder();
      if (builder.sender != null) builder.sender = UserInfo.ADAPTER.redact(builder.sender);
      if (builder.followMsg != null) builder.followMsg = FollowMsg.ADAPTER.redact(builder.followMsg);
      if (builder.inviteStandMsg != null) builder.inviteStandMsg = InviteStandMsg.ADAPTER.redact(builder.inviteStandMsg);
      if (builder.sysWarningMsg != null) builder.sysWarningMsg = SysWarningMsg.ADAPTER.redact(builder.sysWarningMsg);
      if (builder.inviteMsg != null) builder.inviteMsg = CombineRoomInviteMsg.ADAPTER.redact(builder.inviteMsg);
      if (builder.enterMsg != null) builder.enterMsg = CombineRoomEnterMsg.ADAPTER.redact(builder.enterMsg);
      if (builder.refuseMsg != null) builder.refuseMsg = CombineRoomRefuseMsg.ADAPTER.redact(builder.refuseMsg);
      if (builder.inviteV2Msg != null) builder.inviteV2Msg = CombineRoomInviteV2Msg.ADAPTER.redact(builder.inviteV2Msg);
      if (builder.feedLikeMsg != null) builder.feedLikeMsg = FeedLikeMsg.ADAPTER.redact(builder.feedLikeMsg);
      if (builder.feedCommentLikeMsg != null) builder.feedCommentLikeMsg = FeedCommentLikeMsg.ADAPTER.redact(builder.feedCommentLikeMsg);
      if (builder.feedCommentAddMsg != null) builder.feedCommentAddMsg = FeedCommentAddMsg.ADAPTER.redact(builder.feedCommentAddMsg);
      if (builder.postsLikeMsg != null) builder.postsLikeMsg = PostsLikeMsg.ADAPTER.redact(builder.postsLikeMsg);
      if (builder.postsCommentLikeMsg != null) builder.postsCommentLikeMsg = PostsCommentLikeMsg.ADAPTER.redact(builder.postsCommentLikeMsg);
      if (builder.postsCommentAddMsg != null) builder.postsCommentAddMsg = PostsCommentAddMsg.ADAPTER.redact(builder.postsCommentAddMsg);
      if (builder.inviteMicMsg != null) builder.inviteMicMsg = InviteMicMsg.ADAPTER.redact(builder.inviteMicMsg);
      if (builder.spFollowNewPostMsg != null) builder.spFollowNewPostMsg = SpFollowNewPostMsg.ADAPTER.redact(builder.spFollowNewPostMsg);
      if (builder.spFollowUpdateAlbumMsg != null) builder.spFollowUpdateAlbumMsg = SpFollowUpdateAlbumMsg.ADAPTER.redact(builder.spFollowUpdateAlbumMsg);
      if (builder.giftReceivesMsg != null) builder.giftReceivesMsg = GiftReceivesMsg.ADAPTER.redact(builder.giftReceivesMsg);
      if (builder.invitePartyMsg != null) builder.invitePartyMsg = InvitePartyMsg.ADAPTER.redact(builder.invitePartyMsg);
      if (builder.clubInfoChangeMsg != null) builder.clubInfoChangeMsg = ClubInfoChangeMsg.ADAPTER.redact(builder.clubInfoChangeMsg);
      if (builder.relayRoomEnterMsg != null) builder.relayRoomEnterMsg = RelayRoomEnterMsg.ADAPTER.redact(builder.relayRoomEnterMsg);
      if (builder.relayRoomRefuseMsg != null) builder.relayRoomRefuseMsg = RelayRoomRefuseMsg.ADAPTER.redact(builder.relayRoomRefuseMsg);
      if (builder.relayRoomInviteMsg != null) builder.relayRoomInviteMsg = RelayRoomInviteMsg.ADAPTER.redact(builder.relayRoomInviteMsg);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
