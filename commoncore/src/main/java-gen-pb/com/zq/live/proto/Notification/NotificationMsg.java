// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Notification.proto
package com.zq.live.proto.Notification;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.UserInfo;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
 * --proto_path=./proto --java_out=./commoncore/src/main/java-gen-pb/ Notification.proto
 * 房间消息：此结构会通过pb编码后，通过系统消息通道到达客户端
 */
public final class NotificationMsg extends Message<NotificationMsg, NotificationMsg.Builder> {
  public static final ProtoAdapter<NotificationMsg> ADAPTER = new ProtoAdapter_NotificationMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_TIMEMS = 0L;

  public static final ENotificationMsgType DEFAULT_MSGTYPE = ENotificationMsgType.NM_UNKNOWN;

  public static final Integer DEFAULT_ROOMID = 0;

  public static final Long DEFAULT_NO = 0L;

  public static final EMsgPosType DEFAULT_POSTYPE = EMsgPosType.EPT_UNKNOWN;

  /**
   * 消息产生时间，单位毫秒
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long timeMs;

  /**
   * 消息类型
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.Notification.ENotificationMsgType#ADAPTER"
  )
  private final ENotificationMsgType msgType;

  /**
   * 房间ID,若不需要为0
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roomID;

  /**
   * 消息序号
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long no;

  /**
   * 消息显示位置类型
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Notification.EMsgPosType#ADAPTER"
  )
  private final EMsgPosType posType;

  /**
   * 发送者简要信息
   */
  @WireField(
      tag = 6,
      adapter = "com.zq.live.proto.Common.UserInfo#ADAPTER"
  )
  private final UserInfo sender;

  @WireField(
      tag = 10,
      adapter = "com.zq.live.proto.Notification.FollowMsg#ADAPTER"
  )
  private final FollowMsg followMsg;

  @WireField(
      tag = 11,
      adapter = "com.zq.live.proto.Notification.InviteStandMsg#ADAPTER"
  )
  private final InviteStandMsg inviteStandMsg;

  @WireField(
      tag = 12,
      adapter = "com.zq.live.proto.Notification.SysWarningMsg#ADAPTER"
  )
  private final SysWarningMsg sysWarningMsg;

  /**
   * 发送邀请请求
   */
  @WireField(
      tag = 13,
      adapter = "com.zq.live.proto.Notification.CombineRoomSendInviteUserMsg#ADAPTER"
  )
  private final CombineRoomSendInviteUserMsg sendInviteUserMsg;

  /**
   * 同步邀请结果
   */
  @WireField(
      tag = 14,
      adapter = "com.zq.live.proto.Notification.CombineRoomSyncInviteUserMsg#ADAPTER"
  )
  private final CombineRoomSyncInviteUserMsg syncInviteUserMsg;

  /**
   * 通过匹配开始双人房
   */
  @WireField(
      tag = 15,
      adapter = "com.zq.live.proto.Notification.StartCombineRoomByMatchMsg#ADAPTER"
  )
  private final StartCombineRoomByMatchMsg startCombineRoomByMatchMsg;

  public NotificationMsg(Long timeMs, ENotificationMsgType msgType, Integer roomID, Long no,
      EMsgPosType posType, UserInfo sender, FollowMsg followMsg, InviteStandMsg inviteStandMsg,
      SysWarningMsg sysWarningMsg, CombineRoomSendInviteUserMsg sendInviteUserMsg,
      CombineRoomSyncInviteUserMsg syncInviteUserMsg,
      StartCombineRoomByMatchMsg startCombineRoomByMatchMsg) {
    this(timeMs, msgType, roomID, no, posType, sender, followMsg, inviteStandMsg, sysWarningMsg, sendInviteUserMsg, syncInviteUserMsg, startCombineRoomByMatchMsg, ByteString.EMPTY);
  }

  public NotificationMsg(Long timeMs, ENotificationMsgType msgType, Integer roomID, Long no,
      EMsgPosType posType, UserInfo sender, FollowMsg followMsg, InviteStandMsg inviteStandMsg,
      SysWarningMsg sysWarningMsg, CombineRoomSendInviteUserMsg sendInviteUserMsg,
      CombineRoomSyncInviteUserMsg syncInviteUserMsg,
      StartCombineRoomByMatchMsg startCombineRoomByMatchMsg, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.timeMs = timeMs;
    this.msgType = msgType;
    this.roomID = roomID;
    this.no = no;
    this.posType = posType;
    this.sender = sender;
    this.followMsg = followMsg;
    this.inviteStandMsg = inviteStandMsg;
    this.sysWarningMsg = sysWarningMsg;
    this.sendInviteUserMsg = sendInviteUserMsg;
    this.syncInviteUserMsg = syncInviteUserMsg;
    this.startCombineRoomByMatchMsg = startCombineRoomByMatchMsg;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.timeMs = timeMs;
    builder.msgType = msgType;
    builder.roomID = roomID;
    builder.no = no;
    builder.posType = posType;
    builder.sender = sender;
    builder.followMsg = followMsg;
    builder.inviteStandMsg = inviteStandMsg;
    builder.sysWarningMsg = sysWarningMsg;
    builder.sendInviteUserMsg = sendInviteUserMsg;
    builder.syncInviteUserMsg = syncInviteUserMsg;
    builder.startCombineRoomByMatchMsg = startCombineRoomByMatchMsg;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof NotificationMsg)) return false;
    NotificationMsg o = (NotificationMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(timeMs, o.timeMs)
        && Internal.equals(msgType, o.msgType)
        && Internal.equals(roomID, o.roomID)
        && Internal.equals(no, o.no)
        && Internal.equals(posType, o.posType)
        && Internal.equals(sender, o.sender)
        && Internal.equals(followMsg, o.followMsg)
        && Internal.equals(inviteStandMsg, o.inviteStandMsg)
        && Internal.equals(sysWarningMsg, o.sysWarningMsg)
        && Internal.equals(sendInviteUserMsg, o.sendInviteUserMsg)
        && Internal.equals(syncInviteUserMsg, o.syncInviteUserMsg)
        && Internal.equals(startCombineRoomByMatchMsg, o.startCombineRoomByMatchMsg);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (timeMs != null ? timeMs.hashCode() : 0);
      result = result * 37 + (msgType != null ? msgType.hashCode() : 0);
      result = result * 37 + (roomID != null ? roomID.hashCode() : 0);
      result = result * 37 + (no != null ? no.hashCode() : 0);
      result = result * 37 + (posType != null ? posType.hashCode() : 0);
      result = result * 37 + (sender != null ? sender.hashCode() : 0);
      result = result * 37 + (followMsg != null ? followMsg.hashCode() : 0);
      result = result * 37 + (inviteStandMsg != null ? inviteStandMsg.hashCode() : 0);
      result = result * 37 + (sysWarningMsg != null ? sysWarningMsg.hashCode() : 0);
      result = result * 37 + (sendInviteUserMsg != null ? sendInviteUserMsg.hashCode() : 0);
      result = result * 37 + (syncInviteUserMsg != null ? syncInviteUserMsg.hashCode() : 0);
      result = result * 37 + (startCombineRoomByMatchMsg != null ? startCombineRoomByMatchMsg.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (timeMs != null) builder.append(", timeMs=").append(timeMs);
    if (msgType != null) builder.append(", msgType=").append(msgType);
    if (roomID != null) builder.append(", roomID=").append(roomID);
    if (no != null) builder.append(", no=").append(no);
    if (posType != null) builder.append(", posType=").append(posType);
    if (sender != null) builder.append(", sender=").append(sender);
    if (followMsg != null) builder.append(", followMsg=").append(followMsg);
    if (inviteStandMsg != null) builder.append(", inviteStandMsg=").append(inviteStandMsg);
    if (sysWarningMsg != null) builder.append(", sysWarningMsg=").append(sysWarningMsg);
    if (sendInviteUserMsg != null) builder.append(", sendInviteUserMsg=").append(sendInviteUserMsg);
    if (syncInviteUserMsg != null) builder.append(", syncInviteUserMsg=").append(syncInviteUserMsg);
    if (startCombineRoomByMatchMsg != null) builder.append(", startCombineRoomByMatchMsg=").append(startCombineRoomByMatchMsg);
    return builder.replace(0, 2, "NotificationMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return NotificationMsg.ADAPTER.encode(this);
  }

  public static final NotificationMsg parseFrom(byte[] data) throws IOException {
    NotificationMsg c = null;
       c = NotificationMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 消息产生时间，单位毫秒
   */
  public Long getTimeMs() {
    if(timeMs==null){
        return DEFAULT_TIMEMS;
    }
    return timeMs;
  }

  /**
   * 消息类型
   */
  public ENotificationMsgType getMsgType() {
    if(msgType==null){
        return new ENotificationMsgType.Builder().build();
    }
    return msgType;
  }

  /**
   * 房间ID,若不需要为0
   */
  public Integer getRoomID() {
    if(roomID==null){
        return DEFAULT_ROOMID;
    }
    return roomID;
  }

  /**
   * 消息序号
   */
  public Long getNo() {
    if(no==null){
        return DEFAULT_NO;
    }
    return no;
  }

  /**
   * 消息显示位置类型
   */
  public EMsgPosType getPosType() {
    if(posType==null){
        return new EMsgPosType.Builder().build();
    }
    return posType;
  }

  /**
   * 发送者简要信息
   */
  public UserInfo getSender() {
    if(sender==null){
        return new UserInfo.Builder().build();
    }
    return sender;
  }

  public FollowMsg getFollowMsg() {
    if(followMsg==null){
        return new FollowMsg.Builder().build();
    }
    return followMsg;
  }

  public InviteStandMsg getInviteStandMsg() {
    if(inviteStandMsg==null){
        return new InviteStandMsg.Builder().build();
    }
    return inviteStandMsg;
  }

  public SysWarningMsg getSysWarningMsg() {
    if(sysWarningMsg==null){
        return new SysWarningMsg.Builder().build();
    }
    return sysWarningMsg;
  }

  /**
   * 发送邀请请求
   */
  public CombineRoomSendInviteUserMsg getSendInviteUserMsg() {
    if(sendInviteUserMsg==null){
        return new CombineRoomSendInviteUserMsg.Builder().build();
    }
    return sendInviteUserMsg;
  }

  /**
   * 同步邀请结果
   */
  public CombineRoomSyncInviteUserMsg getSyncInviteUserMsg() {
    if(syncInviteUserMsg==null){
        return new CombineRoomSyncInviteUserMsg.Builder().build();
    }
    return syncInviteUserMsg;
  }

  /**
   * 通过匹配开始双人房
   */
  public StartCombineRoomByMatchMsg getStartCombineRoomByMatchMsg() {
    if(startCombineRoomByMatchMsg==null){
        return new StartCombineRoomByMatchMsg.Builder().build();
    }
    return startCombineRoomByMatchMsg;
  }

  /**
   * 消息产生时间，单位毫秒
   */
  public boolean hasTimeMs() {
    return timeMs!=null;
  }

  /**
   * 消息类型
   */
  public boolean hasMsgType() {
    return msgType!=null;
  }

  /**
   * 房间ID,若不需要为0
   */
  public boolean hasRoomID() {
    return roomID!=null;
  }

  /**
   * 消息序号
   */
  public boolean hasNo() {
    return no!=null;
  }

  /**
   * 消息显示位置类型
   */
  public boolean hasPosType() {
    return posType!=null;
  }

  /**
   * 发送者简要信息
   */
  public boolean hasSender() {
    return sender!=null;
  }

  public boolean hasFollowMsg() {
    return followMsg!=null;
  }

  public boolean hasInviteStandMsg() {
    return inviteStandMsg!=null;
  }

  public boolean hasSysWarningMsg() {
    return sysWarningMsg!=null;
  }

  /**
   * 发送邀请请求
   */
  public boolean hasSendInviteUserMsg() {
    return sendInviteUserMsg!=null;
  }

  /**
   * 同步邀请结果
   */
  public boolean hasSyncInviteUserMsg() {
    return syncInviteUserMsg!=null;
  }

  /**
   * 通过匹配开始双人房
   */
  public boolean hasStartCombineRoomByMatchMsg() {
    return startCombineRoomByMatchMsg!=null;
  }

  public static final class Builder extends Message.Builder<NotificationMsg, Builder> {
    private Long timeMs;

    private ENotificationMsgType msgType;

    private Integer roomID;

    private Long no;

    private EMsgPosType posType;

    private UserInfo sender;

    private FollowMsg followMsg;

    private InviteStandMsg inviteStandMsg;

    private SysWarningMsg sysWarningMsg;

    private CombineRoomSendInviteUserMsg sendInviteUserMsg;

    private CombineRoomSyncInviteUserMsg syncInviteUserMsg;

    private StartCombineRoomByMatchMsg startCombineRoomByMatchMsg;

    public Builder() {
    }

    /**
     * 消息产生时间，单位毫秒
     */
    public Builder setTimeMs(Long timeMs) {
      this.timeMs = timeMs;
      return this;
    }

    /**
     * 消息类型
     */
    public Builder setMsgType(ENotificationMsgType msgType) {
      this.msgType = msgType;
      return this;
    }

    /**
     * 房间ID,若不需要为0
     */
    public Builder setRoomID(Integer roomID) {
      this.roomID = roomID;
      return this;
    }

    /**
     * 消息序号
     */
    public Builder setNo(Long no) {
      this.no = no;
      return this;
    }

    /**
     * 消息显示位置类型
     */
    public Builder setPosType(EMsgPosType posType) {
      this.posType = posType;
      return this;
    }

    /**
     * 发送者简要信息
     */
    public Builder setSender(UserInfo sender) {
      this.sender = sender;
      return this;
    }

    public Builder setFollowMsg(FollowMsg followMsg) {
      this.followMsg = followMsg;
      return this;
    }

    public Builder setInviteStandMsg(InviteStandMsg inviteStandMsg) {
      this.inviteStandMsg = inviteStandMsg;
      return this;
    }

    public Builder setSysWarningMsg(SysWarningMsg sysWarningMsg) {
      this.sysWarningMsg = sysWarningMsg;
      return this;
    }

    /**
     * 发送邀请请求
     */
    public Builder setSendInviteUserMsg(CombineRoomSendInviteUserMsg sendInviteUserMsg) {
      this.sendInviteUserMsg = sendInviteUserMsg;
      return this;
    }

    /**
     * 同步邀请结果
     */
    public Builder setSyncInviteUserMsg(CombineRoomSyncInviteUserMsg syncInviteUserMsg) {
      this.syncInviteUserMsg = syncInviteUserMsg;
      return this;
    }

    /**
     * 通过匹配开始双人房
     */
    public Builder setStartCombineRoomByMatchMsg(
        StartCombineRoomByMatchMsg startCombineRoomByMatchMsg) {
      this.startCombineRoomByMatchMsg = startCombineRoomByMatchMsg;
      return this;
    }

    @Override
    public NotificationMsg build() {
      return new NotificationMsg(timeMs, msgType, roomID, no, posType, sender, followMsg, inviteStandMsg, sysWarningMsg, sendInviteUserMsg, syncInviteUserMsg, startCombineRoomByMatchMsg, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_NotificationMsg extends ProtoAdapter<NotificationMsg> {
    public ProtoAdapter_NotificationMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, NotificationMsg.class);
    }

    @Override
    public int encodedSize(NotificationMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.timeMs)
          + ENotificationMsgType.ADAPTER.encodedSizeWithTag(2, value.msgType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.roomID)
          + ProtoAdapter.SINT64.encodedSizeWithTag(4, value.no)
          + EMsgPosType.ADAPTER.encodedSizeWithTag(5, value.posType)
          + UserInfo.ADAPTER.encodedSizeWithTag(6, value.sender)
          + FollowMsg.ADAPTER.encodedSizeWithTag(10, value.followMsg)
          + InviteStandMsg.ADAPTER.encodedSizeWithTag(11, value.inviteStandMsg)
          + SysWarningMsg.ADAPTER.encodedSizeWithTag(12, value.sysWarningMsg)
          + CombineRoomSendInviteUserMsg.ADAPTER.encodedSizeWithTag(13, value.sendInviteUserMsg)
          + CombineRoomSyncInviteUserMsg.ADAPTER.encodedSizeWithTag(14, value.syncInviteUserMsg)
          + StartCombineRoomByMatchMsg.ADAPTER.encodedSizeWithTag(15, value.startCombineRoomByMatchMsg)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, NotificationMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.timeMs);
      ENotificationMsgType.ADAPTER.encodeWithTag(writer, 2, value.msgType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.roomID);
      ProtoAdapter.SINT64.encodeWithTag(writer, 4, value.no);
      EMsgPosType.ADAPTER.encodeWithTag(writer, 5, value.posType);
      UserInfo.ADAPTER.encodeWithTag(writer, 6, value.sender);
      FollowMsg.ADAPTER.encodeWithTag(writer, 10, value.followMsg);
      InviteStandMsg.ADAPTER.encodeWithTag(writer, 11, value.inviteStandMsg);
      SysWarningMsg.ADAPTER.encodeWithTag(writer, 12, value.sysWarningMsg);
      CombineRoomSendInviteUserMsg.ADAPTER.encodeWithTag(writer, 13, value.sendInviteUserMsg);
      CombineRoomSyncInviteUserMsg.ADAPTER.encodeWithTag(writer, 14, value.syncInviteUserMsg);
      StartCombineRoomByMatchMsg.ADAPTER.encodeWithTag(writer, 15, value.startCombineRoomByMatchMsg);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public NotificationMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: {
            try {
              builder.setMsgType(ENotificationMsgType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setRoomID(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setNo(ProtoAdapter.SINT64.decode(reader)); break;
          case 5: {
            try {
              builder.setPosType(EMsgPosType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 6: builder.setSender(UserInfo.ADAPTER.decode(reader)); break;
          case 10: builder.setFollowMsg(FollowMsg.ADAPTER.decode(reader)); break;
          case 11: builder.setInviteStandMsg(InviteStandMsg.ADAPTER.decode(reader)); break;
          case 12: builder.setSysWarningMsg(SysWarningMsg.ADAPTER.decode(reader)); break;
          case 13: builder.setSendInviteUserMsg(CombineRoomSendInviteUserMsg.ADAPTER.decode(reader)); break;
          case 14: builder.setSyncInviteUserMsg(CombineRoomSyncInviteUserMsg.ADAPTER.decode(reader)); break;
          case 15: builder.setStartCombineRoomByMatchMsg(StartCombineRoomByMatchMsg.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public NotificationMsg redact(NotificationMsg value) {
      Builder builder = value.newBuilder();
      if (builder.sender != null) builder.sender = UserInfo.ADAPTER.redact(builder.sender);
      if (builder.followMsg != null) builder.followMsg = FollowMsg.ADAPTER.redact(builder.followMsg);
      if (builder.inviteStandMsg != null) builder.inviteStandMsg = InviteStandMsg.ADAPTER.redact(builder.inviteStandMsg);
      if (builder.sysWarningMsg != null) builder.sysWarningMsg = SysWarningMsg.ADAPTER.redact(builder.sysWarningMsg);
      if (builder.sendInviteUserMsg != null) builder.sendInviteUserMsg = CombineRoomSendInviteUserMsg.ADAPTER.redact(builder.sendInviteUserMsg);
      if (builder.syncInviteUserMsg != null) builder.syncInviteUserMsg = CombineRoomSyncInviteUserMsg.ADAPTER.redact(builder.syncInviteUserMsg);
      if (builder.startCombineRoomByMatchMsg != null) builder.startCombineRoomByMatchMsg = StartCombineRoomByMatchMsg.ADAPTER.redact(builder.startCombineRoomByMatchMsg);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
