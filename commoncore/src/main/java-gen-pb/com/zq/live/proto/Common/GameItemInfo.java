// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Common.proto
package com.zq.live.proto.Common;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class GameItemInfo extends Message<GameItemInfo, GameItemInfo.Builder> {
  public static final ProtoAdapter<GameItemInfo> ADAPTER = new ProtoAdapter_GameItemInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ITEMID = 0;

  public static final String DEFAULT_ITEMDESC = "";

  /**
   * 游戏id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer itemID;

  /**
   * 游戏描述
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String itemDesc;

  public GameItemInfo(Integer itemID, String itemDesc) {
    this(itemID, itemDesc, ByteString.EMPTY);
  }

  public GameItemInfo(Integer itemID, String itemDesc, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.itemID = itemID;
    this.itemDesc = itemDesc;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.itemID = itemID;
    builder.itemDesc = itemDesc;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GameItemInfo)) return false;
    GameItemInfo o = (GameItemInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(itemID, o.itemID)
        && Internal.equals(itemDesc, o.itemDesc);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (itemID != null ? itemID.hashCode() : 0);
      result = result * 37 + (itemDesc != null ? itemDesc.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (itemID != null) builder.append(", itemID=").append(itemID);
    if (itemDesc != null) builder.append(", itemDesc=").append(itemDesc);
    return builder.replace(0, 2, "GameItemInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GameItemInfo.ADAPTER.encode(this);
  }

  public static final GameItemInfo parseFrom(byte[] data) throws IOException {
    GameItemInfo c = null;
       c = GameItemInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 游戏id
   */
  public Integer getItemID() {
    if(itemID==null){
        return DEFAULT_ITEMID;
    }
    return itemID;
  }

  /**
   * 游戏描述
   */
  public String getItemDesc() {
    if(itemDesc==null){
        return DEFAULT_ITEMDESC;
    }
    return itemDesc;
  }

  /**
   * 游戏id
   */
  public boolean hasItemID() {
    return itemID!=null;
  }

  /**
   * 游戏描述
   */
  public boolean hasItemDesc() {
    return itemDesc!=null;
  }

  public static final class Builder extends Message.Builder<GameItemInfo, Builder> {
    private Integer itemID;

    private String itemDesc;

    public Builder() {
    }

    /**
     * 游戏id
     */
    public Builder setItemID(Integer itemID) {
      this.itemID = itemID;
      return this;
    }

    /**
     * 游戏描述
     */
    public Builder setItemDesc(String itemDesc) {
      this.itemDesc = itemDesc;
      return this;
    }

    @Override
    public GameItemInfo build() {
      return new GameItemInfo(itemID, itemDesc, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GameItemInfo extends ProtoAdapter<GameItemInfo> {
    public ProtoAdapter_GameItemInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, GameItemInfo.class);
    }

    @Override
    public int encodedSize(GameItemInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.itemID)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.itemDesc)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GameItemInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.itemID);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.itemDesc);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GameItemInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setItemID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setItemDesc(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GameItemInfo redact(GameItemInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
