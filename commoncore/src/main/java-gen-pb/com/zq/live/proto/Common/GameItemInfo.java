// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Common.proto
package com.zq.live.proto.Common;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class GameItemInfo extends Message<GameItemInfo, GameItemInfo.Builder> {
  public static final ProtoAdapter<GameItemInfo> ADAPTER = new ProtoAdapter_GameItemInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ITEMID = 0;

  public static final EGameType DEFAULT_GAMETYPE = EGameType.GT_Unknown;

  public static final String DEFAULT_DESC = "";

  /**
   * 游戏id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer itemID;

  /**
   * 游戏类型
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.Common.EGameType#ADAPTER"
  )
  private final EGameType gameType;

  /**
   * 描述说明
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String desc;

  /**
   * 音乐类游戏数据
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.Common.GameMusic#ADAPTER"
  )
  private final GameMusic music;

  /**
   * 问答类游戏数据
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Common.GameQuestion#ADAPTER"
  )
  private final GameQuestion question;

  public GameItemInfo(Integer itemID, EGameType gameType, String desc, GameMusic music,
      GameQuestion question) {
    this(itemID, gameType, desc, music, question, ByteString.EMPTY);
  }

  public GameItemInfo(Integer itemID, EGameType gameType, String desc, GameMusic music,
      GameQuestion question, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.itemID = itemID;
    this.gameType = gameType;
    this.desc = desc;
    this.music = music;
    this.question = question;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.itemID = itemID;
    builder.gameType = gameType;
    builder.desc = desc;
    builder.music = music;
    builder.question = question;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GameItemInfo)) return false;
    GameItemInfo o = (GameItemInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(itemID, o.itemID)
        && Internal.equals(gameType, o.gameType)
        && Internal.equals(desc, o.desc)
        && Internal.equals(music, o.music)
        && Internal.equals(question, o.question);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (itemID != null ? itemID.hashCode() : 0);
      result = result * 37 + (gameType != null ? gameType.hashCode() : 0);
      result = result * 37 + (desc != null ? desc.hashCode() : 0);
      result = result * 37 + (music != null ? music.hashCode() : 0);
      result = result * 37 + (question != null ? question.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (itemID != null) builder.append(", itemID=").append(itemID);
    if (gameType != null) builder.append(", gameType=").append(gameType);
    if (desc != null) builder.append(", desc=").append(desc);
    if (music != null) builder.append(", music=").append(music);
    if (question != null) builder.append(", question=").append(question);
    return builder.replace(0, 2, "GameItemInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GameItemInfo.ADAPTER.encode(this);
  }

  public static final GameItemInfo parseFrom(byte[] data) throws IOException {
    GameItemInfo c = null;
       c = GameItemInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 游戏id
   */
  public Integer getItemID() {
    if(itemID==null){
        return DEFAULT_ITEMID;
    }
    return itemID;
  }

  /**
   * 游戏类型
   */
  public EGameType getGameType() {
    if(gameType==null){
        return new EGameType.Builder().build();
    }
    return gameType;
  }

  /**
   * 描述说明
   */
  public String getDesc() {
    if(desc==null){
        return DEFAULT_DESC;
    }
    return desc;
  }

  /**
   * 音乐类游戏数据
   */
  public GameMusic getMusic() {
    if(music==null){
        return new GameMusic.Builder().build();
    }
    return music;
  }

  /**
   * 问答类游戏数据
   */
  public GameQuestion getQuestion() {
    if(question==null){
        return new GameQuestion.Builder().build();
    }
    return question;
  }

  /**
   * 游戏id
   */
  public boolean hasItemID() {
    return itemID!=null;
  }

  /**
   * 游戏类型
   */
  public boolean hasGameType() {
    return gameType!=null;
  }

  /**
   * 描述说明
   */
  public boolean hasDesc() {
    return desc!=null;
  }

  /**
   * 音乐类游戏数据
   */
  public boolean hasMusic() {
    return music!=null;
  }

  /**
   * 问答类游戏数据
   */
  public boolean hasQuestion() {
    return question!=null;
  }

  public static final class Builder extends Message.Builder<GameItemInfo, Builder> {
    private Integer itemID;

    private EGameType gameType;

    private String desc;

    private GameMusic music;

    private GameQuestion question;

    public Builder() {
    }

    /**
     * 游戏id
     */
    public Builder setItemID(Integer itemID) {
      this.itemID = itemID;
      return this;
    }

    /**
     * 游戏类型
     */
    public Builder setGameType(EGameType gameType) {
      this.gameType = gameType;
      return this;
    }

    /**
     * 描述说明
     */
    public Builder setDesc(String desc) {
      this.desc = desc;
      return this;
    }

    /**
     * 音乐类游戏数据
     */
    public Builder setMusic(GameMusic music) {
      this.music = music;
      return this;
    }

    /**
     * 问答类游戏数据
     */
    public Builder setQuestion(GameQuestion question) {
      this.question = question;
      return this;
    }

    @Override
    public GameItemInfo build() {
      return new GameItemInfo(itemID, gameType, desc, music, question, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GameItemInfo extends ProtoAdapter<GameItemInfo> {
    public ProtoAdapter_GameItemInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, GameItemInfo.class);
    }

    @Override
    public int encodedSize(GameItemInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.itemID)
          + EGameType.ADAPTER.encodedSizeWithTag(2, value.gameType)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.desc)
          + GameMusic.ADAPTER.encodedSizeWithTag(4, value.music)
          + GameQuestion.ADAPTER.encodedSizeWithTag(5, value.question)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GameItemInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.itemID);
      EGameType.ADAPTER.encodeWithTag(writer, 2, value.gameType);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.desc);
      GameMusic.ADAPTER.encodeWithTag(writer, 4, value.music);
      GameQuestion.ADAPTER.encodeWithTag(writer, 5, value.question);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GameItemInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setItemID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: {
            try {
              builder.setGameType(EGameType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setMusic(GameMusic.ADAPTER.decode(reader)); break;
          case 5: builder.setQuestion(GameQuestion.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GameItemInfo redact(GameItemInfo value) {
      Builder builder = value.newBuilder();
      if (builder.music != null) builder.music = GameMusic.ADAPTER.redact(builder.music);
      if (builder.question != null) builder.question = GameQuestion.ADAPTER.redact(builder.question);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
