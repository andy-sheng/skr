// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Notification.proto
package com.zq.live.proto.Notification;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.AgoraTokenInfo;
import com.zq.live.proto.Common.BackgroundShowInfo;
import com.zq.live.proto.Common.RelayRoomConfig;
import com.zq.live.proto.Common.UserInfo;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class RelayRoomEnterMsg extends Message<RelayRoomEnterMsg, RelayRoomEnterMsg.Builder> {
  public static final ProtoAdapter<RelayRoomEnterMsg> ADAPTER = new ProtoAdapter_RelayRoomEnterMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ROOMID = 0;

  public static final Long DEFAULT_CREATEDTIMEMS = 0L;

  public static final Boolean DEFAULT_ENABLENOLIMITDURATION = false;

  public static final ByteString DEFAULT_CURRENTROUND = ByteString.EMPTY;

  public static final ERInviteType DEFAULT_INVITETYPE = ERInviteType.RIT_UNKNOWN;

  /**
   * 房间ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roomID;

  /**
   * 房间创建的时间戳
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long createdTimeMs;

  /**
   * 玩家信息
   */
  @WireField(
      tag = 3,
      adapter = "com.zq.live.proto.Common.UserInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<UserInfo> users;

  /**
   * 配置信息
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.Common.RelayRoomConfig#ADAPTER"
  )
  private final RelayRoomConfig config;

  /**
   * 声网token
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Common.AgoraTokenInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<AgoraTokenInfo> tokens;

  /**
   * 用户锁定信息
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.REPEATED
  )
  private final List<ByteString> userLockInfo;

  /**
   * 开启没有限制的持续时间
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean enableNoLimitDuration;

  /**
   * 当前轮次信息
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  private final ByteString currentRound;

  /**
   * 背景效果
   */
  @WireField(
      tag = 9,
      adapter = "com.zq.live.proto.Common.BackgroundShowInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<BackgroundShowInfo> showInfos;

  /**
   * 邀请进房类型
   */
  @WireField(
      tag = 10,
      adapter = "com.zq.live.proto.Notification.ERInviteType#ADAPTER"
  )
  private final ERInviteType inviteType;

  public RelayRoomEnterMsg(Integer roomID, Long createdTimeMs, List<UserInfo> users,
      RelayRoomConfig config, List<AgoraTokenInfo> tokens, List<ByteString> userLockInfo,
      Boolean enableNoLimitDuration, ByteString currentRound, List<BackgroundShowInfo> showInfos,
      ERInviteType inviteType) {
    this(roomID, createdTimeMs, users, config, tokens, userLockInfo, enableNoLimitDuration, currentRound, showInfos, inviteType, ByteString.EMPTY);
  }

  public RelayRoomEnterMsg(Integer roomID, Long createdTimeMs, List<UserInfo> users,
      RelayRoomConfig config, List<AgoraTokenInfo> tokens, List<ByteString> userLockInfo,
      Boolean enableNoLimitDuration, ByteString currentRound, List<BackgroundShowInfo> showInfos,
      ERInviteType inviteType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roomID = roomID;
    this.createdTimeMs = createdTimeMs;
    this.users = Internal.immutableCopyOf("users", users);
    this.config = config;
    this.tokens = Internal.immutableCopyOf("tokens", tokens);
    this.userLockInfo = Internal.immutableCopyOf("userLockInfo", userLockInfo);
    this.enableNoLimitDuration = enableNoLimitDuration;
    this.currentRound = currentRound;
    this.showInfos = Internal.immutableCopyOf("showInfos", showInfos);
    this.inviteType = inviteType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roomID = roomID;
    builder.createdTimeMs = createdTimeMs;
    builder.users = Internal.copyOf("users", users);
    builder.config = config;
    builder.tokens = Internal.copyOf("tokens", tokens);
    builder.userLockInfo = Internal.copyOf("userLockInfo", userLockInfo);
    builder.enableNoLimitDuration = enableNoLimitDuration;
    builder.currentRound = currentRound;
    builder.showInfos = Internal.copyOf("showInfos", showInfos);
    builder.inviteType = inviteType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RelayRoomEnterMsg)) return false;
    RelayRoomEnterMsg o = (RelayRoomEnterMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roomID, o.roomID)
        && Internal.equals(createdTimeMs, o.createdTimeMs)
        && users.equals(o.users)
        && Internal.equals(config, o.config)
        && tokens.equals(o.tokens)
        && userLockInfo.equals(o.userLockInfo)
        && Internal.equals(enableNoLimitDuration, o.enableNoLimitDuration)
        && Internal.equals(currentRound, o.currentRound)
        && showInfos.equals(o.showInfos)
        && Internal.equals(inviteType, o.inviteType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roomID != null ? roomID.hashCode() : 0);
      result = result * 37 + (createdTimeMs != null ? createdTimeMs.hashCode() : 0);
      result = result * 37 + users.hashCode();
      result = result * 37 + (config != null ? config.hashCode() : 0);
      result = result * 37 + tokens.hashCode();
      result = result * 37 + userLockInfo.hashCode();
      result = result * 37 + (enableNoLimitDuration != null ? enableNoLimitDuration.hashCode() : 0);
      result = result * 37 + (currentRound != null ? currentRound.hashCode() : 0);
      result = result * 37 + showInfos.hashCode();
      result = result * 37 + (inviteType != null ? inviteType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roomID != null) builder.append(", roomID=").append(roomID);
    if (createdTimeMs != null) builder.append(", createdTimeMs=").append(createdTimeMs);
    if (!users.isEmpty()) builder.append(", users=").append(users);
    if (config != null) builder.append(", config=").append(config);
    if (!tokens.isEmpty()) builder.append(", tokens=").append(tokens);
    if (!userLockInfo.isEmpty()) builder.append(", userLockInfo=").append(userLockInfo);
    if (enableNoLimitDuration != null) builder.append(", enableNoLimitDuration=").append(enableNoLimitDuration);
    if (currentRound != null) builder.append(", currentRound=").append(currentRound);
    if (!showInfos.isEmpty()) builder.append(", showInfos=").append(showInfos);
    if (inviteType != null) builder.append(", inviteType=").append(inviteType);
    return builder.replace(0, 2, "RelayRoomEnterMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RelayRoomEnterMsg.ADAPTER.encode(this);
  }

  public static final RelayRoomEnterMsg parseFrom(byte[] data) throws IOException {
    RelayRoomEnterMsg c = null;
       c = RelayRoomEnterMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 房间ID
   */
  public Integer getRoomID() {
    if(roomID==null){
        return DEFAULT_ROOMID;
    }
    return roomID;
  }

  /**
   * 房间创建的时间戳
   */
  public Long getCreatedTimeMs() {
    if(createdTimeMs==null){
        return DEFAULT_CREATEDTIMEMS;
    }
    return createdTimeMs;
  }

  /**
   * 玩家信息
   */
  public List<UserInfo> getUsersList() {
    if(users==null){
        return new java.util.ArrayList<UserInfo>();
    }
    return users;
  }

  /**
   * 配置信息
   */
  public RelayRoomConfig getConfig() {
    if(config==null){
        return new RelayRoomConfig.Builder().build();
    }
    return config;
  }

  /**
   * 声网token
   */
  public List<AgoraTokenInfo> getTokensList() {
    if(tokens==null){
        return new java.util.ArrayList<AgoraTokenInfo>();
    }
    return tokens;
  }

  /**
   * 用户锁定信息
   */
  public List<ByteString> getUserLockInfoList() {
    if(userLockInfo==null){
        return new java.util.ArrayList<ByteString>();
    }
    return userLockInfo;
  }

  /**
   * 开启没有限制的持续时间
   */
  public Boolean getEnableNoLimitDuration() {
    if(enableNoLimitDuration==null){
        return DEFAULT_ENABLENOLIMITDURATION;
    }
    return enableNoLimitDuration;
  }

  /**
   * 当前轮次信息
   */
  public ByteString getCurrentRound() {
    if(currentRound==null){
        return ByteString.of(new byte[0]);
    }
    return currentRound;
  }

  /**
   * 背景效果
   */
  public List<BackgroundShowInfo> getShowInfosList() {
    if(showInfos==null){
        return new java.util.ArrayList<BackgroundShowInfo>();
    }
    return showInfos;
  }

  /**
   * 邀请进房类型
   */
  public ERInviteType getInviteType() {
    if(inviteType==null){
        return new ERInviteType.Builder().build();
    }
    return inviteType;
  }

  /**
   * 房间ID
   */
  public boolean hasRoomID() {
    return roomID!=null;
  }

  /**
   * 房间创建的时间戳
   */
  public boolean hasCreatedTimeMs() {
    return createdTimeMs!=null;
  }

  /**
   * 玩家信息
   */
  public boolean hasUsersList() {
    return users!=null;
  }

  /**
   * 配置信息
   */
  public boolean hasConfig() {
    return config!=null;
  }

  /**
   * 声网token
   */
  public boolean hasTokensList() {
    return tokens!=null;
  }

  /**
   * 用户锁定信息
   */
  public boolean hasUserLockInfoList() {
    return userLockInfo!=null;
  }

  /**
   * 开启没有限制的持续时间
   */
  public boolean hasEnableNoLimitDuration() {
    return enableNoLimitDuration!=null;
  }

  /**
   * 当前轮次信息
   */
  public boolean hasCurrentRound() {
    return currentRound!=null;
  }

  /**
   * 背景效果
   */
  public boolean hasShowInfosList() {
    return showInfos!=null;
  }

  /**
   * 邀请进房类型
   */
  public boolean hasInviteType() {
    return inviteType!=null;
  }

  public static final class Builder extends Message.Builder<RelayRoomEnterMsg, Builder> {
    private Integer roomID;

    private Long createdTimeMs;

    private List<UserInfo> users;

    private RelayRoomConfig config;

    private List<AgoraTokenInfo> tokens;

    private List<ByteString> userLockInfo;

    private Boolean enableNoLimitDuration;

    private ByteString currentRound;

    private List<BackgroundShowInfo> showInfos;

    private ERInviteType inviteType;

    public Builder() {
      users = Internal.newMutableList();
      tokens = Internal.newMutableList();
      userLockInfo = Internal.newMutableList();
      showInfos = Internal.newMutableList();
    }

    /**
     * 房间ID
     */
    public Builder setRoomID(Integer roomID) {
      this.roomID = roomID;
      return this;
    }

    /**
     * 房间创建的时间戳
     */
    public Builder setCreatedTimeMs(Long createdTimeMs) {
      this.createdTimeMs = createdTimeMs;
      return this;
    }

    /**
     * 玩家信息
     */
    public Builder addAllUsers(List<UserInfo> users) {
      Internal.checkElementsNotNull(users);
      this.users = users;
      return this;
    }

    /**
     * 配置信息
     */
    public Builder setConfig(RelayRoomConfig config) {
      this.config = config;
      return this;
    }

    /**
     * 声网token
     */
    public Builder addAllTokens(List<AgoraTokenInfo> tokens) {
      Internal.checkElementsNotNull(tokens);
      this.tokens = tokens;
      return this;
    }

    /**
     * 用户锁定信息
     */
    public Builder addAllUserLockInfo(List<ByteString> userLockInfo) {
      Internal.checkElementsNotNull(userLockInfo);
      this.userLockInfo = userLockInfo;
      return this;
    }

    /**
     * 开启没有限制的持续时间
     */
    public Builder setEnableNoLimitDuration(Boolean enableNoLimitDuration) {
      this.enableNoLimitDuration = enableNoLimitDuration;
      return this;
    }

    /**
     * 当前轮次信息
     */
    public Builder setCurrentRound(ByteString currentRound) {
      this.currentRound = currentRound;
      return this;
    }

    /**
     * 背景效果
     */
    public Builder addAllShowInfos(List<BackgroundShowInfo> showInfos) {
      Internal.checkElementsNotNull(showInfos);
      this.showInfos = showInfos;
      return this;
    }

    /**
     * 邀请进房类型
     */
    public Builder setInviteType(ERInviteType inviteType) {
      this.inviteType = inviteType;
      return this;
    }

    @Override
    public RelayRoomEnterMsg build() {
      return new RelayRoomEnterMsg(roomID, createdTimeMs, users, config, tokens, userLockInfo, enableNoLimitDuration, currentRound, showInfos, inviteType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RelayRoomEnterMsg extends ProtoAdapter<RelayRoomEnterMsg> {
    public ProtoAdapter_RelayRoomEnterMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, RelayRoomEnterMsg.class);
    }

    @Override
    public int encodedSize(RelayRoomEnterMsg value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.roomID)
          + ProtoAdapter.SINT64.encodedSizeWithTag(2, value.createdTimeMs)
          + UserInfo.ADAPTER.asRepeated().encodedSizeWithTag(3, value.users)
          + RelayRoomConfig.ADAPTER.encodedSizeWithTag(4, value.config)
          + AgoraTokenInfo.ADAPTER.asRepeated().encodedSizeWithTag(5, value.tokens)
          + ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(6, value.userLockInfo)
          + ProtoAdapter.BOOL.encodedSizeWithTag(7, value.enableNoLimitDuration)
          + ProtoAdapter.BYTES.encodedSizeWithTag(8, value.currentRound)
          + BackgroundShowInfo.ADAPTER.asRepeated().encodedSizeWithTag(9, value.showInfos)
          + ERInviteType.ADAPTER.encodedSizeWithTag(10, value.inviteType)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RelayRoomEnterMsg value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.roomID);
      ProtoAdapter.SINT64.encodeWithTag(writer, 2, value.createdTimeMs);
      UserInfo.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.users);
      RelayRoomConfig.ADAPTER.encodeWithTag(writer, 4, value.config);
      AgoraTokenInfo.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.tokens);
      ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 6, value.userLockInfo);
      ProtoAdapter.BOOL.encodeWithTag(writer, 7, value.enableNoLimitDuration);
      ProtoAdapter.BYTES.encodeWithTag(writer, 8, value.currentRound);
      BackgroundShowInfo.ADAPTER.asRepeated().encodeWithTag(writer, 9, value.showInfos);
      ERInviteType.ADAPTER.encodeWithTag(writer, 10, value.inviteType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RelayRoomEnterMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoomID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setCreatedTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 3: builder.users.add(UserInfo.ADAPTER.decode(reader)); break;
          case 4: builder.setConfig(RelayRoomConfig.ADAPTER.decode(reader)); break;
          case 5: builder.tokens.add(AgoraTokenInfo.ADAPTER.decode(reader)); break;
          case 6: builder.userLockInfo.add(ProtoAdapter.BYTES.decode(reader)); break;
          case 7: builder.setEnableNoLimitDuration(ProtoAdapter.BOOL.decode(reader)); break;
          case 8: builder.setCurrentRound(ProtoAdapter.BYTES.decode(reader)); break;
          case 9: builder.showInfos.add(BackgroundShowInfo.ADAPTER.decode(reader)); break;
          case 10: {
            try {
              builder.setInviteType(ERInviteType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RelayRoomEnterMsg redact(RelayRoomEnterMsg value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.users, UserInfo.ADAPTER);
      if (builder.config != null) builder.config = RelayRoomConfig.ADAPTER.redact(builder.config);
      Internal.redactElements(builder.tokens, AgoraTokenInfo.ADAPTER);
      Internal.redactElements(builder.showInfos, BackgroundShowInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
