// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Common.proto
package com.zq.live.proto.Common;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 家族信息
 */
public final class ClubInfo extends Message<ClubInfo, ClubInfo.Builder> {
  public static final ProtoAdapter<ClubInfo> ADAPTER = new ProtoAdapter_ClubInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_CLUBID = 0;

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_LOGO = "";

  public static final String DEFAULT_DESC = "";

  public static final String DEFAULT_NOTICE = "";

  public static final Integer DEFAULT_MEMBERCNT = 0;

  public static final Integer DEFAULT_HOT = 0;

  public static final Integer DEFAULT_LEVEL = 0;

  public static final String DEFAULT_LEVELDESC = "";

  /**
   * 家族ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer clubID;

  /**
   * 家族名字
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String name;

  /**
   * 家族标志
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String logo;

  /**
   * 家族简介
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String desc;

  /**
   * 家族公告
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String notice;

  /**
   * 家族人数
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer memberCnt;

  /**
   * 人气
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer hot;

  /**
   * 家族等级
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer level;

  /**
   * 家族等级描述
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String levelDesc;

  public ClubInfo(Integer clubID, String name, String logo, String desc, String notice,
      Integer memberCnt, Integer hot, Integer level, String levelDesc) {
    this(clubID, name, logo, desc, notice, memberCnt, hot, level, levelDesc, ByteString.EMPTY);
  }

  public ClubInfo(Integer clubID, String name, String logo, String desc, String notice,
      Integer memberCnt, Integer hot, Integer level, String levelDesc, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.clubID = clubID;
    this.name = name;
    this.logo = logo;
    this.desc = desc;
    this.notice = notice;
    this.memberCnt = memberCnt;
    this.hot = hot;
    this.level = level;
    this.levelDesc = levelDesc;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.clubID = clubID;
    builder.name = name;
    builder.logo = logo;
    builder.desc = desc;
    builder.notice = notice;
    builder.memberCnt = memberCnt;
    builder.hot = hot;
    builder.level = level;
    builder.levelDesc = levelDesc;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ClubInfo)) return false;
    ClubInfo o = (ClubInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(clubID, o.clubID)
        && Internal.equals(name, o.name)
        && Internal.equals(logo, o.logo)
        && Internal.equals(desc, o.desc)
        && Internal.equals(notice, o.notice)
        && Internal.equals(memberCnt, o.memberCnt)
        && Internal.equals(hot, o.hot)
        && Internal.equals(level, o.level)
        && Internal.equals(levelDesc, o.levelDesc);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (clubID != null ? clubID.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (logo != null ? logo.hashCode() : 0);
      result = result * 37 + (desc != null ? desc.hashCode() : 0);
      result = result * 37 + (notice != null ? notice.hashCode() : 0);
      result = result * 37 + (memberCnt != null ? memberCnt.hashCode() : 0);
      result = result * 37 + (hot != null ? hot.hashCode() : 0);
      result = result * 37 + (level != null ? level.hashCode() : 0);
      result = result * 37 + (levelDesc != null ? levelDesc.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (clubID != null) builder.append(", clubID=").append(clubID);
    if (name != null) builder.append(", name=").append(name);
    if (logo != null) builder.append(", logo=").append(logo);
    if (desc != null) builder.append(", desc=").append(desc);
    if (notice != null) builder.append(", notice=").append(notice);
    if (memberCnt != null) builder.append(", memberCnt=").append(memberCnt);
    if (hot != null) builder.append(", hot=").append(hot);
    if (level != null) builder.append(", level=").append(level);
    if (levelDesc != null) builder.append(", levelDesc=").append(levelDesc);
    return builder.replace(0, 2, "ClubInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ClubInfo.ADAPTER.encode(this);
  }

  public static final ClubInfo parseFrom(byte[] data) throws IOException {
    ClubInfo c = null;
       c = ClubInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 家族ID
   */
  public Integer getClubID() {
    if(clubID==null){
        return DEFAULT_CLUBID;
    }
    return clubID;
  }

  /**
   * 家族名字
   */
  public String getName() {
    if(name==null){
        return DEFAULT_NAME;
    }
    return name;
  }

  /**
   * 家族标志
   */
  public String getLogo() {
    if(logo==null){
        return DEFAULT_LOGO;
    }
    return logo;
  }

  /**
   * 家族简介
   */
  public String getDesc() {
    if(desc==null){
        return DEFAULT_DESC;
    }
    return desc;
  }

  /**
   * 家族公告
   */
  public String getNotice() {
    if(notice==null){
        return DEFAULT_NOTICE;
    }
    return notice;
  }

  /**
   * 家族人数
   */
  public Integer getMemberCnt() {
    if(memberCnt==null){
        return DEFAULT_MEMBERCNT;
    }
    return memberCnt;
  }

  /**
   * 人气
   */
  public Integer getHot() {
    if(hot==null){
        return DEFAULT_HOT;
    }
    return hot;
  }

  /**
   * 家族等级
   */
  public Integer getLevel() {
    if(level==null){
        return DEFAULT_LEVEL;
    }
    return level;
  }

  /**
   * 家族等级描述
   */
  public String getLevelDesc() {
    if(levelDesc==null){
        return DEFAULT_LEVELDESC;
    }
    return levelDesc;
  }

  /**
   * 家族ID
   */
  public boolean hasClubID() {
    return clubID!=null;
  }

  /**
   * 家族名字
   */
  public boolean hasName() {
    return name!=null;
  }

  /**
   * 家族标志
   */
  public boolean hasLogo() {
    return logo!=null;
  }

  /**
   * 家族简介
   */
  public boolean hasDesc() {
    return desc!=null;
  }

  /**
   * 家族公告
   */
  public boolean hasNotice() {
    return notice!=null;
  }

  /**
   * 家族人数
   */
  public boolean hasMemberCnt() {
    return memberCnt!=null;
  }

  /**
   * 人气
   */
  public boolean hasHot() {
    return hot!=null;
  }

  /**
   * 家族等级
   */
  public boolean hasLevel() {
    return level!=null;
  }

  /**
   * 家族等级描述
   */
  public boolean hasLevelDesc() {
    return levelDesc!=null;
  }

  public static final class Builder extends Message.Builder<ClubInfo, Builder> {
    private Integer clubID;

    private String name;

    private String logo;

    private String desc;

    private String notice;

    private Integer memberCnt;

    private Integer hot;

    private Integer level;

    private String levelDesc;

    public Builder() {
    }

    /**
     * 家族ID
     */
    public Builder setClubID(Integer clubID) {
      this.clubID = clubID;
      return this;
    }

    /**
     * 家族名字
     */
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * 家族标志
     */
    public Builder setLogo(String logo) {
      this.logo = logo;
      return this;
    }

    /**
     * 家族简介
     */
    public Builder setDesc(String desc) {
      this.desc = desc;
      return this;
    }

    /**
     * 家族公告
     */
    public Builder setNotice(String notice) {
      this.notice = notice;
      return this;
    }

    /**
     * 家族人数
     */
    public Builder setMemberCnt(Integer memberCnt) {
      this.memberCnt = memberCnt;
      return this;
    }

    /**
     * 人气
     */
    public Builder setHot(Integer hot) {
      this.hot = hot;
      return this;
    }

    /**
     * 家族等级
     */
    public Builder setLevel(Integer level) {
      this.level = level;
      return this;
    }

    /**
     * 家族等级描述
     */
    public Builder setLevelDesc(String levelDesc) {
      this.levelDesc = levelDesc;
      return this;
    }

    @Override
    public ClubInfo build() {
      return new ClubInfo(clubID, name, logo, desc, notice, memberCnt, hot, level, levelDesc, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ClubInfo extends ProtoAdapter<ClubInfo> {
    public ProtoAdapter_ClubInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, ClubInfo.class);
    }

    @Override
    public int encodedSize(ClubInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.clubID)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.name)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.logo)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.desc)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.notice)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.memberCnt)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.hot)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.level)
          + ProtoAdapter.STRING.encodedSizeWithTag(9, value.levelDesc)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ClubInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.clubID);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.logo);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.desc);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.notice);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.memberCnt);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.hot);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.level);
      ProtoAdapter.STRING.encodeWithTag(writer, 9, value.levelDesc);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ClubInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setClubID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setName(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setLogo(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setNotice(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setMemberCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setHot(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.setLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.setLevelDesc(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ClubInfo redact(ClubInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
