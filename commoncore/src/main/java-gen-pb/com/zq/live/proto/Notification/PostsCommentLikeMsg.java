// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Notification.proto
package com.zq.live.proto.Notification;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 帖子评论点赞
 */
public final class PostsCommentLikeMsg extends Message<PostsCommentLikeMsg, PostsCommentLikeMsg.Builder> {
  public static final ProtoAdapter<PostsCommentLikeMsg> ADAPTER = new ProtoAdapter_PostsCommentLikeMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_POSTSID = 0;

  public static final Integer DEFAULT_COMMENTID = 0;

  public static final Boolean DEFAULT_ISLIKE = false;

  public static final Integer DEFAULT_LIKECNT = 0;

  /**
   * 点赞人的userID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer userID;

  /**
   * posts
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer postsID;

  /**
   * 评论id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer commentID;

  /**
   * 点赞 or 取消点赞
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean isLike;

  /**
   * 点赞数
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer likeCnt;

  public PostsCommentLikeMsg(Integer userID, Integer postsID, Integer commentID, Boolean isLike,
      Integer likeCnt) {
    this(userID, postsID, commentID, isLike, likeCnt, ByteString.EMPTY);
  }

  public PostsCommentLikeMsg(Integer userID, Integer postsID, Integer commentID, Boolean isLike,
      Integer likeCnt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.postsID = postsID;
    this.commentID = commentID;
    this.isLike = isLike;
    this.likeCnt = likeCnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.postsID = postsID;
    builder.commentID = commentID;
    builder.isLike = isLike;
    builder.likeCnt = likeCnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PostsCommentLikeMsg)) return false;
    PostsCommentLikeMsg o = (PostsCommentLikeMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(postsID, o.postsID)
        && Internal.equals(commentID, o.commentID)
        && Internal.equals(isLike, o.isLike)
        && Internal.equals(likeCnt, o.likeCnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (postsID != null ? postsID.hashCode() : 0);
      result = result * 37 + (commentID != null ? commentID.hashCode() : 0);
      result = result * 37 + (isLike != null ? isLike.hashCode() : 0);
      result = result * 37 + (likeCnt != null ? likeCnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (postsID != null) builder.append(", postsID=").append(postsID);
    if (commentID != null) builder.append(", commentID=").append(commentID);
    if (isLike != null) builder.append(", isLike=").append(isLike);
    if (likeCnt != null) builder.append(", likeCnt=").append(likeCnt);
    return builder.replace(0, 2, "PostsCommentLikeMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PostsCommentLikeMsg.ADAPTER.encode(this);
  }

  public static final PostsCommentLikeMsg parseFrom(byte[] data) throws IOException {
    PostsCommentLikeMsg c = null;
       c = PostsCommentLikeMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 点赞人的userID
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * posts
   */
  public Integer getPostsID() {
    if(postsID==null){
        return DEFAULT_POSTSID;
    }
    return postsID;
  }

  /**
   * 评论id
   */
  public Integer getCommentID() {
    if(commentID==null){
        return DEFAULT_COMMENTID;
    }
    return commentID;
  }

  /**
   * 点赞 or 取消点赞
   */
  public Boolean getIsLike() {
    if(isLike==null){
        return DEFAULT_ISLIKE;
    }
    return isLike;
  }

  /**
   * 点赞数
   */
  public Integer getLikeCnt() {
    if(likeCnt==null){
        return DEFAULT_LIKECNT;
    }
    return likeCnt;
  }

  /**
   * 点赞人的userID
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * posts
   */
  public boolean hasPostsID() {
    return postsID!=null;
  }

  /**
   * 评论id
   */
  public boolean hasCommentID() {
    return commentID!=null;
  }

  /**
   * 点赞 or 取消点赞
   */
  public boolean hasIsLike() {
    return isLike!=null;
  }

  /**
   * 点赞数
   */
  public boolean hasLikeCnt() {
    return likeCnt!=null;
  }

  public static final class Builder extends Message.Builder<PostsCommentLikeMsg, Builder> {
    private Integer userID;

    private Integer postsID;

    private Integer commentID;

    private Boolean isLike;

    private Integer likeCnt;

    public Builder() {
    }

    /**
     * 点赞人的userID
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * posts
     */
    public Builder setPostsID(Integer postsID) {
      this.postsID = postsID;
      return this;
    }

    /**
     * 评论id
     */
    public Builder setCommentID(Integer commentID) {
      this.commentID = commentID;
      return this;
    }

    /**
     * 点赞 or 取消点赞
     */
    public Builder setIsLike(Boolean isLike) {
      this.isLike = isLike;
      return this;
    }

    /**
     * 点赞数
     */
    public Builder setLikeCnt(Integer likeCnt) {
      this.likeCnt = likeCnt;
      return this;
    }

    @Override
    public PostsCommentLikeMsg build() {
      return new PostsCommentLikeMsg(userID, postsID, commentID, isLike, likeCnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PostsCommentLikeMsg extends ProtoAdapter<PostsCommentLikeMsg> {
    public ProtoAdapter_PostsCommentLikeMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, PostsCommentLikeMsg.class);
    }

    @Override
    public int encodedSize(PostsCommentLikeMsg value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.postsID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.commentID)
          + ProtoAdapter.BOOL.encodedSizeWithTag(4, value.isLike)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.likeCnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PostsCommentLikeMsg value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.postsID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.commentID);
      ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.isLike);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.likeCnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PostsCommentLikeMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setPostsID(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setCommentID(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setIsLike(ProtoAdapter.BOOL.decode(reader)); break;
          case 5: builder.setLikeCnt(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PostsCommentLikeMsg redact(PostsCommentLikeMsg value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
