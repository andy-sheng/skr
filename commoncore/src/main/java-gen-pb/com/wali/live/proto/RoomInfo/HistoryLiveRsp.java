// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: RoomInfo.proto
package com.wali.live.proto.RoomInfo;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class HistoryLiveRsp extends Message<HistoryLiveRsp, HistoryLiveRsp.Builder> {
  public static final ProtoAdapter<HistoryLiveRsp> ADAPTER = new ProtoAdapter_HistoryLiveRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RETCODE = 0;

  public static final Integer DEFAULT_TYPE = 0;

  /**
   * 0:表示成功
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer retCode;

  /**
   * 回放详情
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.RoomInfo.HisLive#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<HisLive> hisLive;

  /**
   * 类型，0公开，1私密, 2口令, 3门票
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  /**
   * 用户观看门票直播状态信息
   */
  @WireField(
      tag = 4,
      adapter = "com.wali.live.proto.RoomInfo.TicketLiveStatus#ADAPTER"
  )
  public final TicketLiveStatus ticketStatus;

  public HistoryLiveRsp(Integer retCode, List<HisLive> hisLive, Integer type,
      TicketLiveStatus ticketStatus) {
    this(retCode, hisLive, type, ticketStatus, ByteString.EMPTY);
  }

  public HistoryLiveRsp(Integer retCode, List<HisLive> hisLive, Integer type,
      TicketLiveStatus ticketStatus, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.retCode = retCode;
    this.hisLive = Internal.immutableCopyOf("hisLive", hisLive);
    this.type = type;
    this.ticketStatus = ticketStatus;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.retCode = retCode;
    builder.hisLive = Internal.copyOf("hisLive", hisLive);
    builder.type = type;
    builder.ticketStatus = ticketStatus;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HistoryLiveRsp)) return false;
    HistoryLiveRsp o = (HistoryLiveRsp) other;
    return unknownFields().equals(o.unknownFields())
        && retCode.equals(o.retCode)
        && hisLive.equals(o.hisLive)
        && Internal.equals(type, o.type)
        && Internal.equals(ticketStatus, o.ticketStatus);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + retCode.hashCode();
      result = result * 37 + hisLive.hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (ticketStatus != null ? ticketStatus.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", retCode=").append(retCode);
    if (!hisLive.isEmpty()) builder.append(", hisLive=").append(hisLive);
    if (type != null) builder.append(", type=").append(type);
    if (ticketStatus != null) builder.append(", ticketStatus=").append(ticketStatus);
    return builder.replace(0, 2, "HistoryLiveRsp{").append('}').toString();
  }

  public static final HistoryLiveRsp parseFrom(byte[] data) throws IOException {
    HistoryLiveRsp c = null;
       c = HistoryLiveRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 0:表示成功
   */
  public Integer getRetCode() {
    if(retCode==null){
        return DEFAULT_RETCODE;
    }
    return retCode;
  }

  /**
   * 回放详情
   */
  public List<HisLive> getHisLiveList() {
    if(hisLive==null){
        return new java.util.ArrayList<HisLive>();
    }
    return hisLive;
  }

  /**
   * 类型，0公开，1私密, 2口令, 3门票
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  /**
   * 用户观看门票直播状态信息
   */
  public TicketLiveStatus getTicketStatus() {
    if(ticketStatus==null){
        return new TicketLiveStatus.Builder().build();
    }
    return ticketStatus;
  }

  /**
   * 0:表示成功
   */
  public boolean hasRetCode() {
    return retCode!=null;
  }

  /**
   * 回放详情
   */
  public boolean hasHisLiveList() {
    return hisLive!=null;
  }

  /**
   * 类型，0公开，1私密, 2口令, 3门票
   */
  public boolean hasType() {
    return type!=null;
  }

  /**
   * 用户观看门票直播状态信息
   */
  public boolean hasTicketStatus() {
    return ticketStatus!=null;
  }

  public static final class Builder extends Message.Builder<HistoryLiveRsp, Builder> {
    public Integer retCode;

    public List<HisLive> hisLive;

    public Integer type;

    public TicketLiveStatus ticketStatus;

    public Builder() {
      hisLive = Internal.newMutableList();
    }

    /**
     * 0:表示成功
     */
    public Builder setRetCode(Integer retCode) {
      this.retCode = retCode;
      return this;
    }

    /**
     * 回放详情
     */
    public Builder addAllHisLive(List<HisLive> hisLive) {
      Internal.checkElementsNotNull(hisLive);
      this.hisLive = hisLive;
      return this;
    }

    /**
     * 类型，0公开，1私密, 2口令, 3门票
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 用户观看门票直播状态信息
     */
    public Builder setTicketStatus(TicketLiveStatus ticketStatus) {
      this.ticketStatus = ticketStatus;
      return this;
    }

    @Override
    public HistoryLiveRsp build() {
      return new HistoryLiveRsp(retCode, hisLive, type, ticketStatus, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_HistoryLiveRsp extends ProtoAdapter<HistoryLiveRsp> {
    public ProtoAdapter_HistoryLiveRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, HistoryLiveRsp.class);
    }

    @Override
    public int encodedSize(HistoryLiveRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.retCode)
          + HisLive.ADAPTER.asRepeated().encodedSizeWithTag(2, value.hisLive)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.type)
          + TicketLiveStatus.ADAPTER.encodedSizeWithTag(4, value.ticketStatus)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, HistoryLiveRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.retCode);
      HisLive.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.hisLive);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.type);
      TicketLiveStatus.ADAPTER.encodeWithTag(writer, 4, value.ticketStatus);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public HistoryLiveRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRetCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.hisLive.add(HisLive.ADAPTER.decode(reader)); break;
          case 3: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setTicketStatus(TicketLiveStatus.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public HistoryLiveRsp redact(HistoryLiveRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.hisLive, HisLive.ADAPTER);
      if (builder.ticketStatus != null) builder.ticketStatus = TicketLiveStatus.ADAPTER.redact(builder.ticketStatus);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
