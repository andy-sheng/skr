// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Config.proto
package com.wali.live.proto.Config;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 业务返回rsp
 */
public final class MiLinkGetConfigRsp extends Message<MiLinkGetConfigRsp, MiLinkGetConfigRsp.Builder> {
  public static final ProtoAdapter<MiLinkGetConfigRsp> ADAPTER = new ProtoAdapter_MiLinkGetConfigRsp();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_TIMESTAMP = 0L;

  public static final String DEFAULT_JSONCONFIG = "";

  /**
   * 最新配置的水位
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long timeStamp;

  /**
   * 最新的配置
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.Config.MiLinkConfig#ADAPTER"
  )
  public final MiLinkConfig config;

  /**
   * 返回json格式的配置
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jsonconfig;

  public MiLinkGetConfigRsp(Long timeStamp, MiLinkConfig config, String jsonconfig) {
    this(timeStamp, config, jsonconfig, ByteString.EMPTY);
  }

  public MiLinkGetConfigRsp(Long timeStamp, MiLinkConfig config, String jsonconfig,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.timeStamp = timeStamp;
    this.config = config;
    this.jsonconfig = jsonconfig;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.timeStamp = timeStamp;
    builder.config = config;
    builder.jsonconfig = jsonconfig;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MiLinkGetConfigRsp)) return false;
    MiLinkGetConfigRsp o = (MiLinkGetConfigRsp) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(timeStamp, o.timeStamp)
        && Internal.equals(config, o.config)
        && Internal.equals(jsonconfig, o.jsonconfig);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (timeStamp != null ? timeStamp.hashCode() : 0);
      result = result * 37 + (config != null ? config.hashCode() : 0);
      result = result * 37 + (jsonconfig != null ? jsonconfig.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (timeStamp != null) builder.append(", timeStamp=").append(timeStamp);
    if (config != null) builder.append(", config=").append(config);
    if (jsonconfig != null) builder.append(", jsonconfig=").append(jsonconfig);
    return builder.replace(0, 2, "MiLinkGetConfigRsp{").append('}').toString();
  }

  public static final MiLinkGetConfigRsp parseFrom(byte[] data) throws IOException {
    MiLinkGetConfigRsp c = null;
       c = MiLinkGetConfigRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 最新配置的水位
   */
  public Long getTimeStamp() {
    if(timeStamp==null){
        return DEFAULT_TIMESTAMP;
    }
    return timeStamp;
  }

  /**
   * 最新的配置
   */
  public MiLinkConfig getConfig() {
    if(config==null){
        return new MiLinkConfig.Builder().build();
    }
    return config;
  }

  /**
   * 返回json格式的配置
   */
  public String getJsonconfig() {
    if(jsonconfig==null){
        return DEFAULT_JSONCONFIG;
    }
    return jsonconfig;
  }

  /**
   * 最新配置的水位
   */
  public boolean hasTimeStamp() {
    return timeStamp!=null;
  }

  /**
   * 最新的配置
   */
  public boolean hasConfig() {
    return config!=null;
  }

  /**
   * 返回json格式的配置
   */
  public boolean hasJsonconfig() {
    return jsonconfig!=null;
  }

  public static final class Builder extends Message.Builder<MiLinkGetConfigRsp, Builder> {
    public Long timeStamp;

    public MiLinkConfig config;

    public String jsonconfig;

    public Builder() {
    }

    /**
     * 最新配置的水位
     */
    public Builder setTimeStamp(Long timeStamp) {
      this.timeStamp = timeStamp;
      return this;
    }

    /**
     * 最新的配置
     */
    public Builder setConfig(MiLinkConfig config) {
      this.config = config;
      return this;
    }

    /**
     * 返回json格式的配置
     */
    public Builder setJsonconfig(String jsonconfig) {
      this.jsonconfig = jsonconfig;
      return this;
    }

    @Override
    public MiLinkGetConfigRsp build() {
      return new MiLinkGetConfigRsp(timeStamp, config, jsonconfig, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MiLinkGetConfigRsp extends ProtoAdapter<MiLinkGetConfigRsp> {
    public ProtoAdapter_MiLinkGetConfigRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, MiLinkGetConfigRsp.class);
    }

    @Override
    public int encodedSize(MiLinkGetConfigRsp value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.timeStamp)
          + MiLinkConfig.ADAPTER.encodedSizeWithTag(2, value.config)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.jsonconfig)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MiLinkGetConfigRsp value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.timeStamp);
      MiLinkConfig.ADAPTER.encodeWithTag(writer, 2, value.config);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.jsonconfig);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MiLinkGetConfigRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTimeStamp(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setConfig(MiLinkConfig.ADAPTER.decode(reader)); break;
          case 3: builder.setJsonconfig(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MiLinkGetConfigRsp redact(MiLinkGetConfigRsp value) {
      Builder builder = value.newBuilder();
      if (builder.config != null) builder.config = MiLinkConfig.ADAPTER.redact(builder.config);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
