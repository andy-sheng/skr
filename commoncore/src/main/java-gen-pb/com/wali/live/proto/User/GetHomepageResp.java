// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class GetHomepageResp extends Message<GetHomepageResp, GetHomepageResp.Builder> {
  public static final ProtoAdapter<GetHomepageResp> ADAPTER = new ProtoAdapter_GetHomepageResp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RETCODE = 0;

  public static final String DEFAULT_VIEWURL = "";

  public static final String DEFAULT_ROOMID = "";

  public static final ByteString DEFAULT_ROOMINFO = ByteString.EMPTY;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer retCode;

  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.User.PersonalInfo#ADAPTER"
  )
  public final PersonalInfo personalInfo;

  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.User.PersonalData#ADAPTER"
  )
  public final PersonalData personalData;

  /**
   * 直播地址
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String viewUrl;

  /**
   * 排行榜前三用户ID
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> rank_top_three_list;

  /**
   * 正在直播的id, 房间号
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String roomId;

  /**
   * 房间的信息
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString roomInfo;

  @WireField(
      tag = 9,
      adapter = "com.wali.live.proto.User.Medal#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Medal> before_nickname_medal;

  @WireField(
      tag = 10,
      adapter = "com.wali.live.proto.User.Medal#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Medal> after_nickname_medal;

  @WireField(
      tag = 11,
      adapter = "com.wali.live.proto.User.Medal#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Medal> user_card_medal;

  @WireField(
      tag = 13,
      adapter = "com.wali.live.proto.User.Medal#ADAPTER"
  )
  public final Medal user_noble_medal;

  public GetHomepageResp(Integer retCode, PersonalInfo personalInfo, PersonalData personalData,
      String viewUrl, List<Long> rank_top_three_list, String roomId, ByteString roomInfo,
      List<Medal> before_nickname_medal, List<Medal> after_nickname_medal,
      List<Medal> user_card_medal, Medal user_noble_medal) {
    this(retCode, personalInfo, personalData, viewUrl, rank_top_three_list, roomId, roomInfo, before_nickname_medal, after_nickname_medal, user_card_medal, user_noble_medal, ByteString.EMPTY);
  }

  public GetHomepageResp(Integer retCode, PersonalInfo personalInfo, PersonalData personalData,
      String viewUrl, List<Long> rank_top_three_list, String roomId, ByteString roomInfo,
      List<Medal> before_nickname_medal, List<Medal> after_nickname_medal,
      List<Medal> user_card_medal, Medal user_noble_medal, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.retCode = retCode;
    this.personalInfo = personalInfo;
    this.personalData = personalData;
    this.viewUrl = viewUrl;
    this.rank_top_three_list = Internal.immutableCopyOf("rank_top_three_list", rank_top_three_list);
    this.roomId = roomId;
    this.roomInfo = roomInfo;
    this.before_nickname_medal = Internal.immutableCopyOf("before_nickname_medal", before_nickname_medal);
    this.after_nickname_medal = Internal.immutableCopyOf("after_nickname_medal", after_nickname_medal);
    this.user_card_medal = Internal.immutableCopyOf("user_card_medal", user_card_medal);
    this.user_noble_medal = user_noble_medal;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.retCode = retCode;
    builder.personalInfo = personalInfo;
    builder.personalData = personalData;
    builder.viewUrl = viewUrl;
    builder.rank_top_three_list = Internal.copyOf("rank_top_three_list", rank_top_three_list);
    builder.roomId = roomId;
    builder.roomInfo = roomInfo;
    builder.before_nickname_medal = Internal.copyOf("before_nickname_medal", before_nickname_medal);
    builder.after_nickname_medal = Internal.copyOf("after_nickname_medal", after_nickname_medal);
    builder.user_card_medal = Internal.copyOf("user_card_medal", user_card_medal);
    builder.user_noble_medal = user_noble_medal;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetHomepageResp)) return false;
    GetHomepageResp o = (GetHomepageResp) other;
    return unknownFields().equals(o.unknownFields())
        && retCode.equals(o.retCode)
        && Internal.equals(personalInfo, o.personalInfo)
        && Internal.equals(personalData, o.personalData)
        && Internal.equals(viewUrl, o.viewUrl)
        && rank_top_three_list.equals(o.rank_top_three_list)
        && Internal.equals(roomId, o.roomId)
        && Internal.equals(roomInfo, o.roomInfo)
        && before_nickname_medal.equals(o.before_nickname_medal)
        && after_nickname_medal.equals(o.after_nickname_medal)
        && user_card_medal.equals(o.user_card_medal)
        && Internal.equals(user_noble_medal, o.user_noble_medal);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + retCode.hashCode();
      result = result * 37 + (personalInfo != null ? personalInfo.hashCode() : 0);
      result = result * 37 + (personalData != null ? personalData.hashCode() : 0);
      result = result * 37 + (viewUrl != null ? viewUrl.hashCode() : 0);
      result = result * 37 + rank_top_three_list.hashCode();
      result = result * 37 + (roomId != null ? roomId.hashCode() : 0);
      result = result * 37 + (roomInfo != null ? roomInfo.hashCode() : 0);
      result = result * 37 + before_nickname_medal.hashCode();
      result = result * 37 + after_nickname_medal.hashCode();
      result = result * 37 + user_card_medal.hashCode();
      result = result * 37 + (user_noble_medal != null ? user_noble_medal.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", retCode=").append(retCode);
    if (personalInfo != null) builder.append(", personalInfo=").append(personalInfo);
    if (personalData != null) builder.append(", personalData=").append(personalData);
    if (viewUrl != null) builder.append(", viewUrl=").append(viewUrl);
    if (!rank_top_three_list.isEmpty()) builder.append(", rank_top_three_list=").append(rank_top_three_list);
    if (roomId != null) builder.append(", roomId=").append(roomId);
    if (roomInfo != null) builder.append(", roomInfo=").append(roomInfo);
    if (!before_nickname_medal.isEmpty()) builder.append(", before_nickname_medal=").append(before_nickname_medal);
    if (!after_nickname_medal.isEmpty()) builder.append(", after_nickname_medal=").append(after_nickname_medal);
    if (!user_card_medal.isEmpty()) builder.append(", user_card_medal=").append(user_card_medal);
    if (user_noble_medal != null) builder.append(", user_noble_medal=").append(user_noble_medal);
    return builder.replace(0, 2, "GetHomepageResp{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GetHomepageResp.ADAPTER.encode(this);
  }

  public static final GetHomepageResp parseFrom(byte[] data) throws IOException {
    GetHomepageResp c = null;
       c = GetHomepageResp.ADAPTER.decode(data);
    return c;
  }

  public Integer getRetCode() {
    if(retCode==null){
        return DEFAULT_RETCODE;
    }
    return retCode;
  }

  public PersonalInfo getPersonalInfo() {
    if(personalInfo==null){
        return new PersonalInfo.Builder().build();
    }
    return personalInfo;
  }

  public PersonalData getPersonalData() {
    if(personalData==null){
        return new PersonalData.Builder().build();
    }
    return personalData;
  }

  /**
   * 直播地址
   */
  public String getViewUrl() {
    if(viewUrl==null){
        return DEFAULT_VIEWURL;
    }
    return viewUrl;
  }

  /**
   * 排行榜前三用户ID
   */
  public List<Long> getRankTopThreeListList() {
    if(rank_top_three_list==null){
        return new java.util.ArrayList<Long>();
    }
    return rank_top_three_list;
  }

  /**
   * 正在直播的id, 房间号
   */
  public String getRoomId() {
    if(roomId==null){
        return DEFAULT_ROOMID;
    }
    return roomId;
  }

  /**
   * 房间的信息
   */
  public ByteString getRoomInfo() {
    if(roomInfo==null){
        return ByteString.of(new byte[0]);
    }
    return roomInfo;
  }

  public List<Medal> getBeforeNicknameMedalList() {
    if(before_nickname_medal==null){
        return new java.util.ArrayList<Medal>();
    }
    return before_nickname_medal;
  }

  public List<Medal> getAfterNicknameMedalList() {
    if(after_nickname_medal==null){
        return new java.util.ArrayList<Medal>();
    }
    return after_nickname_medal;
  }

  public List<Medal> getUserCardMedalList() {
    if(user_card_medal==null){
        return new java.util.ArrayList<Medal>();
    }
    return user_card_medal;
  }

  public Medal getUserNobleMedal() {
    if(user_noble_medal==null){
        return new Medal.Builder().build();
    }
    return user_noble_medal;
  }

  public boolean hasRetCode() {
    return retCode!=null;
  }

  public boolean hasPersonalInfo() {
    return personalInfo!=null;
  }

  public boolean hasPersonalData() {
    return personalData!=null;
  }

  /**
   * 直播地址
   */
  public boolean hasViewUrl() {
    return viewUrl!=null;
  }

  /**
   * 排行榜前三用户ID
   */
  public boolean hasRankTopThreeListList() {
    return rank_top_three_list!=null;
  }

  /**
   * 正在直播的id, 房间号
   */
  public boolean hasRoomId() {
    return roomId!=null;
  }

  /**
   * 房间的信息
   */
  public boolean hasRoomInfo() {
    return roomInfo!=null;
  }

  public boolean hasBeforeNicknameMedalList() {
    return before_nickname_medal!=null;
  }

  public boolean hasAfterNicknameMedalList() {
    return after_nickname_medal!=null;
  }

  public boolean hasUserCardMedalList() {
    return user_card_medal!=null;
  }

  public boolean hasUserNobleMedal() {
    return user_noble_medal!=null;
  }

  public static final class Builder extends Message.Builder<GetHomepageResp, Builder> {
    public Integer retCode;

    public PersonalInfo personalInfo;

    public PersonalData personalData;

    public String viewUrl;

    public List<Long> rank_top_three_list;

    public String roomId;

    public ByteString roomInfo;

    public List<Medal> before_nickname_medal;

    public List<Medal> after_nickname_medal;

    public List<Medal> user_card_medal;

    public Medal user_noble_medal;

    public Builder() {
      rank_top_three_list = Internal.newMutableList();
      before_nickname_medal = Internal.newMutableList();
      after_nickname_medal = Internal.newMutableList();
      user_card_medal = Internal.newMutableList();
    }

    public Builder setRetCode(Integer retCode) {
      this.retCode = retCode;
      return this;
    }

    public Builder setPersonalInfo(PersonalInfo personalInfo) {
      this.personalInfo = personalInfo;
      return this;
    }

    public Builder setPersonalData(PersonalData personalData) {
      this.personalData = personalData;
      return this;
    }

    /**
     * 直播地址
     */
    public Builder setViewUrl(String viewUrl) {
      this.viewUrl = viewUrl;
      return this;
    }

    /**
     * 排行榜前三用户ID
     */
    public Builder addAllRankTopThreeList(List<Long> rank_top_three_list) {
      Internal.checkElementsNotNull(rank_top_three_list);
      this.rank_top_three_list = rank_top_three_list;
      return this;
    }

    /**
     * 正在直播的id, 房间号
     */
    public Builder setRoomId(String roomId) {
      this.roomId = roomId;
      return this;
    }

    /**
     * 房间的信息
     */
    public Builder setRoomInfo(ByteString roomInfo) {
      this.roomInfo = roomInfo;
      return this;
    }

    public Builder addAllBeforeNicknameMedal(List<Medal> before_nickname_medal) {
      Internal.checkElementsNotNull(before_nickname_medal);
      this.before_nickname_medal = before_nickname_medal;
      return this;
    }

    public Builder addAllAfterNicknameMedal(List<Medal> after_nickname_medal) {
      Internal.checkElementsNotNull(after_nickname_medal);
      this.after_nickname_medal = after_nickname_medal;
      return this;
    }

    public Builder addAllUserCardMedal(List<Medal> user_card_medal) {
      Internal.checkElementsNotNull(user_card_medal);
      this.user_card_medal = user_card_medal;
      return this;
    }

    public Builder setUserNobleMedal(Medal user_noble_medal) {
      this.user_noble_medal = user_noble_medal;
      return this;
    }

    @Override
    public GetHomepageResp build() {
      return new GetHomepageResp(retCode, personalInfo, personalData, viewUrl, rank_top_three_list, roomId, roomInfo, before_nickname_medal, after_nickname_medal, user_card_medal, user_noble_medal, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetHomepageResp extends ProtoAdapter<GetHomepageResp> {
    public ProtoAdapter_GetHomepageResp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetHomepageResp.class);
    }

    @Override
    public int encodedSize(GetHomepageResp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.retCode)
          + PersonalInfo.ADAPTER.encodedSizeWithTag(2, value.personalInfo)
          + PersonalData.ADAPTER.encodedSizeWithTag(3, value.personalData)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.viewUrl)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(6, value.rank_top_three_list)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.roomId)
          + ProtoAdapter.BYTES.encodedSizeWithTag(8, value.roomInfo)
          + Medal.ADAPTER.asRepeated().encodedSizeWithTag(9, value.before_nickname_medal)
          + Medal.ADAPTER.asRepeated().encodedSizeWithTag(10, value.after_nickname_medal)
          + Medal.ADAPTER.asRepeated().encodedSizeWithTag(11, value.user_card_medal)
          + Medal.ADAPTER.encodedSizeWithTag(13, value.user_noble_medal)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetHomepageResp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.retCode);
      PersonalInfo.ADAPTER.encodeWithTag(writer, 2, value.personalInfo);
      PersonalData.ADAPTER.encodeWithTag(writer, 3, value.personalData);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.viewUrl);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 6, value.rank_top_three_list);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.roomId);
      ProtoAdapter.BYTES.encodeWithTag(writer, 8, value.roomInfo);
      Medal.ADAPTER.asRepeated().encodeWithTag(writer, 9, value.before_nickname_medal);
      Medal.ADAPTER.asRepeated().encodeWithTag(writer, 10, value.after_nickname_medal);
      Medal.ADAPTER.asRepeated().encodeWithTag(writer, 11, value.user_card_medal);
      Medal.ADAPTER.encodeWithTag(writer, 13, value.user_noble_medal);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetHomepageResp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRetCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setPersonalInfo(PersonalInfo.ADAPTER.decode(reader)); break;
          case 3: builder.setPersonalData(PersonalData.ADAPTER.decode(reader)); break;
          case 4: builder.setViewUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.rank_top_three_list.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.setRoomId(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setRoomInfo(ProtoAdapter.BYTES.decode(reader)); break;
          case 9: builder.before_nickname_medal.add(Medal.ADAPTER.decode(reader)); break;
          case 10: builder.after_nickname_medal.add(Medal.ADAPTER.decode(reader)); break;
          case 11: builder.user_card_medal.add(Medal.ADAPTER.decode(reader)); break;
          case 13: builder.setUserNobleMedal(Medal.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetHomepageResp redact(GetHomepageResp value) {
      Builder builder = value.newBuilder();
      if (builder.personalInfo != null) builder.personalInfo = PersonalInfo.ADAPTER.redact(builder.personalInfo);
      if (builder.personalData != null) builder.personalData = PersonalData.ADAPTER.redact(builder.personalData);
      Internal.redactElements(builder.before_nickname_medal, Medal.ADAPTER);
      Internal.redactElements(builder.after_nickname_medal, Medal.ADAPTER);
      Internal.redactElements(builder.user_card_medal, Medal.ADAPTER);
      if (builder.user_noble_medal != null) builder.user_noble_medal = Medal.ADAPTER.redact(builder.user_noble_medal);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
