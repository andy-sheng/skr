// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * cmd:zhibo.user.applyzhimacertification
 */
public final class ApplyZhimaCertificationReq extends Message<ApplyZhimaCertificationReq, ApplyZhimaCertificationReq.Builder> {
  public static final ProtoAdapter<ApplyZhimaCertificationReq> ADAPTER = new ProtoAdapter_ApplyZhimaCertificationReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final String DEFAULT_CERTNAME = "";

  public static final String DEFAULT_CERTNO = "";

  public static final String DEFAULT_RETURL = "";

  /**
   * 用户ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long zuid;

  /**
   * 姓名
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String certName;

  /**
   * 身份证
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String certNo;

  /**
   * 回调url
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String retUrl;

  public ApplyZhimaCertificationReq(Long zuid, String certName, String certNo, String retUrl) {
    this(zuid, certName, certNo, retUrl, ByteString.EMPTY);
  }

  public ApplyZhimaCertificationReq(Long zuid, String certName, String certNo, String retUrl,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.zuid = zuid;
    this.certName = certName;
    this.certNo = certNo;
    this.retUrl = retUrl;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.zuid = zuid;
    builder.certName = certName;
    builder.certNo = certNo;
    builder.retUrl = retUrl;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ApplyZhimaCertificationReq)) return false;
    ApplyZhimaCertificationReq o = (ApplyZhimaCertificationReq) other;
    return unknownFields().equals(o.unknownFields())
        && zuid.equals(o.zuid)
        && Internal.equals(certName, o.certName)
        && Internal.equals(certNo, o.certNo)
        && Internal.equals(retUrl, o.retUrl);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + zuid.hashCode();
      result = result * 37 + (certName != null ? certName.hashCode() : 0);
      result = result * 37 + (certNo != null ? certNo.hashCode() : 0);
      result = result * 37 + (retUrl != null ? retUrl.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", zuid=").append(zuid);
    if (certName != null) builder.append(", certName=").append(certName);
    if (certNo != null) builder.append(", certNo=").append(certNo);
    if (retUrl != null) builder.append(", retUrl=").append(retUrl);
    return builder.replace(0, 2, "ApplyZhimaCertificationReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ApplyZhimaCertificationReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<ApplyZhimaCertificationReq, Builder> {
    public Long zuid;

    public String certName;

    public String certNo;

    public String retUrl;

    public Builder() {
    }

    /**
     * 用户ID
     */
    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * 姓名
     */
    public Builder setCertName(String certName) {
      this.certName = certName;
      return this;
    }

    /**
     * 身份证
     */
    public Builder setCertNo(String certNo) {
      this.certNo = certNo;
      return this;
    }

    /**
     * 回调url
     */
    public Builder setRetUrl(String retUrl) {
      this.retUrl = retUrl;
      return this;
    }

    @Override
    public ApplyZhimaCertificationReq build() {
      if (zuid == null) {
        throw Internal.missingRequiredFields(zuid, "zuid");
      }
      return new ApplyZhimaCertificationReq(zuid, certName, certNo, retUrl, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ApplyZhimaCertificationReq extends ProtoAdapter<ApplyZhimaCertificationReq> {
    public ProtoAdapter_ApplyZhimaCertificationReq() {
      super(FieldEncoding.LENGTH_DELIMITED, ApplyZhimaCertificationReq.class);
    }

    @Override
    public int encodedSize(ApplyZhimaCertificationReq value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.zuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.certName)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.certNo)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.retUrl)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ApplyZhimaCertificationReq value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.zuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.certName);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.certNo);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.retUrl);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ApplyZhimaCertificationReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setCertName(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setCertNo(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setRetUrl(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ApplyZhimaCertificationReq redact(ApplyZhimaCertificationReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
