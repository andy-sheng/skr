// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Relation.proto
package com.wali.live.proto.Relation;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class GetSubscribeInfoResponse extends Message<GetSubscribeInfoResponse, GetSubscribeInfoResponse.Builder> {
  public static final ProtoAdapter<GetSubscribeInfoResponse> ADAPTER = new ProtoAdapter_GetSubscribeInfoResponse();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_CODE = 0;

  public static final Boolean DEFAULT_ISSUBSCRIBE = false;

  public static final Integer DEFAULT_SUBSCRIBENUM = 0;

  /**
   * 状态码
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer code;

  /**
   * 是否已订阅
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isSubscribe;

  /**
   * 该主播被订阅的用户数
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer subscribeNum;

  public GetSubscribeInfoResponse(Integer code, Boolean isSubscribe, Integer subscribeNum) {
    this(code, isSubscribe, subscribeNum, ByteString.EMPTY);
  }

  public GetSubscribeInfoResponse(Integer code, Boolean isSubscribe, Integer subscribeNum,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.code = code;
    this.isSubscribe = isSubscribe;
    this.subscribeNum = subscribeNum;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.code = code;
    builder.isSubscribe = isSubscribe;
    builder.subscribeNum = subscribeNum;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetSubscribeInfoResponse)) return false;
    GetSubscribeInfoResponse o = (GetSubscribeInfoResponse) other;
    return unknownFields().equals(o.unknownFields())
        && code.equals(o.code)
        && Internal.equals(isSubscribe, o.isSubscribe)
        && Internal.equals(subscribeNum, o.subscribeNum);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + code.hashCode();
      result = result * 37 + (isSubscribe != null ? isSubscribe.hashCode() : 0);
      result = result * 37 + (subscribeNum != null ? subscribeNum.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", code=").append(code);
    if (isSubscribe != null) builder.append(", isSubscribe=").append(isSubscribe);
    if (subscribeNum != null) builder.append(", subscribeNum=").append(subscribeNum);
    return builder.replace(0, 2, "GetSubscribeInfoResponse{").append('}').toString();
  }

  public static final GetSubscribeInfoResponse parseFrom(byte[] data) throws IOException {
    GetSubscribeInfoResponse c = null;
       c = GetSubscribeInfoResponse.ADAPTER.decode(data);
    return c;
  }

  /**
   * 状态码
   */
  public Integer getCode() {
    if(code==null){
        return DEFAULT_CODE;
    }
    return code;
  }

  /**
   * 是否已订阅
   */
  public Boolean getIsSubscribe() {
    if(isSubscribe==null){
        return DEFAULT_ISSUBSCRIBE;
    }
    return isSubscribe;
  }

  /**
   * 该主播被订阅的用户数
   */
  public Integer getSubscribeNum() {
    if(subscribeNum==null){
        return DEFAULT_SUBSCRIBENUM;
    }
    return subscribeNum;
  }

  /**
   * 状态码
   */
  public boolean hasCode() {
    return code!=null;
  }

  /**
   * 是否已订阅
   */
  public boolean hasIsSubscribe() {
    return isSubscribe!=null;
  }

  /**
   * 该主播被订阅的用户数
   */
  public boolean hasSubscribeNum() {
    return subscribeNum!=null;
  }

  public static final class Builder extends Message.Builder<GetSubscribeInfoResponse, Builder> {
    public Integer code;

    public Boolean isSubscribe;

    public Integer subscribeNum;

    public Builder() {
    }

    /**
     * 状态码
     */
    public Builder setCode(Integer code) {
      this.code = code;
      return this;
    }

    /**
     * 是否已订阅
     */
    public Builder setIsSubscribe(Boolean isSubscribe) {
      this.isSubscribe = isSubscribe;
      return this;
    }

    /**
     * 该主播被订阅的用户数
     */
    public Builder setSubscribeNum(Integer subscribeNum) {
      this.subscribeNum = subscribeNum;
      return this;
    }

    @Override
    public GetSubscribeInfoResponse build() {
      return new GetSubscribeInfoResponse(code, isSubscribe, subscribeNum, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetSubscribeInfoResponse extends ProtoAdapter<GetSubscribeInfoResponse> {
    public ProtoAdapter_GetSubscribeInfoResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, GetSubscribeInfoResponse.class);
    }

    @Override
    public int encodedSize(GetSubscribeInfoResponse value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.code)
          + ProtoAdapter.BOOL.encodedSizeWithTag(2, value.isSubscribe)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.subscribeNum)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetSubscribeInfoResponse value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.code);
      ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.isSubscribe);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.subscribeNum);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetSubscribeInfoResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setIsSubscribe(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.setSubscribeNum(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetSubscribeInfoResponse redact(GetSubscribeInfoResponse value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
