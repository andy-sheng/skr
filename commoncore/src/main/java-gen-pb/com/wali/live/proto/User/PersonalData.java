// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * //////////////////////////////////////////////////////////////////////////////////////////////////
 */
public final class PersonalData extends Message<PersonalData, PersonalData.Builder> {
  public static final ProtoAdapter<PersonalData> ADAPTER = new ProtoAdapter_PersonalData();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final Integer DEFAULT_MLIVETICKETNUM = 0;

  public static final Integer DEFAULT_FANSNUM = 0;

  public static final Integer DEFAULT_FOLLOWNUM = 0;

  public static final Integer DEFAULT_SENDDIAMONDNUM = 0;

  public static final Integer DEFAULT_VODNUM = 0;

  public static final Integer DEFAULT_EARNNUM = 0;

  public static final Integer DEFAULT_DIAMONDNUM = 0;

  public static final ByteString DEFAULT_USER_ECO_ATTR = ByteString.EMPTY;

  public static final Integer DEFAULT_USABLE_MIBI_TICKET_CNT = 0;

  public static final ByteString DEFAULT_GCOIN_USER_ECO_ATTR = ByteString.EMPTY;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long zuid;

  /**
   * 星票数
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer mliveTicketNum;

  /**
   * 粉丝数
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer fansNum;

  /**
   * 关注数
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer followNum;

  /**
   * 送出钻石数
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sendDiamondNum;

  /**
   * 点播数
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer vodNum;

  /**
   * 收益数
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer earnNum;

  /**
   * 钻石数
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer diamondNum;

  /**
   * 用户的经济金融属性
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString user_eco_attr;

  /**
   * 可用米币星票数量
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer usable_mibi_ticket_cnt;

  /**
   * 金币余额，GetOwnInfoReq 设置为true可拉取，默认为false
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString gcoin_user_eco_attr;

  public PersonalData(Long zuid, Integer mliveTicketNum, Integer fansNum, Integer followNum,
      Integer sendDiamondNum, Integer vodNum, Integer earnNum, Integer diamondNum,
      ByteString user_eco_attr, Integer usable_mibi_ticket_cnt, ByteString gcoin_user_eco_attr) {
    this(zuid, mliveTicketNum, fansNum, followNum, sendDiamondNum, vodNum, earnNum, diamondNum, user_eco_attr, usable_mibi_ticket_cnt, gcoin_user_eco_attr, ByteString.EMPTY);
  }

  public PersonalData(Long zuid, Integer mliveTicketNum, Integer fansNum, Integer followNum,
      Integer sendDiamondNum, Integer vodNum, Integer earnNum, Integer diamondNum,
      ByteString user_eco_attr, Integer usable_mibi_ticket_cnt, ByteString gcoin_user_eco_attr,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.zuid = zuid;
    this.mliveTicketNum = mliveTicketNum;
    this.fansNum = fansNum;
    this.followNum = followNum;
    this.sendDiamondNum = sendDiamondNum;
    this.vodNum = vodNum;
    this.earnNum = earnNum;
    this.diamondNum = diamondNum;
    this.user_eco_attr = user_eco_attr;
    this.usable_mibi_ticket_cnt = usable_mibi_ticket_cnt;
    this.gcoin_user_eco_attr = gcoin_user_eco_attr;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.zuid = zuid;
    builder.mliveTicketNum = mliveTicketNum;
    builder.fansNum = fansNum;
    builder.followNum = followNum;
    builder.sendDiamondNum = sendDiamondNum;
    builder.vodNum = vodNum;
    builder.earnNum = earnNum;
    builder.diamondNum = diamondNum;
    builder.user_eco_attr = user_eco_attr;
    builder.usable_mibi_ticket_cnt = usable_mibi_ticket_cnt;
    builder.gcoin_user_eco_attr = gcoin_user_eco_attr;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PersonalData)) return false;
    PersonalData o = (PersonalData) other;
    return unknownFields().equals(o.unknownFields())
        && zuid.equals(o.zuid)
        && Internal.equals(mliveTicketNum, o.mliveTicketNum)
        && Internal.equals(fansNum, o.fansNum)
        && Internal.equals(followNum, o.followNum)
        && Internal.equals(sendDiamondNum, o.sendDiamondNum)
        && Internal.equals(vodNum, o.vodNum)
        && Internal.equals(earnNum, o.earnNum)
        && Internal.equals(diamondNum, o.diamondNum)
        && Internal.equals(user_eco_attr, o.user_eco_attr)
        && Internal.equals(usable_mibi_ticket_cnt, o.usable_mibi_ticket_cnt)
        && Internal.equals(gcoin_user_eco_attr, o.gcoin_user_eco_attr);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + zuid.hashCode();
      result = result * 37 + (mliveTicketNum != null ? mliveTicketNum.hashCode() : 0);
      result = result * 37 + (fansNum != null ? fansNum.hashCode() : 0);
      result = result * 37 + (followNum != null ? followNum.hashCode() : 0);
      result = result * 37 + (sendDiamondNum != null ? sendDiamondNum.hashCode() : 0);
      result = result * 37 + (vodNum != null ? vodNum.hashCode() : 0);
      result = result * 37 + (earnNum != null ? earnNum.hashCode() : 0);
      result = result * 37 + (diamondNum != null ? diamondNum.hashCode() : 0);
      result = result * 37 + (user_eco_attr != null ? user_eco_attr.hashCode() : 0);
      result = result * 37 + (usable_mibi_ticket_cnt != null ? usable_mibi_ticket_cnt.hashCode() : 0);
      result = result * 37 + (gcoin_user_eco_attr != null ? gcoin_user_eco_attr.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", zuid=").append(zuid);
    if (mliveTicketNum != null) builder.append(", mliveTicketNum=").append(mliveTicketNum);
    if (fansNum != null) builder.append(", fansNum=").append(fansNum);
    if (followNum != null) builder.append(", followNum=").append(followNum);
    if (sendDiamondNum != null) builder.append(", sendDiamondNum=").append(sendDiamondNum);
    if (vodNum != null) builder.append(", vodNum=").append(vodNum);
    if (earnNum != null) builder.append(", earnNum=").append(earnNum);
    if (diamondNum != null) builder.append(", diamondNum=").append(diamondNum);
    if (user_eco_attr != null) builder.append(", user_eco_attr=").append(user_eco_attr);
    if (usable_mibi_ticket_cnt != null) builder.append(", usable_mibi_ticket_cnt=").append(usable_mibi_ticket_cnt);
    if (gcoin_user_eco_attr != null) builder.append(", gcoin_user_eco_attr=").append(gcoin_user_eco_attr);
    return builder.replace(0, 2, "PersonalData{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PersonalData.ADAPTER.encode(this);
  }

  public static final PersonalData parseFrom(byte[] data) throws IOException {
    PersonalData c = null;
       c = PersonalData.ADAPTER.decode(data);
    return c;
  }

  public Long getZuid() {
    if(zuid==null){
        return DEFAULT_ZUID;
    }
    return zuid;
  }

  /**
   * 星票数
   */
  public Integer getMliveTicketNum() {
    if(mliveTicketNum==null){
        return DEFAULT_MLIVETICKETNUM;
    }
    return mliveTicketNum;
  }

  /**
   * 粉丝数
   */
  public Integer getFansNum() {
    if(fansNum==null){
        return DEFAULT_FANSNUM;
    }
    return fansNum;
  }

  /**
   * 关注数
   */
  public Integer getFollowNum() {
    if(followNum==null){
        return DEFAULT_FOLLOWNUM;
    }
    return followNum;
  }

  /**
   * 送出钻石数
   */
  public Integer getSendDiamondNum() {
    if(sendDiamondNum==null){
        return DEFAULT_SENDDIAMONDNUM;
    }
    return sendDiamondNum;
  }

  /**
   * 点播数
   */
  public Integer getVodNum() {
    if(vodNum==null){
        return DEFAULT_VODNUM;
    }
    return vodNum;
  }

  /**
   * 收益数
   */
  public Integer getEarnNum() {
    if(earnNum==null){
        return DEFAULT_EARNNUM;
    }
    return earnNum;
  }

  /**
   * 钻石数
   */
  public Integer getDiamondNum() {
    if(diamondNum==null){
        return DEFAULT_DIAMONDNUM;
    }
    return diamondNum;
  }

  /**
   * 用户的经济金融属性
   */
  public ByteString getUserEcoAttr() {
    if(user_eco_attr==null){
        return ByteString.of(new byte[0]);
    }
    return user_eco_attr;
  }

  /**
   * 可用米币星票数量
   */
  public Integer getUsableMibiTicketCnt() {
    if(usable_mibi_ticket_cnt==null){
        return DEFAULT_USABLE_MIBI_TICKET_CNT;
    }
    return usable_mibi_ticket_cnt;
  }

  /**
   * 金币余额，GetOwnInfoReq 设置为true可拉取，默认为false
   */
  public ByteString getGcoinUserEcoAttr() {
    if(gcoin_user_eco_attr==null){
        return ByteString.of(new byte[0]);
    }
    return gcoin_user_eco_attr;
  }

  public boolean hasZuid() {
    return zuid!=null;
  }

  /**
   * 星票数
   */
  public boolean hasMliveTicketNum() {
    return mliveTicketNum!=null;
  }

  /**
   * 粉丝数
   */
  public boolean hasFansNum() {
    return fansNum!=null;
  }

  /**
   * 关注数
   */
  public boolean hasFollowNum() {
    return followNum!=null;
  }

  /**
   * 送出钻石数
   */
  public boolean hasSendDiamondNum() {
    return sendDiamondNum!=null;
  }

  /**
   * 点播数
   */
  public boolean hasVodNum() {
    return vodNum!=null;
  }

  /**
   * 收益数
   */
  public boolean hasEarnNum() {
    return earnNum!=null;
  }

  /**
   * 钻石数
   */
  public boolean hasDiamondNum() {
    return diamondNum!=null;
  }

  /**
   * 用户的经济金融属性
   */
  public boolean hasUserEcoAttr() {
    return user_eco_attr!=null;
  }

  /**
   * 可用米币星票数量
   */
  public boolean hasUsableMibiTicketCnt() {
    return usable_mibi_ticket_cnt!=null;
  }

  /**
   * 金币余额，GetOwnInfoReq 设置为true可拉取，默认为false
   */
  public boolean hasGcoinUserEcoAttr() {
    return gcoin_user_eco_attr!=null;
  }

  public static final class Builder extends Message.Builder<PersonalData, Builder> {
    public Long zuid;

    public Integer mliveTicketNum;

    public Integer fansNum;

    public Integer followNum;

    public Integer sendDiamondNum;

    public Integer vodNum;

    public Integer earnNum;

    public Integer diamondNum;

    public ByteString user_eco_attr;

    public Integer usable_mibi_ticket_cnt;

    public ByteString gcoin_user_eco_attr;

    public Builder() {
    }

    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * 星票数
     */
    public Builder setMliveTicketNum(Integer mliveTicketNum) {
      this.mliveTicketNum = mliveTicketNum;
      return this;
    }

    /**
     * 粉丝数
     */
    public Builder setFansNum(Integer fansNum) {
      this.fansNum = fansNum;
      return this;
    }

    /**
     * 关注数
     */
    public Builder setFollowNum(Integer followNum) {
      this.followNum = followNum;
      return this;
    }

    /**
     * 送出钻石数
     */
    public Builder setSendDiamondNum(Integer sendDiamondNum) {
      this.sendDiamondNum = sendDiamondNum;
      return this;
    }

    /**
     * 点播数
     */
    public Builder setVodNum(Integer vodNum) {
      this.vodNum = vodNum;
      return this;
    }

    /**
     * 收益数
     */
    public Builder setEarnNum(Integer earnNum) {
      this.earnNum = earnNum;
      return this;
    }

    /**
     * 钻石数
     */
    public Builder setDiamondNum(Integer diamondNum) {
      this.diamondNum = diamondNum;
      return this;
    }

    /**
     * 用户的经济金融属性
     */
    public Builder setUserEcoAttr(ByteString user_eco_attr) {
      this.user_eco_attr = user_eco_attr;
      return this;
    }

    /**
     * 可用米币星票数量
     */
    public Builder setUsableMibiTicketCnt(Integer usable_mibi_ticket_cnt) {
      this.usable_mibi_ticket_cnt = usable_mibi_ticket_cnt;
      return this;
    }

    /**
     * 金币余额，GetOwnInfoReq 设置为true可拉取，默认为false
     */
    public Builder setGcoinUserEcoAttr(ByteString gcoin_user_eco_attr) {
      this.gcoin_user_eco_attr = gcoin_user_eco_attr;
      return this;
    }

    @Override
    public PersonalData build() {
      return new PersonalData(zuid, mliveTicketNum, fansNum, followNum, sendDiamondNum, vodNum, earnNum, diamondNum, user_eco_attr, usable_mibi_ticket_cnt, gcoin_user_eco_attr, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PersonalData extends ProtoAdapter<PersonalData> {
    public ProtoAdapter_PersonalData() {
      super(FieldEncoding.LENGTH_DELIMITED, PersonalData.class);
    }

    @Override
    public int encodedSize(PersonalData value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.zuid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.mliveTicketNum)
          + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.fansNum)
          + ProtoAdapter.UINT32.encodedSizeWithTag(11, value.followNum)
          + ProtoAdapter.UINT32.encodedSizeWithTag(12, value.sendDiamondNum)
          + ProtoAdapter.UINT32.encodedSizeWithTag(13, value.vodNum)
          + ProtoAdapter.UINT32.encodedSizeWithTag(14, value.earnNum)
          + ProtoAdapter.UINT32.encodedSizeWithTag(15, value.diamondNum)
          + ProtoAdapter.BYTES.encodedSizeWithTag(16, value.user_eco_attr)
          + ProtoAdapter.UINT32.encodedSizeWithTag(17, value.usable_mibi_ticket_cnt)
          + ProtoAdapter.BYTES.encodedSizeWithTag(19, value.gcoin_user_eco_attr)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PersonalData value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.zuid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.mliveTicketNum);
      ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.fansNum);
      ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.followNum);
      ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.sendDiamondNum);
      ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.vodNum);
      ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.earnNum);
      ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.diamondNum);
      ProtoAdapter.BYTES.encodeWithTag(writer, 16, value.user_eco_attr);
      ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.usable_mibi_ticket_cnt);
      ProtoAdapter.BYTES.encodeWithTag(writer, 19, value.gcoin_user_eco_attr);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PersonalData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.setMliveTicketNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.setFansNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.setFollowNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.setSendDiamondNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 13: builder.setVodNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.setEarnNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.setDiamondNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.setUserEcoAttr(ProtoAdapter.BYTES.decode(reader)); break;
          case 17: builder.setUsableMibiTicketCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.setGcoinUserEcoAttr(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PersonalData redact(PersonalData value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
