// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class PersonalInfo extends Message<PersonalInfo, PersonalInfo.Builder> {
  public static final ProtoAdapter<PersonalInfo> ADAPTER = new ProtoAdapter_PersonalInfo();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final Long DEFAULT_AVATAR = 0L;

  public static final String DEFAULT_NICKNAME = "";

  public static final String DEFAULT_SIGN = "";

  public static final Integer DEFAULT_GENDER = 0;

  public static final Integer DEFAULT_LEVEL = 0;

  public static final Integer DEFAULT_BADGE = 0;

  public static final Long DEFAULT_UPDATETIME = 0L;

  public static final Boolean DEFAULT_ISFOCUSED = false;

  public static final String DEFAULT_CERTIFICATION = "";

  public static final Boolean DEFAULT_ISBOTHWAYFOLLOWING = false;

  public static final Integer DEFAULT_CERTIFICATIONTYPE = 0;

  public static final Boolean DEFAULT_ISBLOCKED = false;

  public static final Boolean DEFAULT_ISINSPECTOR = false;

  public static final Integer DEFAULT_WAITING_CERTIFICATION_TYPE = 0;

  public static final String DEFAULT_CERTIFICATION_ID = "";

  public static final Integer DEFAULT_REAL_NAME_CERTIFICATION_STATUS = 0;

  public static final String DEFAULT_COVER_PHOTO = "";

  public static final Integer DEFAULT_USER_TYPE = 0;

  public static final Integer DEFAULT_SELLER_STATUS = 0;

  public static final Boolean DEFAULT_ISFIRSTAUDIT = false;

  public static final Boolean DEFAULT_ISREDNAME = false;

  public static final Integer DEFAULT_FANS_NUMBER = 0;

  public static final Integer DEFAULT_SELLER_TYPE = 0;

  public static final Boolean DEFAULT_IS_UNION_ADMIN = false;

  public static final Integer DEFAULT_VIP_LEVEL = 0;

  public static final Boolean DEFAULT_VIP_DISABLE = false;

  public static final Boolean DEFAULT_VIP_HIDDEN = false;

  public static final Boolean DEFAULT_IS_LIVE = false;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long zuid;

  /**
   * 头像
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long avatar;

  /**
   * 昵称
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nickname;

  /**
   * 签名
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String sign;

  /**
   * 性别
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gender;

  /**
   * 等级
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer level;

  /**
   * 徽章
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer badge;

  /**
   * 更新时间，水位
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long updateTime;

  /**
   * 是否被关注
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isFocused;

  /**
   * 认证信息
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String certification;

  /**
   * 是否双向关注
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isBothwayFollowing;

  /**
   * 认证类型, 0表示未认证, 1表示新浪微博　2：官方账号，3：推荐认证，4：小米认证
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer certificationType;

  /**
   * 是否拉黑
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isBlocked;

  /**
   * 是否是巡查员
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isInspector;

  /**
   * 管理员
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> adminUids;

  /**
   * 等待审核的用户认证类型，目前只有4：小米认证 需要审核；审核通过或未通过后waiting_certification_type会置0
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer waiting_certification_type;

  /**
   * 认证绑定信息
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String certification_id;

  /**
   * 实名认证状态，1：审核中  2：实名认证已通过  3:实名认证未通过
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer real_name_certification_status;

  /**
   * 个人主页的封面图片，格式如下 {"ts":"1465295801" , "img":"xxx"}
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cover_photo;

  /**
   * 默认0表示普通用户，1为商铺类型
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer user_type;

  /**
   * user_type为1时则有该字段，否则为空
   */
  @WireField(
      tag = 21,
      adapter = "com.wali.live.proto.User.BusinessUserInfo#ADAPTER"
  )
  public final BusinessUserInfo business_user_info;

  /**
   * 0 普通用户，1 白名单内(可以申请成为卖家) , 2. 正在申请中 3.小米卖家 4.京东卖家 5淘宝卖家
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer seller_status;

  /**
   * 头像昵称是否先审后发
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isFirstAudit;

  /**
   * 是否社区红名
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isRedname;

  /**
   * 地区信息
   */
  @WireField(
      tag = 25,
      adapter = "com.wali.live.proto.User.Region#ADAPTER"
  )
  public final Region region;

  /**
   * 粉丝数
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer fans_number;

  /**
   * 卖家类型
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer seller_type;

  /**
   *  是否是工会管理员
   */
  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_union_admin;

  /**
   * 财富等级
   */
  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer vip_level;

  /**
   * 财富等级是否被冻结
   */
  @WireField(
      tag = 30,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean vip_disable;

  /**
   * 是否VIP隐身
   */
  @WireField(
      tag = 31,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean vip_hidden;

  /**
   * 是否正在直播
   */
  @WireField(
      tag = 32,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_live;

  /**
   * 直播用户扩展信息
   */
  @WireField(
      tag = 38,
      adapter = "com.wali.live.proto.User.ZhiboExt#ADAPTER"
  )
  public final ZhiboExt zhibo_ext;

  public PersonalInfo(Long zuid, Long avatar, String nickname, String sign, Integer gender,
      Integer level, Integer badge, Long updateTime, Boolean isFocused, String certification,
      Boolean isBothwayFollowing, Integer certificationType, Boolean isBlocked, Boolean isInspector,
      List<Long> adminUids, Integer waiting_certification_type, String certification_id,
      Integer real_name_certification_status, String cover_photo, Integer user_type,
      BusinessUserInfo business_user_info, Integer seller_status, Boolean isFirstAudit,
      Boolean isRedname, Region region, Integer fans_number, Integer seller_type,
      Boolean is_union_admin, Integer vip_level, Boolean vip_disable, Boolean vip_hidden,
      Boolean is_live, ZhiboExt zhibo_ext) {
    this(zuid, avatar, nickname, sign, gender, level, badge, updateTime, isFocused, certification, isBothwayFollowing, certificationType, isBlocked, isInspector, adminUids, waiting_certification_type, certification_id, real_name_certification_status, cover_photo, user_type, business_user_info, seller_status, isFirstAudit, isRedname, region, fans_number, seller_type, is_union_admin, vip_level, vip_disable, vip_hidden, is_live, zhibo_ext, ByteString.EMPTY);
  }

  public PersonalInfo(Long zuid, Long avatar, String nickname, String sign, Integer gender,
      Integer level, Integer badge, Long updateTime, Boolean isFocused, String certification,
      Boolean isBothwayFollowing, Integer certificationType, Boolean isBlocked, Boolean isInspector,
      List<Long> adminUids, Integer waiting_certification_type, String certification_id,
      Integer real_name_certification_status, String cover_photo, Integer user_type,
      BusinessUserInfo business_user_info, Integer seller_status, Boolean isFirstAudit,
      Boolean isRedname, Region region, Integer fans_number, Integer seller_type,
      Boolean is_union_admin, Integer vip_level, Boolean vip_disable, Boolean vip_hidden,
      Boolean is_live, ZhiboExt zhibo_ext, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.zuid = zuid;
    this.avatar = avatar;
    this.nickname = nickname;
    this.sign = sign;
    this.gender = gender;
    this.level = level;
    this.badge = badge;
    this.updateTime = updateTime;
    this.isFocused = isFocused;
    this.certification = certification;
    this.isBothwayFollowing = isBothwayFollowing;
    this.certificationType = certificationType;
    this.isBlocked = isBlocked;
    this.isInspector = isInspector;
    this.adminUids = Internal.immutableCopyOf("adminUids", adminUids);
    this.waiting_certification_type = waiting_certification_type;
    this.certification_id = certification_id;
    this.real_name_certification_status = real_name_certification_status;
    this.cover_photo = cover_photo;
    this.user_type = user_type;
    this.business_user_info = business_user_info;
    this.seller_status = seller_status;
    this.isFirstAudit = isFirstAudit;
    this.isRedname = isRedname;
    this.region = region;
    this.fans_number = fans_number;
    this.seller_type = seller_type;
    this.is_union_admin = is_union_admin;
    this.vip_level = vip_level;
    this.vip_disable = vip_disable;
    this.vip_hidden = vip_hidden;
    this.is_live = is_live;
    this.zhibo_ext = zhibo_ext;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.zuid = zuid;
    builder.avatar = avatar;
    builder.nickname = nickname;
    builder.sign = sign;
    builder.gender = gender;
    builder.level = level;
    builder.badge = badge;
    builder.updateTime = updateTime;
    builder.isFocused = isFocused;
    builder.certification = certification;
    builder.isBothwayFollowing = isBothwayFollowing;
    builder.certificationType = certificationType;
    builder.isBlocked = isBlocked;
    builder.isInspector = isInspector;
    builder.adminUids = Internal.copyOf("adminUids", adminUids);
    builder.waiting_certification_type = waiting_certification_type;
    builder.certification_id = certification_id;
    builder.real_name_certification_status = real_name_certification_status;
    builder.cover_photo = cover_photo;
    builder.user_type = user_type;
    builder.business_user_info = business_user_info;
    builder.seller_status = seller_status;
    builder.isFirstAudit = isFirstAudit;
    builder.isRedname = isRedname;
    builder.region = region;
    builder.fans_number = fans_number;
    builder.seller_type = seller_type;
    builder.is_union_admin = is_union_admin;
    builder.vip_level = vip_level;
    builder.vip_disable = vip_disable;
    builder.vip_hidden = vip_hidden;
    builder.is_live = is_live;
    builder.zhibo_ext = zhibo_ext;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PersonalInfo)) return false;
    PersonalInfo o = (PersonalInfo) other;
    return unknownFields().equals(o.unknownFields())
        && zuid.equals(o.zuid)
        && Internal.equals(avatar, o.avatar)
        && Internal.equals(nickname, o.nickname)
        && Internal.equals(sign, o.sign)
        && Internal.equals(gender, o.gender)
        && Internal.equals(level, o.level)
        && Internal.equals(badge, o.badge)
        && Internal.equals(updateTime, o.updateTime)
        && Internal.equals(isFocused, o.isFocused)
        && Internal.equals(certification, o.certification)
        && Internal.equals(isBothwayFollowing, o.isBothwayFollowing)
        && Internal.equals(certificationType, o.certificationType)
        && Internal.equals(isBlocked, o.isBlocked)
        && Internal.equals(isInspector, o.isInspector)
        && adminUids.equals(o.adminUids)
        && Internal.equals(waiting_certification_type, o.waiting_certification_type)
        && Internal.equals(certification_id, o.certification_id)
        && Internal.equals(real_name_certification_status, o.real_name_certification_status)
        && Internal.equals(cover_photo, o.cover_photo)
        && Internal.equals(user_type, o.user_type)
        && Internal.equals(business_user_info, o.business_user_info)
        && Internal.equals(seller_status, o.seller_status)
        && Internal.equals(isFirstAudit, o.isFirstAudit)
        && Internal.equals(isRedname, o.isRedname)
        && Internal.equals(region, o.region)
        && Internal.equals(fans_number, o.fans_number)
        && Internal.equals(seller_type, o.seller_type)
        && Internal.equals(is_union_admin, o.is_union_admin)
        && Internal.equals(vip_level, o.vip_level)
        && Internal.equals(vip_disable, o.vip_disable)
        && Internal.equals(vip_hidden, o.vip_hidden)
        && Internal.equals(is_live, o.is_live)
        && Internal.equals(zhibo_ext, o.zhibo_ext);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + zuid.hashCode();
      result = result * 37 + (avatar != null ? avatar.hashCode() : 0);
      result = result * 37 + (nickname != null ? nickname.hashCode() : 0);
      result = result * 37 + (sign != null ? sign.hashCode() : 0);
      result = result * 37 + (gender != null ? gender.hashCode() : 0);
      result = result * 37 + (level != null ? level.hashCode() : 0);
      result = result * 37 + (badge != null ? badge.hashCode() : 0);
      result = result * 37 + (updateTime != null ? updateTime.hashCode() : 0);
      result = result * 37 + (isFocused != null ? isFocused.hashCode() : 0);
      result = result * 37 + (certification != null ? certification.hashCode() : 0);
      result = result * 37 + (isBothwayFollowing != null ? isBothwayFollowing.hashCode() : 0);
      result = result * 37 + (certificationType != null ? certificationType.hashCode() : 0);
      result = result * 37 + (isBlocked != null ? isBlocked.hashCode() : 0);
      result = result * 37 + (isInspector != null ? isInspector.hashCode() : 0);
      result = result * 37 + adminUids.hashCode();
      result = result * 37 + (waiting_certification_type != null ? waiting_certification_type.hashCode() : 0);
      result = result * 37 + (certification_id != null ? certification_id.hashCode() : 0);
      result = result * 37 + (real_name_certification_status != null ? real_name_certification_status.hashCode() : 0);
      result = result * 37 + (cover_photo != null ? cover_photo.hashCode() : 0);
      result = result * 37 + (user_type != null ? user_type.hashCode() : 0);
      result = result * 37 + (business_user_info != null ? business_user_info.hashCode() : 0);
      result = result * 37 + (seller_status != null ? seller_status.hashCode() : 0);
      result = result * 37 + (isFirstAudit != null ? isFirstAudit.hashCode() : 0);
      result = result * 37 + (isRedname != null ? isRedname.hashCode() : 0);
      result = result * 37 + (region != null ? region.hashCode() : 0);
      result = result * 37 + (fans_number != null ? fans_number.hashCode() : 0);
      result = result * 37 + (seller_type != null ? seller_type.hashCode() : 0);
      result = result * 37 + (is_union_admin != null ? is_union_admin.hashCode() : 0);
      result = result * 37 + (vip_level != null ? vip_level.hashCode() : 0);
      result = result * 37 + (vip_disable != null ? vip_disable.hashCode() : 0);
      result = result * 37 + (vip_hidden != null ? vip_hidden.hashCode() : 0);
      result = result * 37 + (is_live != null ? is_live.hashCode() : 0);
      result = result * 37 + (zhibo_ext != null ? zhibo_ext.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", zuid=").append(zuid);
    if (avatar != null) builder.append(", avatar=").append(avatar);
    if (nickname != null) builder.append(", nickname=").append(nickname);
    if (sign != null) builder.append(", sign=").append(sign);
    if (gender != null) builder.append(", gender=").append(gender);
    if (level != null) builder.append(", level=").append(level);
    if (badge != null) builder.append(", badge=").append(badge);
    if (updateTime != null) builder.append(", updateTime=").append(updateTime);
    if (isFocused != null) builder.append(", isFocused=").append(isFocused);
    if (certification != null) builder.append(", certification=").append(certification);
    if (isBothwayFollowing != null) builder.append(", isBothwayFollowing=").append(isBothwayFollowing);
    if (certificationType != null) builder.append(", certificationType=").append(certificationType);
    if (isBlocked != null) builder.append(", isBlocked=").append(isBlocked);
    if (isInspector != null) builder.append(", isInspector=").append(isInspector);
    if (!adminUids.isEmpty()) builder.append(", adminUids=").append(adminUids);
    if (waiting_certification_type != null) builder.append(", waiting_certification_type=").append(waiting_certification_type);
    if (certification_id != null) builder.append(", certification_id=").append(certification_id);
    if (real_name_certification_status != null) builder.append(", real_name_certification_status=").append(real_name_certification_status);
    if (cover_photo != null) builder.append(", cover_photo=").append(cover_photo);
    if (user_type != null) builder.append(", user_type=").append(user_type);
    if (business_user_info != null) builder.append(", business_user_info=").append(business_user_info);
    if (seller_status != null) builder.append(", seller_status=").append(seller_status);
    if (isFirstAudit != null) builder.append(", isFirstAudit=").append(isFirstAudit);
    if (isRedname != null) builder.append(", isRedname=").append(isRedname);
    if (region != null) builder.append(", region=").append(region);
    if (fans_number != null) builder.append(", fans_number=").append(fans_number);
    if (seller_type != null) builder.append(", seller_type=").append(seller_type);
    if (is_union_admin != null) builder.append(", is_union_admin=").append(is_union_admin);
    if (vip_level != null) builder.append(", vip_level=").append(vip_level);
    if (vip_disable != null) builder.append(", vip_disable=").append(vip_disable);
    if (vip_hidden != null) builder.append(", vip_hidden=").append(vip_hidden);
    if (is_live != null) builder.append(", is_live=").append(is_live);
    if (zhibo_ext != null) builder.append(", zhibo_ext=").append(zhibo_ext);
    return builder.replace(0, 2, "PersonalInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PersonalInfo.ADAPTER.encode(this);
  }

  public static final PersonalInfo parseFrom(byte[] data) throws IOException {
    PersonalInfo c = null;
       c = PersonalInfo.ADAPTER.decode(data);
    return c;
  }

  public Long getZuid() {
    if(zuid==null){
        return DEFAULT_ZUID;
    }
    return zuid;
  }

  /**
   * 头像
   */
  public Long getAvatar() {
    if(avatar==null){
        return DEFAULT_AVATAR;
    }
    return avatar;
  }

  /**
   * 昵称
   */
  public String getNickname() {
    if(nickname==null){
        return DEFAULT_NICKNAME;
    }
    return nickname;
  }

  /**
   * 签名
   */
  public String getSign() {
    if(sign==null){
        return DEFAULT_SIGN;
    }
    return sign;
  }

  /**
   * 性别
   */
  public Integer getGender() {
    if(gender==null){
        return DEFAULT_GENDER;
    }
    return gender;
  }

  /**
   * 等级
   */
  public Integer getLevel() {
    if(level==null){
        return DEFAULT_LEVEL;
    }
    return level;
  }

  /**
   * 徽章
   */
  public Integer getBadge() {
    if(badge==null){
        return DEFAULT_BADGE;
    }
    return badge;
  }

  /**
   * 更新时间，水位
   */
  public Long getUpdateTime() {
    if(updateTime==null){
        return DEFAULT_UPDATETIME;
    }
    return updateTime;
  }

  /**
   * 是否被关注
   */
  public Boolean getIsFocused() {
    if(isFocused==null){
        return DEFAULT_ISFOCUSED;
    }
    return isFocused;
  }

  /**
   * 认证信息
   */
  public String getCertification() {
    if(certification==null){
        return DEFAULT_CERTIFICATION;
    }
    return certification;
  }

  /**
   * 是否双向关注
   */
  public Boolean getIsBothwayFollowing() {
    if(isBothwayFollowing==null){
        return DEFAULT_ISBOTHWAYFOLLOWING;
    }
    return isBothwayFollowing;
  }

  /**
   * 认证类型, 0表示未认证, 1表示新浪微博　2：官方账号，3：推荐认证，4：小米认证
   */
  public Integer getCertificationType() {
    if(certificationType==null){
        return DEFAULT_CERTIFICATIONTYPE;
    }
    return certificationType;
  }

  /**
   * 是否拉黑
   */
  public Boolean getIsBlocked() {
    if(isBlocked==null){
        return DEFAULT_ISBLOCKED;
    }
    return isBlocked;
  }

  /**
   * 是否是巡查员
   */
  public Boolean getIsInspector() {
    if(isInspector==null){
        return DEFAULT_ISINSPECTOR;
    }
    return isInspector;
  }

  /**
   * 管理员
   */
  public List<Long> getAdminUidsList() {
    if(adminUids==null){
        return new java.util.ArrayList<Long>();
    }
    return adminUids;
  }

  /**
   * 等待审核的用户认证类型，目前只有4：小米认证 需要审核；审核通过或未通过后waiting_certification_type会置0
   */
  public Integer getWaitingCertificationType() {
    if(waiting_certification_type==null){
        return DEFAULT_WAITING_CERTIFICATION_TYPE;
    }
    return waiting_certification_type;
  }

  /**
   * 认证绑定信息
   */
  public String getCertificationId() {
    if(certification_id==null){
        return DEFAULT_CERTIFICATION_ID;
    }
    return certification_id;
  }

  /**
   * 实名认证状态，1：审核中  2：实名认证已通过  3:实名认证未通过
   */
  public Integer getRealNameCertificationStatus() {
    if(real_name_certification_status==null){
        return DEFAULT_REAL_NAME_CERTIFICATION_STATUS;
    }
    return real_name_certification_status;
  }

  /**
   * 个人主页的封面图片，格式如下 {"ts":"1465295801" , "img":"xxx"}
   */
  public String getCoverPhoto() {
    if(cover_photo==null){
        return DEFAULT_COVER_PHOTO;
    }
    return cover_photo;
  }

  /**
   * 默认0表示普通用户，1为商铺类型
   */
  public Integer getUserType() {
    if(user_type==null){
        return DEFAULT_USER_TYPE;
    }
    return user_type;
  }

  /**
   * user_type为1时则有该字段，否则为空
   */
  public BusinessUserInfo getBusinessUserInfo() {
    if(business_user_info==null){
        return new BusinessUserInfo.Builder().build();
    }
    return business_user_info;
  }

  /**
   * 0 普通用户，1 白名单内(可以申请成为卖家) , 2. 正在申请中 3.小米卖家 4.京东卖家 5淘宝卖家
   */
  public Integer getSellerStatus() {
    if(seller_status==null){
        return DEFAULT_SELLER_STATUS;
    }
    return seller_status;
  }

  /**
   * 头像昵称是否先审后发
   */
  public Boolean getIsFirstAudit() {
    if(isFirstAudit==null){
        return DEFAULT_ISFIRSTAUDIT;
    }
    return isFirstAudit;
  }

  /**
   * 是否社区红名
   */
  public Boolean getIsRedname() {
    if(isRedname==null){
        return DEFAULT_ISREDNAME;
    }
    return isRedname;
  }

  /**
   * 地区信息
   */
  public Region getRegion() {
    if(region==null){
        return new Region.Builder().build();
    }
    return region;
  }

  /**
   * 粉丝数
   */
  public Integer getFansNumber() {
    if(fans_number==null){
        return DEFAULT_FANS_NUMBER;
    }
    return fans_number;
  }

  /**
   * 卖家类型
   */
  public Integer getSellerType() {
    if(seller_type==null){
        return DEFAULT_SELLER_TYPE;
    }
    return seller_type;
  }

  /**
   *  是否是工会管理员
   */
  public Boolean getIsUnionAdmin() {
    if(is_union_admin==null){
        return DEFAULT_IS_UNION_ADMIN;
    }
    return is_union_admin;
  }

  /**
   * 财富等级
   */
  public Integer getVipLevel() {
    if(vip_level==null){
        return DEFAULT_VIP_LEVEL;
    }
    return vip_level;
  }

  /**
   * 财富等级是否被冻结
   */
  public Boolean getVipDisable() {
    if(vip_disable==null){
        return DEFAULT_VIP_DISABLE;
    }
    return vip_disable;
  }

  /**
   * 是否VIP隐身
   */
  public Boolean getVipHidden() {
    if(vip_hidden==null){
        return DEFAULT_VIP_HIDDEN;
    }
    return vip_hidden;
  }

  /**
   * 是否正在直播
   */
  public Boolean getIsLive() {
    if(is_live==null){
        return DEFAULT_IS_LIVE;
    }
    return is_live;
  }

  /**
   * 直播用户扩展信息
   */
  public ZhiboExt getZhiboExt() {
    if(zhibo_ext==null){
        return new ZhiboExt.Builder().build();
    }
    return zhibo_ext;
  }

  public boolean hasZuid() {
    return zuid!=null;
  }

  /**
   * 头像
   */
  public boolean hasAvatar() {
    return avatar!=null;
  }

  /**
   * 昵称
   */
  public boolean hasNickname() {
    return nickname!=null;
  }

  /**
   * 签名
   */
  public boolean hasSign() {
    return sign!=null;
  }

  /**
   * 性别
   */
  public boolean hasGender() {
    return gender!=null;
  }

  /**
   * 等级
   */
  public boolean hasLevel() {
    return level!=null;
  }

  /**
   * 徽章
   */
  public boolean hasBadge() {
    return badge!=null;
  }

  /**
   * 更新时间，水位
   */
  public boolean hasUpdateTime() {
    return updateTime!=null;
  }

  /**
   * 是否被关注
   */
  public boolean hasIsFocused() {
    return isFocused!=null;
  }

  /**
   * 认证信息
   */
  public boolean hasCertification() {
    return certification!=null;
  }

  /**
   * 是否双向关注
   */
  public boolean hasIsBothwayFollowing() {
    return isBothwayFollowing!=null;
  }

  /**
   * 认证类型, 0表示未认证, 1表示新浪微博　2：官方账号，3：推荐认证，4：小米认证
   */
  public boolean hasCertificationType() {
    return certificationType!=null;
  }

  /**
   * 是否拉黑
   */
  public boolean hasIsBlocked() {
    return isBlocked!=null;
  }

  /**
   * 是否是巡查员
   */
  public boolean hasIsInspector() {
    return isInspector!=null;
  }

  /**
   * 管理员
   */
  public boolean hasAdminUidsList() {
    return adminUids!=null;
  }

  /**
   * 等待审核的用户认证类型，目前只有4：小米认证 需要审核；审核通过或未通过后waiting_certification_type会置0
   */
  public boolean hasWaitingCertificationType() {
    return waiting_certification_type!=null;
  }

  /**
   * 认证绑定信息
   */
  public boolean hasCertificationId() {
    return certification_id!=null;
  }

  /**
   * 实名认证状态，1：审核中  2：实名认证已通过  3:实名认证未通过
   */
  public boolean hasRealNameCertificationStatus() {
    return real_name_certification_status!=null;
  }

  /**
   * 个人主页的封面图片，格式如下 {"ts":"1465295801" , "img":"xxx"}
   */
  public boolean hasCoverPhoto() {
    return cover_photo!=null;
  }

  /**
   * 默认0表示普通用户，1为商铺类型
   */
  public boolean hasUserType() {
    return user_type!=null;
  }

  /**
   * user_type为1时则有该字段，否则为空
   */
  public boolean hasBusinessUserInfo() {
    return business_user_info!=null;
  }

  /**
   * 0 普通用户，1 白名单内(可以申请成为卖家) , 2. 正在申请中 3.小米卖家 4.京东卖家 5淘宝卖家
   */
  public boolean hasSellerStatus() {
    return seller_status!=null;
  }

  /**
   * 头像昵称是否先审后发
   */
  public boolean hasIsFirstAudit() {
    return isFirstAudit!=null;
  }

  /**
   * 是否社区红名
   */
  public boolean hasIsRedname() {
    return isRedname!=null;
  }

  /**
   * 地区信息
   */
  public boolean hasRegion() {
    return region!=null;
  }

  /**
   * 粉丝数
   */
  public boolean hasFansNumber() {
    return fans_number!=null;
  }

  /**
   * 卖家类型
   */
  public boolean hasSellerType() {
    return seller_type!=null;
  }

  /**
   *  是否是工会管理员
   */
  public boolean hasIsUnionAdmin() {
    return is_union_admin!=null;
  }

  /**
   * 财富等级
   */
  public boolean hasVipLevel() {
    return vip_level!=null;
  }

  /**
   * 财富等级是否被冻结
   */
  public boolean hasVipDisable() {
    return vip_disable!=null;
  }

  /**
   * 是否VIP隐身
   */
  public boolean hasVipHidden() {
    return vip_hidden!=null;
  }

  /**
   * 是否正在直播
   */
  public boolean hasIsLive() {
    return is_live!=null;
  }

  /**
   * 直播用户扩展信息
   */
  public boolean hasZhiboExt() {
    return zhibo_ext!=null;
  }

  public static final class Builder extends Message.Builder<PersonalInfo, Builder> {
    public Long zuid;

    public Long avatar;

    public String nickname;

    public String sign;

    public Integer gender;

    public Integer level;

    public Integer badge;

    public Long updateTime;

    public Boolean isFocused;

    public String certification;

    public Boolean isBothwayFollowing;

    public Integer certificationType;

    public Boolean isBlocked;

    public Boolean isInspector;

    public List<Long> adminUids;

    public Integer waiting_certification_type;

    public String certification_id;

    public Integer real_name_certification_status;

    public String cover_photo;

    public Integer user_type;

    public BusinessUserInfo business_user_info;

    public Integer seller_status;

    public Boolean isFirstAudit;

    public Boolean isRedname;

    public Region region;

    public Integer fans_number;

    public Integer seller_type;

    public Boolean is_union_admin;

    public Integer vip_level;

    public Boolean vip_disable;

    public Boolean vip_hidden;

    public Boolean is_live;

    public ZhiboExt zhibo_ext;

    public Builder() {
      adminUids = Internal.newMutableList();
    }

    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * 头像
     */
    public Builder setAvatar(Long avatar) {
      this.avatar = avatar;
      return this;
    }

    /**
     * 昵称
     */
    public Builder setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    /**
     * 签名
     */
    public Builder setSign(String sign) {
      this.sign = sign;
      return this;
    }

    /**
     * 性别
     */
    public Builder setGender(Integer gender) {
      this.gender = gender;
      return this;
    }

    /**
     * 等级
     */
    public Builder setLevel(Integer level) {
      this.level = level;
      return this;
    }

    /**
     * 徽章
     */
    public Builder setBadge(Integer badge) {
      this.badge = badge;
      return this;
    }

    /**
     * 更新时间，水位
     */
    public Builder setUpdateTime(Long updateTime) {
      this.updateTime = updateTime;
      return this;
    }

    /**
     * 是否被关注
     */
    public Builder setIsFocused(Boolean isFocused) {
      this.isFocused = isFocused;
      return this;
    }

    /**
     * 认证信息
     */
    public Builder setCertification(String certification) {
      this.certification = certification;
      return this;
    }

    /**
     * 是否双向关注
     */
    public Builder setIsBothwayFollowing(Boolean isBothwayFollowing) {
      this.isBothwayFollowing = isBothwayFollowing;
      return this;
    }

    /**
     * 认证类型, 0表示未认证, 1表示新浪微博　2：官方账号，3：推荐认证，4：小米认证
     */
    public Builder setCertificationType(Integer certificationType) {
      this.certificationType = certificationType;
      return this;
    }

    /**
     * 是否拉黑
     */
    public Builder setIsBlocked(Boolean isBlocked) {
      this.isBlocked = isBlocked;
      return this;
    }

    /**
     * 是否是巡查员
     */
    public Builder setIsInspector(Boolean isInspector) {
      this.isInspector = isInspector;
      return this;
    }

    /**
     * 管理员
     */
    public Builder addAllAdminUids(List<Long> adminUids) {
      Internal.checkElementsNotNull(adminUids);
      this.adminUids = adminUids;
      return this;
    }

    /**
     * 等待审核的用户认证类型，目前只有4：小米认证 需要审核；审核通过或未通过后waiting_certification_type会置0
     */
    public Builder setWaitingCertificationType(Integer waiting_certification_type) {
      this.waiting_certification_type = waiting_certification_type;
      return this;
    }

    /**
     * 认证绑定信息
     */
    public Builder setCertificationId(String certification_id) {
      this.certification_id = certification_id;
      return this;
    }

    /**
     * 实名认证状态，1：审核中  2：实名认证已通过  3:实名认证未通过
     */
    public Builder setRealNameCertificationStatus(Integer real_name_certification_status) {
      this.real_name_certification_status = real_name_certification_status;
      return this;
    }

    /**
     * 个人主页的封面图片，格式如下 {"ts":"1465295801" , "img":"xxx"}
     */
    public Builder setCoverPhoto(String cover_photo) {
      this.cover_photo = cover_photo;
      return this;
    }

    /**
     * 默认0表示普通用户，1为商铺类型
     */
    public Builder setUserType(Integer user_type) {
      this.user_type = user_type;
      return this;
    }

    /**
     * user_type为1时则有该字段，否则为空
     */
    public Builder setBusinessUserInfo(BusinessUserInfo business_user_info) {
      this.business_user_info = business_user_info;
      return this;
    }

    /**
     * 0 普通用户，1 白名单内(可以申请成为卖家) , 2. 正在申请中 3.小米卖家 4.京东卖家 5淘宝卖家
     */
    public Builder setSellerStatus(Integer seller_status) {
      this.seller_status = seller_status;
      return this;
    }

    /**
     * 头像昵称是否先审后发
     */
    public Builder setIsFirstAudit(Boolean isFirstAudit) {
      this.isFirstAudit = isFirstAudit;
      return this;
    }

    /**
     * 是否社区红名
     */
    public Builder setIsRedname(Boolean isRedname) {
      this.isRedname = isRedname;
      return this;
    }

    /**
     * 地区信息
     */
    public Builder setRegion(Region region) {
      this.region = region;
      return this;
    }

    /**
     * 粉丝数
     */
    public Builder setFansNumber(Integer fans_number) {
      this.fans_number = fans_number;
      return this;
    }

    /**
     * 卖家类型
     */
    public Builder setSellerType(Integer seller_type) {
      this.seller_type = seller_type;
      return this;
    }

    /**
     *  是否是工会管理员
     */
    public Builder setIsUnionAdmin(Boolean is_union_admin) {
      this.is_union_admin = is_union_admin;
      return this;
    }

    /**
     * 财富等级
     */
    public Builder setVipLevel(Integer vip_level) {
      this.vip_level = vip_level;
      return this;
    }

    /**
     * 财富等级是否被冻结
     */
    public Builder setVipDisable(Boolean vip_disable) {
      this.vip_disable = vip_disable;
      return this;
    }

    /**
     * 是否VIP隐身
     */
    public Builder setVipHidden(Boolean vip_hidden) {
      this.vip_hidden = vip_hidden;
      return this;
    }

    /**
     * 是否正在直播
     */
    public Builder setIsLive(Boolean is_live) {
      this.is_live = is_live;
      return this;
    }

    /**
     * 直播用户扩展信息
     */
    public Builder setZhiboExt(ZhiboExt zhibo_ext) {
      this.zhibo_ext = zhibo_ext;
      return this;
    }

    @Override
    public PersonalInfo build() {
      return new PersonalInfo(zuid, avatar, nickname, sign, gender, level, badge, updateTime, isFocused, certification, isBothwayFollowing, certificationType, isBlocked, isInspector, adminUids, waiting_certification_type, certification_id, real_name_certification_status, cover_photo, user_type, business_user_info, seller_status, isFirstAudit, isRedname, region, fans_number, seller_type, is_union_admin, vip_level, vip_disable, vip_hidden, is_live, zhibo_ext, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PersonalInfo extends ProtoAdapter<PersonalInfo> {
    public ProtoAdapter_PersonalInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, PersonalInfo.class);
    }

    @Override
    public int encodedSize(PersonalInfo value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.zuid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.avatar)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.nickname)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.sign)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.gender)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.level)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.badge)
          + ProtoAdapter.UINT64.encodedSizeWithTag(8, value.updateTime)
          + ProtoAdapter.BOOL.encodedSizeWithTag(9, value.isFocused)
          + ProtoAdapter.STRING.encodedSizeWithTag(10, value.certification)
          + ProtoAdapter.BOOL.encodedSizeWithTag(11, value.isBothwayFollowing)
          + ProtoAdapter.UINT32.encodedSizeWithTag(12, value.certificationType)
          + ProtoAdapter.BOOL.encodedSizeWithTag(13, value.isBlocked)
          + ProtoAdapter.BOOL.encodedSizeWithTag(14, value.isInspector)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(15, value.adminUids)
          + ProtoAdapter.UINT32.encodedSizeWithTag(16, value.waiting_certification_type)
          + ProtoAdapter.STRING.encodedSizeWithTag(17, value.certification_id)
          + ProtoAdapter.UINT32.encodedSizeWithTag(18, value.real_name_certification_status)
          + ProtoAdapter.STRING.encodedSizeWithTag(19, value.cover_photo)
          + ProtoAdapter.UINT32.encodedSizeWithTag(20, value.user_type)
          + BusinessUserInfo.ADAPTER.encodedSizeWithTag(21, value.business_user_info)
          + ProtoAdapter.UINT32.encodedSizeWithTag(22, value.seller_status)
          + ProtoAdapter.BOOL.encodedSizeWithTag(23, value.isFirstAudit)
          + ProtoAdapter.BOOL.encodedSizeWithTag(24, value.isRedname)
          + Region.ADAPTER.encodedSizeWithTag(25, value.region)
          + ProtoAdapter.UINT32.encodedSizeWithTag(26, value.fans_number)
          + ProtoAdapter.UINT32.encodedSizeWithTag(27, value.seller_type)
          + ProtoAdapter.BOOL.encodedSizeWithTag(28, value.is_union_admin)
          + ProtoAdapter.UINT32.encodedSizeWithTag(29, value.vip_level)
          + ProtoAdapter.BOOL.encodedSizeWithTag(30, value.vip_disable)
          + ProtoAdapter.BOOL.encodedSizeWithTag(31, value.vip_hidden)
          + ProtoAdapter.BOOL.encodedSizeWithTag(32, value.is_live)
          + ZhiboExt.ADAPTER.encodedSizeWithTag(38, value.zhibo_ext)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PersonalInfo value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.zuid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.avatar);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.nickname);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.sign);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.gender);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.level);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.badge);
      ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.updateTime);
      ProtoAdapter.BOOL.encodeWithTag(writer, 9, value.isFocused);
      ProtoAdapter.STRING.encodeWithTag(writer, 10, value.certification);
      ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.isBothwayFollowing);
      ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.certificationType);
      ProtoAdapter.BOOL.encodeWithTag(writer, 13, value.isBlocked);
      ProtoAdapter.BOOL.encodeWithTag(writer, 14, value.isInspector);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 15, value.adminUids);
      ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.waiting_certification_type);
      ProtoAdapter.STRING.encodeWithTag(writer, 17, value.certification_id);
      ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.real_name_certification_status);
      ProtoAdapter.STRING.encodeWithTag(writer, 19, value.cover_photo);
      ProtoAdapter.UINT32.encodeWithTag(writer, 20, value.user_type);
      BusinessUserInfo.ADAPTER.encodeWithTag(writer, 21, value.business_user_info);
      ProtoAdapter.UINT32.encodeWithTag(writer, 22, value.seller_status);
      ProtoAdapter.BOOL.encodeWithTag(writer, 23, value.isFirstAudit);
      ProtoAdapter.BOOL.encodeWithTag(writer, 24, value.isRedname);
      Region.ADAPTER.encodeWithTag(writer, 25, value.region);
      ProtoAdapter.UINT32.encodeWithTag(writer, 26, value.fans_number);
      ProtoAdapter.UINT32.encodeWithTag(writer, 27, value.seller_type);
      ProtoAdapter.BOOL.encodeWithTag(writer, 28, value.is_union_admin);
      ProtoAdapter.UINT32.encodeWithTag(writer, 29, value.vip_level);
      ProtoAdapter.BOOL.encodeWithTag(writer, 30, value.vip_disable);
      ProtoAdapter.BOOL.encodeWithTag(writer, 31, value.vip_hidden);
      ProtoAdapter.BOOL.encodeWithTag(writer, 32, value.is_live);
      ZhiboExt.ADAPTER.encodeWithTag(writer, 38, value.zhibo_ext);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PersonalInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setAvatar(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setNickname(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setSign(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setGender(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setBadge(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.setUpdateTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.setIsFocused(ProtoAdapter.BOOL.decode(reader)); break;
          case 10: builder.setCertification(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.setIsBothwayFollowing(ProtoAdapter.BOOL.decode(reader)); break;
          case 12: builder.setCertificationType(ProtoAdapter.UINT32.decode(reader)); break;
          case 13: builder.setIsBlocked(ProtoAdapter.BOOL.decode(reader)); break;
          case 14: builder.setIsInspector(ProtoAdapter.BOOL.decode(reader)); break;
          case 15: builder.adminUids.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 16: builder.setWaitingCertificationType(ProtoAdapter.UINT32.decode(reader)); break;
          case 17: builder.setCertificationId(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.setRealNameCertificationStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.setCoverPhoto(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.setUserType(ProtoAdapter.UINT32.decode(reader)); break;
          case 21: builder.setBusinessUserInfo(BusinessUserInfo.ADAPTER.decode(reader)); break;
          case 22: builder.setSellerStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 23: builder.setIsFirstAudit(ProtoAdapter.BOOL.decode(reader)); break;
          case 24: builder.setIsRedname(ProtoAdapter.BOOL.decode(reader)); break;
          case 25: builder.setRegion(Region.ADAPTER.decode(reader)); break;
          case 26: builder.setFansNumber(ProtoAdapter.UINT32.decode(reader)); break;
          case 27: builder.setSellerType(ProtoAdapter.UINT32.decode(reader)); break;
          case 28: builder.setIsUnionAdmin(ProtoAdapter.BOOL.decode(reader)); break;
          case 29: builder.setVipLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 30: builder.setVipDisable(ProtoAdapter.BOOL.decode(reader)); break;
          case 31: builder.setVipHidden(ProtoAdapter.BOOL.decode(reader)); break;
          case 32: builder.setIsLive(ProtoAdapter.BOOL.decode(reader)); break;
          case 38: builder.setZhiboExt(ZhiboExt.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PersonalInfo redact(PersonalInfo value) {
      Builder builder = value.newBuilder();
      if (builder.business_user_info != null) builder.business_user_info = BusinessUserInfo.ADAPTER.redact(builder.business_user_info);
      if (builder.region != null) builder.region = Region.ADAPTER.redact(builder.region);
      if (builder.zhibo_ext != null) builder.zhibo_ext = ZhiboExt.ADAPTER.redact(builder.zhibo_ext);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
