// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AuthUpload.proto
package com.wali.live.proto.AuthUpload;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * [暂时还没工作，请不要使用]上传成功后告知服务器存储记录用于后续同一个文件的去重秒传
 * cmd:voip.mfas.reuse
 */
public final class ReuseRequest extends Message<ReuseRequest, ReuseRequest.Builder> {
  public static final ProtoAdapter<ReuseRequest> ADAPTER = new ProtoAdapter_ReuseRequest();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_RID = 0L;

  public static final String DEFAULT_CONTENTMD5 = "";

  /**
   * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long rid;

  /**
   * 参数解释见 http://ks3.ksyun.com/doc/api/index.html 请求签名部分
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String contentMd5;

  /**
   * 文件上传信息
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.AuthUpload.FileInfo#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final FileInfo fileInfo;

  public ReuseRequest(Long rid, String contentMd5, FileInfo fileInfo) {
    this(rid, contentMd5, fileInfo, ByteString.EMPTY);
  }

  public ReuseRequest(Long rid, String contentMd5, FileInfo fileInfo, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.rid = rid;
    this.contentMd5 = contentMd5;
    this.fileInfo = fileInfo;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.rid = rid;
    builder.contentMd5 = contentMd5;
    builder.fileInfo = fileInfo;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ReuseRequest)) return false;
    ReuseRequest o = (ReuseRequest) other;
    return unknownFields().equals(o.unknownFields())
        && rid.equals(o.rid)
        && contentMd5.equals(o.contentMd5)
        && fileInfo.equals(o.fileInfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + rid.hashCode();
      result = result * 37 + contentMd5.hashCode();
      result = result * 37 + fileInfo.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", rid=").append(rid);
    builder.append(", contentMd5=").append(contentMd5);
    builder.append(", fileInfo=").append(fileInfo);
    return builder.replace(0, 2, "ReuseRequest{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ReuseRequest.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<ReuseRequest, Builder> {
    public Long rid;

    public String contentMd5;

    public FileInfo fileInfo;

    public Builder() {
    }

    /**
     * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
     */
    public Builder setRid(Long rid) {
      this.rid = rid;
      return this;
    }

    /**
     * 参数解释见 http://ks3.ksyun.com/doc/api/index.html 请求签名部分
     */
    public Builder setContentMd5(String contentMd5) {
      this.contentMd5 = contentMd5;
      return this;
    }

    /**
     * 文件上传信息
     */
    public Builder setFileInfo(FileInfo fileInfo) {
      this.fileInfo = fileInfo;
      return this;
    }

    @Override
    public ReuseRequest build() {
      if (rid == null
          || contentMd5 == null
          || fileInfo == null) {
        throw Internal.missingRequiredFields(rid, "rid",
            contentMd5, "contentMd5",
            fileInfo, "fileInfo");
      }
      return new ReuseRequest(rid, contentMd5, fileInfo, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ReuseRequest extends ProtoAdapter<ReuseRequest> {
    public ProtoAdapter_ReuseRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, ReuseRequest.class);
    }

    @Override
    public int encodedSize(ReuseRequest value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.rid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.contentMd5)
          + FileInfo.ADAPTER.encodedSizeWithTag(3, value.fileInfo)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ReuseRequest value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.rid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.contentMd5);
      FileInfo.ADAPTER.encodeWithTag(writer, 3, value.fileInfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ReuseRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setContentMd5(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setFileInfo(FileInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ReuseRequest redact(ReuseRequest value) {
      Builder builder = value.newBuilder();
      builder.fileInfo = FileInfo.ADAPTER.redact(builder.fileInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
