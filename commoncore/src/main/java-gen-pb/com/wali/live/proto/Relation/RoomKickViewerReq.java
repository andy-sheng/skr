// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Relation.proto
package com.wali.live.proto.Relation;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 本场踢人
 * zhibo.live.kickviewer
 */
public final class RoomKickViewerReq extends Message<RoomKickViewerReq, RoomKickViewerReq.Builder> {
  public static final ProtoAdapter<RoomKickViewerReq> ADAPTER = new ProtoAdapter_RoomKickViewerReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final Long DEFAULT_OPERATORID = 0L;

  public static final String DEFAULT_LIVEID = "";

  /**
   * 主播id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long zuid;

  /**
   * 操作人id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long operatorId;

  /**
   * 直播id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String liveId;

  /**
   * 被踢用户id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> kickedId;

  public RoomKickViewerReq(Long zuid, Long operatorId, String liveId, List<Long> kickedId) {
    this(zuid, operatorId, liveId, kickedId, ByteString.EMPTY);
  }

  public RoomKickViewerReq(Long zuid, Long operatorId, String liveId, List<Long> kickedId,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.zuid = zuid;
    this.operatorId = operatorId;
    this.liveId = liveId;
    this.kickedId = Internal.immutableCopyOf("kickedId", kickedId);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.zuid = zuid;
    builder.operatorId = operatorId;
    builder.liveId = liveId;
    builder.kickedId = Internal.copyOf("kickedId", kickedId);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RoomKickViewerReq)) return false;
    RoomKickViewerReq o = (RoomKickViewerReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(zuid, o.zuid)
        && Internal.equals(operatorId, o.operatorId)
        && Internal.equals(liveId, o.liveId)
        && kickedId.equals(o.kickedId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (zuid != null ? zuid.hashCode() : 0);
      result = result * 37 + (operatorId != null ? operatorId.hashCode() : 0);
      result = result * 37 + (liveId != null ? liveId.hashCode() : 0);
      result = result * 37 + kickedId.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (zuid != null) builder.append(", zuid=").append(zuid);
    if (operatorId != null) builder.append(", operatorId=").append(operatorId);
    if (liveId != null) builder.append(", liveId=").append(liveId);
    if (!kickedId.isEmpty()) builder.append(", kickedId=").append(kickedId);
    return builder.replace(0, 2, "RoomKickViewerReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RoomKickViewerReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<RoomKickViewerReq, Builder> {
    public Long zuid;

    public Long operatorId;

    public String liveId;

    public List<Long> kickedId;

    public Builder() {
      kickedId = Internal.newMutableList();
    }

    /**
     * 主播id
     */
    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * 操作人id
     */
    public Builder setOperatorId(Long operatorId) {
      this.operatorId = operatorId;
      return this;
    }

    /**
     * 直播id
     */
    public Builder setLiveId(String liveId) {
      this.liveId = liveId;
      return this;
    }

    /**
     * 被踢用户id
     */
    public Builder addAllKickedId(List<Long> kickedId) {
      Internal.checkElementsNotNull(kickedId);
      this.kickedId = kickedId;
      return this;
    }

    @Override
    public RoomKickViewerReq build() {
      return new RoomKickViewerReq(zuid, operatorId, liveId, kickedId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RoomKickViewerReq extends ProtoAdapter<RoomKickViewerReq> {
    public ProtoAdapter_RoomKickViewerReq() {
      super(FieldEncoding.LENGTH_DELIMITED, RoomKickViewerReq.class);
    }

    @Override
    public int encodedSize(RoomKickViewerReq value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.zuid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.operatorId)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.liveId)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(4, value.kickedId)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RoomKickViewerReq value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.zuid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.operatorId);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.liveId);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 4, value.kickedId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RoomKickViewerReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setOperatorId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setLiveId(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.kickedId.add(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RoomKickViewerReq redact(RoomKickViewerReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
