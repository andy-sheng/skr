// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 认证申请资料信息,用户模块透传CertificationInfo的二进制给管理后台，管理后台@小山和客户端约定CertificationInfo的字段内容
 */
public final class CertificationInfo extends Message<CertificationInfo, CertificationInfo.Builder> {
  public static final ProtoAdapter<CertificationInfo> ADAPTER = new ProtoAdapter_CertificationInfo();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_PHONENUM = "";

  public static final String DEFAULT_CERTIFICATION = "";

  public static final String DEFAULT_COMPANYNAME = "";

  public static final String DEFAULT_PROFESSION = "";

  public static final String DEFAULT_WORKS = "";

  public static final String DEFAULT_IDCARDNUM = "";

  public static final String DEFAULT_BIRTHDAY = "";

  public static final Integer DEFAULT_TYPE = 1;

  public static final Integer DEFAULT_CARDTYPE = 1;

  /**
   * 用户ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long uuid;

  /**
   * 名称
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  /**
   * 手机号
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String phoneNum;

  /**
   * 身份证信息
   */
  @WireField(
      tag = 4,
      adapter = "com.wali.live.proto.User.PrivateImg#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PrivateImg> idcard;

  /**
   * 认证内容
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String certification;

  /**
   * 公司名称
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String companyName;

  /**
   * 职业
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String profession;

  /**
   * 工作证明、名品、工牌
   */
  @WireField(
      tag = 8,
      adapter = "com.wali.live.proto.User.PrivateImg#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PrivateImg> proofJobs;

  /**
   * 其它身份证明
   */
  @WireField(
      tag = 9,
      adapter = "com.wali.live.proto.User.PrivateImg#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PrivateImg> otherIdCard;

  /**
   * 作品
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String works;

  /**
   * 身份证号或者护照号
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idCardNum;

  /**
   * 出生年月日，格式为: 1986/02/23
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String birthday;

  /**
   * 1：小米直播认证请求    2:实名认证请求
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  /**
   * 1: 身份证, 2: 护照
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer cardType;

  public CertificationInfo(Long uuid, String name, String phoneNum, List<PrivateImg> idcard,
      String certification, String companyName, String profession, List<PrivateImg> proofJobs,
      List<PrivateImg> otherIdCard, String works, String idCardNum, String birthday, Integer type,
      Integer cardType) {
    this(uuid, name, phoneNum, idcard, certification, companyName, profession, proofJobs, otherIdCard, works, idCardNum, birthday, type, cardType, ByteString.EMPTY);
  }

  public CertificationInfo(Long uuid, String name, String phoneNum, List<PrivateImg> idcard,
      String certification, String companyName, String profession, List<PrivateImg> proofJobs,
      List<PrivateImg> otherIdCard, String works, String idCardNum, String birthday, Integer type,
      Integer cardType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.uuid = uuid;
    this.name = name;
    this.phoneNum = phoneNum;
    this.idcard = Internal.immutableCopyOf("idcard", idcard);
    this.certification = certification;
    this.companyName = companyName;
    this.profession = profession;
    this.proofJobs = Internal.immutableCopyOf("proofJobs", proofJobs);
    this.otherIdCard = Internal.immutableCopyOf("otherIdCard", otherIdCard);
    this.works = works;
    this.idCardNum = idCardNum;
    this.birthday = birthday;
    this.type = type;
    this.cardType = cardType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.uuid = uuid;
    builder.name = name;
    builder.phoneNum = phoneNum;
    builder.idcard = Internal.copyOf("idcard", idcard);
    builder.certification = certification;
    builder.companyName = companyName;
    builder.profession = profession;
    builder.proofJobs = Internal.copyOf("proofJobs", proofJobs);
    builder.otherIdCard = Internal.copyOf("otherIdCard", otherIdCard);
    builder.works = works;
    builder.idCardNum = idCardNum;
    builder.birthday = birthday;
    builder.type = type;
    builder.cardType = cardType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CertificationInfo)) return false;
    CertificationInfo o = (CertificationInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(uuid, o.uuid)
        && Internal.equals(name, o.name)
        && Internal.equals(phoneNum, o.phoneNum)
        && idcard.equals(o.idcard)
        && Internal.equals(certification, o.certification)
        && Internal.equals(companyName, o.companyName)
        && Internal.equals(profession, o.profession)
        && proofJobs.equals(o.proofJobs)
        && otherIdCard.equals(o.otherIdCard)
        && Internal.equals(works, o.works)
        && Internal.equals(idCardNum, o.idCardNum)
        && Internal.equals(birthday, o.birthday)
        && Internal.equals(type, o.type)
        && Internal.equals(cardType, o.cardType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (uuid != null ? uuid.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (phoneNum != null ? phoneNum.hashCode() : 0);
      result = result * 37 + idcard.hashCode();
      result = result * 37 + (certification != null ? certification.hashCode() : 0);
      result = result * 37 + (companyName != null ? companyName.hashCode() : 0);
      result = result * 37 + (profession != null ? profession.hashCode() : 0);
      result = result * 37 + proofJobs.hashCode();
      result = result * 37 + otherIdCard.hashCode();
      result = result * 37 + (works != null ? works.hashCode() : 0);
      result = result * 37 + (idCardNum != null ? idCardNum.hashCode() : 0);
      result = result * 37 + (birthday != null ? birthday.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (cardType != null ? cardType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (uuid != null) builder.append(", uuid=").append(uuid);
    if (name != null) builder.append(", name=").append(name);
    if (phoneNum != null) builder.append(", phoneNum=").append(phoneNum);
    if (!idcard.isEmpty()) builder.append(", idcard=").append(idcard);
    if (certification != null) builder.append(", certification=").append(certification);
    if (companyName != null) builder.append(", companyName=").append(companyName);
    if (profession != null) builder.append(", profession=").append(profession);
    if (!proofJobs.isEmpty()) builder.append(", proofJobs=").append(proofJobs);
    if (!otherIdCard.isEmpty()) builder.append(", otherIdCard=").append(otherIdCard);
    if (works != null) builder.append(", works=").append(works);
    if (idCardNum != null) builder.append(", idCardNum=").append(idCardNum);
    if (birthday != null) builder.append(", birthday=").append(birthday);
    if (type != null) builder.append(", type=").append(type);
    if (cardType != null) builder.append(", cardType=").append(cardType);
    return builder.replace(0, 2, "CertificationInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return CertificationInfo.ADAPTER.encode(this);
  }

  public static final CertificationInfo parseFrom(byte[] data) throws IOException {
    CertificationInfo c = null;
       c = CertificationInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 用户ID
   */
  public Long getUuid() {
    if(uuid==null){
        return DEFAULT_UUID;
    }
    return uuid;
  }

  /**
   * 名称
   */
  public String getName() {
    if(name==null){
        return DEFAULT_NAME;
    }
    return name;
  }

  /**
   * 手机号
   */
  public String getPhoneNum() {
    if(phoneNum==null){
        return DEFAULT_PHONENUM;
    }
    return phoneNum;
  }

  /**
   * 身份证信息
   */
  public List<PrivateImg> getIdcardList() {
    if(idcard==null){
        return new java.util.ArrayList<PrivateImg>();
    }
    return idcard;
  }

  /**
   * 认证内容
   */
  public String getCertification() {
    if(certification==null){
        return DEFAULT_CERTIFICATION;
    }
    return certification;
  }

  /**
   * 公司名称
   */
  public String getCompanyName() {
    if(companyName==null){
        return DEFAULT_COMPANYNAME;
    }
    return companyName;
  }

  /**
   * 职业
   */
  public String getProfession() {
    if(profession==null){
        return DEFAULT_PROFESSION;
    }
    return profession;
  }

  /**
   * 工作证明、名品、工牌
   */
  public List<PrivateImg> getProofJobsList() {
    if(proofJobs==null){
        return new java.util.ArrayList<PrivateImg>();
    }
    return proofJobs;
  }

  /**
   * 其它身份证明
   */
  public List<PrivateImg> getOtherIdCardList() {
    if(otherIdCard==null){
        return new java.util.ArrayList<PrivateImg>();
    }
    return otherIdCard;
  }

  /**
   * 作品
   */
  public String getWorks() {
    if(works==null){
        return DEFAULT_WORKS;
    }
    return works;
  }

  /**
   * 身份证号或者护照号
   */
  public String getIdCardNum() {
    if(idCardNum==null){
        return DEFAULT_IDCARDNUM;
    }
    return idCardNum;
  }

  /**
   * 出生年月日，格式为: 1986/02/23
   */
  public String getBirthday() {
    if(birthday==null){
        return DEFAULT_BIRTHDAY;
    }
    return birthday;
  }

  /**
   * 1：小米直播认证请求    2:实名认证请求
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  /**
   * 1: 身份证, 2: 护照
   */
  public Integer getCardType() {
    if(cardType==null){
        return DEFAULT_CARDTYPE;
    }
    return cardType;
  }

  /**
   * 用户ID
   */
  public boolean hasUuid() {
    return uuid!=null;
  }

  /**
   * 名称
   */
  public boolean hasName() {
    return name!=null;
  }

  /**
   * 手机号
   */
  public boolean hasPhoneNum() {
    return phoneNum!=null;
  }

  /**
   * 身份证信息
   */
  public boolean hasIdcardList() {
    return idcard!=null;
  }

  /**
   * 认证内容
   */
  public boolean hasCertification() {
    return certification!=null;
  }

  /**
   * 公司名称
   */
  public boolean hasCompanyName() {
    return companyName!=null;
  }

  /**
   * 职业
   */
  public boolean hasProfession() {
    return profession!=null;
  }

  /**
   * 工作证明、名品、工牌
   */
  public boolean hasProofJobsList() {
    return proofJobs!=null;
  }

  /**
   * 其它身份证明
   */
  public boolean hasOtherIdCardList() {
    return otherIdCard!=null;
  }

  /**
   * 作品
   */
  public boolean hasWorks() {
    return works!=null;
  }

  /**
   * 身份证号或者护照号
   */
  public boolean hasIdCardNum() {
    return idCardNum!=null;
  }

  /**
   * 出生年月日，格式为: 1986/02/23
   */
  public boolean hasBirthday() {
    return birthday!=null;
  }

  /**
   * 1：小米直播认证请求    2:实名认证请求
   */
  public boolean hasType() {
    return type!=null;
  }

  /**
   * 1: 身份证, 2: 护照
   */
  public boolean hasCardType() {
    return cardType!=null;
  }

  public static final class Builder extends Message.Builder<CertificationInfo, Builder> {
    public Long uuid;

    public String name;

    public String phoneNum;

    public List<PrivateImg> idcard;

    public String certification;

    public String companyName;

    public String profession;

    public List<PrivateImg> proofJobs;

    public List<PrivateImg> otherIdCard;

    public String works;

    public String idCardNum;

    public String birthday;

    public Integer type;

    public Integer cardType;

    public Builder() {
      idcard = Internal.newMutableList();
      proofJobs = Internal.newMutableList();
      otherIdCard = Internal.newMutableList();
    }

    /**
     * 用户ID
     */
    public Builder setUuid(Long uuid) {
      this.uuid = uuid;
      return this;
    }

    /**
     * 名称
     */
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * 手机号
     */
    public Builder setPhoneNum(String phoneNum) {
      this.phoneNum = phoneNum;
      return this;
    }

    /**
     * 身份证信息
     */
    public Builder addAllIdcard(List<PrivateImg> idcard) {
      Internal.checkElementsNotNull(idcard);
      this.idcard = idcard;
      return this;
    }

    /**
     * 认证内容
     */
    public Builder setCertification(String certification) {
      this.certification = certification;
      return this;
    }

    /**
     * 公司名称
     */
    public Builder setCompanyName(String companyName) {
      this.companyName = companyName;
      return this;
    }

    /**
     * 职业
     */
    public Builder setProfession(String profession) {
      this.profession = profession;
      return this;
    }

    /**
     * 工作证明、名品、工牌
     */
    public Builder addAllProofJobs(List<PrivateImg> proofJobs) {
      Internal.checkElementsNotNull(proofJobs);
      this.proofJobs = proofJobs;
      return this;
    }

    /**
     * 其它身份证明
     */
    public Builder addAllOtherIdCard(List<PrivateImg> otherIdCard) {
      Internal.checkElementsNotNull(otherIdCard);
      this.otherIdCard = otherIdCard;
      return this;
    }

    /**
     * 作品
     */
    public Builder setWorks(String works) {
      this.works = works;
      return this;
    }

    /**
     * 身份证号或者护照号
     */
    public Builder setIdCardNum(String idCardNum) {
      this.idCardNum = idCardNum;
      return this;
    }

    /**
     * 出生年月日，格式为: 1986/02/23
     */
    public Builder setBirthday(String birthday) {
      this.birthday = birthday;
      return this;
    }

    /**
     * 1：小米直播认证请求    2:实名认证请求
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 1: 身份证, 2: 护照
     */
    public Builder setCardType(Integer cardType) {
      this.cardType = cardType;
      return this;
    }

    @Override
    public CertificationInfo build() {
      return new CertificationInfo(uuid, name, phoneNum, idcard, certification, companyName, profession, proofJobs, otherIdCard, works, idCardNum, birthday, type, cardType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CertificationInfo extends ProtoAdapter<CertificationInfo> {
    public ProtoAdapter_CertificationInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, CertificationInfo.class);
    }

    @Override
    public int encodedSize(CertificationInfo value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.uuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.name)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.phoneNum)
          + PrivateImg.ADAPTER.asRepeated().encodedSizeWithTag(4, value.idcard)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.certification)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.companyName)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.profession)
          + PrivateImg.ADAPTER.asRepeated().encodedSizeWithTag(8, value.proofJobs)
          + PrivateImg.ADAPTER.asRepeated().encodedSizeWithTag(9, value.otherIdCard)
          + ProtoAdapter.STRING.encodedSizeWithTag(10, value.works)
          + ProtoAdapter.STRING.encodedSizeWithTag(11, value.idCardNum)
          + ProtoAdapter.STRING.encodedSizeWithTag(12, value.birthday)
          + ProtoAdapter.UINT32.encodedSizeWithTag(13, value.type)
          + ProtoAdapter.UINT32.encodedSizeWithTag(14, value.cardType)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CertificationInfo value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.uuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.phoneNum);
      PrivateImg.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.idcard);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.certification);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.companyName);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.profession);
      PrivateImg.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.proofJobs);
      PrivateImg.ADAPTER.asRepeated().encodeWithTag(writer, 9, value.otherIdCard);
      ProtoAdapter.STRING.encodeWithTag(writer, 10, value.works);
      ProtoAdapter.STRING.encodeWithTag(writer, 11, value.idCardNum);
      ProtoAdapter.STRING.encodeWithTag(writer, 12, value.birthday);
      ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.type);
      ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.cardType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CertificationInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setName(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setPhoneNum(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.idcard.add(PrivateImg.ADAPTER.decode(reader)); break;
          case 5: builder.setCertification(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setCompanyName(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setProfession(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.proofJobs.add(PrivateImg.ADAPTER.decode(reader)); break;
          case 9: builder.otherIdCard.add(PrivateImg.ADAPTER.decode(reader)); break;
          case 10: builder.setWorks(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.setIdCardNum(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.setBirthday(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.setCardType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CertificationInfo redact(CertificationInfo value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.idcard, PrivateImg.ADAPTER);
      Internal.redactElements(builder.proofJobs, PrivateImg.ADAPTER);
      Internal.redactElements(builder.otherIdCard, PrivateImg.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
