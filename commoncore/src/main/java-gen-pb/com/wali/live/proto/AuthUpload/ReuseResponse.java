// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AuthUpload.proto
package com.wali.live.proto.AuthUpload;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * [暂时还没工作，请不要使用]
 */
public final class ReuseResponse extends Message<ReuseResponse, ReuseResponse.Builder> {
  public static final ProtoAdapter<ReuseResponse> ADAPTER = new ProtoAdapter_ReuseResponse();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_RID = 0L;

  public static final Integer DEFAULT_ERRORCODE = 0;

  public static final String DEFAULT_ERRORMSG = "";

  /**
   * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long rid;

  /**
   * 0表示成功
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer errorCode;

  /**
   * 错误原因
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String errorMsg;

  public ReuseResponse(Long rid, Integer errorCode, String errorMsg) {
    this(rid, errorCode, errorMsg, ByteString.EMPTY);
  }

  public ReuseResponse(Long rid, Integer errorCode, String errorMsg, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.rid = rid;
    this.errorCode = errorCode;
    this.errorMsg = errorMsg;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.rid = rid;
    builder.errorCode = errorCode;
    builder.errorMsg = errorMsg;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ReuseResponse)) return false;
    ReuseResponse o = (ReuseResponse) other;
    return unknownFields().equals(o.unknownFields())
        && rid.equals(o.rid)
        && errorCode.equals(o.errorCode)
        && Internal.equals(errorMsg, o.errorMsg);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + rid.hashCode();
      result = result * 37 + errorCode.hashCode();
      result = result * 37 + (errorMsg != null ? errorMsg.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", rid=").append(rid);
    builder.append(", errorCode=").append(errorCode);
    if (errorMsg != null) builder.append(", errorMsg=").append(errorMsg);
    return builder.replace(0, 2, "ReuseResponse{").append('}').toString();
  }

  public static final ReuseResponse parseFrom(byte[] data) throws IOException {
    ReuseResponse c = null;
       c = ReuseResponse.ADAPTER.decode(data);
    return c;
  }

  /**
   * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
   */
  public Long getRid() {
    if(rid==null){
        return DEFAULT_RID;
    }
    return rid;
  }

  /**
   * 0表示成功
   */
  public Integer getErrorCode() {
    if(errorCode==null){
        return DEFAULT_ERRORCODE;
    }
    return errorCode;
  }

  /**
   * 错误原因
   */
  public String getErrorMsg() {
    if(errorMsg==null){
        return DEFAULT_ERRORMSG;
    }
    return errorMsg;
  }

  /**
   * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
   */
  public boolean hasRid() {
    return rid!=null;
  }

  /**
   * 0表示成功
   */
  public boolean hasErrorCode() {
    return errorCode!=null;
  }

  /**
   * 错误原因
   */
  public boolean hasErrorMsg() {
    return errorMsg!=null;
  }

  public static final class Builder extends Message.Builder<ReuseResponse, Builder> {
    public Long rid;

    public Integer errorCode;

    public String errorMsg;

    public Builder() {
    }

    /**
     * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
     */
    public Builder setRid(Long rid) {
      this.rid = rid;
      return this;
    }

    /**
     * 0表示成功
     */
    public Builder setErrorCode(Integer errorCode) {
      this.errorCode = errorCode;
      return this;
    }

    /**
     * 错误原因
     */
    public Builder setErrorMsg(String errorMsg) {
      this.errorMsg = errorMsg;
      return this;
    }

    @Override
    public ReuseResponse build() {
      return new ReuseResponse(rid, errorCode, errorMsg, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ReuseResponse extends ProtoAdapter<ReuseResponse> {
    public ProtoAdapter_ReuseResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, ReuseResponse.class);
    }

    @Override
    public int encodedSize(ReuseResponse value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.rid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.errorCode)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.errorMsg)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ReuseResponse value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.rid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.errorCode);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.errorMsg);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ReuseResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setErrorCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setErrorMsg(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ReuseResponse redact(ReuseResponse value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
