// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Account.proto
package com.wali.live.proto.Account;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
 * --proto_path=./proto --java_out=./modulecore/src/main/java-gen-pb/ Account.proto
 * 第三方授权登录
 * cmd:zhibo.account.login
 */
public final class LoginReq extends Message<LoginReq, LoginReq.Builder> {
  public static final ProtoAdapter<LoginReq> ADAPTER = new ProtoAdapter_LoginReq();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ACCOUNTTYPE = 0;

  public static final String DEFAULT_CODE = "";

  public static final String DEFAULT_OPENID = "";

  public static final String DEFAULT_ACCESSTOKEN = "";

  public static final Integer DEFAULT_EXPIRES_IN = 0;

  public static final String DEFAULT_REFRESHTOKEN = "";

  /**
   * 1表示微信登录 2表示QQ登录 3表示新浪微博登录 4表示小米账号登录
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer accountType;

  /**
   * 授权临时票据，参考相应oauth2.0协议
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String code;

  /**
   * 微博、qq登录客户端拿到的openid
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String openid;

  /**
   * //微博、qq登录客户端拿到的accessToken
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String accessToken;

  /**
   * /微博、qq登录客户端拿到的expires_in
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer expires_in;

  /**
   * //微博、qq登录客户端拿到的refreshToken
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String refreshToken;

  public LoginReq(Integer accountType, String code, String openid, String accessToken,
      Integer expires_in, String refreshToken) {
    this(accountType, code, openid, accessToken, expires_in, refreshToken, ByteString.EMPTY);
  }

  public LoginReq(Integer accountType, String code, String openid, String accessToken,
      Integer expires_in, String refreshToken, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.accountType = accountType;
    this.code = code;
    this.openid = openid;
    this.accessToken = accessToken;
    this.expires_in = expires_in;
    this.refreshToken = refreshToken;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.accountType = accountType;
    builder.code = code;
    builder.openid = openid;
    builder.accessToken = accessToken;
    builder.expires_in = expires_in;
    builder.refreshToken = refreshToken;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LoginReq)) return false;
    LoginReq o = (LoginReq) other;
    return unknownFields().equals(o.unknownFields())
        && accountType.equals(o.accountType)
        && Internal.equals(code, o.code)
        && Internal.equals(openid, o.openid)
        && Internal.equals(accessToken, o.accessToken)
        && Internal.equals(expires_in, o.expires_in)
        && Internal.equals(refreshToken, o.refreshToken);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + accountType.hashCode();
      result = result * 37 + (code != null ? code.hashCode() : 0);
      result = result * 37 + (openid != null ? openid.hashCode() : 0);
      result = result * 37 + (accessToken != null ? accessToken.hashCode() : 0);
      result = result * 37 + (expires_in != null ? expires_in.hashCode() : 0);
      result = result * 37 + (refreshToken != null ? refreshToken.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", accountType=").append(accountType);
    if (code != null) builder.append(", code=").append(code);
    if (openid != null) builder.append(", openid=").append(openid);
    if (accessToken != null) builder.append(", accessToken=").append(accessToken);
    if (expires_in != null) builder.append(", expires_in=").append(expires_in);
    if (refreshToken != null) builder.append(", refreshToken=").append(refreshToken);
    return builder.replace(0, 2, "LoginReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return LoginReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<LoginReq, Builder> {
    public Integer accountType;

    public String code;

    public String openid;

    public String accessToken;

    public Integer expires_in;

    public String refreshToken;

    public Builder() {
    }

    /**
     * 1表示微信登录 2表示QQ登录 3表示新浪微博登录 4表示小米账号登录
     */
    public Builder setAccountType(Integer accountType) {
      this.accountType = accountType;
      return this;
    }

    /**
     * 授权临时票据，参考相应oauth2.0协议
     */
    public Builder setCode(String code) {
      this.code = code;
      return this;
    }

    /**
     * 微博、qq登录客户端拿到的openid
     */
    public Builder setOpenid(String openid) {
      this.openid = openid;
      return this;
    }

    /**
     * //微博、qq登录客户端拿到的accessToken
     */
    public Builder setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    /**
     * /微博、qq登录客户端拿到的expires_in
     */
    public Builder setExpiresIn(Integer expires_in) {
      this.expires_in = expires_in;
      return this;
    }

    /**
     * //微博、qq登录客户端拿到的refreshToken
     */
    public Builder setRefreshToken(String refreshToken) {
      this.refreshToken = refreshToken;
      return this;
    }

    @Override
    public LoginReq build() {
      if (accountType == null) {
        throw Internal.missingRequiredFields(accountType, "accountType");
      }
      return new LoginReq(accountType, code, openid, accessToken, expires_in, refreshToken, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_LoginReq extends ProtoAdapter<LoginReq> {
    public ProtoAdapter_LoginReq() {
      super(FieldEncoding.LENGTH_DELIMITED, LoginReq.class);
    }

    @Override
    public int encodedSize(LoginReq value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.accountType)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.code)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.openid)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.accessToken)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.expires_in)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.refreshToken)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, LoginReq value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.accountType);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.code);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.openid);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.accessToken);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.expires_in);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.refreshToken);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public LoginReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setAccountType(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setCode(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setOpenid(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setAccessToken(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setExpiresIn(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setRefreshToken(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public LoginReq redact(LoginReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
