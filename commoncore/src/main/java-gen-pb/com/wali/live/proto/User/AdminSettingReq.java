// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 管理员设置
 * cmd:zhibo.user.adminsetting
 */
public final class AdminSettingReq extends Message<AdminSettingReq, AdminSettingReq.Builder> {
  public static final ProtoAdapter<AdminSettingReq> ADAPTER = new ProtoAdapter_AdminSettingReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ADMINUID = 0L;

  public static final Integer DEFAULT_OPERATION = 0;

  public static final String DEFAULT_ROOMID = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long adminUid;

  /**
   * 操作：1、添加 2、删除
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer operation;

  /**
   * 房间id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String roomId;

  public AdminSettingReq(Long adminUid, Integer operation, String roomId) {
    this(adminUid, operation, roomId, ByteString.EMPTY);
  }

  public AdminSettingReq(Long adminUid, Integer operation, String roomId,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.adminUid = adminUid;
    this.operation = operation;
    this.roomId = roomId;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.adminUid = adminUid;
    builder.operation = operation;
    builder.roomId = roomId;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AdminSettingReq)) return false;
    AdminSettingReq o = (AdminSettingReq) other;
    return unknownFields().equals(o.unknownFields())
        && adminUid.equals(o.adminUid)
        && operation.equals(o.operation)
        && Internal.equals(roomId, o.roomId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + adminUid.hashCode();
      result = result * 37 + operation.hashCode();
      result = result * 37 + (roomId != null ? roomId.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", adminUid=").append(adminUid);
    builder.append(", operation=").append(operation);
    if (roomId != null) builder.append(", roomId=").append(roomId);
    return builder.replace(0, 2, "AdminSettingReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return AdminSettingReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<AdminSettingReq, Builder> {
    public Long adminUid;

    public Integer operation;

    public String roomId;

    public Builder() {
    }

    public Builder setAdminUid(Long adminUid) {
      this.adminUid = adminUid;
      return this;
    }

    /**
     * 操作：1、添加 2、删除
     */
    public Builder setOperation(Integer operation) {
      this.operation = operation;
      return this;
    }

    /**
     * 房间id
     */
    public Builder setRoomId(String roomId) {
      this.roomId = roomId;
      return this;
    }

    @Override
    public AdminSettingReq build() {
      if (adminUid == null
          || operation == null) {
        throw Internal.missingRequiredFields(adminUid, "adminUid",
            operation, "operation");
      }
      return new AdminSettingReq(adminUid, operation, roomId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_AdminSettingReq extends ProtoAdapter<AdminSettingReq> {
    public ProtoAdapter_AdminSettingReq() {
      super(FieldEncoding.LENGTH_DELIMITED, AdminSettingReq.class);
    }

    @Override
    public int encodedSize(AdminSettingReq value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.adminUid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.operation)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.roomId)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AdminSettingReq value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.adminUid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.operation);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.roomId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AdminSettingReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setAdminUid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setOperation(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setRoomId(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AdminSettingReq redact(AdminSettingReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
