// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Relation.proto
package com.wali.live.proto.Relation;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 关注,kv
 */
public final class Following extends Message<Following, Following.Builder> {
  public static final ProtoAdapter<Following> ADAPTER = new ProtoAdapter_Following();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_TARGETID = 0L;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Boolean DEFAULT_PUSHABLE = false;

  public static final Boolean DEFAULT_ISBOTHWAY = false;

  /**
   * 被关注者userId
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long targetId;

  /**
   * 关注时间
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 是否允许推送 [默认true]
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean pushable;

  /**
   * 是否双向关注 [判断双向关注, 冗余存储]
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isBothway;

  public Following(Long targetId, Long createTime, Boolean pushable, Boolean isBothway) {
    this(targetId, createTime, pushable, isBothway, ByteString.EMPTY);
  }

  public Following(Long targetId, Long createTime, Boolean pushable, Boolean isBothway,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.targetId = targetId;
    this.createTime = createTime;
    this.pushable = pushable;
    this.isBothway = isBothway;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.targetId = targetId;
    builder.createTime = createTime;
    builder.pushable = pushable;
    builder.isBothway = isBothway;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Following)) return false;
    Following o = (Following) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(targetId, o.targetId)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(pushable, o.pushable)
        && Internal.equals(isBothway, o.isBothway);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (targetId != null ? targetId.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (pushable != null ? pushable.hashCode() : 0);
      result = result * 37 + (isBothway != null ? isBothway.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (targetId != null) builder.append(", targetId=").append(targetId);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (pushable != null) builder.append(", pushable=").append(pushable);
    if (isBothway != null) builder.append(", isBothway=").append(isBothway);
    return builder.replace(0, 2, "Following{").append('}').toString();
  }

  public byte[] toByteArray() {
    return Following.ADAPTER.encode(this);
  }

  public static final Following parseFrom(byte[] data) throws IOException {
    Following c = null;
       c = Following.ADAPTER.decode(data);
    return c;
  }

  /**
   * 被关注者userId
   */
  public Long getTargetId() {
    if(targetId==null){
        return DEFAULT_TARGETID;
    }
    return targetId;
  }

  /**
   * 关注时间
   */
  public Long getCreateTime() {
    if(createTime==null){
        return DEFAULT_CREATETIME;
    }
    return createTime;
  }

  /**
   * 是否允许推送 [默认true]
   */
  public Boolean getPushable() {
    if(pushable==null){
        return DEFAULT_PUSHABLE;
    }
    return pushable;
  }

  /**
   * 是否双向关注 [判断双向关注, 冗余存储]
   */
  public Boolean getIsBothway() {
    if(isBothway==null){
        return DEFAULT_ISBOTHWAY;
    }
    return isBothway;
  }

  /**
   * 被关注者userId
   */
  public boolean hasTargetId() {
    return targetId!=null;
  }

  /**
   * 关注时间
   */
  public boolean hasCreateTime() {
    return createTime!=null;
  }

  /**
   * 是否允许推送 [默认true]
   */
  public boolean hasPushable() {
    return pushable!=null;
  }

  /**
   * 是否双向关注 [判断双向关注, 冗余存储]
   */
  public boolean hasIsBothway() {
    return isBothway!=null;
  }

  public static final class Builder extends Message.Builder<Following, Builder> {
    public Long targetId;

    public Long createTime;

    public Boolean pushable;

    public Boolean isBothway;

    public Builder() {
    }

    /**
     * 被关注者userId
     */
    public Builder setTargetId(Long targetId) {
      this.targetId = targetId;
      return this;
    }

    /**
     * 关注时间
     */
    public Builder setCreateTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 是否允许推送 [默认true]
     */
    public Builder setPushable(Boolean pushable) {
      this.pushable = pushable;
      return this;
    }

    /**
     * 是否双向关注 [判断双向关注, 冗余存储]
     */
    public Builder setIsBothway(Boolean isBothway) {
      this.isBothway = isBothway;
      return this;
    }

    @Override
    public Following build() {
      return new Following(targetId, createTime, pushable, isBothway, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Following extends ProtoAdapter<Following> {
    public ProtoAdapter_Following() {
      super(FieldEncoding.LENGTH_DELIMITED, Following.class);
    }

    @Override
    public int encodedSize(Following value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.targetId)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.createTime)
          + ProtoAdapter.BOOL.encodedSizeWithTag(3, value.pushable)
          + ProtoAdapter.BOOL.encodedSizeWithTag(4, value.isBothway)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Following value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.targetId);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.createTime);
      ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.pushable);
      ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.isBothway);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Following decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTargetId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setCreateTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setPushable(ProtoAdapter.BOOL.decode(reader)); break;
          case 4: builder.setIsBothway(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Following redact(Following value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
