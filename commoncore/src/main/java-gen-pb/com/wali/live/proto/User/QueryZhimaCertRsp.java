// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class QueryZhimaCertRsp extends Message<QueryZhimaCertRsp, QueryZhimaCertRsp.Builder> {
  public static final ProtoAdapter<QueryZhimaCertRsp> ADAPTER = new ProtoAdapter_QueryZhimaCertRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RETCODE = 0;

  public static final Boolean DEFAULT_PASS = false;

  public static final String DEFAULT_FAILEDREASON = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer retCode;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean pass;

  /**
   * zhima返回的提示语
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String failedReason;

  public QueryZhimaCertRsp(Integer retCode, Boolean pass, String failedReason) {
    this(retCode, pass, failedReason, ByteString.EMPTY);
  }

  public QueryZhimaCertRsp(Integer retCode, Boolean pass, String failedReason,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.retCode = retCode;
    this.pass = pass;
    this.failedReason = failedReason;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.retCode = retCode;
    builder.pass = pass;
    builder.failedReason = failedReason;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof QueryZhimaCertRsp)) return false;
    QueryZhimaCertRsp o = (QueryZhimaCertRsp) other;
    return unknownFields().equals(o.unknownFields())
        && retCode.equals(o.retCode)
        && Internal.equals(pass, o.pass)
        && Internal.equals(failedReason, o.failedReason);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + retCode.hashCode();
      result = result * 37 + (pass != null ? pass.hashCode() : 0);
      result = result * 37 + (failedReason != null ? failedReason.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", retCode=").append(retCode);
    if (pass != null) builder.append(", pass=").append(pass);
    if (failedReason != null) builder.append(", failedReason=").append(failedReason);
    return builder.replace(0, 2, "QueryZhimaCertRsp{").append('}').toString();
  }

  public static final QueryZhimaCertRsp parseFrom(byte[] data) throws IOException {
    QueryZhimaCertRsp c = null;
       c = QueryZhimaCertRsp.ADAPTER.decode(data);
    return c;
  }

  public Integer getRetCode() {
    if(retCode==null){
        return DEFAULT_RETCODE;
    }
    return retCode;
  }

  public Boolean getPass() {
    if(pass==null){
        return DEFAULT_PASS;
    }
    return pass;
  }

  /**
   * zhima返回的提示语
   */
  public String getFailedReason() {
    if(failedReason==null){
        return DEFAULT_FAILEDREASON;
    }
    return failedReason;
  }

  public boolean hasRetCode() {
    return retCode!=null;
  }

  public boolean hasPass() {
    return pass!=null;
  }

  /**
   * zhima返回的提示语
   */
  public boolean hasFailedReason() {
    return failedReason!=null;
  }

  public static final class Builder extends Message.Builder<QueryZhimaCertRsp, Builder> {
    public Integer retCode;

    public Boolean pass;

    public String failedReason;

    public Builder() {
    }

    public Builder setRetCode(Integer retCode) {
      this.retCode = retCode;
      return this;
    }

    public Builder setPass(Boolean pass) {
      this.pass = pass;
      return this;
    }

    /**
     * zhima返回的提示语
     */
    public Builder setFailedReason(String failedReason) {
      this.failedReason = failedReason;
      return this;
    }

    @Override
    public QueryZhimaCertRsp build() {
      return new QueryZhimaCertRsp(retCode, pass, failedReason, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_QueryZhimaCertRsp extends ProtoAdapter<QueryZhimaCertRsp> {
    public ProtoAdapter_QueryZhimaCertRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, QueryZhimaCertRsp.class);
    }

    @Override
    public int encodedSize(QueryZhimaCertRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.retCode)
          + ProtoAdapter.BOOL.encodedSizeWithTag(2, value.pass)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.failedReason)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, QueryZhimaCertRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.retCode);
      ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.pass);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.failedReason);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public QueryZhimaCertRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRetCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setPass(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.setFailedReason(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public QueryZhimaCertRsp redact(QueryZhimaCertRsp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
