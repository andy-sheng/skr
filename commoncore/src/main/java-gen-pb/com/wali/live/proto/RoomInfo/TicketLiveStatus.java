// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: RoomInfo.proto
package com.wali.live.proto.RoomInfo;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 门票直播状态信息
 */
public final class TicketLiveStatus extends Message<TicketLiveStatus, TicketLiveStatus.Builder> {
  public static final ProtoAdapter<TicketLiveStatus> ADAPTER = new ProtoAdapter_TicketLiveStatus();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_TICKETID = 0;

  public static final Boolean DEFAULT_ISALREADYBUYTICKET = false;

  public static final Boolean DEFAULT_ISENABLETRAILER = false;

  public static final Integer DEFAULT_BUYTICKETCNT = 0;

  /**
   * 门票id（礼物id）
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer ticketId;

  /**
   * 用户是否已买票
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isAlreadyBuyTicket;

  /**
   * 主播是否允许试看
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isEnableTrailer;

  /**
   * 购买门票人数(结束页用到)
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer BuyTicketCnt;

  public TicketLiveStatus(Integer ticketId, Boolean isAlreadyBuyTicket, Boolean isEnableTrailer,
      Integer BuyTicketCnt) {
    this(ticketId, isAlreadyBuyTicket, isEnableTrailer, BuyTicketCnt, ByteString.EMPTY);
  }

  public TicketLiveStatus(Integer ticketId, Boolean isAlreadyBuyTicket, Boolean isEnableTrailer,
      Integer BuyTicketCnt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ticketId = ticketId;
    this.isAlreadyBuyTicket = isAlreadyBuyTicket;
    this.isEnableTrailer = isEnableTrailer;
    this.BuyTicketCnt = BuyTicketCnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ticketId = ticketId;
    builder.isAlreadyBuyTicket = isAlreadyBuyTicket;
    builder.isEnableTrailer = isEnableTrailer;
    builder.BuyTicketCnt = BuyTicketCnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TicketLiveStatus)) return false;
    TicketLiveStatus o = (TicketLiveStatus) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(ticketId, o.ticketId)
        && Internal.equals(isAlreadyBuyTicket, o.isAlreadyBuyTicket)
        && Internal.equals(isEnableTrailer, o.isEnableTrailer)
        && Internal.equals(BuyTicketCnt, o.BuyTicketCnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (ticketId != null ? ticketId.hashCode() : 0);
      result = result * 37 + (isAlreadyBuyTicket != null ? isAlreadyBuyTicket.hashCode() : 0);
      result = result * 37 + (isEnableTrailer != null ? isEnableTrailer.hashCode() : 0);
      result = result * 37 + (BuyTicketCnt != null ? BuyTicketCnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (ticketId != null) builder.append(", ticketId=").append(ticketId);
    if (isAlreadyBuyTicket != null) builder.append(", isAlreadyBuyTicket=").append(isAlreadyBuyTicket);
    if (isEnableTrailer != null) builder.append(", isEnableTrailer=").append(isEnableTrailer);
    if (BuyTicketCnt != null) builder.append(", BuyTicketCnt=").append(BuyTicketCnt);
    return builder.replace(0, 2, "TicketLiveStatus{").append('}').toString();
  }

  public byte[] toByteArray() {
    return TicketLiveStatus.ADAPTER.encode(this);
  }

  public static final TicketLiveStatus parseFrom(byte[] data) throws IOException {
    TicketLiveStatus c = null;
       c = TicketLiveStatus.ADAPTER.decode(data);
    return c;
  }

  /**
   * 门票id（礼物id）
   */
  public Integer getTicketId() {
    if(ticketId==null){
        return DEFAULT_TICKETID;
    }
    return ticketId;
  }

  /**
   * 用户是否已买票
   */
  public Boolean getIsAlreadyBuyTicket() {
    if(isAlreadyBuyTicket==null){
        return DEFAULT_ISALREADYBUYTICKET;
    }
    return isAlreadyBuyTicket;
  }

  /**
   * 主播是否允许试看
   */
  public Boolean getIsEnableTrailer() {
    if(isEnableTrailer==null){
        return DEFAULT_ISENABLETRAILER;
    }
    return isEnableTrailer;
  }

  /**
   * 购买门票人数(结束页用到)
   */
  public Integer getBuyTicketCnt() {
    if(BuyTicketCnt==null){
        return DEFAULT_BUYTICKETCNT;
    }
    return BuyTicketCnt;
  }

  /**
   * 门票id（礼物id）
   */
  public boolean hasTicketId() {
    return ticketId!=null;
  }

  /**
   * 用户是否已买票
   */
  public boolean hasIsAlreadyBuyTicket() {
    return isAlreadyBuyTicket!=null;
  }

  /**
   * 主播是否允许试看
   */
  public boolean hasIsEnableTrailer() {
    return isEnableTrailer!=null;
  }

  /**
   * 购买门票人数(结束页用到)
   */
  public boolean hasBuyTicketCnt() {
    return BuyTicketCnt!=null;
  }

  public static final class Builder extends Message.Builder<TicketLiveStatus, Builder> {
    public Integer ticketId;

    public Boolean isAlreadyBuyTicket;

    public Boolean isEnableTrailer;

    public Integer BuyTicketCnt;

    public Builder() {
    }

    /**
     * 门票id（礼物id）
     */
    public Builder setTicketId(Integer ticketId) {
      this.ticketId = ticketId;
      return this;
    }

    /**
     * 用户是否已买票
     */
    public Builder setIsAlreadyBuyTicket(Boolean isAlreadyBuyTicket) {
      this.isAlreadyBuyTicket = isAlreadyBuyTicket;
      return this;
    }

    /**
     * 主播是否允许试看
     */
    public Builder setIsEnableTrailer(Boolean isEnableTrailer) {
      this.isEnableTrailer = isEnableTrailer;
      return this;
    }

    /**
     * 购买门票人数(结束页用到)
     */
    public Builder setBuyTicketCnt(Integer BuyTicketCnt) {
      this.BuyTicketCnt = BuyTicketCnt;
      return this;
    }

    @Override
    public TicketLiveStatus build() {
      return new TicketLiveStatus(ticketId, isAlreadyBuyTicket, isEnableTrailer, BuyTicketCnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_TicketLiveStatus extends ProtoAdapter<TicketLiveStatus> {
    public ProtoAdapter_TicketLiveStatus() {
      super(FieldEncoding.LENGTH_DELIMITED, TicketLiveStatus.class);
    }

    @Override
    public int encodedSize(TicketLiveStatus value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.ticketId)
          + ProtoAdapter.BOOL.encodedSizeWithTag(2, value.isAlreadyBuyTicket)
          + ProtoAdapter.BOOL.encodedSizeWithTag(3, value.isEnableTrailer)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.BuyTicketCnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, TicketLiveStatus value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.ticketId);
      ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.isAlreadyBuyTicket);
      ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.isEnableTrailer);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.BuyTicketCnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public TicketLiveStatus decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTicketId(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setIsAlreadyBuyTicket(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.setIsEnableTrailer(ProtoAdapter.BOOL.decode(reader)); break;
          case 4: builder.setBuyTicketCnt(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public TicketLiveStatus redact(TicketLiveStatus value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
