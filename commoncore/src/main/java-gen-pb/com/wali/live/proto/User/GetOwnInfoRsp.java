// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class GetOwnInfoRsp extends Message<GetOwnInfoRsp, GetOwnInfoRsp.Builder> {
  public static final ProtoAdapter<GetOwnInfoRsp> ADAPTER = new ProtoAdapter_GetOwnInfoRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ERRORCODE = 0;

  public static final Boolean DEFAULT_NEED_BIND_PHONE = false;

  public static final String DEFAULT_PHONENUM = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer errorCode;

  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.User.PersonalInfo#ADAPTER"
  )
  public final PersonalInfo personalInfo;

  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.User.PersonalData#ADAPTER"
  )
  public final PersonalData personalData;

  /**
   * 排行榜前三用户ID
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> rank_top_three_list;

  @WireField(
      tag = 8,
      adapter = "com.wali.live.proto.User.Medal#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Medal> before_nickname_medal;

  @WireField(
      tag = 9,
      adapter = "com.wali.live.proto.User.Medal#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Medal> after_nickname_medal;

  @WireField(
      tag = 10,
      adapter = "com.wali.live.proto.User.Medal#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Medal> user_card_medal;

  /**
   * 是否需要绑定手机号 true 需要绑定弹窗 false 不需要弹窗
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean need_bind_phone;

  /**
   * 绑定的手机号码 新版废弃 移植到GetBindPhoneNumInfoReq
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Deprecated
  public final String phoneNum;

  @WireField(
      tag = 13,
      adapter = "com.wali.live.proto.User.Medal#ADAPTER"
  )
  public final Medal user_nobel_mmedal;

  public GetOwnInfoRsp(Integer errorCode, PersonalInfo personalInfo, PersonalData personalData,
      List<Long> rank_top_three_list, List<Medal> before_nickname_medal,
      List<Medal> after_nickname_medal, List<Medal> user_card_medal, Boolean need_bind_phone,
      String phoneNum, Medal user_nobel_mmedal) {
    this(errorCode, personalInfo, personalData, rank_top_three_list, before_nickname_medal, after_nickname_medal, user_card_medal, need_bind_phone, phoneNum, user_nobel_mmedal, ByteString.EMPTY);
  }

  public GetOwnInfoRsp(Integer errorCode, PersonalInfo personalInfo, PersonalData personalData,
      List<Long> rank_top_three_list, List<Medal> before_nickname_medal,
      List<Medal> after_nickname_medal, List<Medal> user_card_medal, Boolean need_bind_phone,
      String phoneNum, Medal user_nobel_mmedal, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.errorCode = errorCode;
    this.personalInfo = personalInfo;
    this.personalData = personalData;
    this.rank_top_three_list = Internal.immutableCopyOf("rank_top_three_list", rank_top_three_list);
    this.before_nickname_medal = Internal.immutableCopyOf("before_nickname_medal", before_nickname_medal);
    this.after_nickname_medal = Internal.immutableCopyOf("after_nickname_medal", after_nickname_medal);
    this.user_card_medal = Internal.immutableCopyOf("user_card_medal", user_card_medal);
    this.need_bind_phone = need_bind_phone;
    this.phoneNum = phoneNum;
    this.user_nobel_mmedal = user_nobel_mmedal;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.errorCode = errorCode;
    builder.personalInfo = personalInfo;
    builder.personalData = personalData;
    builder.rank_top_three_list = Internal.copyOf("rank_top_three_list", rank_top_three_list);
    builder.before_nickname_medal = Internal.copyOf("before_nickname_medal", before_nickname_medal);
    builder.after_nickname_medal = Internal.copyOf("after_nickname_medal", after_nickname_medal);
    builder.user_card_medal = Internal.copyOf("user_card_medal", user_card_medal);
    builder.need_bind_phone = need_bind_phone;
    builder.phoneNum = phoneNum;
    builder.user_nobel_mmedal = user_nobel_mmedal;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetOwnInfoRsp)) return false;
    GetOwnInfoRsp o = (GetOwnInfoRsp) other;
    return unknownFields().equals(o.unknownFields())
        && errorCode.equals(o.errorCode)
        && Internal.equals(personalInfo, o.personalInfo)
        && Internal.equals(personalData, o.personalData)
        && rank_top_three_list.equals(o.rank_top_three_list)
        && before_nickname_medal.equals(o.before_nickname_medal)
        && after_nickname_medal.equals(o.after_nickname_medal)
        && user_card_medal.equals(o.user_card_medal)
        && Internal.equals(need_bind_phone, o.need_bind_phone)
        && Internal.equals(phoneNum, o.phoneNum)
        && Internal.equals(user_nobel_mmedal, o.user_nobel_mmedal);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + errorCode.hashCode();
      result = result * 37 + (personalInfo != null ? personalInfo.hashCode() : 0);
      result = result * 37 + (personalData != null ? personalData.hashCode() : 0);
      result = result * 37 + rank_top_three_list.hashCode();
      result = result * 37 + before_nickname_medal.hashCode();
      result = result * 37 + after_nickname_medal.hashCode();
      result = result * 37 + user_card_medal.hashCode();
      result = result * 37 + (need_bind_phone != null ? need_bind_phone.hashCode() : 0);
      result = result * 37 + (phoneNum != null ? phoneNum.hashCode() : 0);
      result = result * 37 + (user_nobel_mmedal != null ? user_nobel_mmedal.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", errorCode=").append(errorCode);
    if (personalInfo != null) builder.append(", personalInfo=").append(personalInfo);
    if (personalData != null) builder.append(", personalData=").append(personalData);
    if (!rank_top_three_list.isEmpty()) builder.append(", rank_top_three_list=").append(rank_top_three_list);
    if (!before_nickname_medal.isEmpty()) builder.append(", before_nickname_medal=").append(before_nickname_medal);
    if (!after_nickname_medal.isEmpty()) builder.append(", after_nickname_medal=").append(after_nickname_medal);
    if (!user_card_medal.isEmpty()) builder.append(", user_card_medal=").append(user_card_medal);
    if (need_bind_phone != null) builder.append(", need_bind_phone=").append(need_bind_phone);
    if (phoneNum != null) builder.append(", phoneNum=").append(phoneNum);
    if (user_nobel_mmedal != null) builder.append(", user_nobel_mmedal=").append(user_nobel_mmedal);
    return builder.replace(0, 2, "GetOwnInfoRsp{").append('}').toString();
  }

  public static final GetOwnInfoRsp parseFrom(byte[] data) throws IOException {
    GetOwnInfoRsp c = null;
       c = GetOwnInfoRsp.ADAPTER.decode(data);
    return c;
  }

  public Integer getErrorCode() {
    if(errorCode==null){
        return DEFAULT_ERRORCODE;
    }
    return errorCode;
  }

  public PersonalInfo getPersonalInfo() {
    if(personalInfo==null){
        return new PersonalInfo.Builder().build();
    }
    return personalInfo;
  }

  public PersonalData getPersonalData() {
    if(personalData==null){
        return new PersonalData.Builder().build();
    }
    return personalData;
  }

  /**
   * 排行榜前三用户ID
   */
  public List<Long> getRankTopThreeListList() {
    if(rank_top_three_list==null){
        return new java.util.ArrayList<Long>();
    }
    return rank_top_three_list;
  }

  public List<Medal> getBeforeNicknameMedalList() {
    if(before_nickname_medal==null){
        return new java.util.ArrayList<Medal>();
    }
    return before_nickname_medal;
  }

  public List<Medal> getAfterNicknameMedalList() {
    if(after_nickname_medal==null){
        return new java.util.ArrayList<Medal>();
    }
    return after_nickname_medal;
  }

  public List<Medal> getUserCardMedalList() {
    if(user_card_medal==null){
        return new java.util.ArrayList<Medal>();
    }
    return user_card_medal;
  }

  /**
   * 是否需要绑定手机号 true 需要绑定弹窗 false 不需要弹窗
   */
  public Boolean getNeedBindPhone() {
    if(need_bind_phone==null){
        return DEFAULT_NEED_BIND_PHONE;
    }
    return need_bind_phone;
  }

  /**
   * 绑定的手机号码 新版废弃 移植到GetBindPhoneNumInfoReq
   */
  public String getPhoneNum() {
    if(phoneNum==null){
        return DEFAULT_PHONENUM;
    }
    return phoneNum;
  }

  public Medal getUserNobelMmedal() {
    if(user_nobel_mmedal==null){
        return new Medal.Builder().build();
    }
    return user_nobel_mmedal;
  }

  public boolean hasErrorCode() {
    return errorCode!=null;
  }

  public boolean hasPersonalInfo() {
    return personalInfo!=null;
  }

  public boolean hasPersonalData() {
    return personalData!=null;
  }

  /**
   * 排行榜前三用户ID
   */
  public boolean hasRankTopThreeListList() {
    return rank_top_three_list!=null;
  }

  public boolean hasBeforeNicknameMedalList() {
    return before_nickname_medal!=null;
  }

  public boolean hasAfterNicknameMedalList() {
    return after_nickname_medal!=null;
  }

  public boolean hasUserCardMedalList() {
    return user_card_medal!=null;
  }

  /**
   * 是否需要绑定手机号 true 需要绑定弹窗 false 不需要弹窗
   */
  public boolean hasNeedBindPhone() {
    return need_bind_phone!=null;
  }

  /**
   * 绑定的手机号码 新版废弃 移植到GetBindPhoneNumInfoReq
   */
  public boolean hasPhoneNum() {
    return phoneNum!=null;
  }

  public boolean hasUserNobelMmedal() {
    return user_nobel_mmedal!=null;
  }

  public static final class Builder extends Message.Builder<GetOwnInfoRsp, Builder> {
    public Integer errorCode;

    public PersonalInfo personalInfo;

    public PersonalData personalData;

    public List<Long> rank_top_three_list;

    public List<Medal> before_nickname_medal;

    public List<Medal> after_nickname_medal;

    public List<Medal> user_card_medal;

    public Boolean need_bind_phone;

    public String phoneNum;

    public Medal user_nobel_mmedal;

    public Builder() {
      rank_top_three_list = Internal.newMutableList();
      before_nickname_medal = Internal.newMutableList();
      after_nickname_medal = Internal.newMutableList();
      user_card_medal = Internal.newMutableList();
    }

    public Builder setErrorCode(Integer errorCode) {
      this.errorCode = errorCode;
      return this;
    }

    public Builder setPersonalInfo(PersonalInfo personalInfo) {
      this.personalInfo = personalInfo;
      return this;
    }

    public Builder setPersonalData(PersonalData personalData) {
      this.personalData = personalData;
      return this;
    }

    /**
     * 排行榜前三用户ID
     */
    public Builder addAllRankTopThreeList(List<Long> rank_top_three_list) {
      Internal.checkElementsNotNull(rank_top_three_list);
      this.rank_top_three_list = rank_top_three_list;
      return this;
    }

    public Builder addAllBeforeNicknameMedal(List<Medal> before_nickname_medal) {
      Internal.checkElementsNotNull(before_nickname_medal);
      this.before_nickname_medal = before_nickname_medal;
      return this;
    }

    public Builder addAllAfterNicknameMedal(List<Medal> after_nickname_medal) {
      Internal.checkElementsNotNull(after_nickname_medal);
      this.after_nickname_medal = after_nickname_medal;
      return this;
    }

    public Builder addAllUserCardMedal(List<Medal> user_card_medal) {
      Internal.checkElementsNotNull(user_card_medal);
      this.user_card_medal = user_card_medal;
      return this;
    }

    /**
     * 是否需要绑定手机号 true 需要绑定弹窗 false 不需要弹窗
     */
    public Builder setNeedBindPhone(Boolean need_bind_phone) {
      this.need_bind_phone = need_bind_phone;
      return this;
    }

    /**
     * 绑定的手机号码 新版废弃 移植到GetBindPhoneNumInfoReq
     */
    @Deprecated
    public Builder setPhoneNum(String phoneNum) {
      this.phoneNum = phoneNum;
      return this;
    }

    public Builder setUserNobelMmedal(Medal user_nobel_mmedal) {
      this.user_nobel_mmedal = user_nobel_mmedal;
      return this;
    }

    @Override
    public GetOwnInfoRsp build() {
      return new GetOwnInfoRsp(errorCode, personalInfo, personalData, rank_top_three_list, before_nickname_medal, after_nickname_medal, user_card_medal, need_bind_phone, phoneNum, user_nobel_mmedal, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetOwnInfoRsp extends ProtoAdapter<GetOwnInfoRsp> {
    public ProtoAdapter_GetOwnInfoRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetOwnInfoRsp.class);
    }

    @Override
    public int encodedSize(GetOwnInfoRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.errorCode)
          + PersonalInfo.ADAPTER.encodedSizeWithTag(2, value.personalInfo)
          + PersonalData.ADAPTER.encodedSizeWithTag(3, value.personalData)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(6, value.rank_top_three_list)
          + Medal.ADAPTER.asRepeated().encodedSizeWithTag(8, value.before_nickname_medal)
          + Medal.ADAPTER.asRepeated().encodedSizeWithTag(9, value.after_nickname_medal)
          + Medal.ADAPTER.asRepeated().encodedSizeWithTag(10, value.user_card_medal)
          + ProtoAdapter.BOOL.encodedSizeWithTag(11, value.need_bind_phone)
          + ProtoAdapter.STRING.encodedSizeWithTag(12, value.phoneNum)
          + Medal.ADAPTER.encodedSizeWithTag(13, value.user_nobel_mmedal)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetOwnInfoRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.errorCode);
      PersonalInfo.ADAPTER.encodeWithTag(writer, 2, value.personalInfo);
      PersonalData.ADAPTER.encodeWithTag(writer, 3, value.personalData);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 6, value.rank_top_three_list);
      Medal.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.before_nickname_medal);
      Medal.ADAPTER.asRepeated().encodeWithTag(writer, 9, value.after_nickname_medal);
      Medal.ADAPTER.asRepeated().encodeWithTag(writer, 10, value.user_card_medal);
      ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.need_bind_phone);
      ProtoAdapter.STRING.encodeWithTag(writer, 12, value.phoneNum);
      Medal.ADAPTER.encodeWithTag(writer, 13, value.user_nobel_mmedal);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetOwnInfoRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setErrorCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setPersonalInfo(PersonalInfo.ADAPTER.decode(reader)); break;
          case 3: builder.setPersonalData(PersonalData.ADAPTER.decode(reader)); break;
          case 6: builder.rank_top_three_list.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.before_nickname_medal.add(Medal.ADAPTER.decode(reader)); break;
          case 9: builder.after_nickname_medal.add(Medal.ADAPTER.decode(reader)); break;
          case 10: builder.user_card_medal.add(Medal.ADAPTER.decode(reader)); break;
          case 11: builder.setNeedBindPhone(ProtoAdapter.BOOL.decode(reader)); break;
          case 12: builder.setPhoneNum(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.setUserNobelMmedal(Medal.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetOwnInfoRsp redact(GetOwnInfoRsp value) {
      Builder builder = value.newBuilder();
      if (builder.personalInfo != null) builder.personalInfo = PersonalInfo.ADAPTER.redact(builder.personalInfo);
      if (builder.personalData != null) builder.personalData = PersonalData.ADAPTER.redact(builder.personalData);
      Internal.redactElements(builder.before_nickname_medal, Medal.ADAPTER);
      Internal.redactElements(builder.after_nickname_medal, Medal.ADAPTER);
      Internal.redactElements(builder.user_card_medal, Medal.ADAPTER);
      if (builder.user_nobel_mmedal != null) builder.user_nobel_mmedal = Medal.ADAPTER.redact(builder.user_nobel_mmedal);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
