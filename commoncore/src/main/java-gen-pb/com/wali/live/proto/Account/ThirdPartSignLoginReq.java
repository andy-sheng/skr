// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Account.proto
package com.wali.live.proto.Account;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 对接第三方账号签名登陆，比如对接真真海淘，直播客户端用户进入直播房间要打通用户对输入参数进行签名
 * cmd:zhibo.account.3partsignlogin
 */
public final class ThirdPartSignLoginReq extends Message<ThirdPartSignLoginReq, ThirdPartSignLoginReq.Builder> {
  public static final ProtoAdapter<ThirdPartSignLoginReq> ADAPTER = new ProtoAdapter_ThirdPartSignLoginReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_CHANNELID = "";

  public static final String DEFAULT_XUID = "";

  public static final Integer DEFAULT_SEX = 0;

  public static final String DEFAULT_NICKNAME = "";

  public static final String DEFAULT_HEADURL = "";

  public static final String DEFAULT_SIGN = "";

  /**
   * 给第三方分配的channelId
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String channelId;

  /**
   * 第三方用户id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String xuid;

  /**
   * 第三方用户性别1男2女0未知
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer sex;

  /**
   * 第三方用户昵称
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String nickname;

  /**
   * 第三方用户头像
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String headUrl;

  /**
   * 签名
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String sign;

  public ThirdPartSignLoginReq(String channelId, String xuid, Integer sex, String nickname,
      String headUrl, String sign) {
    this(channelId, xuid, sex, nickname, headUrl, sign, ByteString.EMPTY);
  }

  public ThirdPartSignLoginReq(String channelId, String xuid, Integer sex, String nickname,
      String headUrl, String sign, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.channelId = channelId;
    this.xuid = xuid;
    this.sex = sex;
    this.nickname = nickname;
    this.headUrl = headUrl;
    this.sign = sign;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.channelId = channelId;
    builder.xuid = xuid;
    builder.sex = sex;
    builder.nickname = nickname;
    builder.headUrl = headUrl;
    builder.sign = sign;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ThirdPartSignLoginReq)) return false;
    ThirdPartSignLoginReq o = (ThirdPartSignLoginReq) other;
    return unknownFields().equals(o.unknownFields())
        && channelId.equals(o.channelId)
        && xuid.equals(o.xuid)
        && sex.equals(o.sex)
        && nickname.equals(o.nickname)
        && headUrl.equals(o.headUrl)
        && sign.equals(o.sign);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + channelId.hashCode();
      result = result * 37 + xuid.hashCode();
      result = result * 37 + sex.hashCode();
      result = result * 37 + nickname.hashCode();
      result = result * 37 + headUrl.hashCode();
      result = result * 37 + sign.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", channelId=").append(channelId);
    builder.append(", xuid=").append(xuid);
    builder.append(", sex=").append(sex);
    builder.append(", nickname=").append(nickname);
    builder.append(", headUrl=").append(headUrl);
    builder.append(", sign=").append(sign);
    return builder.replace(0, 2, "ThirdPartSignLoginReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ThirdPartSignLoginReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<ThirdPartSignLoginReq, Builder> {
    public String channelId;

    public String xuid;

    public Integer sex;

    public String nickname;

    public String headUrl;

    public String sign;

    public Builder() {
    }

    /**
     * 给第三方分配的channelId
     */
    public Builder setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    /**
     * 第三方用户id
     */
    public Builder setXuid(String xuid) {
      this.xuid = xuid;
      return this;
    }

    /**
     * 第三方用户性别1男2女0未知
     */
    public Builder setSex(Integer sex) {
      this.sex = sex;
      return this;
    }

    /**
     * 第三方用户昵称
     */
    public Builder setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    /**
     * 第三方用户头像
     */
    public Builder setHeadUrl(String headUrl) {
      this.headUrl = headUrl;
      return this;
    }

    /**
     * 签名
     */
    public Builder setSign(String sign) {
      this.sign = sign;
      return this;
    }

    @Override
    public ThirdPartSignLoginReq build() {
      if (channelId == null
          || xuid == null
          || sex == null
          || nickname == null
          || headUrl == null
          || sign == null) {
        throw Internal.missingRequiredFields(channelId, "channelId",
            xuid, "xuid",
            sex, "sex",
            nickname, "nickname",
            headUrl, "headUrl",
            sign, "sign");
      }
      return new ThirdPartSignLoginReq(channelId, xuid, sex, nickname, headUrl, sign, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ThirdPartSignLoginReq extends ProtoAdapter<ThirdPartSignLoginReq> {
    public ProtoAdapter_ThirdPartSignLoginReq() {
      super(FieldEncoding.LENGTH_DELIMITED, ThirdPartSignLoginReq.class);
    }

    @Override
    public int encodedSize(ThirdPartSignLoginReq value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.channelId)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.xuid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.sex)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.nickname)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.headUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.sign)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ThirdPartSignLoginReq value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.channelId);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.xuid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.sex);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.nickname);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.headUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.sign);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ThirdPartSignLoginReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setChannelId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setXuid(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setSex(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setNickname(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setHeadUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setSign(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ThirdPartSignLoginReq redact(ThirdPartSignLoginReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
