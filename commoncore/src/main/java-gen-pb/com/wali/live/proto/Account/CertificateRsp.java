// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Account.proto
package com.wali.live.proto.Account;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class CertificateRsp extends Message<CertificateRsp, CertificateRsp.Builder> {
  public static final ProtoAdapter<CertificateRsp> ADAPTER = new ProtoAdapter_CertificateRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RETCODE = 0;

  public static final Integer DEFAULT_CERTIFICATIONTYPE = 0;

  public static final String DEFAULT_CERTIFICATION = "";

  /**
   * 0表示成功
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer retCode;

  /**
   * 认证类型
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer certificationType;

  /**
   * 认证信息
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String certification;

  public CertificateRsp(Integer retCode, Integer certificationType, String certification) {
    this(retCode, certificationType, certification, ByteString.EMPTY);
  }

  public CertificateRsp(Integer retCode, Integer certificationType, String certification,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.retCode = retCode;
    this.certificationType = certificationType;
    this.certification = certification;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.retCode = retCode;
    builder.certificationType = certificationType;
    builder.certification = certification;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CertificateRsp)) return false;
    CertificateRsp o = (CertificateRsp) other;
    return unknownFields().equals(o.unknownFields())
        && retCode.equals(o.retCode)
        && Internal.equals(certificationType, o.certificationType)
        && Internal.equals(certification, o.certification);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + retCode.hashCode();
      result = result * 37 + (certificationType != null ? certificationType.hashCode() : 0);
      result = result * 37 + (certification != null ? certification.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", retCode=").append(retCode);
    if (certificationType != null) builder.append(", certificationType=").append(certificationType);
    if (certification != null) builder.append(", certification=").append(certification);
    return builder.replace(0, 2, "CertificateRsp{").append('}').toString();
  }

  public static final CertificateRsp parseFrom(byte[] data) throws IOException {
    CertificateRsp c = null;
       c = CertificateRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 0表示成功
   */
  public Integer getRetCode() {
    if(retCode==null){
        return DEFAULT_RETCODE;
    }
    return retCode;
  }

  /**
   * 认证类型
   */
  public Integer getCertificationType() {
    if(certificationType==null){
        return DEFAULT_CERTIFICATIONTYPE;
    }
    return certificationType;
  }

  /**
   * 认证信息
   */
  public String getCertification() {
    if(certification==null){
        return DEFAULT_CERTIFICATION;
    }
    return certification;
  }

  /**
   * 0表示成功
   */
  public boolean hasRetCode() {
    return retCode!=null;
  }

  /**
   * 认证类型
   */
  public boolean hasCertificationType() {
    return certificationType!=null;
  }

  /**
   * 认证信息
   */
  public boolean hasCertification() {
    return certification!=null;
  }

  public static final class Builder extends Message.Builder<CertificateRsp, Builder> {
    public Integer retCode;

    public Integer certificationType;

    public String certification;

    public Builder() {
    }

    /**
     * 0表示成功
     */
    public Builder setRetCode(Integer retCode) {
      this.retCode = retCode;
      return this;
    }

    /**
     * 认证类型
     */
    public Builder setCertificationType(Integer certificationType) {
      this.certificationType = certificationType;
      return this;
    }

    /**
     * 认证信息
     */
    public Builder setCertification(String certification) {
      this.certification = certification;
      return this;
    }

    @Override
    public CertificateRsp build() {
      return new CertificateRsp(retCode, certificationType, certification, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CertificateRsp extends ProtoAdapter<CertificateRsp> {
    public ProtoAdapter_CertificateRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, CertificateRsp.class);
    }

    @Override
    public int encodedSize(CertificateRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.retCode)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.certificationType)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.certification)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CertificateRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.retCode);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.certificationType);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.certification);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CertificateRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRetCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setCertificationType(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setCertification(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CertificateRsp redact(CertificateRsp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
