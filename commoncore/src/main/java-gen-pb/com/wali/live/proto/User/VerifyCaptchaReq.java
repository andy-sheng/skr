// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 校验验证码
 * cmd:zhibo.user.verifycaptcha
 */
public final class VerifyCaptchaReq extends Message<VerifyCaptchaReq, VerifyCaptchaReq.Builder> {
  public static final ProtoAdapter<VerifyCaptchaReq> ADAPTER = new ProtoAdapter_VerifyCaptchaReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_PHONENUM = "";

  public static final Integer DEFAULT_TYPE = 0;

  public static final String DEFAULT_CAPTCHA = "";

  public static final String DEFAULT_IDCARDNUM = "";

  /**
   * 手机号
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String phoneNum;

  /**
   * 1: 小米认证验证码 2:实名认证请求
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer type;

  /**
   * 短信验证码
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String captcha;

  /**
   * 身份证号，只在小米直播认证请求时填写，实名认证请求时不要填写
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idCardNum;

  public VerifyCaptchaReq(String phoneNum, Integer type, String captcha, String idCardNum) {
    this(phoneNum, type, captcha, idCardNum, ByteString.EMPTY);
  }

  public VerifyCaptchaReq(String phoneNum, Integer type, String captcha, String idCardNum,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.phoneNum = phoneNum;
    this.type = type;
    this.captcha = captcha;
    this.idCardNum = idCardNum;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.phoneNum = phoneNum;
    builder.type = type;
    builder.captcha = captcha;
    builder.idCardNum = idCardNum;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VerifyCaptchaReq)) return false;
    VerifyCaptchaReq o = (VerifyCaptchaReq) other;
    return unknownFields().equals(o.unknownFields())
        && phoneNum.equals(o.phoneNum)
        && type.equals(o.type)
        && captcha.equals(o.captcha)
        && Internal.equals(idCardNum, o.idCardNum);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + phoneNum.hashCode();
      result = result * 37 + type.hashCode();
      result = result * 37 + captcha.hashCode();
      result = result * 37 + (idCardNum != null ? idCardNum.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", phoneNum=").append(phoneNum);
    builder.append(", type=").append(type);
    builder.append(", captcha=").append(captcha);
    if (idCardNum != null) builder.append(", idCardNum=").append(idCardNum);
    return builder.replace(0, 2, "VerifyCaptchaReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return VerifyCaptchaReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<VerifyCaptchaReq, Builder> {
    public String phoneNum;

    public Integer type;

    public String captcha;

    public String idCardNum;

    public Builder() {
    }

    /**
     * 手机号
     */
    public Builder setPhoneNum(String phoneNum) {
      this.phoneNum = phoneNum;
      return this;
    }

    /**
     * 1: 小米认证验证码 2:实名认证请求
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 短信验证码
     */
    public Builder setCaptcha(String captcha) {
      this.captcha = captcha;
      return this;
    }

    /**
     * 身份证号，只在小米直播认证请求时填写，实名认证请求时不要填写
     */
    public Builder setIdCardNum(String idCardNum) {
      this.idCardNum = idCardNum;
      return this;
    }

    @Override
    public VerifyCaptchaReq build() {
      if (phoneNum == null
          || type == null
          || captcha == null) {
        throw Internal.missingRequiredFields(phoneNum, "phoneNum",
            type, "type",
            captcha, "captcha");
      }
      return new VerifyCaptchaReq(phoneNum, type, captcha, idCardNum, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VerifyCaptchaReq extends ProtoAdapter<VerifyCaptchaReq> {
    public ProtoAdapter_VerifyCaptchaReq() {
      super(FieldEncoding.LENGTH_DELIMITED, VerifyCaptchaReq.class);
    }

    @Override
    public int encodedSize(VerifyCaptchaReq value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.phoneNum)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.type)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.captcha)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.idCardNum)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VerifyCaptchaReq value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.phoneNum);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.type);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.captcha);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.idCardNum);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VerifyCaptchaReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setPhoneNum(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setCaptcha(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setIdCardNum(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VerifyCaptchaReq redact(VerifyCaptchaReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
