// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 更新用户信息
 * cmd:zhibo.user.uploaduserpro
 */
public final class UploadUserPropertiesReq extends Message<UploadUserPropertiesReq, UploadUserPropertiesReq.Builder> {
  public static final ProtoAdapter<UploadUserPropertiesReq> ADAPTER = new ProtoAdapter_UploadUserPropertiesReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final Long DEFAULT_AVATAR = 0L;

  public static final String DEFAULT_NICKNAME = "";

  public static final String DEFAULT_SIGN = "";

  public static final Integer DEFAULT_GENDER = 0;

  public static final String DEFAULT_CERTIFICATION = "";

  public static final Integer DEFAULT_CERTIFICATIONTYPE = 0;

  public static final Boolean DEFAULT_IS_MANUAL = false;

  public static final String DEFAULT_COVER_PHOTO = "";

  public static final String DEFAULT_ADDRESS = "";

  public static final String DEFAULT_AVATAR_MD5 = "";

  public static final Integer DEFAULT_MODIFY_NICKNAME_INTERVAL = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long zuid;

  /**
   * 头像
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long avatar;

  /**
   * 昵称
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nickname;

  /**
   * 签名
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String sign;

  /**
   * 性别
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gender;

  /**
   * 认证信息
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String certification;

  /**
   * 认证类型, 新浪微博为1
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer certificationType;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_manual;

  /**
   * 个人主页的封面图片
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cover_photo;

  /**
   * 位置信息 , user_type=2时可修改
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String address;

  /**
   * 头像鉴权时传递的MD5值
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String avatar_md5;

  /**
   * 更新用户地区信息
   */
  @WireField(
      tag = 14,
      adapter = "com.wali.live.proto.User.Region#ADAPTER"
  )
  public final Region region;

  /**
   * 修改昵称间隔(秒). 如果为0 则不会限制
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer modify_nickname_interval;

  public UploadUserPropertiesReq(Long zuid, Long avatar, String nickname, String sign,
      Integer gender, String certification, Integer certificationType, Boolean is_manual,
      String cover_photo, String address, String avatar_md5, Region region,
      Integer modify_nickname_interval) {
    this(zuid, avatar, nickname, sign, gender, certification, certificationType, is_manual, cover_photo, address, avatar_md5, region, modify_nickname_interval, ByteString.EMPTY);
  }

  public UploadUserPropertiesReq(Long zuid, Long avatar, String nickname, String sign,
      Integer gender, String certification, Integer certificationType, Boolean is_manual,
      String cover_photo, String address, String avatar_md5, Region region,
      Integer modify_nickname_interval, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.zuid = zuid;
    this.avatar = avatar;
    this.nickname = nickname;
    this.sign = sign;
    this.gender = gender;
    this.certification = certification;
    this.certificationType = certificationType;
    this.is_manual = is_manual;
    this.cover_photo = cover_photo;
    this.address = address;
    this.avatar_md5 = avatar_md5;
    this.region = region;
    this.modify_nickname_interval = modify_nickname_interval;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.zuid = zuid;
    builder.avatar = avatar;
    builder.nickname = nickname;
    builder.sign = sign;
    builder.gender = gender;
    builder.certification = certification;
    builder.certificationType = certificationType;
    builder.is_manual = is_manual;
    builder.cover_photo = cover_photo;
    builder.address = address;
    builder.avatar_md5 = avatar_md5;
    builder.region = region;
    builder.modify_nickname_interval = modify_nickname_interval;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UploadUserPropertiesReq)) return false;
    UploadUserPropertiesReq o = (UploadUserPropertiesReq) other;
    return unknownFields().equals(o.unknownFields())
        && zuid.equals(o.zuid)
        && Internal.equals(avatar, o.avatar)
        && Internal.equals(nickname, o.nickname)
        && Internal.equals(sign, o.sign)
        && Internal.equals(gender, o.gender)
        && Internal.equals(certification, o.certification)
        && Internal.equals(certificationType, o.certificationType)
        && Internal.equals(is_manual, o.is_manual)
        && Internal.equals(cover_photo, o.cover_photo)
        && Internal.equals(address, o.address)
        && Internal.equals(avatar_md5, o.avatar_md5)
        && Internal.equals(region, o.region)
        && Internal.equals(modify_nickname_interval, o.modify_nickname_interval);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + zuid.hashCode();
      result = result * 37 + (avatar != null ? avatar.hashCode() : 0);
      result = result * 37 + (nickname != null ? nickname.hashCode() : 0);
      result = result * 37 + (sign != null ? sign.hashCode() : 0);
      result = result * 37 + (gender != null ? gender.hashCode() : 0);
      result = result * 37 + (certification != null ? certification.hashCode() : 0);
      result = result * 37 + (certificationType != null ? certificationType.hashCode() : 0);
      result = result * 37 + (is_manual != null ? is_manual.hashCode() : 0);
      result = result * 37 + (cover_photo != null ? cover_photo.hashCode() : 0);
      result = result * 37 + (address != null ? address.hashCode() : 0);
      result = result * 37 + (avatar_md5 != null ? avatar_md5.hashCode() : 0);
      result = result * 37 + (region != null ? region.hashCode() : 0);
      result = result * 37 + (modify_nickname_interval != null ? modify_nickname_interval.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", zuid=").append(zuid);
    if (avatar != null) builder.append(", avatar=").append(avatar);
    if (nickname != null) builder.append(", nickname=").append(nickname);
    if (sign != null) builder.append(", sign=").append(sign);
    if (gender != null) builder.append(", gender=").append(gender);
    if (certification != null) builder.append(", certification=").append(certification);
    if (certificationType != null) builder.append(", certificationType=").append(certificationType);
    if (is_manual != null) builder.append(", is_manual=").append(is_manual);
    if (cover_photo != null) builder.append(", cover_photo=").append(cover_photo);
    if (address != null) builder.append(", address=").append(address);
    if (avatar_md5 != null) builder.append(", avatar_md5=").append(avatar_md5);
    if (region != null) builder.append(", region=").append(region);
    if (modify_nickname_interval != null) builder.append(", modify_nickname_interval=").append(modify_nickname_interval);
    return builder.replace(0, 2, "UploadUserPropertiesReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return UploadUserPropertiesReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<UploadUserPropertiesReq, Builder> {
    public Long zuid;

    public Long avatar;

    public String nickname;

    public String sign;

    public Integer gender;

    public String certification;

    public Integer certificationType;

    public Boolean is_manual;

    public String cover_photo;

    public String address;

    public String avatar_md5;

    public Region region;

    public Integer modify_nickname_interval;

    public Builder() {
    }

    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * 头像
     */
    public Builder setAvatar(Long avatar) {
      this.avatar = avatar;
      return this;
    }

    /**
     * 昵称
     */
    public Builder setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    /**
     * 签名
     */
    public Builder setSign(String sign) {
      this.sign = sign;
      return this;
    }

    /**
     * 性别
     */
    public Builder setGender(Integer gender) {
      this.gender = gender;
      return this;
    }

    /**
     * 认证信息
     */
    public Builder setCertification(String certification) {
      this.certification = certification;
      return this;
    }

    /**
     * 认证类型, 新浪微博为1
     */
    public Builder setCertificationType(Integer certificationType) {
      this.certificationType = certificationType;
      return this;
    }

    public Builder setIsManual(Boolean is_manual) {
      this.is_manual = is_manual;
      return this;
    }

    /**
     * 个人主页的封面图片
     */
    public Builder setCoverPhoto(String cover_photo) {
      this.cover_photo = cover_photo;
      return this;
    }

    /**
     * 位置信息 , user_type=2时可修改
     */
    public Builder setAddress(String address) {
      this.address = address;
      return this;
    }

    /**
     * 头像鉴权时传递的MD5值
     */
    public Builder setAvatarMd5(String avatar_md5) {
      this.avatar_md5 = avatar_md5;
      return this;
    }

    /**
     * 更新用户地区信息
     */
    public Builder setRegion(Region region) {
      this.region = region;
      return this;
    }

    /**
     * 修改昵称间隔(秒). 如果为0 则不会限制
     */
    public Builder setModifyNicknameInterval(Integer modify_nickname_interval) {
      this.modify_nickname_interval = modify_nickname_interval;
      return this;
    }

    @Override
    public UploadUserPropertiesReq build() {
      if (zuid == null) {
        throw Internal.missingRequiredFields(zuid, "zuid");
      }
      return new UploadUserPropertiesReq(zuid, avatar, nickname, sign, gender, certification, certificationType, is_manual, cover_photo, address, avatar_md5, region, modify_nickname_interval, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UploadUserPropertiesReq extends ProtoAdapter<UploadUserPropertiesReq> {
    public ProtoAdapter_UploadUserPropertiesReq() {
      super(FieldEncoding.LENGTH_DELIMITED, UploadUserPropertiesReq.class);
    }

    @Override
    public int encodedSize(UploadUserPropertiesReq value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.zuid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.avatar)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.nickname)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.sign)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.gender)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.certification)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.certificationType)
          + ProtoAdapter.BOOL.encodedSizeWithTag(10, value.is_manual)
          + ProtoAdapter.STRING.encodedSizeWithTag(11, value.cover_photo)
          + ProtoAdapter.STRING.encodedSizeWithTag(12, value.address)
          + ProtoAdapter.STRING.encodedSizeWithTag(13, value.avatar_md5)
          + Region.ADAPTER.encodedSizeWithTag(14, value.region)
          + ProtoAdapter.UINT32.encodedSizeWithTag(15, value.modify_nickname_interval)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UploadUserPropertiesReq value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.zuid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.avatar);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.nickname);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.sign);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.gender);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.certification);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.certificationType);
      ProtoAdapter.BOOL.encodeWithTag(writer, 10, value.is_manual);
      ProtoAdapter.STRING.encodeWithTag(writer, 11, value.cover_photo);
      ProtoAdapter.STRING.encodeWithTag(writer, 12, value.address);
      ProtoAdapter.STRING.encodeWithTag(writer, 13, value.avatar_md5);
      Region.ADAPTER.encodeWithTag(writer, 14, value.region);
      ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.modify_nickname_interval);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UploadUserPropertiesReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setAvatar(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setNickname(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setSign(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setGender(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setCertification(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setCertificationType(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.setIsManual(ProtoAdapter.BOOL.decode(reader)); break;
          case 11: builder.setCoverPhoto(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.setAddress(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.setAvatarMd5(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.setRegion(Region.ADAPTER.decode(reader)); break;
          case 15: builder.setModifyNicknameInterval(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UploadUserPropertiesReq redact(UploadUserPropertiesReq value) {
      Builder builder = value.newBuilder();
      if (builder.region != null) builder.region = Region.ADAPTER.redact(builder.region);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
