// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: RoomInfo.proto
package com.wali.live.proto.RoomInfo;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class ContestInfo extends Message<ContestInfo, ContestInfo.Builder> {
  public static final ProtoAdapter<ContestInfo> ADAPTER = new ProtoAdapter_ContestInfo();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_ABLE_CONTEST = false;

  public static final Integer DEFAULT_REVIVAL_NUM = 0;

  public static final Boolean DEFAULT_IS_LATE = false;

  public static final String DEFAULT_CONTEST_ID = "";

  /**
   * 可以参加答题 true：可以
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean able_contest;

  /**
   * 复活卡数量
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer revival_num;

  /**
   * 是否迟到 true：是
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_late;

  /**
   * 场次id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String contest_id;

  public ContestInfo(Boolean able_contest, Integer revival_num, Boolean is_late,
      String contest_id) {
    this(able_contest, revival_num, is_late, contest_id, ByteString.EMPTY);
  }

  public ContestInfo(Boolean able_contest, Integer revival_num, Boolean is_late, String contest_id,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.able_contest = able_contest;
    this.revival_num = revival_num;
    this.is_late = is_late;
    this.contest_id = contest_id;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.able_contest = able_contest;
    builder.revival_num = revival_num;
    builder.is_late = is_late;
    builder.contest_id = contest_id;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ContestInfo)) return false;
    ContestInfo o = (ContestInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(able_contest, o.able_contest)
        && Internal.equals(revival_num, o.revival_num)
        && Internal.equals(is_late, o.is_late)
        && Internal.equals(contest_id, o.contest_id);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (able_contest != null ? able_contest.hashCode() : 0);
      result = result * 37 + (revival_num != null ? revival_num.hashCode() : 0);
      result = result * 37 + (is_late != null ? is_late.hashCode() : 0);
      result = result * 37 + (contest_id != null ? contest_id.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (able_contest != null) builder.append(", able_contest=").append(able_contest);
    if (revival_num != null) builder.append(", revival_num=").append(revival_num);
    if (is_late != null) builder.append(", is_late=").append(is_late);
    if (contest_id != null) builder.append(", contest_id=").append(contest_id);
    return builder.replace(0, 2, "ContestInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ContestInfo.ADAPTER.encode(this);
  }

  public static final ContestInfo parseFrom(byte[] data) throws IOException {
    ContestInfo c = null;
       c = ContestInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 可以参加答题 true：可以
   */
  public Boolean getAbleContest() {
    if(able_contest==null){
        return DEFAULT_ABLE_CONTEST;
    }
    return able_contest;
  }

  /**
   * 复活卡数量
   */
  public Integer getRevivalNum() {
    if(revival_num==null){
        return DEFAULT_REVIVAL_NUM;
    }
    return revival_num;
  }

  /**
   * 是否迟到 true：是
   */
  public Boolean getIsLate() {
    if(is_late==null){
        return DEFAULT_IS_LATE;
    }
    return is_late;
  }

  /**
   * 场次id
   */
  public String getContestId() {
    if(contest_id==null){
        return DEFAULT_CONTEST_ID;
    }
    return contest_id;
  }

  /**
   * 可以参加答题 true：可以
   */
  public boolean hasAbleContest() {
    return able_contest!=null;
  }

  /**
   * 复活卡数量
   */
  public boolean hasRevivalNum() {
    return revival_num!=null;
  }

  /**
   * 是否迟到 true：是
   */
  public boolean hasIsLate() {
    return is_late!=null;
  }

  /**
   * 场次id
   */
  public boolean hasContestId() {
    return contest_id!=null;
  }

  public static final class Builder extends Message.Builder<ContestInfo, Builder> {
    public Boolean able_contest;

    public Integer revival_num;

    public Boolean is_late;

    public String contest_id;

    public Builder() {
    }

    /**
     * 可以参加答题 true：可以
     */
    public Builder setAbleContest(Boolean able_contest) {
      this.able_contest = able_contest;
      return this;
    }

    /**
     * 复活卡数量
     */
    public Builder setRevivalNum(Integer revival_num) {
      this.revival_num = revival_num;
      return this;
    }

    /**
     * 是否迟到 true：是
     */
    public Builder setIsLate(Boolean is_late) {
      this.is_late = is_late;
      return this;
    }

    /**
     * 场次id
     */
    public Builder setContestId(String contest_id) {
      this.contest_id = contest_id;
      return this;
    }

    @Override
    public ContestInfo build() {
      return new ContestInfo(able_contest, revival_num, is_late, contest_id, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ContestInfo extends ProtoAdapter<ContestInfo> {
    public ProtoAdapter_ContestInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, ContestInfo.class);
    }

    @Override
    public int encodedSize(ContestInfo value) {
      return ProtoAdapter.BOOL.encodedSizeWithTag(1, value.able_contest)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.revival_num)
          + ProtoAdapter.BOOL.encodedSizeWithTag(3, value.is_late)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.contest_id)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ContestInfo value) throws IOException {
      ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.able_contest);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.revival_num);
      ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.is_late);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.contest_id);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ContestInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setAbleContest(ProtoAdapter.BOOL.decode(reader)); break;
          case 2: builder.setRevivalNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setIsLate(ProtoAdapter.BOOL.decode(reader)); break;
          case 4: builder.setContestId(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ContestInfo redact(ContestInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
