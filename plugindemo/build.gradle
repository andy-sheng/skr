apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId "com.wali.live.pldemo"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionName rootProject.ext.android["versionName"]
        versionCode rootProject.ext.android["versionCode"]
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
    }


    flavorDimensions("channel")

    productFlavors {
        channel_default{
            flavorDimensions("channel")
            buildConfigField("String","CHANNEL_NAME",'\"DEFAULT\"')
            resValue("string","demo_title",'这是default demo')
        }

        channel_replugin_plugin {
            flavorDimensions("channel")
            buildConfigField("String","CHANNEL_NAME",'\"REPLUGIN_PLUGIN\"')
            resValue("string","demo_title",'这是replugin_plugin demo')
        }
    }

    signingConfigs {
        release {
            storeFile file("../app/zq.keystore")
            storePassword "zq123456"
            keyAlias "release_key"
            keyPassword "zq123456"
            v2SigningEnabled false
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../app/proguard-rules.pro'
        }
    }
}

if (virtualApkEnable.toBoolean()) {
    apply plugin: 'com.didi.virtualapk.plugin'

    virtualApk {
        packageId = 0x6f // the package id of Resources.
        targetHost = './app' // the path of application module in host project.
        applyHostMapping = true //optional, default value: true.
    }
}


if (repluginPluginEnable.toBoolean()) {
    apply plugin: 'replugin-plugin-gradle'

    dependencies {
        api project(":baseLibrary:replugin-plugin-library")
    }
}

dependencies {
    //因为 CommonRes 依赖了 CommonSDK, 所以如果业务模块需要公共 UI 组件就依赖 CommonRes, 如果不需要就只依赖 CommonSDK
    api project(':commoncore')
    // the following aars are also compiled in host project, so they will be filterd when build plugin apk.
    // but, wo can still visit their Class and Resources.
//    implementation 'com.didi.virtualapk:core:0.9.8'
}