apply plugin: 'com.android.application'

if (virtualApkEnable.toBoolean()) {
    apply plugin: 'com.didi.virtualapk.host'
}
if (walleEnable.toBoolean()) {
    apply plugin: 'walle'
}

if (MatrixEnable.toBoolean()) {
    apply plugin: 'com.tencent.matrix-plugin'
    matrix {
        trace {
            enable = true    //if you don't want to use trace canary, set false
            /**
             * 每一行的格式是：方法id，方法accessType，类名，方法名，方法描述；
             * stack每行的格式：stack层级，方法id，方法执行次数，方法执行总耗时。
             * 得到有意义的原始堆栈的话，可以利用插桩函数表，通过方法id找到方法信息。
             */
            baseMethodMapFile = "${project.buildscript}/matrixTrace/methodMapping.txt"
            blackListFile = "${project.projectDir}/matrixTrace/blackMethodList.txt"
        }
    }
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions("channel")

    if (walleEnable.toBoolean()) {
        // 开启了美团的渠道打包，就不需要 productFlavors 了
        // 渠道信息在 app/channel里添加
    } else {
        // 弃用了
        productFlavors {
            channel_default {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"DEFAULT\"')
                resValue("string", "channel_desc", '自升级渠道')
            }

            channel_mi {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"MI_SHOP\"')
                resValue("string", "channel_desc", '小米应用商店')
            }

            channel_yyb {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"YYB_SHOP\"')
                resValue("string", "channel_desc", '应用宝')
            }

            channel_360 {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"360_SHOP\"')
                resValue("string", "channel_desc", '360应用商店')
            }

            channel_oppo {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"OPPO_SHOP\"')
                resValue("string", "channel_desc", 'oppo应用商店')
            }

            channel_vivo {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"VIVO_SHOP\"')
                resValue("string", "channel_desc", 'vivo应用商店')
            }

            channel_huawei {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"HUAWEI_SHOP\"')
                resValue("string", "channel_desc", '华为应用商店')
            }

            channel_baidu {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"BAIDU_SHOP\"')
                resValue("string", "channel_desc", '百度应用商店')
            }

            channel_kuaishou {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"KUAISHOU_SHOP\"')
                resValue("string", "channel_desc", '快手应用商店')
            }

            channel_toutiao {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"TOUTIAO_SHOP\"')
                resValue("string", "channel_desc", '头条应用商店')
            }

            channel_douyin {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"DOUYIN_SHOP\"')
                resValue("string", "channel_desc", '抖音应用商店')
            }

            channel_market2 {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"MARKET2\"')
                resValue("string", "channel_desc", '自定义渠道2')
            }

            channel_dev {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"DEV\"')
                resValue("string", "channel_desc", '测试环境dev')
            }

            channel_test {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"TEST\"')
                resValue("string", "channel_desc", '测试环境test')

//          applicationId "com.littlejie.multichannel.release "
//          可以替换androidmanifest文件中的标签，可作为快速渠道打包替换渠道名的一种方式，也可以自定义标签用来替换需要的文本
//          manifestPlaceholders = [UMENG_CHANNEL: "release "]
            }

            channel_sandbox {
                flavorDimensions("channel")
                buildConfigField("String", "CHANNEL_NAME", '\"SANDBOX\"')
                resValue("string", "channel_desc", '测试环境sandbox')
            }
        }
    }

    defaultConfig {
        if(compileModuleTest.toBoolean()){
            applicationId "com.bytedance.labcv.demo"
        }else{
            applicationId "com.zq.live"
        }

        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]

        multiDexEnabled true
        multiDexKeepProguard file('maindexlist.pro')
        multiDexKeepFile file('maindexlist.txt')

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
                includeCompileClasspath true
            }
        }

        ndk {
            abiFilters 'armeabi-v7a'
        }

        // 只支持中文，对减包有一定作用
        resConfigs "zh"
        if (JPushEnable.toBoolean()) {
            manifestPlaceholders = [
                    JPUSH_PKGNAME : "com.zq.live",
                    JPUSH_APPKEY  : "9172d83ddf6a6a1ab46d6dc3", //JPush 上注册的包名对应的 Appkey.
                    JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
                    XIAOMI_APPKEY : "MI‐5701793259750",//小米平台注册的appkey
                    XIAOMI_APPID  : "MI‐2882303761517932750",//小米平台注册的appid
                    HUAWEI_APPID  : "100590735",//华为平台注册的appid
                    MEIZU_APPKEY  : "MZ‐5c60db9001484b70adfad7321133c051",//魅族平台注册的appkey
                    MEIZU_APPID   : "MZ‐120073",//魅族平台注册的appid
                    OPPO_APPKEY   : "OP‐b6476d0350bf448da381e589e232add8", // OPPO平台注册的appkey
                    OPPO_APPID    : "OP‐3733726", // OPPO平台注册的appid
                    OPPO_APPSECRET: "OP‐1b038723163d485b9d739ad9ee0fbe8e",//OPPO平台注册的appsecret
                    //TODO vivo 平台 push 通道 申请失败。目前用的测试的推送类型
                    VIVO_APPKEY   : "5c26c7b0-8e5c-477e-96a1-294559c71da1", // VIVO平台注册的appkey
                    VIVO_APPID    : "13303", // VIVO平台注册的appid
            ]
        }
    }

    signingConfigs {
        myConfig {
            storeFile file("zq.keystore")
            storePassword "zq123456"
            keyAlias "zq_android_key"
            keyPassword "zq123456"
            if (walleEnable.toBoolean()) {
                v2SigningEnabled true
            } else {
                v2SigningEnabled false
            }
        }
    }

    buildTypes {

        debug {
            debuggable true
            signingConfig signingConfigs.myConfig
            aaptOptions.cruncherEnabled = false
        }

        release {
            debuggable false
            //签名
            signingConfig signingConfigs.myConfig
            //混淆!!! 注意，混淆会删除掉没有引用的类，除非加keep。
            //亲测，即使是循环依赖，混淆也能判断出来并移除,比如A依赖B,B依赖A,但没有其他依赖AB。
            //亲测，A被引用了，但A中方法(不管是不是static的) test 没有地方使用，test 会被移除，很牛逼
            //没用引用的drawable资源，也会删除变成0字节，
            // proguard 任务很耗时
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //启用代码压缩
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            //删减资源 特别有用，包能小不少
            shrinkResources true
            //压缩png 有用，包确实能小一点
            crunchPngs true
        }
    }

//    resourcePrefix "app_" //给 Module 内的资源名增加前缀, 避免资源名冲突

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                if (compileModuleTest.toBoolean()) {
                    manifest.srcFile 'src/main/release/AndroidManifestWithTestModule.xml'
                } else {
                    manifest.srcFile 'src/main/release/AndroidManifest.xml'
                }

            }
        }

        main {
            java.srcDirs += 'src/main/java-gen-db'
            java.srcDirs += 'src/main/java-gen-pb'
            res.srcDirs += ['src/main/res']
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
        additionalParameters = ['--multi-dex', '--minimal-main-dex',
                                '--set-max-idx-number=1000']
    }
}

dependencies {
    //因为 CommonRes 依赖了 CommonSDK, 所以如果业务模块需要公共 UI 组件就依赖 CommonRes, 如果不需要就只依赖 CommonSDK
    api project(':commoncore')
    if (isBuildModule.toBoolean()) {
        // 要区分，否则 build 编译会提示不能implementation application 的project
    } else {
        if (compileModuleTest.toBoolean()) {
            implementation project(":moduletest")
        }
//        implementation project(":modulechannel")
        //      implementation project(":modulewatch")
        implementation project(":Module:Home")
        implementation project(":Module:PlayWays")
        implementation project(":Module:IMKit")
//        implementation project(":Module:DoublePlayMode")
        //api(rootProject.ext.dependencies["multidex"])
//        implementation project(":Module:IMLib")
        //  tools
        annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    }
}

if (repluginHostEnable.toBoolean()) {
    apply plugin: 'replugin-host-gradle'
}

if (selfPluginOpenForCompile.toBoolean()) {
    apply plugin: 'my-inject-class-gradle'

    injectConfig {
        // 是否开启方法计时统计
        injectMethodStatictis = false
        // 是否开启gif ARGB_4444注入修改
        injectGIf = false
    }
}

if (walleEnable.toBoolean()) {
    walle {
        // 指定渠道包的输出路径
        apkOutputFolder = new File("${project.buildDir}/outputs/channels");
        // 定制渠道包的APK的文件名称
        //apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${buildTime}.apk';
        apkFileNameFormat = '${appName}-${channel}-${buildType}-v${versionCode}-${buildTime}.apk';
        // 渠道配置文件
        channelFile = new File("${project.getProjectDir()}/channel")
    }
}