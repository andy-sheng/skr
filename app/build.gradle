apply plugin: 'com.android.application'
if (virtualApkEnable.toBoolean()) {
    apply plugin: 'com.didi.virtualapk.host'
}
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions("channel")

    productFlavors {
        channel_default {
            flavorDimensions("channel")
            buildConfigField("String", "CHANNEL_NAME", '\"DEFAULT\"')
            resValue("string", "channel_desc", '这是default demo')
        }

        channel_mishop {
            flavorDimensions("channel")
            buildConfigField("String", "CHANNEL_NAME", '\"MI_SHOP\"')
            resValue("string", "channel_desc", '小米应用商店')
        }

        channel_yyb {
            flavorDimensions("channel")
            buildConfigField("String", "CHANNEL_NAME", '\"YYB_SHOP\"')
            resValue("string", "channel_desc", '应用宝')
        }
    }

    defaultConfig {
        applicationId "com.zq.live"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
                includeCompileClasspath true
            }
        }

        ndk {
            abiFilters 'armeabi-v7a'
        }
    }

    signingConfigs {
        myConfig {
            storeFile file("com.xiaomi.debug.keystore")
            storePassword "XiaomiIs#1"
            keyAlias "release_key"
            keyPassword "XiaomiIs#1"
            v2SigningEnabled false
        }
    }

    buildTypes {

        debug {
            debuggable true
            signingConfig signingConfigs.myConfig
            aaptOptions.cruncherEnabled = false
        }

        release {
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.myConfig
            shrinkResources true
        }
    }

//    resourcePrefix "app_" //给 Module 内的资源名增加前缀, 避免资源名冲突

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/release/AndroidManifest.xml'
            }
        }

        main {
            java.srcDirs += 'src/main/java-gen-db'
            java.srcDirs += 'src/main/java-gen-pb'
            res.srcDirs += ['src/main/res']
        }
    }
}

if (repluginHostEnable.toBoolean()) {
    apply plugin: 'replugin-host-gradle'
}

dependencies {
    //因为 CommonRes 依赖了 CommonSDK, 所以如果业务模块需要公共 UI 组件就依赖 CommonRes, 如果不需要就只依赖 CommonSDK
    api project(":modulecore")
    api project(":commonservice")
    if (isBuildModule.toBoolean()) {
        // 要区分，否则 build 编译会提示不能implementation application 的project
    } else {

        implementation project(":modulechannel")
        implementation project(":modulewatch")
        implementation project(":moduletest")
        //  tools
        annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    }
}


apply plugin: 'my-inject-class-gradle'

injectConfig {
    // 是否开启方法计时统计
    injectMethodStatictis = false
    // 是否开启gif ARGB_4444注入修改
    injectGIf = false
}
