package com.mi.liveassistant.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mi.liveassistant.dao.OwnUserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OWN_USER_INFO.
*/
public class OwnUserInfoDao extends AbstractDao<OwnUserInfo, Long> {

    public static final String TABLENAME = "OWN_USER_INFO";

    /**
     * Properties of entity OwnUserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, Long.class, "uid", false, "UID");
        public final static Property Avatar = new Property(2, Long.class, "avatar", false, "AVATAR");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Sign = new Property(4, String.class, "sign", false, "SIGN");
        public final static Property Gender = new Property(5, Integer.class, "gender", false, "GENDER");
        public final static Property Level = new Property(6, Integer.class, "level", false, "LEVEL");
        public final static Property Badge = new Property(7, Integer.class, "badge", false, "BADGE");
        public final static Property Certification = new Property(8, String.class, "certification", false, "CERTIFICATION");
        public final static Property CertificationType = new Property(9, Integer.class, "certificationType", false, "CERTIFICATION_TYPE");
        public final static Property WaitingCertificationType = new Property(10, Integer.class, "waitingCertificationType", false, "WAITING_CERTIFICATION_TYPE");
        public final static Property IsInspector = new Property(11, Boolean.class, "isInspector", false, "IS_INSPECTOR");
        public final static Property LiveTicketNum = new Property(12, Integer.class, "liveTicketNum", false, "LIVE_TICKET_NUM");
        public final static Property FansNum = new Property(13, Integer.class, "fansNum", false, "FANS_NUM");
        public final static Property FollowNum = new Property(14, Integer.class, "followNum", false, "FOLLOW_NUM");
        public final static Property SendDiamondNum = new Property(15, Integer.class, "sendDiamondNum", false, "SEND_DIAMOND_NUM");
        public final static Property SendVirtualDiamondNum = new Property(16, Integer.class, "sendVirtualDiamondNum", false, "SEND_VIRTUAL_DIAMOND_NUM");
        public final static Property VodNum = new Property(17, Integer.class, "vodNum", false, "VOD_NUM");
        public final static Property EarnNum = new Property(18, Integer.class, "earnNum", false, "EARN_NUM");
        public final static Property DiamondNum = new Property(19, Integer.class, "diamondNum", false, "DIAMOND_NUM");
        public final static Property VirtualDiamondNum = new Property(20, Integer.class, "virtualDiamondNum", false, "VIRTUAL_DIAMOND_NUM");
        public final static Property CoverPhotoJson = new Property(21, String.class, "coverPhotoJson", false, "COVER_PHOTO_JSON");
        public final static Property FirstAudit = new Property(22, Boolean.class, "firstAudit", false, "FIRST_AUDIT");
        public final static Property RedName = new Property(23, Boolean.class, "redName", false, "RED_NAME");
        public final static Property Region = new Property(24, byte[].class, "region", false, "REGION");
    };


    public OwnUserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public OwnUserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OWN_USER_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'UID' INTEGER," + // 1: uid
                "'AVATAR' INTEGER," + // 2: avatar
                "'NICKNAME' TEXT," + // 3: nickname
                "'SIGN' TEXT," + // 4: sign
                "'GENDER' INTEGER," + // 5: gender
                "'LEVEL' INTEGER," + // 6: level
                "'BADGE' INTEGER," + // 7: badge
                "'CERTIFICATION' TEXT," + // 8: certification
                "'CERTIFICATION_TYPE' INTEGER," + // 9: certificationType
                "'WAITING_CERTIFICATION_TYPE' INTEGER," + // 10: waitingCertificationType
                "'IS_INSPECTOR' INTEGER," + // 11: isInspector
                "'LIVE_TICKET_NUM' INTEGER," + // 12: liveTicketNum
                "'FANS_NUM' INTEGER," + // 13: fansNum
                "'FOLLOW_NUM' INTEGER," + // 14: followNum
                "'SEND_DIAMOND_NUM' INTEGER," + // 15: sendDiamondNum
                "'SEND_VIRTUAL_DIAMOND_NUM' INTEGER," + // 16: sendVirtualDiamondNum
                "'VOD_NUM' INTEGER," + // 17: vodNum
                "'EARN_NUM' INTEGER," + // 18: earnNum
                "'DIAMOND_NUM' INTEGER," + // 19: diamondNum
                "'VIRTUAL_DIAMOND_NUM' INTEGER," + // 20: virtualDiamondNum
                "'COVER_PHOTO_JSON' TEXT," + // 21: coverPhotoJson
                "'FIRST_AUDIT' INTEGER," + // 22: firstAudit
                "'RED_NAME' INTEGER," + // 23: redName
                "'REGION' BLOB);"); // 24: region
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OWN_USER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OwnUserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(2, uid);
        }
 
        Long avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindLong(3, avatar);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(5, sign);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(7, level);
        }
 
        Integer badge = entity.getBadge();
        if (badge != null) {
            stmt.bindLong(8, badge);
        }
 
        String certification = entity.getCertification();
        if (certification != null) {
            stmt.bindString(9, certification);
        }
 
        Integer certificationType = entity.getCertificationType();
        if (certificationType != null) {
            stmt.bindLong(10, certificationType);
        }
 
        Integer waitingCertificationType = entity.getWaitingCertificationType();
        if (waitingCertificationType != null) {
            stmt.bindLong(11, waitingCertificationType);
        }
 
        Boolean isInspector = entity.getIsInspector();
        if (isInspector != null) {
            stmt.bindLong(12, isInspector ? 1l: 0l);
        }
 
        Integer liveTicketNum = entity.getLiveTicketNum();
        if (liveTicketNum != null) {
            stmt.bindLong(13, liveTicketNum);
        }
 
        Integer fansNum = entity.getFansNum();
        if (fansNum != null) {
            stmt.bindLong(14, fansNum);
        }
 
        Integer followNum = entity.getFollowNum();
        if (followNum != null) {
            stmt.bindLong(15, followNum);
        }
 
        Integer sendDiamondNum = entity.getSendDiamondNum();
        if (sendDiamondNum != null) {
            stmt.bindLong(16, sendDiamondNum);
        }
 
        Integer sendVirtualDiamondNum = entity.getSendVirtualDiamondNum();
        if (sendVirtualDiamondNum != null) {
            stmt.bindLong(17, sendVirtualDiamondNum);
        }
 
        Integer vodNum = entity.getVodNum();
        if (vodNum != null) {
            stmt.bindLong(18, vodNum);
        }
 
        Integer earnNum = entity.getEarnNum();
        if (earnNum != null) {
            stmt.bindLong(19, earnNum);
        }
 
        Integer diamondNum = entity.getDiamondNum();
        if (diamondNum != null) {
            stmt.bindLong(20, diamondNum);
        }
 
        Integer virtualDiamondNum = entity.getVirtualDiamondNum();
        if (virtualDiamondNum != null) {
            stmt.bindLong(21, virtualDiamondNum);
        }
 
        String coverPhotoJson = entity.getCoverPhotoJson();
        if (coverPhotoJson != null) {
            stmt.bindString(22, coverPhotoJson);
        }
 
        Boolean firstAudit = entity.getFirstAudit();
        if (firstAudit != null) {
            stmt.bindLong(23, firstAudit ? 1l: 0l);
        }
 
        Boolean redName = entity.getRedName();
        if (redName != null) {
            stmt.bindLong(24, redName ? 1l: 0l);
        }
 
        byte[] region = entity.getRegion();
        if (region != null) {
            stmt.bindBlob(25, region);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OwnUserInfo readEntity(Cursor cursor, int offset) {
        OwnUserInfo entity = new OwnUserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sign
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // level
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // badge
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // certification
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // certificationType
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // waitingCertificationType
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isInspector
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // liveTicketNum
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // fansNum
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // followNum
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // sendDiamondNum
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // sendVirtualDiamondNum
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // vodNum
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // earnNum
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // diamondNum
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // virtualDiamondNum
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // coverPhotoJson
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0, // firstAudit
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // redName
            cursor.isNull(offset + 24) ? null : cursor.getBlob(offset + 24) // region
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OwnUserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSign(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLevel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBadge(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCertification(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCertificationType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setWaitingCertificationType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setIsInspector(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setLiveTicketNum(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setFansNum(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setFollowNum(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setSendDiamondNum(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setSendVirtualDiamondNum(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setVodNum(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setEarnNum(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setDiamondNum(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setVirtualDiamondNum(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setCoverPhotoJson(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setFirstAudit(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0);
        entity.setRedName(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setRegion(cursor.isNull(offset + 24) ? null : cursor.getBlob(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OwnUserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OwnUserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
