syntax = "proto3";

import "Common.proto";

package com.zq.live.proto.Room;

/**

java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies_backup.jar \
--proto_path=./proto --java_out=./Module/RankingMode/src/main/java-gen-pb/ Room.proto

*/

// 房间消息：此结构会通过pb编码后，通过聊天室通道到达客户端
message RoomMsg
{
    sint64 timeMs        = 1; //房间消息产生时间，单位毫秒
    ERoomMsgType msgType = 2; //消息类型
    uint32 roomID        = 3; //房间ID
    sint64 no            = 4; //房间内的消息序号，每个房间有自己的消息序号,不存在则系统生成,一般情况下调用方不必设置
    EMsgPosType posType  = 5; //消息显示位置类型
    Common.UserInfo sender      = 6; //发送者简要信息

    CommentMsg commentMsg           = 10; // 评论消息 msgType == RM_COMMENT
    SpecialEmojiMsg specialEmojiMsg = 11; // 特殊表情消息  msgType == RM_SPECIAL_EMOJI
    DynamicEmojiMsg dynamicemojiMsg = 12; // 动态表情消息  msgType == RM_DYNAMIC_EMOJI

    JoinActionMsg joinActionMsg                   = 100; //加入游戏指令消息 msgType == RM_JOIN_ACTION
    JoinNoticeMsg joinNoticeMsg                   = 101; //加入游戏通知消息 msgType == RM_JOIN_NOTICE
    ReadyNoticeMsg readyNoticeMsg                 = 102; //准备游戏通知消息 msgType == RM_READY_NOTICE
    RoundOverMsg roundOverMsg                     = 104; //游戏轮次结束通知消息 msgType == RM_ROUND_OVER
    RoundAndGameOverMsg roundAndGameOverMsg       = 105; //轮次和游戏结束通知消息 msgType == RM_ROUND_AND_GAME_OVER
    QuitGameMsg quitGameMsg                       = 106; //退出游戏通知  msgType == RM_QUIT_GAME
    AppSwapMsg appSwapMsg                         = 107; //app进程后台通知  msgType ==  RM_APP_SWAP
    SyncStatusMsg syncStatusMsg                   = 108; //状态同步信令 msgType == RM_SYNC_STATUS
}

// 消息位置类型
enum EMsgPosType {
    EPT_UNKNOWN = 0; // 未知位置
    EPT_NORMAL  = 1; // 一般评论消息
    EPT_CENTER  = 2; // 在整个页面中心区域显示的消息
    EPT_TOP     = 3; // 页面上方
    EPT_BOTTOM  = 4; // 页面底部
}

// ERoomMsgType 房间消息类型
enum ERoomMsgType {
    RM_UNKNOWN = 0; //未知消息

    RM_COMMENT       = 10; //普通评论消息
    RM_SPECIAL_EMOJI = 11; //特殊表情消息
    RM_DYNAMIC_EMOJI = 12; //动态表情消息

    RM_JOIN_ACTION            = 100; //加入游戏指令消息
    RM_JOIN_NOTICE            = 101; //加入游戏通知消息
    RM_READY_NOTICE           = 102; //准备游戏通知消息
    RM_ROUND_OVER             = 103; //游戏轮次结束通知消息
    RM_ROUND_AND_GAME_OVER    = 104; //轮次和游戏结束通知消息
    RM_QUIT_GAME              = 105; //退出游戏通知
    RM_APP_SWAP               = 106; //app进程后台切换通知
    RM_SYNC_STATUS            = 107; //状态同步
}

// 准备并开始游戏通知消息
message ReadyAndStartNoticeMsg
{
    uint32 readyUserID  = 1; //准备用户ID
    sint64 readyTimeMs  = 2; //准备的毫秒时间戳
    sint64 startTimeMS  = 3; //开始的毫秒时间戳
    uint32 firstUserID  = 4; //第一个用户ID
    uint32 firstMusicID = 5; //第一首歌曲ID
}

// 普通评论消息
message CommentMsg
{
    string text = 1; //发表内容
}

// 加入指令
message JoinActionMsg
{
    uint32 gameID                      = 1; //游戏ID
    sint64 CreateTimeMs                = 2; //创建毫秒时间戳
    repeated PlayerInfo players        = 3; //玩家信息
    repeated Common.MusicInfo commonMusicInfo = 4; //共同演唱音乐信息
}

message PlayerInfo
{
    Common.UserInfo userInfo            = 1; // 玩家信息
    repeated Common.MusicInfo musicInfo = 2; //演唱信息
}

// 特殊表情消息
message SpecialEmojiMsg
{
    uint32 id = 1; //表情包id
}

// 动态表情消息
message DynamicEmojiMsg
{
    uint32 id = 1; //表情包id
}

// 加入通知消息
message JoinNoticeMsg
{
    repeated JoinInfo joinInfo = 1; //加入游戏的信息
    uint32 hasJoinedUserCnt    = 2; //已经加入游戏的人数
    sint32 readyClockResMs     = 3; //准备时钟剩余秒数,最后一个玩家加入后，赋值
}

message JoinInfo
{
    uint32 userID     = 1; //用户ID
    uint32 joinSeq    = 2; //加入顺序
    sint64 joinTimeMs = 3; //加入毫秒时间戳
}

message RoundInfo
{
    uint32 userID       = 1; //玩家id
    uint32 playbookID   = 2; //曲库id
    uint32 roundSeq     = 3; //轮次顺序
    uint32 singBeginMs = 4; //演唱开始相对时间（相对于startTimeMs时间）
    uint32 singEndMs   = 5; //演唱结束相对时间（相对于startTimeMs时间）
}

message ReadyInfo
{
    uint32 userID      = 1; //用户id
    uint32 readySeq    = 2; //准备顺序
    sint64 readyTimeMs = 3; //准备时间戳
}

message OnlineInfo
{
    uint32 userID      = 1; //用户id
    bool isOnline = 2; //是否在线
}

message GameStartInfo
{
    sint64 startTimeMs   = 1; //开始时间戳
    sint64 startPassedMs = 2; //已经开始时间
}

// 准备游戏通知消息
message ReadyNoticeMsg
{
    repeated ReadyInfo readyInfo = 1; //准备信息
    sint32 hasReadyedUserCnt     = 2; //已经准备人数
    bool isGameStart             = 3; //游戏是否开始
    repeated RoundInfo roundInfo = 4; //轮次信息
    GameStartInfo gameStartInfo            = 5; // 游戏信息
}

// 游戏轮次结束通知消息
message RoundOverMsg
{
    sint64 roundOverTimeMs = 1; //本轮次结束的毫秒时间戳
    RoundInfo currentRound = 2; //当前轮次信息
    RoundInfo nextRound    = 3; //下个轮次信息
}

// 轮次和游戏结束通知消息
message RoundAndGameOverMsg
{
    sint64 roundOverTimeMs = 1; //轮次结束的毫秒时间戳
    RoundInfo currentRound = 2; //当前轮次信息
}

message QuitGameMsg
{
    uint32 quitUserID = 1; //退出玩家ID
    sint64 quitTimeMs = 2; //退出毫秒时间戳
}

message AppSwapMsg
{
    uint32 swapUserID = 1; //玩家ID
    sint64 swapTimsMs = 2; //切换时间戳
    bool swapOut      = 3; //后台运行
    bool swapIn       = 4; // 前台运行
}

message SyncStatusMsg
{
    sint64 syncStatusTimeMs = 1; //状态同步时的毫秒时间戳
    sint64 gameOverTimeMs = 2;   //游戏结束时间
    repeated OnlineInfo onlineInfo = 3;//在线状态
    RoundInfo currentRound = 4; //当前轮次信息
    RoundInfo nextRound    = 5; //下个轮次信息
}


