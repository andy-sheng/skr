package com.wali.live.proto.Relation;

/**

java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
--proto_path=./proto --java_out=./modulecore/src/main/java-gen-pb/ Relation.proto

*/
// 关系
//粉丝,mlist
message Follower {
    optional uint64 createTime = 1; //关注时间
    optional bool pushable = 2; //是否允许推送 [默认true, 冗余存储]
}
//关注,kv
message Following {
    optional uint64 targetId = 1; //被关注者userId
    optional uint64 createTime = 2; //关注时间
    optional bool pushable = 3; //是否允许推送 [默认true]
    optional bool isBothway = 4; //是否双向关注 [判断双向关注, 冗余存储]
}
//黑名单,kv
message Blocker {
    optional uint64 targetId = 1; //被拉黑用户userId
    optional uint64 createTime = 2; //拉黑时间
}
message FollowingList {
    repeated Following followings = 1; //关注列表
}
message BlockerList {
    repeated Blocker blockers = 1; //黑名单列表
}
//用户资料
message UserInfo {
    required uint64 userId = 1; //uid
    optional uint64 avatar = 2; //头像
    optional string nickname = 3; //昵称
    optional string signature = 4; //签名
    optional uint32 gender = 5; //性别
    optional uint32 level = 6; //等级
    optional uint32 badge = 7; //徽章
    optional uint64 updateTime = 8; //更新时间，水位
    repeated uint64 adminUids = 9; //管理员
    optional string certification = 10; //认证信息
    optional bool isFollowing = 11; //是否关注 [仅在查询别人的粉丝、关注列表时需要]
    optional bool isPushable = 12; //是否推送 [仅在查询关注列表时需要]
    optional bool isBothway = 13; //是否双向关注 [判断双向关注]
    optional uint32 certification_type = 14; //认证类型
    optional bool isPking = 15; //是否pk中
    optional bool isShowing = 16; //是否在直播
    optional uint32 viewerCnt = 17; //直播观众数
}

//关注请求
message FollowRequest {
    required uint64 userId = 1; //uid
    required uint64 targetId = 2; //对方userId
    optional string roomId = 3; //主播房间id [仅在房间关注主播时设置]
    optional uint32 roomType = 4; //房间类型, 1:普通房间, 2:pk中的房间
}
message FollowResponse {
    required uint32 code = 1; //状态码
    optional bool isBothway = 2; //是否双向关注
}
//取消关注请求
message UnFollowRequest {
    required uint64 userId = 1; //uid
    required uint64 targetId = 2; //对方userId
}
message UnFollowResponse {
    required uint32 code = 1; //状态码
}
//拉黑请求
message BlockRequest {
    required uint64 userId = 1; //uid
    required uint64 targetId = 2; //对方userId
}
message BlockResponse {
    required uint32 code = 1; //状态码
}
//取消拉黑请求
message UnBlockRequest {
    required uint64 userId = 1; //uid
    required uint64 targetId = 2; //对方userId
}
message UnBlockResponse {
    required uint32 code = 1; //状态码
}
//关注推送设置
message SetPushRequest {
    required uint64 userId = 1; //uid
    required uint64 targetId = 2; //对方userId
    required bool pushable = 3; //是否推送
}
message SetPushResponse {
    required uint32 code = 2; //状态码
}
//查询关注列表
message FollowingListRequest {
    required uint64 userId = 1;
    optional uint32 offset = 2; //偏移量,默认0
    optional uint32 limit = 3; //拉取数量,默认100
    optional bool isBothway = 4; //是否查询双向关注
    optional uint64 syncTime = 5; //本地水位 [仅在同步自己的关注列表时需要]
}
message FollowingListResponse {
    required uint32 code = 1; //状态码
    repeated UserInfo users = 2; //关注列表
    optional uint32 total = 3; //总数
    optional uint64 syncTime = 4; //最新水位 [仅在同步自己的关注列表时设置]
}
//查询粉丝列表
message FollowerListRequest {
    required uint64 userId = 1;
    optional uint32 offset = 2; //偏移量,默认0
    optional uint32 limit = 3; //拉取数量,默认100
}
message FollowerListResponse {
    required uint32 code = 1; //状态码
    repeated UserInfo users = 2; //粉丝列表
    optional uint32 total = 3; //总数
}

//查询黑名单列表
message BlockerListRequest {
    required uint64 userId = 1;
    optional uint32 offset = 2; //偏移量,默认0
    optional uint32 limit = 3; //拉取数量,默认100
}
message BlockerListResponse {
    required uint32 code = 1; //状态码
    repeated UserInfo users = 2; //黑名单列表
    optional uint32 total = 3; //总数
}

//查询可以PK的用户列表
message PkUserListRequest {
    required uint64 userId = 1;
}
message PkUserListResponse {
    required uint32 code = 1; //状态码
    repeated UserInfo users = 2; //用户列表
}

//查询可以连麦的用户列表
message MicUserListRequest {
    required uint64 userId = 1;
    required string roomId = 2; //房间id
}
message MicUserListResponse {
    required uint32 code = 1; //状态码
    repeated UserInfo users = 2; //用户列表
}

//本场踢人
//zhibo.live.kickviewer
message RoomKickViewerReq {
    optional uint64 zuid = 1; // 主播id
    optional uint64 operatorId = 2; //操作人id
    optional string liveId = 3; // 直播id
    repeated uint64 kickedId = 4; //被踢用户id
}

message RoomKickViewerRsp {
    required uint32 retCode = 1; //0:表示成功, 5005:操作人无权限
}

//订阅请求
message SubscribeRequest {
    required uint64 userId = 1; //主动订阅方userid(用户)
    required uint64 targetId = 2; //被动订阅方userid(主播)
}
message SubscribeResponse {
    required uint32 code = 1; //状态码
}
//查询某个主播的订阅情况
message GetSubscribeInfoRequest {
    required uint64 userId = 1; //主动订阅方userid(用户)
    required uint64 targetId = 2; //被动订阅方userid(主播)
}
message GetSubscribeInfoResponse {
    required uint32 code = 1; //状态码
    optional bool isSubscribe = 2; //是否已订阅
    optional uint32 subscribeNum = 3; //该主播被订阅的用户数
}

//批量查询在线用户
//cmd:zhibo.relation.getmultionlineuser
message GetMultiOnlineUserRequest {
    repeated uint64 uids = 1; //用户id
}
message GetMultiOnlineUserResponse {
    required uint32 code = 1; //状态码
    repeated uint64 uids = 2; //在线用户id
}