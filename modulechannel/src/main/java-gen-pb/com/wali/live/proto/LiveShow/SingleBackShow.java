// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 一个用户的单条回放记录
 */
public final class SingleBackShow extends Message<SingleBackShow, SingleBackShow.Builder> {
  public static final ProtoAdapter<SingleBackShow> ADAPTER = new ProtoAdapter_SingleBackShow();

  private static final long serialVersionUID = 0L;

  /**
   * 主播信息
   */
  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.LiveShow.UserShow#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final UserShow user;

  /**
   * 回放详情
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LiveShow.BackInfo#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final BackInfo back;

  public SingleBackShow(UserShow user, BackInfo back) {
    this(user, back, ByteString.EMPTY);
  }

  public SingleBackShow(UserShow user, BackInfo back, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.user = user;
    this.back = back;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.user = user;
    builder.back = back;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SingleBackShow)) return false;
    SingleBackShow o = (SingleBackShow) other;
    return unknownFields().equals(o.unknownFields())
        && user.equals(o.user)
        && back.equals(o.back);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + user.hashCode();
      result = result * 37 + back.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", user=").append(user);
    builder.append(", back=").append(back);
    return builder.replace(0, 2, "SingleBackShow{").append('}').toString();
  }

  public byte[] toByteArray() {
    return SingleBackShow.ADAPTER.encode(this);
  }

  public static final SingleBackShow parseFrom(byte[] data) throws IOException {
    SingleBackShow c = null;
       c = SingleBackShow.ADAPTER.decode(data);
    return c;
  }

  /**
   * 主播信息
   */
  public UserShow getUser() {
    if(user==null){
        return new UserShow.Builder().build();
    }
    return user;
  }

  /**
   * 回放详情
   */
  public BackInfo getBack() {
    if(back==null){
        return new BackInfo.Builder().build();
    }
    return back;
  }

  /**
   * 主播信息
   */
  public boolean hasUser() {
    return user!=null;
  }

  /**
   * 回放详情
   */
  public boolean hasBack() {
    return back!=null;
  }

  public static final class Builder extends Message.Builder<SingleBackShow, Builder> {
    public UserShow user;

    public BackInfo back;

    public Builder() {
    }

    /**
     * 主播信息
     */
    public Builder setUser(UserShow user) {
      this.user = user;
      return this;
    }

    /**
     * 回放详情
     */
    public Builder setBack(BackInfo back) {
      this.back = back;
      return this;
    }

    @Override
    public SingleBackShow build() {
      return new SingleBackShow(user, back, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SingleBackShow extends ProtoAdapter<SingleBackShow> {
    public ProtoAdapter_SingleBackShow() {
      super(FieldEncoding.LENGTH_DELIMITED, SingleBackShow.class);
    }

    @Override
    public int encodedSize(SingleBackShow value) {
      return UserShow.ADAPTER.encodedSizeWithTag(1, value.user)
          + BackInfo.ADAPTER.encodedSizeWithTag(2, value.back)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SingleBackShow value) throws IOException {
      UserShow.ADAPTER.encodeWithTag(writer, 1, value.user);
      BackInfo.ADAPTER.encodeWithTag(writer, 2, value.back);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SingleBackShow decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUser(UserShow.ADAPTER.decode(reader)); break;
          case 2: builder.setBack(BackInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SingleBackShow redact(SingleBackShow value) {
      Builder builder = value.newBuilder();
      builder.user = UserShow.ADAPTER.redact(builder.user);
      builder.back = BackInfo.ADAPTER.redact(builder.back);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
