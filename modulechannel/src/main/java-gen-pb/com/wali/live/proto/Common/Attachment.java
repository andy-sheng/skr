// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Common.proto
package com.wali.live.proto.Common;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Attachment extends Message<Attachment, Attachment.Builder> {
  public static final ProtoAdapter<Attachment> ADAPTER = new ProtoAdapter_Attachment();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  public static final String DEFAULT_TEXT = "";

  public static final String DEFAULT_URL = "";

  public static final Integer DEFAULT_DURATION = 0;

  public static final Integer DEFAULT_SIZE = 0;

  public static final Long DEFAULT_EXTTYPE = 0L;

  public static final ByteString DEFAULT_EXTDATA = ByteString.EMPTY;

  public static final Integer DEFAULT_WIDTH = 0;

  public static final Integer DEFAULT_HEIGHT = 0;

  /**
   * 附件的类型 1:文本 2:图片 3:视频 4:地理位置
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer type;

  /**
   * 文本内容
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String text;

  /**
   * 富媒体url
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String url;

  /**
   * 音频或者视频的长度
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer duration;

  /**
   * 富媒体文件大小
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer size;

  /**
   * 业务扩展类型
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long exttype;

  /**
   * 业务扩展二进制数据.客户端和业务服务器协商
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString extdata;

  /**
   * 图片宽度
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer width;

  /**
   * 图片的高度`
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer height;

  public Attachment(Integer type, String text, String url, Integer duration, Integer size,
      Long exttype, ByteString extdata, Integer width, Integer height) {
    this(type, text, url, duration, size, exttype, extdata, width, height, ByteString.EMPTY);
  }

  public Attachment(Integer type, String text, String url, Integer duration, Integer size,
      Long exttype, ByteString extdata, Integer width, Integer height, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.text = text;
    this.url = url;
    this.duration = duration;
    this.size = size;
    this.exttype = exttype;
    this.extdata = extdata;
    this.width = width;
    this.height = height;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.text = text;
    builder.url = url;
    builder.duration = duration;
    builder.size = size;
    builder.exttype = exttype;
    builder.extdata = extdata;
    builder.width = width;
    builder.height = height;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Attachment)) return false;
    Attachment o = (Attachment) other;
    return unknownFields().equals(o.unknownFields())
        && type.equals(o.type)
        && Internal.equals(text, o.text)
        && Internal.equals(url, o.url)
        && Internal.equals(duration, o.duration)
        && Internal.equals(size, o.size)
        && Internal.equals(exttype, o.exttype)
        && Internal.equals(extdata, o.extdata)
        && Internal.equals(width, o.width)
        && Internal.equals(height, o.height);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + type.hashCode();
      result = result * 37 + (text != null ? text.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (duration != null ? duration.hashCode() : 0);
      result = result * 37 + (size != null ? size.hashCode() : 0);
      result = result * 37 + (exttype != null ? exttype.hashCode() : 0);
      result = result * 37 + (extdata != null ? extdata.hashCode() : 0);
      result = result * 37 + (width != null ? width.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", type=").append(type);
    if (text != null) builder.append(", text=").append(text);
    if (url != null) builder.append(", url=").append(url);
    if (duration != null) builder.append(", duration=").append(duration);
    if (size != null) builder.append(", size=").append(size);
    if (exttype != null) builder.append(", exttype=").append(exttype);
    if (extdata != null) builder.append(", extdata=").append(extdata);
    if (width != null) builder.append(", width=").append(width);
    if (height != null) builder.append(", height=").append(height);
    return builder.replace(0, 2, "Attachment{").append('}').toString();
  }

  public byte[] toByteArray() {
    return Attachment.ADAPTER.encode(this);
  }

  public static final Attachment parseFrom(byte[] data) throws IOException {
    Attachment c = null;
       c = Attachment.ADAPTER.decode(data);
    return c;
  }

  /**
   * 附件的类型 1:文本 2:图片 3:视频 4:地理位置
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  /**
   * 文本内容
   */
  public String getText() {
    if(text==null){
        return DEFAULT_TEXT;
    }
    return text;
  }

  /**
   * 富媒体url
   */
  public String getUrl() {
    if(url==null){
        return DEFAULT_URL;
    }
    return url;
  }

  /**
   * 音频或者视频的长度
   */
  public Integer getDuration() {
    if(duration==null){
        return DEFAULT_DURATION;
    }
    return duration;
  }

  /**
   * 富媒体文件大小
   */
  public Integer getSize() {
    if(size==null){
        return DEFAULT_SIZE;
    }
    return size;
  }

  /**
   * 业务扩展类型
   */
  public Long getExttype() {
    if(exttype==null){
        return DEFAULT_EXTTYPE;
    }
    return exttype;
  }

  /**
   * 业务扩展二进制数据.客户端和业务服务器协商
   */
  public ByteString getExtdata() {
    if(extdata==null){
        return ByteString.of(new byte[0]);
    }
    return extdata;
  }

  /**
   * 图片宽度
   */
  public Integer getWidth() {
    if(width==null){
        return DEFAULT_WIDTH;
    }
    return width;
  }

  /**
   * 图片的高度`
   */
  public Integer getHeight() {
    if(height==null){
        return DEFAULT_HEIGHT;
    }
    return height;
  }

  /**
   * 附件的类型 1:文本 2:图片 3:视频 4:地理位置
   */
  public boolean hasType() {
    return type!=null;
  }

  /**
   * 文本内容
   */
  public boolean hasText() {
    return text!=null;
  }

  /**
   * 富媒体url
   */
  public boolean hasUrl() {
    return url!=null;
  }

  /**
   * 音频或者视频的长度
   */
  public boolean hasDuration() {
    return duration!=null;
  }

  /**
   * 富媒体文件大小
   */
  public boolean hasSize() {
    return size!=null;
  }

  /**
   * 业务扩展类型
   */
  public boolean hasExttype() {
    return exttype!=null;
  }

  /**
   * 业务扩展二进制数据.客户端和业务服务器协商
   */
  public boolean hasExtdata() {
    return extdata!=null;
  }

  /**
   * 图片宽度
   */
  public boolean hasWidth() {
    return width!=null;
  }

  /**
   * 图片的高度`
   */
  public boolean hasHeight() {
    return height!=null;
  }

  public static final class Builder extends Message.Builder<Attachment, Builder> {
    public Integer type;

    public String text;

    public String url;

    public Integer duration;

    public Integer size;

    public Long exttype;

    public ByteString extdata;

    public Integer width;

    public Integer height;

    public Builder() {
    }

    /**
     * 附件的类型 1:文本 2:图片 3:视频 4:地理位置
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 文本内容
     */
    public Builder setText(String text) {
      this.text = text;
      return this;
    }

    /**
     * 富媒体url
     */
    public Builder setUrl(String url) {
      this.url = url;
      return this;
    }

    /**
     * 音频或者视频的长度
     */
    public Builder setDuration(Integer duration) {
      this.duration = duration;
      return this;
    }

    /**
     * 富媒体文件大小
     */
    public Builder setSize(Integer size) {
      this.size = size;
      return this;
    }

    /**
     * 业务扩展类型
     */
    public Builder setExttype(Long exttype) {
      this.exttype = exttype;
      return this;
    }

    /**
     * 业务扩展二进制数据.客户端和业务服务器协商
     */
    public Builder setExtdata(ByteString extdata) {
      this.extdata = extdata;
      return this;
    }

    /**
     * 图片宽度
     */
    public Builder setWidth(Integer width) {
      this.width = width;
      return this;
    }

    /**
     * 图片的高度`
     */
    public Builder setHeight(Integer height) {
      this.height = height;
      return this;
    }

    @Override
    public Attachment build() {
      return new Attachment(type, text, url, duration, size, exttype, extdata, width, height, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Attachment extends ProtoAdapter<Attachment> {
    public ProtoAdapter_Attachment() {
      super(FieldEncoding.LENGTH_DELIMITED, Attachment.class);
    }

    @Override
    public int encodedSize(Attachment value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.type)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.text)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.url)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.duration)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.size)
          + ProtoAdapter.UINT64.encodedSizeWithTag(6, value.exttype)
          + ProtoAdapter.BYTES.encodedSizeWithTag(7, value.extdata)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.width)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.height)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Attachment value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.type);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.text);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.url);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.duration);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.size);
      ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.exttype);
      ProtoAdapter.BYTES.encodeWithTag(writer, 7, value.extdata);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.width);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.height);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Attachment decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setText(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setDuration(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setSize(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setExttype(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.setExtdata(ProtoAdapter.BYTES.decode(reader)); break;
          case 8: builder.setWidth(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.setHeight(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Attachment redact(Attachment value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
