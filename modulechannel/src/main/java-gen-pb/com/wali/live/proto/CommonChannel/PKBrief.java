// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * pk信息
 */
public final class PKBrief extends Message<PKBrief, PKBrief.Builder> {
  public static final ProtoAdapter<PKBrief> ADAPTER = new ProtoAdapter_PKBrief();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_IS_PK = false;

  /**
   * 是否是pk房间
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_pk;

  public PKBrief(Boolean is_pk) {
    this(is_pk, ByteString.EMPTY);
  }

  public PKBrief(Boolean is_pk, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.is_pk = is_pk;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.is_pk = is_pk;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PKBrief)) return false;
    PKBrief o = (PKBrief) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(is_pk, o.is_pk);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (is_pk != null ? is_pk.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (is_pk != null) builder.append(", is_pk=").append(is_pk);
    return builder.replace(0, 2, "PKBrief{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PKBrief.ADAPTER.encode(this);
  }

  public static final PKBrief parseFrom(byte[] data) throws IOException {
    PKBrief c = null;
       c = PKBrief.ADAPTER.decode(data);
    return c;
  }

  /**
   * 是否是pk房间
   */
  public Boolean getIsPk() {
    if(is_pk==null){
        return DEFAULT_IS_PK;
    }
    return is_pk;
  }

  /**
   * 是否是pk房间
   */
  public boolean hasIsPk() {
    return is_pk!=null;
  }

  public static final class Builder extends Message.Builder<PKBrief, Builder> {
    public Boolean is_pk;

    public Builder() {
    }

    /**
     * 是否是pk房间
     */
    public Builder setIsPk(Boolean is_pk) {
      this.is_pk = is_pk;
      return this;
    }

    @Override
    public PKBrief build() {
      return new PKBrief(is_pk, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PKBrief extends ProtoAdapter<PKBrief> {
    public ProtoAdapter_PKBrief() {
      super(FieldEncoding.LENGTH_DELIMITED, PKBrief.class);
    }

    @Override
    public int encodedSize(PKBrief value) {
      return ProtoAdapter.BOOL.encodedSizeWithTag(1, value.is_pk)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PKBrief value) throws IOException {
      ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.is_pk);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PKBrief decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setIsPk(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PKBrief redact(PKBrief value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
