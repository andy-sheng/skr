// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class UiTemplatePageHeader extends Message<UiTemplatePageHeader, UiTemplatePageHeader.Builder> {
  public static final ProtoAdapter<UiTemplatePageHeader> ADAPTER = new ProtoAdapter_UiTemplatePageHeader();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_COVER_URL = "";

  public static final String DEFAULT_COVER_SCHEME_URI = "";

  public static final String DEFAULT_VIDEO_URL = "";

  public static final String DEFAULT_VIDEO_COVER_URL = "";

  public static final String DEFAULT_VIDEO_SCHEME_URI = "";

  public static final Integer DEFAULT_COVER_WIDTH = 0;

  public static final Integer DEFAULT_COVER_HEIGHT = 0;

  public static final Integer DEFAULT_TYPE = 0;

  public static final Integer DEFAULT_VIDEO_WIDTH = 0;

  public static final Integer DEFAULT_VIDEO_HEIGHT = 0;

  public static final Float DEFAULT_VIDEO_CUTOUT_NUM = 0.0f;

  /**
   * 封面
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cover_url;

  /**
   * 点击封面跳转scheme
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cover_scheme_uri;

  /**
   * 视频播放地址
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String video_url;

  /**
   * 视频封面地址
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String video_cover_url;

  /**
   * 点击视频区域跳转scheme
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String video_scheme_uri;

  /**
   * 导航数据
   */
  @WireField(
      tag = 6,
      adapter = "com.wali.live.proto.CommonChannel.NavigationData#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<NavigationData> navi_data;

  /**
   * 图片或者小视频宽度
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer cover_width;

  /**
   * 图片或者小视频高度
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer cover_height;

  /**
   * 视频源类型（与LiveOrReplayItemInfo一致）。1直播， 2回放, 3 配置用户信息 4feeds 5电视台 6图文
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  /**
   * 视频封面图片宽度
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer video_width;

  /**
   * 视频封面图片高度
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer video_height;

  /**
   * 视频展示的位置
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float video_cutout_num;

  public UiTemplatePageHeader(String cover_url, String cover_scheme_uri, String video_url,
      String video_cover_url, String video_scheme_uri, List<NavigationData> navi_data,
      Integer cover_width, Integer cover_height, Integer type, Integer video_width,
      Integer video_height, Float video_cutout_num) {
    this(cover_url, cover_scheme_uri, video_url, video_cover_url, video_scheme_uri, navi_data, cover_width, cover_height, type, video_width, video_height, video_cutout_num, ByteString.EMPTY);
  }

  public UiTemplatePageHeader(String cover_url, String cover_scheme_uri, String video_url,
      String video_cover_url, String video_scheme_uri, List<NavigationData> navi_data,
      Integer cover_width, Integer cover_height, Integer type, Integer video_width,
      Integer video_height, Float video_cutout_num, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.cover_url = cover_url;
    this.cover_scheme_uri = cover_scheme_uri;
    this.video_url = video_url;
    this.video_cover_url = video_cover_url;
    this.video_scheme_uri = video_scheme_uri;
    this.navi_data = Internal.immutableCopyOf("navi_data", navi_data);
    this.cover_width = cover_width;
    this.cover_height = cover_height;
    this.type = type;
    this.video_width = video_width;
    this.video_height = video_height;
    this.video_cutout_num = video_cutout_num;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.cover_url = cover_url;
    builder.cover_scheme_uri = cover_scheme_uri;
    builder.video_url = video_url;
    builder.video_cover_url = video_cover_url;
    builder.video_scheme_uri = video_scheme_uri;
    builder.navi_data = Internal.copyOf("navi_data", navi_data);
    builder.cover_width = cover_width;
    builder.cover_height = cover_height;
    builder.type = type;
    builder.video_width = video_width;
    builder.video_height = video_height;
    builder.video_cutout_num = video_cutout_num;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UiTemplatePageHeader)) return false;
    UiTemplatePageHeader o = (UiTemplatePageHeader) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(cover_url, o.cover_url)
        && Internal.equals(cover_scheme_uri, o.cover_scheme_uri)
        && Internal.equals(video_url, o.video_url)
        && Internal.equals(video_cover_url, o.video_cover_url)
        && Internal.equals(video_scheme_uri, o.video_scheme_uri)
        && navi_data.equals(o.navi_data)
        && Internal.equals(cover_width, o.cover_width)
        && Internal.equals(cover_height, o.cover_height)
        && Internal.equals(type, o.type)
        && Internal.equals(video_width, o.video_width)
        && Internal.equals(video_height, o.video_height)
        && Internal.equals(video_cutout_num, o.video_cutout_num);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (cover_url != null ? cover_url.hashCode() : 0);
      result = result * 37 + (cover_scheme_uri != null ? cover_scheme_uri.hashCode() : 0);
      result = result * 37 + (video_url != null ? video_url.hashCode() : 0);
      result = result * 37 + (video_cover_url != null ? video_cover_url.hashCode() : 0);
      result = result * 37 + (video_scheme_uri != null ? video_scheme_uri.hashCode() : 0);
      result = result * 37 + navi_data.hashCode();
      result = result * 37 + (cover_width != null ? cover_width.hashCode() : 0);
      result = result * 37 + (cover_height != null ? cover_height.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (video_width != null ? video_width.hashCode() : 0);
      result = result * 37 + (video_height != null ? video_height.hashCode() : 0);
      result = result * 37 + (video_cutout_num != null ? video_cutout_num.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (cover_url != null) builder.append(", cover_url=").append(cover_url);
    if (cover_scheme_uri != null) builder.append(", cover_scheme_uri=").append(cover_scheme_uri);
    if (video_url != null) builder.append(", video_url=").append(video_url);
    if (video_cover_url != null) builder.append(", video_cover_url=").append(video_cover_url);
    if (video_scheme_uri != null) builder.append(", video_scheme_uri=").append(video_scheme_uri);
    if (!navi_data.isEmpty()) builder.append(", navi_data=").append(navi_data);
    if (cover_width != null) builder.append(", cover_width=").append(cover_width);
    if (cover_height != null) builder.append(", cover_height=").append(cover_height);
    if (type != null) builder.append(", type=").append(type);
    if (video_width != null) builder.append(", video_width=").append(video_width);
    if (video_height != null) builder.append(", video_height=").append(video_height);
    if (video_cutout_num != null) builder.append(", video_cutout_num=").append(video_cutout_num);
    return builder.replace(0, 2, "UiTemplatePageHeader{").append('}').toString();
  }

  public byte[] toByteArray() {
    return UiTemplatePageHeader.ADAPTER.encode(this);
  }

  public static final UiTemplatePageHeader parseFrom(byte[] data) throws IOException {
    UiTemplatePageHeader c = null;
       c = UiTemplatePageHeader.ADAPTER.decode(data);
    return c;
  }

  /**
   * 封面
   */
  public String getCoverUrl() {
    if(cover_url==null){
        return DEFAULT_COVER_URL;
    }
    return cover_url;
  }

  /**
   * 点击封面跳转scheme
   */
  public String getCoverSchemeUri() {
    if(cover_scheme_uri==null){
        return DEFAULT_COVER_SCHEME_URI;
    }
    return cover_scheme_uri;
  }

  /**
   * 视频播放地址
   */
  public String getVideoUrl() {
    if(video_url==null){
        return DEFAULT_VIDEO_URL;
    }
    return video_url;
  }

  /**
   * 视频封面地址
   */
  public String getVideoCoverUrl() {
    if(video_cover_url==null){
        return DEFAULT_VIDEO_COVER_URL;
    }
    return video_cover_url;
  }

  /**
   * 点击视频区域跳转scheme
   */
  public String getVideoSchemeUri() {
    if(video_scheme_uri==null){
        return DEFAULT_VIDEO_SCHEME_URI;
    }
    return video_scheme_uri;
  }

  /**
   * 导航数据
   */
  public List<NavigationData> getNaviDataList() {
    if(navi_data==null){
        return new java.util.ArrayList<NavigationData>();
    }
    return navi_data;
  }

  /**
   * 图片或者小视频宽度
   */
  public Integer getCoverWidth() {
    if(cover_width==null){
        return DEFAULT_COVER_WIDTH;
    }
    return cover_width;
  }

  /**
   * 图片或者小视频高度
   */
  public Integer getCoverHeight() {
    if(cover_height==null){
        return DEFAULT_COVER_HEIGHT;
    }
    return cover_height;
  }

  /**
   * 视频源类型（与LiveOrReplayItemInfo一致）。1直播， 2回放, 3 配置用户信息 4feeds 5电视台 6图文
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  /**
   * 视频封面图片宽度
   */
  public Integer getVideoWidth() {
    if(video_width==null){
        return DEFAULT_VIDEO_WIDTH;
    }
    return video_width;
  }

  /**
   * 视频封面图片高度
   */
  public Integer getVideoHeight() {
    if(video_height==null){
        return DEFAULT_VIDEO_HEIGHT;
    }
    return video_height;
  }

  /**
   * 视频展示的位置
   */
  public Float getVideoCutoutNum() {
    if(video_cutout_num==null){
        return DEFAULT_VIDEO_CUTOUT_NUM;
    }
    return video_cutout_num;
  }

  /**
   * 封面
   */
  public boolean hasCoverUrl() {
    return cover_url!=null;
  }

  /**
   * 点击封面跳转scheme
   */
  public boolean hasCoverSchemeUri() {
    return cover_scheme_uri!=null;
  }

  /**
   * 视频播放地址
   */
  public boolean hasVideoUrl() {
    return video_url!=null;
  }

  /**
   * 视频封面地址
   */
  public boolean hasVideoCoverUrl() {
    return video_cover_url!=null;
  }

  /**
   * 点击视频区域跳转scheme
   */
  public boolean hasVideoSchemeUri() {
    return video_scheme_uri!=null;
  }

  /**
   * 导航数据
   */
  public boolean hasNaviDataList() {
    return navi_data!=null;
  }

  /**
   * 图片或者小视频宽度
   */
  public boolean hasCoverWidth() {
    return cover_width!=null;
  }

  /**
   * 图片或者小视频高度
   */
  public boolean hasCoverHeight() {
    return cover_height!=null;
  }

  /**
   * 视频源类型（与LiveOrReplayItemInfo一致）。1直播， 2回放, 3 配置用户信息 4feeds 5电视台 6图文
   */
  public boolean hasType() {
    return type!=null;
  }

  /**
   * 视频封面图片宽度
   */
  public boolean hasVideoWidth() {
    return video_width!=null;
  }

  /**
   * 视频封面图片高度
   */
  public boolean hasVideoHeight() {
    return video_height!=null;
  }

  /**
   * 视频展示的位置
   */
  public boolean hasVideoCutoutNum() {
    return video_cutout_num!=null;
  }

  public static final class Builder extends Message.Builder<UiTemplatePageHeader, Builder> {
    public String cover_url;

    public String cover_scheme_uri;

    public String video_url;

    public String video_cover_url;

    public String video_scheme_uri;

    public List<NavigationData> navi_data;

    public Integer cover_width;

    public Integer cover_height;

    public Integer type;

    public Integer video_width;

    public Integer video_height;

    public Float video_cutout_num;

    public Builder() {
      navi_data = Internal.newMutableList();
    }

    /**
     * 封面
     */
    public Builder setCoverUrl(String cover_url) {
      this.cover_url = cover_url;
      return this;
    }

    /**
     * 点击封面跳转scheme
     */
    public Builder setCoverSchemeUri(String cover_scheme_uri) {
      this.cover_scheme_uri = cover_scheme_uri;
      return this;
    }

    /**
     * 视频播放地址
     */
    public Builder setVideoUrl(String video_url) {
      this.video_url = video_url;
      return this;
    }

    /**
     * 视频封面地址
     */
    public Builder setVideoCoverUrl(String video_cover_url) {
      this.video_cover_url = video_cover_url;
      return this;
    }

    /**
     * 点击视频区域跳转scheme
     */
    public Builder setVideoSchemeUri(String video_scheme_uri) {
      this.video_scheme_uri = video_scheme_uri;
      return this;
    }

    /**
     * 导航数据
     */
    public Builder addAllNaviData(List<NavigationData> navi_data) {
      Internal.checkElementsNotNull(navi_data);
      this.navi_data = navi_data;
      return this;
    }

    /**
     * 图片或者小视频宽度
     */
    public Builder setCoverWidth(Integer cover_width) {
      this.cover_width = cover_width;
      return this;
    }

    /**
     * 图片或者小视频高度
     */
    public Builder setCoverHeight(Integer cover_height) {
      this.cover_height = cover_height;
      return this;
    }

    /**
     * 视频源类型（与LiveOrReplayItemInfo一致）。1直播， 2回放, 3 配置用户信息 4feeds 5电视台 6图文
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 视频封面图片宽度
     */
    public Builder setVideoWidth(Integer video_width) {
      this.video_width = video_width;
      return this;
    }

    /**
     * 视频封面图片高度
     */
    public Builder setVideoHeight(Integer video_height) {
      this.video_height = video_height;
      return this;
    }

    /**
     * 视频展示的位置
     */
    public Builder setVideoCutoutNum(Float video_cutout_num) {
      this.video_cutout_num = video_cutout_num;
      return this;
    }

    @Override
    public UiTemplatePageHeader build() {
      return new UiTemplatePageHeader(cover_url, cover_scheme_uri, video_url, video_cover_url, video_scheme_uri, navi_data, cover_width, cover_height, type, video_width, video_height, video_cutout_num, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UiTemplatePageHeader extends ProtoAdapter<UiTemplatePageHeader> {
    public ProtoAdapter_UiTemplatePageHeader() {
      super(FieldEncoding.LENGTH_DELIMITED, UiTemplatePageHeader.class);
    }

    @Override
    public int encodedSize(UiTemplatePageHeader value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.cover_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.cover_scheme_uri)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.video_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.video_cover_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.video_scheme_uri)
          + NavigationData.ADAPTER.asRepeated().encodedSizeWithTag(6, value.navi_data)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.cover_width)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.cover_height)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.type)
          + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.video_width)
          + ProtoAdapter.UINT32.encodedSizeWithTag(11, value.video_height)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(12, value.video_cutout_num)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UiTemplatePageHeader value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.cover_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.cover_scheme_uri);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.video_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.video_cover_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.video_scheme_uri);
      NavigationData.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.navi_data);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.cover_width);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.cover_height);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.type);
      ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.video_width);
      ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.video_height);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 12, value.video_cutout_num);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UiTemplatePageHeader decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setCoverUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setCoverSchemeUri(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setVideoUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setVideoCoverUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setVideoSchemeUri(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.navi_data.add(NavigationData.ADAPTER.decode(reader)); break;
          case 7: builder.setCoverWidth(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.setCoverHeight(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.setVideoWidth(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.setVideoHeight(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.setVideoCutoutNum(ProtoAdapter.FLOAT.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UiTemplatePageHeader redact(UiTemplatePageHeader value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.navi_data, NavigationData.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
