// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class UiTemplateBanner extends Message<UiTemplateBanner, UiTemplateBanner.Builder> {
  public static final ProtoAdapter<UiTemplateBanner> ADAPTER = new ProtoAdapter_UiTemplateBanner();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.CommonChannel.BannerItemData#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<BannerItemData> itemDatas;

  /**
   * 不写或者为1时，为推荐列表的小尺寸， 2为资讯频道大尺寸
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  public UiTemplateBanner(List<BannerItemData> itemDatas, Integer type) {
    this(itemDatas, type, ByteString.EMPTY);
  }

  public UiTemplateBanner(List<BannerItemData> itemDatas, Integer type, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.itemDatas = Internal.immutableCopyOf("itemDatas", itemDatas);
    this.type = type;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.itemDatas = Internal.copyOf("itemDatas", itemDatas);
    builder.type = type;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UiTemplateBanner)) return false;
    UiTemplateBanner o = (UiTemplateBanner) other;
    return unknownFields().equals(o.unknownFields())
        && itemDatas.equals(o.itemDatas)
        && Internal.equals(type, o.type);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + itemDatas.hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!itemDatas.isEmpty()) builder.append(", itemDatas=").append(itemDatas);
    if (type != null) builder.append(", type=").append(type);
    return builder.replace(0, 2, "UiTemplateBanner{").append('}').toString();
  }

  public byte[] toByteArray() {
    return UiTemplateBanner.ADAPTER.encode(this);
  }

  public static final UiTemplateBanner parseFrom(byte[] data) throws IOException {
    UiTemplateBanner c = null;
       c = UiTemplateBanner.ADAPTER.decode(data);
    return c;
  }

  public List<BannerItemData> getItemDatasList() {
    if(itemDatas==null){
        return new java.util.ArrayList<BannerItemData>();
    }
    return itemDatas;
  }

  /**
   * 不写或者为1时，为推荐列表的小尺寸， 2为资讯频道大尺寸
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  public boolean hasItemDatasList() {
    return itemDatas!=null;
  }

  /**
   * 不写或者为1时，为推荐列表的小尺寸， 2为资讯频道大尺寸
   */
  public boolean hasType() {
    return type!=null;
  }

  public static final class Builder extends Message.Builder<UiTemplateBanner, Builder> {
    public List<BannerItemData> itemDatas;

    public Integer type;

    public Builder() {
      itemDatas = Internal.newMutableList();
    }

    public Builder addAllItemDatas(List<BannerItemData> itemDatas) {
      Internal.checkElementsNotNull(itemDatas);
      this.itemDatas = itemDatas;
      return this;
    }

    /**
     * 不写或者为1时，为推荐列表的小尺寸， 2为资讯频道大尺寸
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    @Override
    public UiTemplateBanner build() {
      return new UiTemplateBanner(itemDatas, type, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UiTemplateBanner extends ProtoAdapter<UiTemplateBanner> {
    public ProtoAdapter_UiTemplateBanner() {
      super(FieldEncoding.LENGTH_DELIMITED, UiTemplateBanner.class);
    }

    @Override
    public int encodedSize(UiTemplateBanner value) {
      return BannerItemData.ADAPTER.asRepeated().encodedSizeWithTag(1, value.itemDatas)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.type)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UiTemplateBanner value) throws IOException {
      BannerItemData.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.itemDatas);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.type);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UiTemplateBanner decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.itemDatas.add(BannerItemData.ADAPTER.decode(reader)); break;
          case 2: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UiTemplateBanner redact(UiTemplateBanner value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.itemDatas, BannerItemData.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
