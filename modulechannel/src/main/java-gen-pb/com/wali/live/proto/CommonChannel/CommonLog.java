// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 通用打点pb
 */
public final class CommonLog extends Message<CommonLog, CommonLog.Builder> {
  public static final ProtoAdapter<CommonLog> ADAPTER = new ProtoAdapter_CommonLog();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_BIZTYPE = 0;

  public static final String DEFAULT_EXTSTR = "";

  /**
   * 各自业务的打点类型 type=400时bizType填当前channelId
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer bizType;

  /**
   * 打点的详情（json串）
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String extStr;

  public CommonLog(Integer bizType, String extStr) {
    this(bizType, extStr, ByteString.EMPTY);
  }

  public CommonLog(Integer bizType, String extStr, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.bizType = bizType;
    this.extStr = extStr;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.bizType = bizType;
    builder.extStr = extStr;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CommonLog)) return false;
    CommonLog o = (CommonLog) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(bizType, o.bizType)
        && Internal.equals(extStr, o.extStr);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (bizType != null ? bizType.hashCode() : 0);
      result = result * 37 + (extStr != null ? extStr.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (bizType != null) builder.append(", bizType=").append(bizType);
    if (extStr != null) builder.append(", extStr=").append(extStr);
    return builder.replace(0, 2, "CommonLog{").append('}').toString();
  }

  public byte[] toByteArray() {
    return CommonLog.ADAPTER.encode(this);
  }

  public static final CommonLog parseFrom(byte[] data) throws IOException {
    CommonLog c = null;
       c = CommonLog.ADAPTER.decode(data);
    return c;
  }

  /**
   * 各自业务的打点类型 type=400时bizType填当前channelId
   */
  public Integer getBizType() {
    if(bizType==null){
        return DEFAULT_BIZTYPE;
    }
    return bizType;
  }

  /**
   * 打点的详情（json串）
   */
  public String getExtStr() {
    if(extStr==null){
        return DEFAULT_EXTSTR;
    }
    return extStr;
  }

  /**
   * 各自业务的打点类型 type=400时bizType填当前channelId
   */
  public boolean hasBizType() {
    return bizType!=null;
  }

  /**
   * 打点的详情（json串）
   */
  public boolean hasExtStr() {
    return extStr!=null;
  }

  public static final class Builder extends Message.Builder<CommonLog, Builder> {
    public Integer bizType;

    public String extStr;

    public Builder() {
    }

    /**
     * 各自业务的打点类型 type=400时bizType填当前channelId
     */
    public Builder setBizType(Integer bizType) {
      this.bizType = bizType;
      return this;
    }

    /**
     * 打点的详情（json串）
     */
    public Builder setExtStr(String extStr) {
      this.extStr = extStr;
      return this;
    }

    @Override
    public CommonLog build() {
      return new CommonLog(bizType, extStr, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CommonLog extends ProtoAdapter<CommonLog> {
    public ProtoAdapter_CommonLog() {
      super(FieldEncoding.LENGTH_DELIMITED, CommonLog.class);
    }

    @Override
    public int encodedSize(CommonLog value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.bizType)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.extStr)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CommonLog value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.bizType);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.extStr);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CommonLog decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setBizType(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setExtStr(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CommonLog redact(CommonLog value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
