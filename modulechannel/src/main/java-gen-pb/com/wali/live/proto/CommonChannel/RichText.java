// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 富文本信息
 */
public final class RichText extends Message<RichText, RichText.Builder> {
  public static final ProtoAdapter<RichText> ADAPTER = new ProtoAdapter_RichText();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_TEXT = "";

  public static final String DEFAULT_JUMPSCHEMEURI = "";

  public static final Integer DEFAULT_BGIMAGEID = 0;

  public static final String DEFAULT_ICONURL = "";

  public static final String DEFAULT_BGCOLOR = "";

  /**
   * 文案
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String text;

  /**
   * 跳转地址
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jumpSchemeUri;

  /**
   * 客户端预留底图id[需考虑不识别底图情况]
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer bgImageID;

  /**
   * 图标地址[优先展示小图片，等同于ListWidgetInfo]
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String iconUrl;

  /**
   * 底色[多种颜色之间用‘-’分割]
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bgColor;

  public RichText(String text, String jumpSchemeUri, Integer bgImageID, String iconUrl,
      String bgColor) {
    this(text, jumpSchemeUri, bgImageID, iconUrl, bgColor, ByteString.EMPTY);
  }

  public RichText(String text, String jumpSchemeUri, Integer bgImageID, String iconUrl,
      String bgColor, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.text = text;
    this.jumpSchemeUri = jumpSchemeUri;
    this.bgImageID = bgImageID;
    this.iconUrl = iconUrl;
    this.bgColor = bgColor;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.text = text;
    builder.jumpSchemeUri = jumpSchemeUri;
    builder.bgImageID = bgImageID;
    builder.iconUrl = iconUrl;
    builder.bgColor = bgColor;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RichText)) return false;
    RichText o = (RichText) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(text, o.text)
        && Internal.equals(jumpSchemeUri, o.jumpSchemeUri)
        && Internal.equals(bgImageID, o.bgImageID)
        && Internal.equals(iconUrl, o.iconUrl)
        && Internal.equals(bgColor, o.bgColor);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (text != null ? text.hashCode() : 0);
      result = result * 37 + (jumpSchemeUri != null ? jumpSchemeUri.hashCode() : 0);
      result = result * 37 + (bgImageID != null ? bgImageID.hashCode() : 0);
      result = result * 37 + (iconUrl != null ? iconUrl.hashCode() : 0);
      result = result * 37 + (bgColor != null ? bgColor.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (text != null) builder.append(", text=").append(text);
    if (jumpSchemeUri != null) builder.append(", jumpSchemeUri=").append(jumpSchemeUri);
    if (bgImageID != null) builder.append(", bgImageID=").append(bgImageID);
    if (iconUrl != null) builder.append(", iconUrl=").append(iconUrl);
    if (bgColor != null) builder.append(", bgColor=").append(bgColor);
    return builder.replace(0, 2, "RichText{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RichText.ADAPTER.encode(this);
  }

  public static final RichText parseFrom(byte[] data) throws IOException {
    RichText c = null;
       c = RichText.ADAPTER.decode(data);
    return c;
  }

  /**
   * 文案
   */
  public String getText() {
    if(text==null){
        return DEFAULT_TEXT;
    }
    return text;
  }

  /**
   * 跳转地址
   */
  public String getJumpSchemeUri() {
    if(jumpSchemeUri==null){
        return DEFAULT_JUMPSCHEMEURI;
    }
    return jumpSchemeUri;
  }

  /**
   * 客户端预留底图id[需考虑不识别底图情况]
   */
  public Integer getBgImageID() {
    if(bgImageID==null){
        return DEFAULT_BGIMAGEID;
    }
    return bgImageID;
  }

  /**
   * 图标地址[优先展示小图片，等同于ListWidgetInfo]
   */
  public String getIconUrl() {
    if(iconUrl==null){
        return DEFAULT_ICONURL;
    }
    return iconUrl;
  }

  /**
   * 底色[多种颜色之间用‘-’分割]
   */
  public String getBgColor() {
    if(bgColor==null){
        return DEFAULT_BGCOLOR;
    }
    return bgColor;
  }

  /**
   * 文案
   */
  public boolean hasText() {
    return text!=null;
  }

  /**
   * 跳转地址
   */
  public boolean hasJumpSchemeUri() {
    return jumpSchemeUri!=null;
  }

  /**
   * 客户端预留底图id[需考虑不识别底图情况]
   */
  public boolean hasBgImageID() {
    return bgImageID!=null;
  }

  /**
   * 图标地址[优先展示小图片，等同于ListWidgetInfo]
   */
  public boolean hasIconUrl() {
    return iconUrl!=null;
  }

  /**
   * 底色[多种颜色之间用‘-’分割]
   */
  public boolean hasBgColor() {
    return bgColor!=null;
  }

  public static final class Builder extends Message.Builder<RichText, Builder> {
    public String text;

    public String jumpSchemeUri;

    public Integer bgImageID;

    public String iconUrl;

    public String bgColor;

    public Builder() {
    }

    /**
     * 文案
     */
    public Builder setText(String text) {
      this.text = text;
      return this;
    }

    /**
     * 跳转地址
     */
    public Builder setJumpSchemeUri(String jumpSchemeUri) {
      this.jumpSchemeUri = jumpSchemeUri;
      return this;
    }

    /**
     * 客户端预留底图id[需考虑不识别底图情况]
     */
    public Builder setBgImageID(Integer bgImageID) {
      this.bgImageID = bgImageID;
      return this;
    }

    /**
     * 图标地址[优先展示小图片，等同于ListWidgetInfo]
     */
    public Builder setIconUrl(String iconUrl) {
      this.iconUrl = iconUrl;
      return this;
    }

    /**
     * 底色[多种颜色之间用‘-’分割]
     */
    public Builder setBgColor(String bgColor) {
      this.bgColor = bgColor;
      return this;
    }

    @Override
    public RichText build() {
      return new RichText(text, jumpSchemeUri, bgImageID, iconUrl, bgColor, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RichText extends ProtoAdapter<RichText> {
    public ProtoAdapter_RichText() {
      super(FieldEncoding.LENGTH_DELIMITED, RichText.class);
    }

    @Override
    public int encodedSize(RichText value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.text)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.jumpSchemeUri)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.bgImageID)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.iconUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.bgColor)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RichText value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.text);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.jumpSchemeUri);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.bgImageID);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.iconUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.bgColor);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RichText decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setText(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setJumpSchemeUri(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setBgImageID(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setIconUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setBgColor(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RichText redact(RichText value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
