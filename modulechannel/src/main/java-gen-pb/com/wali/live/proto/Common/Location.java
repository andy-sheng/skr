// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Common.proto
package com.wali.live.proto.Common;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Location extends Message<Location, Location.Builder> {
  public static final ProtoAdapter<Location> ADAPTER = new ProtoAdapter_Location();

  private static final long serialVersionUID = 0L;

  public static final Double DEFAULT_LON = 0.0d;

  public static final Double DEFAULT_LAT = 0.0d;

  public static final String DEFAULT_COUNTRY = "";

  public static final String DEFAULT_PROVINCE = "";

  public static final String DEFAULT_CITY = "";

  public static final Integer DEFAULT_TYPE = 0;

  /**
   * 经度
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double lon;

  /**
   * 纬度
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double lat;

  /**
   * 国家
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String country;

  /**
   * 省份
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String province;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String city;

  /**
   * 地址定位的地图类型:0:百度,1:ios原生,2:高德,3:其他
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  public Location(Double lon, Double lat, String country, String province, String city,
      Integer type) {
    this(lon, lat, country, province, city, type, ByteString.EMPTY);
  }

  public Location(Double lon, Double lat, String country, String province, String city,
      Integer type, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.lon = lon;
    this.lat = lat;
    this.country = country;
    this.province = province;
    this.city = city;
    this.type = type;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.lon = lon;
    builder.lat = lat;
    builder.country = country;
    builder.province = province;
    builder.city = city;
    builder.type = type;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Location)) return false;
    Location o = (Location) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(lon, o.lon)
        && Internal.equals(lat, o.lat)
        && Internal.equals(country, o.country)
        && Internal.equals(province, o.province)
        && Internal.equals(city, o.city)
        && Internal.equals(type, o.type);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (lon != null ? lon.hashCode() : 0);
      result = result * 37 + (lat != null ? lat.hashCode() : 0);
      result = result * 37 + (country != null ? country.hashCode() : 0);
      result = result * 37 + (province != null ? province.hashCode() : 0);
      result = result * 37 + (city != null ? city.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (lon != null) builder.append(", lon=").append(lon);
    if (lat != null) builder.append(", lat=").append(lat);
    if (country != null) builder.append(", country=").append(country);
    if (province != null) builder.append(", province=").append(province);
    if (city != null) builder.append(", city=").append(city);
    if (type != null) builder.append(", type=").append(type);
    return builder.replace(0, 2, "Location{").append('}').toString();
  }

  public byte[] toByteArray() {
    return Location.ADAPTER.encode(this);
  }

  public static final Location parseFrom(byte[] data) throws IOException {
    Location c = null;
       c = Location.ADAPTER.decode(data);
    return c;
  }

  /**
   * 经度
   */
  public Double getLon() {
    if(lon==null){
        return DEFAULT_LON;
    }
    return lon;
  }

  /**
   * 纬度
   */
  public Double getLat() {
    if(lat==null){
        return DEFAULT_LAT;
    }
    return lat;
  }

  /**
   * 国家
   */
  public String getCountry() {
    if(country==null){
        return DEFAULT_COUNTRY;
    }
    return country;
  }

  /**
   * 省份
   */
  public String getProvince() {
    if(province==null){
        return DEFAULT_PROVINCE;
    }
    return province;
  }

  public String getCity() {
    if(city==null){
        return DEFAULT_CITY;
    }
    return city;
  }

  /**
   * 地址定位的地图类型:0:百度,1:ios原生,2:高德,3:其他
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  /**
   * 经度
   */
  public boolean hasLon() {
    return lon!=null;
  }

  /**
   * 纬度
   */
  public boolean hasLat() {
    return lat!=null;
  }

  /**
   * 国家
   */
  public boolean hasCountry() {
    return country!=null;
  }

  /**
   * 省份
   */
  public boolean hasProvince() {
    return province!=null;
  }

  public boolean hasCity() {
    return city!=null;
  }

  /**
   * 地址定位的地图类型:0:百度,1:ios原生,2:高德,3:其他
   */
  public boolean hasType() {
    return type!=null;
  }

  public static final class Builder extends Message.Builder<Location, Builder> {
    public Double lon;

    public Double lat;

    public String country;

    public String province;

    public String city;

    public Integer type;

    public Builder() {
    }

    /**
     * 经度
     */
    public Builder setLon(Double lon) {
      this.lon = lon;
      return this;
    }

    /**
     * 纬度
     */
    public Builder setLat(Double lat) {
      this.lat = lat;
      return this;
    }

    /**
     * 国家
     */
    public Builder setCountry(String country) {
      this.country = country;
      return this;
    }

    /**
     * 省份
     */
    public Builder setProvince(String province) {
      this.province = province;
      return this;
    }

    public Builder setCity(String city) {
      this.city = city;
      return this;
    }

    /**
     * 地址定位的地图类型:0:百度,1:ios原生,2:高德,3:其他
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    @Override
    public Location build() {
      return new Location(lon, lat, country, province, city, type, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Location extends ProtoAdapter<Location> {
    public ProtoAdapter_Location() {
      super(FieldEncoding.LENGTH_DELIMITED, Location.class);
    }

    @Override
    public int encodedSize(Location value) {
      return ProtoAdapter.DOUBLE.encodedSizeWithTag(1, value.lon)
          + ProtoAdapter.DOUBLE.encodedSizeWithTag(2, value.lat)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.country)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.province)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.city)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.type)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Location value) throws IOException {
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 1, value.lon);
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 2, value.lat);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.country);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.province);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.city);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.type);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Location decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setLon(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 2: builder.setLat(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 3: builder.setCountry(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setProvince(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setCity(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Location redact(Location value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
