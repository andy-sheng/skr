// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * type=7,10,11 12,13,15,17,18,19,21,22,25,26,28,31,32,33,34,37,38,40,41
 * @para headerUiType header样式（不认识的样式按照默认样式0处理）
 *  0=老样式              1=头条有正副标题样式       2=header name+">"
 *  3=带icon              4=分栏频道样式
 */
public final class UiTemplateLiveOrReplayInfo extends Message<UiTemplateLiveOrReplayInfo, UiTemplateLiveOrReplayInfo.Builder> {
  public static final ProtoAdapter<UiTemplateLiveOrReplayInfo> ADAPTER = new ProtoAdapter_UiTemplateLiveOrReplayInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_HEADERNAME = "";

  public static final String DEFAULT_HEADERVIEWALLURI = "";

  public static final String DEFAULT_SUBHEADERNAME = "";

  public static final Integer DEFAULT_HEADERUITYPE = 0;

  public static final String DEFAULT_HEADER_ICON = "";

  public static final String DEFAULT_HEADERVIEWALLTEXT = "";

  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.CommonChannel.LiveOrReplayItemInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<LiveOrReplayItemInfo> items;

  /**
   * header的名字
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String headerName;

  /**
   * 查看全部的uri，如果没有这个字段不展示查看全部
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String headerViewAllUri;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String subHeaderName;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer headerUiType;

  /**
   * header图标(字段为空且headerUiType=3时，客户端加本地默认图标)
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String header_icon;

  /**
   * 查看全部uri跳转的文案
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String headerViewAllText;

  public UiTemplateLiveOrReplayInfo(List<LiveOrReplayItemInfo> items, String headerName,
      String headerViewAllUri, String subHeaderName, Integer headerUiType, String header_icon,
      String headerViewAllText) {
    this(items, headerName, headerViewAllUri, subHeaderName, headerUiType, header_icon, headerViewAllText, ByteString.EMPTY);
  }

  public UiTemplateLiveOrReplayInfo(List<LiveOrReplayItemInfo> items, String headerName,
      String headerViewAllUri, String subHeaderName, Integer headerUiType, String header_icon,
      String headerViewAllText, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.items = Internal.immutableCopyOf("items", items);
    this.headerName = headerName;
    this.headerViewAllUri = headerViewAllUri;
    this.subHeaderName = subHeaderName;
    this.headerUiType = headerUiType;
    this.header_icon = header_icon;
    this.headerViewAllText = headerViewAllText;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.items = Internal.copyOf("items", items);
    builder.headerName = headerName;
    builder.headerViewAllUri = headerViewAllUri;
    builder.subHeaderName = subHeaderName;
    builder.headerUiType = headerUiType;
    builder.header_icon = header_icon;
    builder.headerViewAllText = headerViewAllText;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UiTemplateLiveOrReplayInfo)) return false;
    UiTemplateLiveOrReplayInfo o = (UiTemplateLiveOrReplayInfo) other;
    return unknownFields().equals(o.unknownFields())
        && items.equals(o.items)
        && Internal.equals(headerName, o.headerName)
        && Internal.equals(headerViewAllUri, o.headerViewAllUri)
        && Internal.equals(subHeaderName, o.subHeaderName)
        && Internal.equals(headerUiType, o.headerUiType)
        && Internal.equals(header_icon, o.header_icon)
        && Internal.equals(headerViewAllText, o.headerViewAllText);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + items.hashCode();
      result = result * 37 + (headerName != null ? headerName.hashCode() : 0);
      result = result * 37 + (headerViewAllUri != null ? headerViewAllUri.hashCode() : 0);
      result = result * 37 + (subHeaderName != null ? subHeaderName.hashCode() : 0);
      result = result * 37 + (headerUiType != null ? headerUiType.hashCode() : 0);
      result = result * 37 + (header_icon != null ? header_icon.hashCode() : 0);
      result = result * 37 + (headerViewAllText != null ? headerViewAllText.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!items.isEmpty()) builder.append(", items=").append(items);
    if (headerName != null) builder.append(", headerName=").append(headerName);
    if (headerViewAllUri != null) builder.append(", headerViewAllUri=").append(headerViewAllUri);
    if (subHeaderName != null) builder.append(", subHeaderName=").append(subHeaderName);
    if (headerUiType != null) builder.append(", headerUiType=").append(headerUiType);
    if (header_icon != null) builder.append(", header_icon=").append(header_icon);
    if (headerViewAllText != null) builder.append(", headerViewAllText=").append(headerViewAllText);
    return builder.replace(0, 2, "UiTemplateLiveOrReplayInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return UiTemplateLiveOrReplayInfo.ADAPTER.encode(this);
  }

  public static final UiTemplateLiveOrReplayInfo parseFrom(byte[] data) throws IOException {
    UiTemplateLiveOrReplayInfo c = null;
       c = UiTemplateLiveOrReplayInfo.ADAPTER.decode(data);
    return c;
  }

  public List<LiveOrReplayItemInfo> getItemsList() {
    if(items==null){
        return new java.util.ArrayList<LiveOrReplayItemInfo>();
    }
    return items;
  }

  /**
   * header的名字
   */
  public String getHeaderName() {
    if(headerName==null){
        return DEFAULT_HEADERNAME;
    }
    return headerName;
  }

  /**
   * 查看全部的uri，如果没有这个字段不展示查看全部
   */
  public String getHeaderViewAllUri() {
    if(headerViewAllUri==null){
        return DEFAULT_HEADERVIEWALLURI;
    }
    return headerViewAllUri;
  }

  public String getSubHeaderName() {
    if(subHeaderName==null){
        return DEFAULT_SUBHEADERNAME;
    }
    return subHeaderName;
  }

  public Integer getHeaderUiType() {
    if(headerUiType==null){
        return DEFAULT_HEADERUITYPE;
    }
    return headerUiType;
  }

  /**
   * header图标(字段为空且headerUiType=3时，客户端加本地默认图标)
   */
  public String getHeaderIcon() {
    if(header_icon==null){
        return DEFAULT_HEADER_ICON;
    }
    return header_icon;
  }

  /**
   * 查看全部uri跳转的文案
   */
  public String getHeaderViewAllText() {
    if(headerViewAllText==null){
        return DEFAULT_HEADERVIEWALLTEXT;
    }
    return headerViewAllText;
  }

  public boolean hasItemsList() {
    return items!=null;
  }

  /**
   * header的名字
   */
  public boolean hasHeaderName() {
    return headerName!=null;
  }

  /**
   * 查看全部的uri，如果没有这个字段不展示查看全部
   */
  public boolean hasHeaderViewAllUri() {
    return headerViewAllUri!=null;
  }

  public boolean hasSubHeaderName() {
    return subHeaderName!=null;
  }

  public boolean hasHeaderUiType() {
    return headerUiType!=null;
  }

  /**
   * header图标(字段为空且headerUiType=3时，客户端加本地默认图标)
   */
  public boolean hasHeaderIcon() {
    return header_icon!=null;
  }

  /**
   * 查看全部uri跳转的文案
   */
  public boolean hasHeaderViewAllText() {
    return headerViewAllText!=null;
  }

  public static final class Builder extends Message.Builder<UiTemplateLiveOrReplayInfo, Builder> {
    public List<LiveOrReplayItemInfo> items;

    public String headerName;

    public String headerViewAllUri;

    public String subHeaderName;

    public Integer headerUiType;

    public String header_icon;

    public String headerViewAllText;

    public Builder() {
      items = Internal.newMutableList();
    }

    public Builder addAllItems(List<LiveOrReplayItemInfo> items) {
      Internal.checkElementsNotNull(items);
      this.items = items;
      return this;
    }

    /**
     * header的名字
     */
    public Builder setHeaderName(String headerName) {
      this.headerName = headerName;
      return this;
    }

    /**
     * 查看全部的uri，如果没有这个字段不展示查看全部
     */
    public Builder setHeaderViewAllUri(String headerViewAllUri) {
      this.headerViewAllUri = headerViewAllUri;
      return this;
    }

    public Builder setSubHeaderName(String subHeaderName) {
      this.subHeaderName = subHeaderName;
      return this;
    }

    public Builder setHeaderUiType(Integer headerUiType) {
      this.headerUiType = headerUiType;
      return this;
    }

    /**
     * header图标(字段为空且headerUiType=3时，客户端加本地默认图标)
     */
    public Builder setHeaderIcon(String header_icon) {
      this.header_icon = header_icon;
      return this;
    }

    /**
     * 查看全部uri跳转的文案
     */
    public Builder setHeaderViewAllText(String headerViewAllText) {
      this.headerViewAllText = headerViewAllText;
      return this;
    }

    @Override
    public UiTemplateLiveOrReplayInfo build() {
      return new UiTemplateLiveOrReplayInfo(items, headerName, headerViewAllUri, subHeaderName, headerUiType, header_icon, headerViewAllText, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UiTemplateLiveOrReplayInfo extends ProtoAdapter<UiTemplateLiveOrReplayInfo> {
    public ProtoAdapter_UiTemplateLiveOrReplayInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, UiTemplateLiveOrReplayInfo.class);
    }

    @Override
    public int encodedSize(UiTemplateLiveOrReplayInfo value) {
      return LiveOrReplayItemInfo.ADAPTER.asRepeated().encodedSizeWithTag(1, value.items)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.headerName)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.headerViewAllUri)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.subHeaderName)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.headerUiType)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.header_icon)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.headerViewAllText)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UiTemplateLiveOrReplayInfo value) throws IOException {
      LiveOrReplayItemInfo.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.items);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.headerName);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.headerViewAllUri);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.subHeaderName);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.headerUiType);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.header_icon);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.headerViewAllText);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UiTemplateLiveOrReplayInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.items.add(LiveOrReplayItemInfo.ADAPTER.decode(reader)); break;
          case 2: builder.setHeaderName(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setHeaderViewAllUri(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setSubHeaderName(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setHeaderUiType(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setHeaderIcon(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setHeaderViewAllText(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UiTemplateLiveOrReplayInfo redact(UiTemplateLiveOrReplayInfo value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.items, LiveOrReplayItemInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
