// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class WatElement extends Message<WatElement, WatElement.Builder> {
  public static final ProtoAdapter<WatElement> ADAPTER = new ProtoAdapter_WatElement();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_DATA_TYPE = 0;

  public static final ByteString DEFAULT_DATA = ByteString.EMPTY;

  /**
   * 数据类型[同模板协议LiveOrReplayItemInfo中的type],目前只有2种类型，4=feeds小视频,6=可跳转图文 7 = ButtonData 小视频创建button
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer data_type;

  /**
   * 数据内容, data_type：4=VideoData，6=ImageData
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.REQUIRED
  )
  public final ByteString data;

  public WatElement(Integer data_type, ByteString data) {
    this(data_type, data, ByteString.EMPTY);
  }

  public WatElement(Integer data_type, ByteString data, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.data_type = data_type;
    this.data = data;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.data_type = data_type;
    builder.data = data;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof WatElement)) return false;
    WatElement o = (WatElement) other;
    return unknownFields().equals(o.unknownFields())
        && data_type.equals(o.data_type)
        && data.equals(o.data);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + data_type.hashCode();
      result = result * 37 + data.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", data_type=").append(data_type);
    builder.append(", data=").append(data);
    return builder.replace(0, 2, "WatElement{").append('}').toString();
  }

  public byte[] toByteArray() {
    return WatElement.ADAPTER.encode(this);
  }

  public static final WatElement parseFrom(byte[] data) throws IOException {
    WatElement c = null;
       c = WatElement.ADAPTER.decode(data);
    return c;
  }

  /**
   * 数据类型[同模板协议LiveOrReplayItemInfo中的type],目前只有2种类型，4=feeds小视频,6=可跳转图文 7 = ButtonData 小视频创建button
   */
  public Integer getDataType() {
    if(data_type==null){
        return DEFAULT_DATA_TYPE;
    }
    return data_type;
  }

  /**
   * 数据内容, data_type：4=VideoData，6=ImageData
   */
  public ByteString getData() {
    if(data==null){
        return ByteString.of(new byte[0]);
    }
    return data;
  }

  /**
   * 数据类型[同模板协议LiveOrReplayItemInfo中的type],目前只有2种类型，4=feeds小视频,6=可跳转图文 7 = ButtonData 小视频创建button
   */
  public boolean hasDataType() {
    return data_type!=null;
  }

  /**
   * 数据内容, data_type：4=VideoData，6=ImageData
   */
  public boolean hasData() {
    return data!=null;
  }

  public static final class Builder extends Message.Builder<WatElement, Builder> {
    public Integer data_type;

    public ByteString data;

    public Builder() {
    }

    /**
     * 数据类型[同模板协议LiveOrReplayItemInfo中的type],目前只有2种类型，4=feeds小视频,6=可跳转图文 7 = ButtonData 小视频创建button
     */
    public Builder setDataType(Integer data_type) {
      this.data_type = data_type;
      return this;
    }

    /**
     * 数据内容, data_type：4=VideoData，6=ImageData
     */
    public Builder setData(ByteString data) {
      this.data = data;
      return this;
    }

    @Override
    public WatElement build() {
      return new WatElement(data_type, data, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_WatElement extends ProtoAdapter<WatElement> {
    public ProtoAdapter_WatElement() {
      super(FieldEncoding.LENGTH_DELIMITED, WatElement.class);
    }

    @Override
    public int encodedSize(WatElement value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.data_type)
          + ProtoAdapter.BYTES.encodedSizeWithTag(2, value.data)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, WatElement value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.data_type);
      ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.data);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public WatElement decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setDataType(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setData(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public WatElement redact(WatElement value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
