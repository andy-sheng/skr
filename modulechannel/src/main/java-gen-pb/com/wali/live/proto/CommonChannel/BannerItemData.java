// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * type=6
 */
public final class BannerItemData extends Message<BannerItemData, BannerItemData.Builder> {
  public static final ProtoAdapter<BannerItemData> ADAPTER = new ProtoAdapter_BannerItemData();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_PICURL = "";

  public static final String DEFAULT_SKIPURL = "";

  public static final Long DEFAULT_LASTUPDATETS = 0L;

  public static final Integer DEFAULT_BANNERID = 0;

  public static final String DEFAULT_SHAREICONURL = "";

  public static final String DEFAULT_SHARETITLE = "";

  public static final String DEFAULT_SHAREDESC = "";

  public static final Integer DEFAULT_CHANNELID = 1;

  public static final Integer DEFAULT_LANG = 1;

  /**
   * 图片地址
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String picUrl;

  /**
   * 图片跳转地址
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String skipUrl;

  /**
   * 修改时间
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long lastUpdateTs;

  /**
   * banner id，客户端做打点统计
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer bannerId;

  /**
   * 分享时用的图片URL
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String shareIconUrl;

  /**
   * 分享时用的标题
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String shareTitle;

  /**
   * 分享时用的摘要
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String shareDesc;

  /**
   * 频道id，默认值为1为热门
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer channelId;

  /**
   * 语言版本: 1中文, 2 英文
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer lang;

  public BannerItemData(String picUrl, String skipUrl, Long lastUpdateTs, Integer bannerId,
      String shareIconUrl, String shareTitle, String shareDesc, Integer channelId, Integer lang) {
    this(picUrl, skipUrl, lastUpdateTs, bannerId, shareIconUrl, shareTitle, shareDesc, channelId, lang, ByteString.EMPTY);
  }

  public BannerItemData(String picUrl, String skipUrl, Long lastUpdateTs, Integer bannerId,
      String shareIconUrl, String shareTitle, String shareDesc, Integer channelId, Integer lang,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.picUrl = picUrl;
    this.skipUrl = skipUrl;
    this.lastUpdateTs = lastUpdateTs;
    this.bannerId = bannerId;
    this.shareIconUrl = shareIconUrl;
    this.shareTitle = shareTitle;
    this.shareDesc = shareDesc;
    this.channelId = channelId;
    this.lang = lang;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.picUrl = picUrl;
    builder.skipUrl = skipUrl;
    builder.lastUpdateTs = lastUpdateTs;
    builder.bannerId = bannerId;
    builder.shareIconUrl = shareIconUrl;
    builder.shareTitle = shareTitle;
    builder.shareDesc = shareDesc;
    builder.channelId = channelId;
    builder.lang = lang;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BannerItemData)) return false;
    BannerItemData o = (BannerItemData) other;
    return unknownFields().equals(o.unknownFields())
        && picUrl.equals(o.picUrl)
        && skipUrl.equals(o.skipUrl)
        && lastUpdateTs.equals(o.lastUpdateTs)
        && Internal.equals(bannerId, o.bannerId)
        && Internal.equals(shareIconUrl, o.shareIconUrl)
        && Internal.equals(shareTitle, o.shareTitle)
        && Internal.equals(shareDesc, o.shareDesc)
        && Internal.equals(channelId, o.channelId)
        && Internal.equals(lang, o.lang);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + picUrl.hashCode();
      result = result * 37 + skipUrl.hashCode();
      result = result * 37 + lastUpdateTs.hashCode();
      result = result * 37 + (bannerId != null ? bannerId.hashCode() : 0);
      result = result * 37 + (shareIconUrl != null ? shareIconUrl.hashCode() : 0);
      result = result * 37 + (shareTitle != null ? shareTitle.hashCode() : 0);
      result = result * 37 + (shareDesc != null ? shareDesc.hashCode() : 0);
      result = result * 37 + (channelId != null ? channelId.hashCode() : 0);
      result = result * 37 + (lang != null ? lang.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", picUrl=").append(picUrl);
    builder.append(", skipUrl=").append(skipUrl);
    builder.append(", lastUpdateTs=").append(lastUpdateTs);
    if (bannerId != null) builder.append(", bannerId=").append(bannerId);
    if (shareIconUrl != null) builder.append(", shareIconUrl=").append(shareIconUrl);
    if (shareTitle != null) builder.append(", shareTitle=").append(shareTitle);
    if (shareDesc != null) builder.append(", shareDesc=").append(shareDesc);
    if (channelId != null) builder.append(", channelId=").append(channelId);
    if (lang != null) builder.append(", lang=").append(lang);
    return builder.replace(0, 2, "BannerItemData{").append('}').toString();
  }

  public byte[] toByteArray() {
    return BannerItemData.ADAPTER.encode(this);
  }

  public static final BannerItemData parseFrom(byte[] data) throws IOException {
    BannerItemData c = null;
       c = BannerItemData.ADAPTER.decode(data);
    return c;
  }

  /**
   * 图片地址
   */
  public String getPicUrl() {
    if(picUrl==null){
        return DEFAULT_PICURL;
    }
    return picUrl;
  }

  /**
   * 图片跳转地址
   */
  public String getSkipUrl() {
    if(skipUrl==null){
        return DEFAULT_SKIPURL;
    }
    return skipUrl;
  }

  /**
   * 修改时间
   */
  public Long getLastUpdateTs() {
    if(lastUpdateTs==null){
        return DEFAULT_LASTUPDATETS;
    }
    return lastUpdateTs;
  }

  /**
   * banner id，客户端做打点统计
   */
  public Integer getBannerId() {
    if(bannerId==null){
        return DEFAULT_BANNERID;
    }
    return bannerId;
  }

  /**
   * 分享时用的图片URL
   */
  public String getShareIconUrl() {
    if(shareIconUrl==null){
        return DEFAULT_SHAREICONURL;
    }
    return shareIconUrl;
  }

  /**
   * 分享时用的标题
   */
  public String getShareTitle() {
    if(shareTitle==null){
        return DEFAULT_SHARETITLE;
    }
    return shareTitle;
  }

  /**
   * 分享时用的摘要
   */
  public String getShareDesc() {
    if(shareDesc==null){
        return DEFAULT_SHAREDESC;
    }
    return shareDesc;
  }

  /**
   * 频道id，默认值为1为热门
   */
  public Integer getChannelId() {
    if(channelId==null){
        return DEFAULT_CHANNELID;
    }
    return channelId;
  }

  /**
   * 语言版本: 1中文, 2 英文
   */
  public Integer getLang() {
    if(lang==null){
        return DEFAULT_LANG;
    }
    return lang;
  }

  /**
   * 图片地址
   */
  public boolean hasPicUrl() {
    return picUrl!=null;
  }

  /**
   * 图片跳转地址
   */
  public boolean hasSkipUrl() {
    return skipUrl!=null;
  }

  /**
   * 修改时间
   */
  public boolean hasLastUpdateTs() {
    return lastUpdateTs!=null;
  }

  /**
   * banner id，客户端做打点统计
   */
  public boolean hasBannerId() {
    return bannerId!=null;
  }

  /**
   * 分享时用的图片URL
   */
  public boolean hasShareIconUrl() {
    return shareIconUrl!=null;
  }

  /**
   * 分享时用的标题
   */
  public boolean hasShareTitle() {
    return shareTitle!=null;
  }

  /**
   * 分享时用的摘要
   */
  public boolean hasShareDesc() {
    return shareDesc!=null;
  }

  /**
   * 频道id，默认值为1为热门
   */
  public boolean hasChannelId() {
    return channelId!=null;
  }

  /**
   * 语言版本: 1中文, 2 英文
   */
  public boolean hasLang() {
    return lang!=null;
  }

  public static final class Builder extends Message.Builder<BannerItemData, Builder> {
    public String picUrl;

    public String skipUrl;

    public Long lastUpdateTs;

    public Integer bannerId;

    public String shareIconUrl;

    public String shareTitle;

    public String shareDesc;

    public Integer channelId;

    public Integer lang;

    public Builder() {
    }

    /**
     * 图片地址
     */
    public Builder setPicUrl(String picUrl) {
      this.picUrl = picUrl;
      return this;
    }

    /**
     * 图片跳转地址
     */
    public Builder setSkipUrl(String skipUrl) {
      this.skipUrl = skipUrl;
      return this;
    }

    /**
     * 修改时间
     */
    public Builder setLastUpdateTs(Long lastUpdateTs) {
      this.lastUpdateTs = lastUpdateTs;
      return this;
    }

    /**
     * banner id，客户端做打点统计
     */
    public Builder setBannerId(Integer bannerId) {
      this.bannerId = bannerId;
      return this;
    }

    /**
     * 分享时用的图片URL
     */
    public Builder setShareIconUrl(String shareIconUrl) {
      this.shareIconUrl = shareIconUrl;
      return this;
    }

    /**
     * 分享时用的标题
     */
    public Builder setShareTitle(String shareTitle) {
      this.shareTitle = shareTitle;
      return this;
    }

    /**
     * 分享时用的摘要
     */
    public Builder setShareDesc(String shareDesc) {
      this.shareDesc = shareDesc;
      return this;
    }

    /**
     * 频道id，默认值为1为热门
     */
    public Builder setChannelId(Integer channelId) {
      this.channelId = channelId;
      return this;
    }

    /**
     * 语言版本: 1中文, 2 英文
     */
    public Builder setLang(Integer lang) {
      this.lang = lang;
      return this;
    }

    @Override
    public BannerItemData build() {
      return new BannerItemData(picUrl, skipUrl, lastUpdateTs, bannerId, shareIconUrl, shareTitle, shareDesc, channelId, lang, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BannerItemData extends ProtoAdapter<BannerItemData> {
    public ProtoAdapter_BannerItemData() {
      super(FieldEncoding.LENGTH_DELIMITED, BannerItemData.class);
    }

    @Override
    public int encodedSize(BannerItemData value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.picUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.skipUrl)
          + ProtoAdapter.UINT64.encodedSizeWithTag(3, value.lastUpdateTs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.bannerId)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.shareIconUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.shareTitle)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.shareDesc)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.channelId)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.lang)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BannerItemData value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.picUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.skipUrl);
      ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.lastUpdateTs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.bannerId);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.shareIconUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.shareTitle);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.shareDesc);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.channelId);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.lang);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BannerItemData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setPicUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setSkipUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setLastUpdateTs(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.setBannerId(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setShareIconUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setShareTitle(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setShareDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setChannelId(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.setLang(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BannerItemData redact(BannerItemData value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
