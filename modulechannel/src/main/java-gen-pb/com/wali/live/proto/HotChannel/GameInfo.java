// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: HotChannel.proto
package com.wali.live.proto.HotChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class GameInfo extends Message<GameInfo, GameInfo.Builder> {
  public static final ProtoAdapter<GameInfo> ADAPTER = new ProtoAdapter_GameInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_BGIMGURL = "";

  public static final String DEFAULT_ICONURL = "";

  public static final String DEFAULT_JUMPSCHEMEURI = "";

  public static final String DEFAULT_DESC = "";

  public static final Integer DEFAULT_GRADE = 0;

  /**
   * 游戏名称
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  /**
   * 背景图片
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bgImgUrl;

  /**
   * 游戏图标
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String iconUrl;

  /**
   * 跳转scheme
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jumpSchemeUri;

  /**
   * 游戏描述
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String desc;

  /**
   * 评分，数值[1-10]对应[0.5星-5星]
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer grade;

  public GameInfo(String name, String bgImgUrl, String iconUrl, String jumpSchemeUri, String desc,
      Integer grade) {
    this(name, bgImgUrl, iconUrl, jumpSchemeUri, desc, grade, ByteString.EMPTY);
  }

  public GameInfo(String name, String bgImgUrl, String iconUrl, String jumpSchemeUri, String desc,
      Integer grade, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.name = name;
    this.bgImgUrl = bgImgUrl;
    this.iconUrl = iconUrl;
    this.jumpSchemeUri = jumpSchemeUri;
    this.desc = desc;
    this.grade = grade;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.bgImgUrl = bgImgUrl;
    builder.iconUrl = iconUrl;
    builder.jumpSchemeUri = jumpSchemeUri;
    builder.desc = desc;
    builder.grade = grade;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GameInfo)) return false;
    GameInfo o = (GameInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(name, o.name)
        && Internal.equals(bgImgUrl, o.bgImgUrl)
        && Internal.equals(iconUrl, o.iconUrl)
        && Internal.equals(jumpSchemeUri, o.jumpSchemeUri)
        && Internal.equals(desc, o.desc)
        && Internal.equals(grade, o.grade);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (bgImgUrl != null ? bgImgUrl.hashCode() : 0);
      result = result * 37 + (iconUrl != null ? iconUrl.hashCode() : 0);
      result = result * 37 + (jumpSchemeUri != null ? jumpSchemeUri.hashCode() : 0);
      result = result * 37 + (desc != null ? desc.hashCode() : 0);
      result = result * 37 + (grade != null ? grade.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(name);
    if (bgImgUrl != null) builder.append(", bgImgUrl=").append(bgImgUrl);
    if (iconUrl != null) builder.append(", iconUrl=").append(iconUrl);
    if (jumpSchemeUri != null) builder.append(", jumpSchemeUri=").append(jumpSchemeUri);
    if (desc != null) builder.append(", desc=").append(desc);
    if (grade != null) builder.append(", grade=").append(grade);
    return builder.replace(0, 2, "GameInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GameInfo.ADAPTER.encode(this);
  }

  public static final GameInfo parseFrom(byte[] data) throws IOException {
    GameInfo c = null;
       c = GameInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 游戏名称
   */
  public String getName() {
    if(name==null){
        return DEFAULT_NAME;
    }
    return name;
  }

  /**
   * 背景图片
   */
  public String getBgImgUrl() {
    if(bgImgUrl==null){
        return DEFAULT_BGIMGURL;
    }
    return bgImgUrl;
  }

  /**
   * 游戏图标
   */
  public String getIconUrl() {
    if(iconUrl==null){
        return DEFAULT_ICONURL;
    }
    return iconUrl;
  }

  /**
   * 跳转scheme
   */
  public String getJumpSchemeUri() {
    if(jumpSchemeUri==null){
        return DEFAULT_JUMPSCHEMEURI;
    }
    return jumpSchemeUri;
  }

  /**
   * 游戏描述
   */
  public String getDesc() {
    if(desc==null){
        return DEFAULT_DESC;
    }
    return desc;
  }

  /**
   * 评分，数值[1-10]对应[0.5星-5星]
   */
  public Integer getGrade() {
    if(grade==null){
        return DEFAULT_GRADE;
    }
    return grade;
  }

  /**
   * 游戏名称
   */
  public boolean hasName() {
    return name!=null;
  }

  /**
   * 背景图片
   */
  public boolean hasBgImgUrl() {
    return bgImgUrl!=null;
  }

  /**
   * 游戏图标
   */
  public boolean hasIconUrl() {
    return iconUrl!=null;
  }

  /**
   * 跳转scheme
   */
  public boolean hasJumpSchemeUri() {
    return jumpSchemeUri!=null;
  }

  /**
   * 游戏描述
   */
  public boolean hasDesc() {
    return desc!=null;
  }

  /**
   * 评分，数值[1-10]对应[0.5星-5星]
   */
  public boolean hasGrade() {
    return grade!=null;
  }

  public static final class Builder extends Message.Builder<GameInfo, Builder> {
    public String name;

    public String bgImgUrl;

    public String iconUrl;

    public String jumpSchemeUri;

    public String desc;

    public Integer grade;

    public Builder() {
    }

    /**
     * 游戏名称
     */
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * 背景图片
     */
    public Builder setBgImgUrl(String bgImgUrl) {
      this.bgImgUrl = bgImgUrl;
      return this;
    }

    /**
     * 游戏图标
     */
    public Builder setIconUrl(String iconUrl) {
      this.iconUrl = iconUrl;
      return this;
    }

    /**
     * 跳转scheme
     */
    public Builder setJumpSchemeUri(String jumpSchemeUri) {
      this.jumpSchemeUri = jumpSchemeUri;
      return this;
    }

    /**
     * 游戏描述
     */
    public Builder setDesc(String desc) {
      this.desc = desc;
      return this;
    }

    /**
     * 评分，数值[1-10]对应[0.5星-5星]
     */
    public Builder setGrade(Integer grade) {
      this.grade = grade;
      return this;
    }

    @Override
    public GameInfo build() {
      return new GameInfo(name, bgImgUrl, iconUrl, jumpSchemeUri, desc, grade, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GameInfo extends ProtoAdapter<GameInfo> {
    public ProtoAdapter_GameInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, GameInfo.class);
    }

    @Override
    public int encodedSize(GameInfo value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.bgImgUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.iconUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.jumpSchemeUri)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.desc)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.grade)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GameInfo value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.bgImgUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.iconUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.jumpSchemeUri);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.desc);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.grade);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GameInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setName(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setBgImgUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setIconUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setJumpSchemeUri(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setGrade(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GameInfo redact(GameInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
