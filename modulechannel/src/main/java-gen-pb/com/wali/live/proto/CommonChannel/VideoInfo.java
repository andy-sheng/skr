// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 小视频信息
 */
public final class VideoInfo extends Message<VideoInfo, VideoInfo.Builder> {
  public static final ProtoAdapter<VideoInfo> ADAPTER = new ProtoAdapter_VideoInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final Long DEFAULT_VIEW_COUNT = 0L;

  public static final Long DEFAULT_DURATION = 0L;

  public static final Long DEFAULT_LIKE_COUNT = 0L;

  public static final Boolean DEFAULT_IS_LIKED = false;

  /**
   * 小视频id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String id;

  /**
   * 小视频观看次数
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long view_count;

  /**
   * 用户资料
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.CommonChannel.UserInfo#ADAPTER"
  )
  public final UserInfo user_info;

  /**
   * 视频时长，单位ms
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long duration;

  /**
   * 点赞数
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long like_count;

  /**
   * 是否已经赞过
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_liked;

  public VideoInfo(String id, Long view_count, UserInfo user_info, Long duration, Long like_count,
      Boolean is_liked) {
    this(id, view_count, user_info, duration, like_count, is_liked, ByteString.EMPTY);
  }

  public VideoInfo(String id, Long view_count, UserInfo user_info, Long duration, Long like_count,
      Boolean is_liked, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.view_count = view_count;
    this.user_info = user_info;
    this.duration = duration;
    this.like_count = like_count;
    this.is_liked = is_liked;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.view_count = view_count;
    builder.user_info = user_info;
    builder.duration = duration;
    builder.like_count = like_count;
    builder.is_liked = is_liked;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VideoInfo)) return false;
    VideoInfo o = (VideoInfo) other;
    return unknownFields().equals(o.unknownFields())
        && id.equals(o.id)
        && Internal.equals(view_count, o.view_count)
        && Internal.equals(user_info, o.user_info)
        && Internal.equals(duration, o.duration)
        && Internal.equals(like_count, o.like_count)
        && Internal.equals(is_liked, o.is_liked);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + id.hashCode();
      result = result * 37 + (view_count != null ? view_count.hashCode() : 0);
      result = result * 37 + (user_info != null ? user_info.hashCode() : 0);
      result = result * 37 + (duration != null ? duration.hashCode() : 0);
      result = result * 37 + (like_count != null ? like_count.hashCode() : 0);
      result = result * 37 + (is_liked != null ? is_liked.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", id=").append(id);
    if (view_count != null) builder.append(", view_count=").append(view_count);
    if (user_info != null) builder.append(", user_info=").append(user_info);
    if (duration != null) builder.append(", duration=").append(duration);
    if (like_count != null) builder.append(", like_count=").append(like_count);
    if (is_liked != null) builder.append(", is_liked=").append(is_liked);
    return builder.replace(0, 2, "VideoInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return VideoInfo.ADAPTER.encode(this);
  }

  public static final VideoInfo parseFrom(byte[] data) throws IOException {
    VideoInfo c = null;
       c = VideoInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 小视频id
   */
  public String getId() {
    if(id==null){
        return DEFAULT_ID;
    }
    return id;
  }

  /**
   * 小视频观看次数
   */
  public Long getViewCount() {
    if(view_count==null){
        return DEFAULT_VIEW_COUNT;
    }
    return view_count;
  }

  /**
   * 用户资料
   */
  public UserInfo getUserInfo() {
    if(user_info==null){
        return new UserInfo.Builder().build();
    }
    return user_info;
  }

  /**
   * 视频时长，单位ms
   */
  public Long getDuration() {
    if(duration==null){
        return DEFAULT_DURATION;
    }
    return duration;
  }

  /**
   * 点赞数
   */
  public Long getLikeCount() {
    if(like_count==null){
        return DEFAULT_LIKE_COUNT;
    }
    return like_count;
  }

  /**
   * 是否已经赞过
   */
  public Boolean getIsLiked() {
    if(is_liked==null){
        return DEFAULT_IS_LIKED;
    }
    return is_liked;
  }

  /**
   * 小视频id
   */
  public boolean hasId() {
    return id!=null;
  }

  /**
   * 小视频观看次数
   */
  public boolean hasViewCount() {
    return view_count!=null;
  }

  /**
   * 用户资料
   */
  public boolean hasUserInfo() {
    return user_info!=null;
  }

  /**
   * 视频时长，单位ms
   */
  public boolean hasDuration() {
    return duration!=null;
  }

  /**
   * 点赞数
   */
  public boolean hasLikeCount() {
    return like_count!=null;
  }

  /**
   * 是否已经赞过
   */
  public boolean hasIsLiked() {
    return is_liked!=null;
  }

  public static final class Builder extends Message.Builder<VideoInfo, Builder> {
    public String id;

    public Long view_count;

    public UserInfo user_info;

    public Long duration;

    public Long like_count;

    public Boolean is_liked;

    public Builder() {
    }

    /**
     * 小视频id
     */
    public Builder setId(String id) {
      this.id = id;
      return this;
    }

    /**
     * 小视频观看次数
     */
    public Builder setViewCount(Long view_count) {
      this.view_count = view_count;
      return this;
    }

    /**
     * 用户资料
     */
    public Builder setUserInfo(UserInfo user_info) {
      this.user_info = user_info;
      return this;
    }

    /**
     * 视频时长，单位ms
     */
    public Builder setDuration(Long duration) {
      this.duration = duration;
      return this;
    }

    /**
     * 点赞数
     */
    public Builder setLikeCount(Long like_count) {
      this.like_count = like_count;
      return this;
    }

    /**
     * 是否已经赞过
     */
    public Builder setIsLiked(Boolean is_liked) {
      this.is_liked = is_liked;
      return this;
    }

    @Override
    public VideoInfo build() {
      return new VideoInfo(id, view_count, user_info, duration, like_count, is_liked, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VideoInfo extends ProtoAdapter<VideoInfo> {
    public ProtoAdapter_VideoInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, VideoInfo.class);
    }

    @Override
    public int encodedSize(VideoInfo value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.view_count)
          + UserInfo.ADAPTER.encodedSizeWithTag(3, value.user_info)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.duration)
          + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.like_count)
          + ProtoAdapter.BOOL.encodedSizeWithTag(6, value.is_liked)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VideoInfo value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.view_count);
      UserInfo.ADAPTER.encodeWithTag(writer, 3, value.user_info);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.duration);
      ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.like_count);
      ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.is_liked);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VideoInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setViewCount(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setUserInfo(UserInfo.ADAPTER.decode(reader)); break;
          case 4: builder.setDuration(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.setLikeCount(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.setIsLiked(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VideoInfo redact(VideoInfo value) {
      Builder builder = value.newBuilder();
      if (builder.user_info != null) builder.user_info = UserInfo.ADAPTER.redact(builder.user_info);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
