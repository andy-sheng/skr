// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * type=23
 */
public final class UiTemplateNotice extends Message<UiTemplateNotice, UiTemplateNotice.Builder> {
  public static final ProtoAdapter<UiTemplateNotice> ADAPTER = new ProtoAdapter_UiTemplateNotice();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_HEADERVIEWALLURI = "";

  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.CommonChannel.NoticeData#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<NoticeData> noticeItems;

  /**
   * 查看全部的uri，如果没有这个字段不展示查看全部
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String headerViewAllUri;

  public UiTemplateNotice(List<NoticeData> noticeItems, String headerViewAllUri) {
    this(noticeItems, headerViewAllUri, ByteString.EMPTY);
  }

  public UiTemplateNotice(List<NoticeData> noticeItems, String headerViewAllUri,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.noticeItems = Internal.immutableCopyOf("noticeItems", noticeItems);
    this.headerViewAllUri = headerViewAllUri;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.noticeItems = Internal.copyOf("noticeItems", noticeItems);
    builder.headerViewAllUri = headerViewAllUri;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UiTemplateNotice)) return false;
    UiTemplateNotice o = (UiTemplateNotice) other;
    return unknownFields().equals(o.unknownFields())
        && noticeItems.equals(o.noticeItems)
        && Internal.equals(headerViewAllUri, o.headerViewAllUri);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + noticeItems.hashCode();
      result = result * 37 + (headerViewAllUri != null ? headerViewAllUri.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!noticeItems.isEmpty()) builder.append(", noticeItems=").append(noticeItems);
    if (headerViewAllUri != null) builder.append(", headerViewAllUri=").append(headerViewAllUri);
    return builder.replace(0, 2, "UiTemplateNotice{").append('}').toString();
  }

  public byte[] toByteArray() {
    return UiTemplateNotice.ADAPTER.encode(this);
  }

  public static final UiTemplateNotice parseFrom(byte[] data) throws IOException {
    UiTemplateNotice c = null;
       c = UiTemplateNotice.ADAPTER.decode(data);
    return c;
  }

  public List<NoticeData> getNoticeItemsList() {
    if(noticeItems==null){
        return new java.util.ArrayList<NoticeData>();
    }
    return noticeItems;
  }

  /**
   * 查看全部的uri，如果没有这个字段不展示查看全部
   */
  public String getHeaderViewAllUri() {
    if(headerViewAllUri==null){
        return DEFAULT_HEADERVIEWALLURI;
    }
    return headerViewAllUri;
  }

  public boolean hasNoticeItemsList() {
    return noticeItems!=null;
  }

  /**
   * 查看全部的uri，如果没有这个字段不展示查看全部
   */
  public boolean hasHeaderViewAllUri() {
    return headerViewAllUri!=null;
  }

  public static final class Builder extends Message.Builder<UiTemplateNotice, Builder> {
    public List<NoticeData> noticeItems;

    public String headerViewAllUri;

    public Builder() {
      noticeItems = Internal.newMutableList();
    }

    public Builder addAllNoticeItems(List<NoticeData> noticeItems) {
      Internal.checkElementsNotNull(noticeItems);
      this.noticeItems = noticeItems;
      return this;
    }

    /**
     * 查看全部的uri，如果没有这个字段不展示查看全部
     */
    public Builder setHeaderViewAllUri(String headerViewAllUri) {
      this.headerViewAllUri = headerViewAllUri;
      return this;
    }

    @Override
    public UiTemplateNotice build() {
      return new UiTemplateNotice(noticeItems, headerViewAllUri, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UiTemplateNotice extends ProtoAdapter<UiTemplateNotice> {
    public ProtoAdapter_UiTemplateNotice() {
      super(FieldEncoding.LENGTH_DELIMITED, UiTemplateNotice.class);
    }

    @Override
    public int encodedSize(UiTemplateNotice value) {
      return NoticeData.ADAPTER.asRepeated().encodedSizeWithTag(1, value.noticeItems)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.headerViewAllUri)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UiTemplateNotice value) throws IOException {
      NoticeData.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.noticeItems);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.headerViewAllUri);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UiTemplateNotice decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.noticeItems.add(NoticeData.ADAPTER.decode(reader)); break;
          case 2: builder.setHeaderViewAllUri(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UiTemplateNotice redact(UiTemplateNotice value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.noticeItems, NoticeData.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
