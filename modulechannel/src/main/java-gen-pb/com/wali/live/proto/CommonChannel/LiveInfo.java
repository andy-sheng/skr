// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 一条直播记录
 */
public final class LiveInfo extends Message<LiveInfo, LiveInfo.Builder> {
  public static final ProtoAdapter<LiveInfo> ADAPTER = new ProtoAdapter_LiveInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_LIVEID = "";

  public static final String DEFAULT_LOCATION = "";

  public static final Integer DEFAULT_VIEWERCNT = 0;

  public static final String DEFAULT_URL = "";

  public static final String DEFAULT_COVERURL = "";

  public static final String DEFAULT_LITITLE = "";

  public static final Long DEFAULT_STARTTIME = 0L;

  public static final String DEFAULT_TAG = "";

  public static final Integer DEFAULT_APPTYPE = 0;

  public static final Integer DEFAULT_LIVETYPE = 0;

  public static final Integer DEFAULT_HOTSCORE = 0;

  /**
   * 直播id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String liveId;

  /**
   * 主播信息
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.CommonChannel.UserBrief#ADAPTER"
  )
  public final UserBrief user;

  /**
   * 地点
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String location;

  /**
   * 观众数
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer viewerCnt;

  /**
   * 直播地址
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String url;

  /**
   * 房间的封面图片地址
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String coverUrl;

  /**
   * 直播标题
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String liTitle;

  /**
   * 直播开始时间
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long startTime;

  /**
   * 个性化标签(打点上报)
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String tag;

  /**
   * 购物信息[has判断有该字段,说明是购物直播]
   */
  @WireField(
      tag = 10,
      adapter = "com.wali.live.proto.CommonChannel.ShopBrief#ADAPTER"
  )
  public final ShopBrief shop;

  /**
   * 0=小米直播app, 1=无人机, 2=导播台, 3=游戏, 4=一直播
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer appType;

  /**
   * 直播类型[和房间接口一致]. 0=公开, 1=私密, 2=口令, 3=门票
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer liveType;

  @WireField(
      tag = 15,
      adapter = "com.wali.live.proto.CommonChannel.PKBrief#ADAPTER"
  )
  public final PKBrief pk;

  @WireField(
      tag = 16,
      adapter = "com.wali.live.proto.CommonChannel.MicBrief#ADAPTER"
  )
  public final MicBrief mic;

  /**
   * 热度值
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer hotScore;

  public LiveInfo(String liveId, UserBrief user, String location, Integer viewerCnt, String url,
      String coverUrl, String liTitle, Long startTime, String tag, ShopBrief shop, Integer appType,
      Integer liveType, PKBrief pk, MicBrief mic, Integer hotScore) {
    this(liveId, user, location, viewerCnt, url, coverUrl, liTitle, startTime, tag, shop, appType, liveType, pk, mic, hotScore, ByteString.EMPTY);
  }

  public LiveInfo(String liveId, UserBrief user, String location, Integer viewerCnt, String url,
      String coverUrl, String liTitle, Long startTime, String tag, ShopBrief shop, Integer appType,
      Integer liveType, PKBrief pk, MicBrief mic, Integer hotScore, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.liveId = liveId;
    this.user = user;
    this.location = location;
    this.viewerCnt = viewerCnt;
    this.url = url;
    this.coverUrl = coverUrl;
    this.liTitle = liTitle;
    this.startTime = startTime;
    this.tag = tag;
    this.shop = shop;
    this.appType = appType;
    this.liveType = liveType;
    this.pk = pk;
    this.mic = mic;
    this.hotScore = hotScore;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.liveId = liveId;
    builder.user = user;
    builder.location = location;
    builder.viewerCnt = viewerCnt;
    builder.url = url;
    builder.coverUrl = coverUrl;
    builder.liTitle = liTitle;
    builder.startTime = startTime;
    builder.tag = tag;
    builder.shop = shop;
    builder.appType = appType;
    builder.liveType = liveType;
    builder.pk = pk;
    builder.mic = mic;
    builder.hotScore = hotScore;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LiveInfo)) return false;
    LiveInfo o = (LiveInfo) other;
    return unknownFields().equals(o.unknownFields())
        && liveId.equals(o.liveId)
        && Internal.equals(user, o.user)
        && Internal.equals(location, o.location)
        && Internal.equals(viewerCnt, o.viewerCnt)
        && Internal.equals(url, o.url)
        && Internal.equals(coverUrl, o.coverUrl)
        && Internal.equals(liTitle, o.liTitle)
        && Internal.equals(startTime, o.startTime)
        && Internal.equals(tag, o.tag)
        && Internal.equals(shop, o.shop)
        && Internal.equals(appType, o.appType)
        && Internal.equals(liveType, o.liveType)
        && Internal.equals(pk, o.pk)
        && Internal.equals(mic, o.mic)
        && Internal.equals(hotScore, o.hotScore);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + liveId.hashCode();
      result = result * 37 + (user != null ? user.hashCode() : 0);
      result = result * 37 + (location != null ? location.hashCode() : 0);
      result = result * 37 + (viewerCnt != null ? viewerCnt.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (coverUrl != null ? coverUrl.hashCode() : 0);
      result = result * 37 + (liTitle != null ? liTitle.hashCode() : 0);
      result = result * 37 + (startTime != null ? startTime.hashCode() : 0);
      result = result * 37 + (tag != null ? tag.hashCode() : 0);
      result = result * 37 + (shop != null ? shop.hashCode() : 0);
      result = result * 37 + (appType != null ? appType.hashCode() : 0);
      result = result * 37 + (liveType != null ? liveType.hashCode() : 0);
      result = result * 37 + (pk != null ? pk.hashCode() : 0);
      result = result * 37 + (mic != null ? mic.hashCode() : 0);
      result = result * 37 + (hotScore != null ? hotScore.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", liveId=").append(liveId);
    if (user != null) builder.append(", user=").append(user);
    if (location != null) builder.append(", location=").append(location);
    if (viewerCnt != null) builder.append(", viewerCnt=").append(viewerCnt);
    if (url != null) builder.append(", url=").append(url);
    if (coverUrl != null) builder.append(", coverUrl=").append(coverUrl);
    if (liTitle != null) builder.append(", liTitle=").append(liTitle);
    if (startTime != null) builder.append(", startTime=").append(startTime);
    if (tag != null) builder.append(", tag=").append(tag);
    if (shop != null) builder.append(", shop=").append(shop);
    if (appType != null) builder.append(", appType=").append(appType);
    if (liveType != null) builder.append(", liveType=").append(liveType);
    if (pk != null) builder.append(", pk=").append(pk);
    if (mic != null) builder.append(", mic=").append(mic);
    if (hotScore != null) builder.append(", hotScore=").append(hotScore);
    return builder.replace(0, 2, "LiveInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return LiveInfo.ADAPTER.encode(this);
  }

  public static final LiveInfo parseFrom(byte[] data) throws IOException {
    LiveInfo c = null;
       c = LiveInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 直播id
   */
  public String getLiveId() {
    if(liveId==null){
        return DEFAULT_LIVEID;
    }
    return liveId;
  }

  /**
   * 主播信息
   */
  public UserBrief getUser() {
    if(user==null){
        return new UserBrief.Builder().build();
    }
    return user;
  }

  /**
   * 地点
   */
  public String getLocation() {
    if(location==null){
        return DEFAULT_LOCATION;
    }
    return location;
  }

  /**
   * 观众数
   */
  public Integer getViewerCnt() {
    if(viewerCnt==null){
        return DEFAULT_VIEWERCNT;
    }
    return viewerCnt;
  }

  /**
   * 直播地址
   */
  public String getUrl() {
    if(url==null){
        return DEFAULT_URL;
    }
    return url;
  }

  /**
   * 房间的封面图片地址
   */
  public String getCoverUrl() {
    if(coverUrl==null){
        return DEFAULT_COVERURL;
    }
    return coverUrl;
  }

  /**
   * 直播标题
   */
  public String getLiTitle() {
    if(liTitle==null){
        return DEFAULT_LITITLE;
    }
    return liTitle;
  }

  /**
   * 直播开始时间
   */
  public Long getStartTime() {
    if(startTime==null){
        return DEFAULT_STARTTIME;
    }
    return startTime;
  }

  /**
   * 个性化标签(打点上报)
   */
  public String getTag() {
    if(tag==null){
        return DEFAULT_TAG;
    }
    return tag;
  }

  /**
   * 购物信息[has判断有该字段,说明是购物直播]
   */
  public ShopBrief getShop() {
    if(shop==null){
        return new ShopBrief.Builder().build();
    }
    return shop;
  }

  /**
   * 0=小米直播app, 1=无人机, 2=导播台, 3=游戏, 4=一直播
   */
  public Integer getAppType() {
    if(appType==null){
        return DEFAULT_APPTYPE;
    }
    return appType;
  }

  /**
   * 直播类型[和房间接口一致]. 0=公开, 1=私密, 2=口令, 3=门票
   */
  public Integer getLiveType() {
    if(liveType==null){
        return DEFAULT_LIVETYPE;
    }
    return liveType;
  }

  public PKBrief getPk() {
    if(pk==null){
        return new PKBrief.Builder().build();
    }
    return pk;
  }

  public MicBrief getMic() {
    if(mic==null){
        return new MicBrief.Builder().build();
    }
    return mic;
  }

  /**
   * 热度值
   */
  public Integer getHotScore() {
    if(hotScore==null){
        return DEFAULT_HOTSCORE;
    }
    return hotScore;
  }

  /**
   * 直播id
   */
  public boolean hasLiveId() {
    return liveId!=null;
  }

  /**
   * 主播信息
   */
  public boolean hasUser() {
    return user!=null;
  }

  /**
   * 地点
   */
  public boolean hasLocation() {
    return location!=null;
  }

  /**
   * 观众数
   */
  public boolean hasViewerCnt() {
    return viewerCnt!=null;
  }

  /**
   * 直播地址
   */
  public boolean hasUrl() {
    return url!=null;
  }

  /**
   * 房间的封面图片地址
   */
  public boolean hasCoverUrl() {
    return coverUrl!=null;
  }

  /**
   * 直播标题
   */
  public boolean hasLiTitle() {
    return liTitle!=null;
  }

  /**
   * 直播开始时间
   */
  public boolean hasStartTime() {
    return startTime!=null;
  }

  /**
   * 个性化标签(打点上报)
   */
  public boolean hasTag() {
    return tag!=null;
  }

  /**
   * 购物信息[has判断有该字段,说明是购物直播]
   */
  public boolean hasShop() {
    return shop!=null;
  }

  /**
   * 0=小米直播app, 1=无人机, 2=导播台, 3=游戏, 4=一直播
   */
  public boolean hasAppType() {
    return appType!=null;
  }

  /**
   * 直播类型[和房间接口一致]. 0=公开, 1=私密, 2=口令, 3=门票
   */
  public boolean hasLiveType() {
    return liveType!=null;
  }

  public boolean hasPk() {
    return pk!=null;
  }

  public boolean hasMic() {
    return mic!=null;
  }

  /**
   * 热度值
   */
  public boolean hasHotScore() {
    return hotScore!=null;
  }

  public static final class Builder extends Message.Builder<LiveInfo, Builder> {
    public String liveId;

    public UserBrief user;

    public String location;

    public Integer viewerCnt;

    public String url;

    public String coverUrl;

    public String liTitle;

    public Long startTime;

    public String tag;

    public ShopBrief shop;

    public Integer appType;

    public Integer liveType;

    public PKBrief pk;

    public MicBrief mic;

    public Integer hotScore;

    public Builder() {
    }

    /**
     * 直播id
     */
    public Builder setLiveId(String liveId) {
      this.liveId = liveId;
      return this;
    }

    /**
     * 主播信息
     */
    public Builder setUser(UserBrief user) {
      this.user = user;
      return this;
    }

    /**
     * 地点
     */
    public Builder setLocation(String location) {
      this.location = location;
      return this;
    }

    /**
     * 观众数
     */
    public Builder setViewerCnt(Integer viewerCnt) {
      this.viewerCnt = viewerCnt;
      return this;
    }

    /**
     * 直播地址
     */
    public Builder setUrl(String url) {
      this.url = url;
      return this;
    }

    /**
     * 房间的封面图片地址
     */
    public Builder setCoverUrl(String coverUrl) {
      this.coverUrl = coverUrl;
      return this;
    }

    /**
     * 直播标题
     */
    public Builder setLiTitle(String liTitle) {
      this.liTitle = liTitle;
      return this;
    }

    /**
     * 直播开始时间
     */
    public Builder setStartTime(Long startTime) {
      this.startTime = startTime;
      return this;
    }

    /**
     * 个性化标签(打点上报)
     */
    public Builder setTag(String tag) {
      this.tag = tag;
      return this;
    }

    /**
     * 购物信息[has判断有该字段,说明是购物直播]
     */
    public Builder setShop(ShopBrief shop) {
      this.shop = shop;
      return this;
    }

    /**
     * 0=小米直播app, 1=无人机, 2=导播台, 3=游戏, 4=一直播
     */
    public Builder setAppType(Integer appType) {
      this.appType = appType;
      return this;
    }

    /**
     * 直播类型[和房间接口一致]. 0=公开, 1=私密, 2=口令, 3=门票
     */
    public Builder setLiveType(Integer liveType) {
      this.liveType = liveType;
      return this;
    }

    public Builder setPk(PKBrief pk) {
      this.pk = pk;
      return this;
    }

    public Builder setMic(MicBrief mic) {
      this.mic = mic;
      return this;
    }

    /**
     * 热度值
     */
    public Builder setHotScore(Integer hotScore) {
      this.hotScore = hotScore;
      return this;
    }

    @Override
    public LiveInfo build() {
      return new LiveInfo(liveId, user, location, viewerCnt, url, coverUrl, liTitle, startTime, tag, shop, appType, liveType, pk, mic, hotScore, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_LiveInfo extends ProtoAdapter<LiveInfo> {
    public ProtoAdapter_LiveInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, LiveInfo.class);
    }

    @Override
    public int encodedSize(LiveInfo value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.liveId)
          + UserBrief.ADAPTER.encodedSizeWithTag(2, value.user)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.location)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.viewerCnt)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.url)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.coverUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.liTitle)
          + ProtoAdapter.UINT64.encodedSizeWithTag(8, value.startTime)
          + ProtoAdapter.STRING.encodedSizeWithTag(9, value.tag)
          + ShopBrief.ADAPTER.encodedSizeWithTag(10, value.shop)
          + ProtoAdapter.UINT32.encodedSizeWithTag(11, value.appType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(12, value.liveType)
          + PKBrief.ADAPTER.encodedSizeWithTag(15, value.pk)
          + MicBrief.ADAPTER.encodedSizeWithTag(16, value.mic)
          + ProtoAdapter.UINT32.encodedSizeWithTag(18, value.hotScore)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, LiveInfo value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.liveId);
      UserBrief.ADAPTER.encodeWithTag(writer, 2, value.user);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.location);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.viewerCnt);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.url);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.coverUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.liTitle);
      ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.startTime);
      ProtoAdapter.STRING.encodeWithTag(writer, 9, value.tag);
      ShopBrief.ADAPTER.encodeWithTag(writer, 10, value.shop);
      ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.appType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.liveType);
      PKBrief.ADAPTER.encodeWithTag(writer, 15, value.pk);
      MicBrief.ADAPTER.encodeWithTag(writer, 16, value.mic);
      ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.hotScore);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public LiveInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setLiveId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setUser(UserBrief.ADAPTER.decode(reader)); break;
          case 3: builder.setLocation(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setViewerCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setCoverUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setLiTitle(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setStartTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.setTag(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.setShop(ShopBrief.ADAPTER.decode(reader)); break;
          case 11: builder.setAppType(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.setLiveType(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.setPk(PKBrief.ADAPTER.decode(reader)); break;
          case 16: builder.setMic(MicBrief.ADAPTER.decode(reader)); break;
          case 18: builder.setHotScore(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public LiveInfo redact(LiveInfo value) {
      Builder builder = value.newBuilder();
      if (builder.user != null) builder.user = UserBrief.ADAPTER.redact(builder.user);
      if (builder.shop != null) builder.shop = ShopBrief.ADAPTER.redact(builder.shop);
      if (builder.pk != null) builder.pk = PKBrief.ADAPTER.redact(builder.pk);
      if (builder.mic != null) builder.mic = MicBrief.ADAPTER.redact(builder.mic);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
