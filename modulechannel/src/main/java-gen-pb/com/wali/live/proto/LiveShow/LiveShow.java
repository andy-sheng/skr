// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 一条直播记录
 */
public final class LiveShow extends Message<LiveShow, LiveShow.Builder> {
  public static final ProtoAdapter<LiveShow> ADAPTER = new ProtoAdapter_LiveShow();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_LIID = "";

  public static final String DEFAULT_LOCATION = "";

  public static final Integer DEFAULT_VIEWERCNT = 0;

  public static final String DEFAULT_URL = "";

  public static final Integer DEFAULT_LITYPE = 0;

  public static final String DEFAULT_LITITLE = "";

  public static final String DEFAULT_SHAREURL = "";

  public static final Long DEFAULT_STARTTIME = 0L;

  public static final String DEFAULT_COVERURL = "";

  public static final String DEFAULT_TAG = "";

  public static final Integer DEFAULT_APPTYPE = 0;

  /**
   * 直播id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String liId;

  /**
   * 主播信息
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LiveShow.UserShow#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final UserShow user;

  /**
   * 地点
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String location;

  /**
   * 观众数
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer viewerCnt;

  /**
   * 直播地址
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String url;

  /**
   * 直播类型,公开:0 私密:1 回放:2 pk:3 口令:4
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer liType;

  /**
   * 直播标题
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String liTitle;

  /**
   * 分享地址（回放用到）
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String shareUrl;

  /**
   * 直播开始时间（回放用到）
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long startTime;

  /**
   * pk信息
   */
  @WireField(
      tag = 10,
      adapter = "com.wali.live.proto.LiveShow.PKLive#ADAPTER"
  )
  public final PKLive pkInfo;

  /**
   * 房间的封面图片地址
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String coverUrl;

  /**
   * 个性化标签(打点上报)
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String tag;

  /**
   * 0=小米直播app, 1=无人机, 2=导播台, 3=游戏, 4=一直播
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer appType;

  public LiveShow(String liId, UserShow user, String location, Integer viewerCnt, String url,
      Integer liType, String liTitle, String shareUrl, Long startTime, PKLive pkInfo,
      String coverUrl, String tag, Integer appType) {
    this(liId, user, location, viewerCnt, url, liType, liTitle, shareUrl, startTime, pkInfo, coverUrl, tag, appType, ByteString.EMPTY);
  }

  public LiveShow(String liId, UserShow user, String location, Integer viewerCnt, String url,
      Integer liType, String liTitle, String shareUrl, Long startTime, PKLive pkInfo,
      String coverUrl, String tag, Integer appType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.liId = liId;
    this.user = user;
    this.location = location;
    this.viewerCnt = viewerCnt;
    this.url = url;
    this.liType = liType;
    this.liTitle = liTitle;
    this.shareUrl = shareUrl;
    this.startTime = startTime;
    this.pkInfo = pkInfo;
    this.coverUrl = coverUrl;
    this.tag = tag;
    this.appType = appType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.liId = liId;
    builder.user = user;
    builder.location = location;
    builder.viewerCnt = viewerCnt;
    builder.url = url;
    builder.liType = liType;
    builder.liTitle = liTitle;
    builder.shareUrl = shareUrl;
    builder.startTime = startTime;
    builder.pkInfo = pkInfo;
    builder.coverUrl = coverUrl;
    builder.tag = tag;
    builder.appType = appType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LiveShow)) return false;
    LiveShow o = (LiveShow) other;
    return unknownFields().equals(o.unknownFields())
        && liId.equals(o.liId)
        && user.equals(o.user)
        && Internal.equals(location, o.location)
        && Internal.equals(viewerCnt, o.viewerCnt)
        && Internal.equals(url, o.url)
        && Internal.equals(liType, o.liType)
        && Internal.equals(liTitle, o.liTitle)
        && Internal.equals(shareUrl, o.shareUrl)
        && Internal.equals(startTime, o.startTime)
        && Internal.equals(pkInfo, o.pkInfo)
        && Internal.equals(coverUrl, o.coverUrl)
        && Internal.equals(tag, o.tag)
        && Internal.equals(appType, o.appType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + liId.hashCode();
      result = result * 37 + user.hashCode();
      result = result * 37 + (location != null ? location.hashCode() : 0);
      result = result * 37 + (viewerCnt != null ? viewerCnt.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (liType != null ? liType.hashCode() : 0);
      result = result * 37 + (liTitle != null ? liTitle.hashCode() : 0);
      result = result * 37 + (shareUrl != null ? shareUrl.hashCode() : 0);
      result = result * 37 + (startTime != null ? startTime.hashCode() : 0);
      result = result * 37 + (pkInfo != null ? pkInfo.hashCode() : 0);
      result = result * 37 + (coverUrl != null ? coverUrl.hashCode() : 0);
      result = result * 37 + (tag != null ? tag.hashCode() : 0);
      result = result * 37 + (appType != null ? appType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", liId=").append(liId);
    builder.append(", user=").append(user);
    if (location != null) builder.append(", location=").append(location);
    if (viewerCnt != null) builder.append(", viewerCnt=").append(viewerCnt);
    if (url != null) builder.append(", url=").append(url);
    if (liType != null) builder.append(", liType=").append(liType);
    if (liTitle != null) builder.append(", liTitle=").append(liTitle);
    if (shareUrl != null) builder.append(", shareUrl=").append(shareUrl);
    if (startTime != null) builder.append(", startTime=").append(startTime);
    if (pkInfo != null) builder.append(", pkInfo=").append(pkInfo);
    if (coverUrl != null) builder.append(", coverUrl=").append(coverUrl);
    if (tag != null) builder.append(", tag=").append(tag);
    if (appType != null) builder.append(", appType=").append(appType);
    return builder.replace(0, 2, "LiveShow{").append('}').toString();
  }

  public byte[] toByteArray() {
    return LiveShow.ADAPTER.encode(this);
  }

  public static final LiveShow parseFrom(byte[] data) throws IOException {
    LiveShow c = null;
       c = LiveShow.ADAPTER.decode(data);
    return c;
  }

  /**
   * 直播id
   */
  public String getLiId() {
    if(liId==null){
        return DEFAULT_LIID;
    }
    return liId;
  }

  /**
   * 主播信息
   */
  public UserShow getUser() {
    if(user==null){
        return new UserShow.Builder().build();
    }
    return user;
  }

  /**
   * 地点
   */
  public String getLocation() {
    if(location==null){
        return DEFAULT_LOCATION;
    }
    return location;
  }

  /**
   * 观众数
   */
  public Integer getViewerCnt() {
    if(viewerCnt==null){
        return DEFAULT_VIEWERCNT;
    }
    return viewerCnt;
  }

  /**
   * 直播地址
   */
  public String getUrl() {
    if(url==null){
        return DEFAULT_URL;
    }
    return url;
  }

  /**
   * 直播类型,公开:0 私密:1 回放:2 pk:3 口令:4
   */
  public Integer getLiType() {
    if(liType==null){
        return DEFAULT_LITYPE;
    }
    return liType;
  }

  /**
   * 直播标题
   */
  public String getLiTitle() {
    if(liTitle==null){
        return DEFAULT_LITITLE;
    }
    return liTitle;
  }

  /**
   * 分享地址（回放用到）
   */
  public String getShareUrl() {
    if(shareUrl==null){
        return DEFAULT_SHAREURL;
    }
    return shareUrl;
  }

  /**
   * 直播开始时间（回放用到）
   */
  public Long getStartTime() {
    if(startTime==null){
        return DEFAULT_STARTTIME;
    }
    return startTime;
  }

  /**
   * pk信息
   */
  public PKLive getPkInfo() {
    if(pkInfo==null){
        return new PKLive.Builder().build();
    }
    return pkInfo;
  }

  /**
   * 房间的封面图片地址
   */
  public String getCoverUrl() {
    if(coverUrl==null){
        return DEFAULT_COVERURL;
    }
    return coverUrl;
  }

  /**
   * 个性化标签(打点上报)
   */
  public String getTag() {
    if(tag==null){
        return DEFAULT_TAG;
    }
    return tag;
  }

  /**
   * 0=小米直播app, 1=无人机, 2=导播台, 3=游戏, 4=一直播
   */
  public Integer getAppType() {
    if(appType==null){
        return DEFAULT_APPTYPE;
    }
    return appType;
  }

  /**
   * 直播id
   */
  public boolean hasLiId() {
    return liId!=null;
  }

  /**
   * 主播信息
   */
  public boolean hasUser() {
    return user!=null;
  }

  /**
   * 地点
   */
  public boolean hasLocation() {
    return location!=null;
  }

  /**
   * 观众数
   */
  public boolean hasViewerCnt() {
    return viewerCnt!=null;
  }

  /**
   * 直播地址
   */
  public boolean hasUrl() {
    return url!=null;
  }

  /**
   * 直播类型,公开:0 私密:1 回放:2 pk:3 口令:4
   */
  public boolean hasLiType() {
    return liType!=null;
  }

  /**
   * 直播标题
   */
  public boolean hasLiTitle() {
    return liTitle!=null;
  }

  /**
   * 分享地址（回放用到）
   */
  public boolean hasShareUrl() {
    return shareUrl!=null;
  }

  /**
   * 直播开始时间（回放用到）
   */
  public boolean hasStartTime() {
    return startTime!=null;
  }

  /**
   * pk信息
   */
  public boolean hasPkInfo() {
    return pkInfo!=null;
  }

  /**
   * 房间的封面图片地址
   */
  public boolean hasCoverUrl() {
    return coverUrl!=null;
  }

  /**
   * 个性化标签(打点上报)
   */
  public boolean hasTag() {
    return tag!=null;
  }

  /**
   * 0=小米直播app, 1=无人机, 2=导播台, 3=游戏, 4=一直播
   */
  public boolean hasAppType() {
    return appType!=null;
  }

  public static final class Builder extends Message.Builder<LiveShow, Builder> {
    public String liId;

    public UserShow user;

    public String location;

    public Integer viewerCnt;

    public String url;

    public Integer liType;

    public String liTitle;

    public String shareUrl;

    public Long startTime;

    public PKLive pkInfo;

    public String coverUrl;

    public String tag;

    public Integer appType;

    public Builder() {
    }

    /**
     * 直播id
     */
    public Builder setLiId(String liId) {
      this.liId = liId;
      return this;
    }

    /**
     * 主播信息
     */
    public Builder setUser(UserShow user) {
      this.user = user;
      return this;
    }

    /**
     * 地点
     */
    public Builder setLocation(String location) {
      this.location = location;
      return this;
    }

    /**
     * 观众数
     */
    public Builder setViewerCnt(Integer viewerCnt) {
      this.viewerCnt = viewerCnt;
      return this;
    }

    /**
     * 直播地址
     */
    public Builder setUrl(String url) {
      this.url = url;
      return this;
    }

    /**
     * 直播类型,公开:0 私密:1 回放:2 pk:3 口令:4
     */
    public Builder setLiType(Integer liType) {
      this.liType = liType;
      return this;
    }

    /**
     * 直播标题
     */
    public Builder setLiTitle(String liTitle) {
      this.liTitle = liTitle;
      return this;
    }

    /**
     * 分享地址（回放用到）
     */
    public Builder setShareUrl(String shareUrl) {
      this.shareUrl = shareUrl;
      return this;
    }

    /**
     * 直播开始时间（回放用到）
     */
    public Builder setStartTime(Long startTime) {
      this.startTime = startTime;
      return this;
    }

    /**
     * pk信息
     */
    public Builder setPkInfo(PKLive pkInfo) {
      this.pkInfo = pkInfo;
      return this;
    }

    /**
     * 房间的封面图片地址
     */
    public Builder setCoverUrl(String coverUrl) {
      this.coverUrl = coverUrl;
      return this;
    }

    /**
     * 个性化标签(打点上报)
     */
    public Builder setTag(String tag) {
      this.tag = tag;
      return this;
    }

    /**
     * 0=小米直播app, 1=无人机, 2=导播台, 3=游戏, 4=一直播
     */
    public Builder setAppType(Integer appType) {
      this.appType = appType;
      return this;
    }

    @Override
    public LiveShow build() {
      return new LiveShow(liId, user, location, viewerCnt, url, liType, liTitle, shareUrl, startTime, pkInfo, coverUrl, tag, appType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_LiveShow extends ProtoAdapter<LiveShow> {
    public ProtoAdapter_LiveShow() {
      super(FieldEncoding.LENGTH_DELIMITED, LiveShow.class);
    }

    @Override
    public int encodedSize(LiveShow value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.liId)
          + UserShow.ADAPTER.encodedSizeWithTag(2, value.user)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.location)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.viewerCnt)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.url)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.liType)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.liTitle)
          + ProtoAdapter.STRING.encodedSizeWithTag(8, value.shareUrl)
          + ProtoAdapter.UINT64.encodedSizeWithTag(9, value.startTime)
          + PKLive.ADAPTER.encodedSizeWithTag(10, value.pkInfo)
          + ProtoAdapter.STRING.encodedSizeWithTag(11, value.coverUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(13, value.tag)
          + ProtoAdapter.UINT32.encodedSizeWithTag(14, value.appType)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, LiveShow value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.liId);
      UserShow.ADAPTER.encodeWithTag(writer, 2, value.user);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.location);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.viewerCnt);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.url);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.liType);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.liTitle);
      ProtoAdapter.STRING.encodeWithTag(writer, 8, value.shareUrl);
      ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.startTime);
      PKLive.ADAPTER.encodeWithTag(writer, 10, value.pkInfo);
      ProtoAdapter.STRING.encodeWithTag(writer, 11, value.coverUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 13, value.tag);
      ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.appType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public LiveShow decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setLiId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setUser(UserShow.ADAPTER.decode(reader)); break;
          case 3: builder.setLocation(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setViewerCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setLiType(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setLiTitle(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setShareUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.setStartTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.setPkInfo(PKLive.ADAPTER.decode(reader)); break;
          case 11: builder.setCoverUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.setTag(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.setAppType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public LiveShow redact(LiveShow value) {
      Builder builder = value.newBuilder();
      builder.user = UserShow.ADAPTER.redact(builder.user);
      if (builder.pkInfo != null) builder.pkInfo = PKLive.ADAPTER.redact(builder.pkInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
