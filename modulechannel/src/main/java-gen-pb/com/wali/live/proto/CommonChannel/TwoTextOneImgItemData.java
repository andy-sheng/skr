// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class TwoTextOneImgItemData extends Message<TwoTextOneImgItemData, TwoTextOneImgItemData.Builder> {
  public static final ProtoAdapter<TwoTextOneImgItemData> ADAPTER = new ProtoAdapter_TwoTextOneImgItemData();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_DESC = "";

  public static final String DEFAULT_IMGURL = "";

  public static final String DEFAULT_JUMPSCHEMEURI = "";

  public static final String DEFAULT_JUMPSCHEMEURITEXT = "";

  /**
   * 元素的文本内容,比如名称
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  /**
   * 元素的文本内容,比如描述信息
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String desc;

  /**
   * 元素的图片url
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String imgUrl;

  /**
   * 跳转的schemeUri
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jumpSchemeUri;

  /**
   * 用户信息
   */
  @WireField(
      tag = 5,
      adapter = "com.wali.live.proto.CommonChannel.UserInfo#ADAPTER"
  )
  public final UserInfo userInfo;

  /**
   * 跳转schemeUri文案
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jumpSchemeUriText;

  /**
   * 小圆角图标
   */
  @WireField(
      tag = 7,
      adapter = "com.wali.live.proto.CommonChannel.SmallIconData#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<SmallIconData> smallIcon;

  public TwoTextOneImgItemData(String name, String desc, String imgUrl, String jumpSchemeUri,
      UserInfo userInfo, String jumpSchemeUriText, List<SmallIconData> smallIcon) {
    this(name, desc, imgUrl, jumpSchemeUri, userInfo, jumpSchemeUriText, smallIcon, ByteString.EMPTY);
  }

  public TwoTextOneImgItemData(String name, String desc, String imgUrl, String jumpSchemeUri,
      UserInfo userInfo, String jumpSchemeUriText, List<SmallIconData> smallIcon,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.name = name;
    this.desc = desc;
    this.imgUrl = imgUrl;
    this.jumpSchemeUri = jumpSchemeUri;
    this.userInfo = userInfo;
    this.jumpSchemeUriText = jumpSchemeUriText;
    this.smallIcon = Internal.immutableCopyOf("smallIcon", smallIcon);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.desc = desc;
    builder.imgUrl = imgUrl;
    builder.jumpSchemeUri = jumpSchemeUri;
    builder.userInfo = userInfo;
    builder.jumpSchemeUriText = jumpSchemeUriText;
    builder.smallIcon = Internal.copyOf("smallIcon", smallIcon);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TwoTextOneImgItemData)) return false;
    TwoTextOneImgItemData o = (TwoTextOneImgItemData) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(name, o.name)
        && Internal.equals(desc, o.desc)
        && Internal.equals(imgUrl, o.imgUrl)
        && Internal.equals(jumpSchemeUri, o.jumpSchemeUri)
        && Internal.equals(userInfo, o.userInfo)
        && Internal.equals(jumpSchemeUriText, o.jumpSchemeUriText)
        && smallIcon.equals(o.smallIcon);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (desc != null ? desc.hashCode() : 0);
      result = result * 37 + (imgUrl != null ? imgUrl.hashCode() : 0);
      result = result * 37 + (jumpSchemeUri != null ? jumpSchemeUri.hashCode() : 0);
      result = result * 37 + (userInfo != null ? userInfo.hashCode() : 0);
      result = result * 37 + (jumpSchemeUriText != null ? jumpSchemeUriText.hashCode() : 0);
      result = result * 37 + smallIcon.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(name);
    if (desc != null) builder.append(", desc=").append(desc);
    if (imgUrl != null) builder.append(", imgUrl=").append(imgUrl);
    if (jumpSchemeUri != null) builder.append(", jumpSchemeUri=").append(jumpSchemeUri);
    if (userInfo != null) builder.append(", userInfo=").append(userInfo);
    if (jumpSchemeUriText != null) builder.append(", jumpSchemeUriText=").append(jumpSchemeUriText);
    if (!smallIcon.isEmpty()) builder.append(", smallIcon=").append(smallIcon);
    return builder.replace(0, 2, "TwoTextOneImgItemData{").append('}').toString();
  }

  public byte[] toByteArray() {
    return TwoTextOneImgItemData.ADAPTER.encode(this);
  }

  public static final TwoTextOneImgItemData parseFrom(byte[] data) throws IOException {
    TwoTextOneImgItemData c = null;
       c = TwoTextOneImgItemData.ADAPTER.decode(data);
    return c;
  }

  /**
   * 元素的文本内容,比如名称
   */
  public String getName() {
    if(name==null){
        return DEFAULT_NAME;
    }
    return name;
  }

  /**
   * 元素的文本内容,比如描述信息
   */
  public String getDesc() {
    if(desc==null){
        return DEFAULT_DESC;
    }
    return desc;
  }

  /**
   * 元素的图片url
   */
  public String getImgUrl() {
    if(imgUrl==null){
        return DEFAULT_IMGURL;
    }
    return imgUrl;
  }

  /**
   * 跳转的schemeUri
   */
  public String getJumpSchemeUri() {
    if(jumpSchemeUri==null){
        return DEFAULT_JUMPSCHEMEURI;
    }
    return jumpSchemeUri;
  }

  /**
   * 用户信息
   */
  public UserInfo getUserInfo() {
    if(userInfo==null){
        return new UserInfo.Builder().build();
    }
    return userInfo;
  }

  /**
   * 跳转schemeUri文案
   */
  public String getJumpSchemeUriText() {
    if(jumpSchemeUriText==null){
        return DEFAULT_JUMPSCHEMEURITEXT;
    }
    return jumpSchemeUriText;
  }

  /**
   * 小圆角图标
   */
  public List<SmallIconData> getSmallIconList() {
    if(smallIcon==null){
        return new java.util.ArrayList<SmallIconData>();
    }
    return smallIcon;
  }

  /**
   * 元素的文本内容,比如名称
   */
  public boolean hasName() {
    return name!=null;
  }

  /**
   * 元素的文本内容,比如描述信息
   */
  public boolean hasDesc() {
    return desc!=null;
  }

  /**
   * 元素的图片url
   */
  public boolean hasImgUrl() {
    return imgUrl!=null;
  }

  /**
   * 跳转的schemeUri
   */
  public boolean hasJumpSchemeUri() {
    return jumpSchemeUri!=null;
  }

  /**
   * 用户信息
   */
  public boolean hasUserInfo() {
    return userInfo!=null;
  }

  /**
   * 跳转schemeUri文案
   */
  public boolean hasJumpSchemeUriText() {
    return jumpSchemeUriText!=null;
  }

  /**
   * 小圆角图标
   */
  public boolean hasSmallIconList() {
    return smallIcon!=null;
  }

  public static final class Builder extends Message.Builder<TwoTextOneImgItemData, Builder> {
    public String name;

    public String desc;

    public String imgUrl;

    public String jumpSchemeUri;

    public UserInfo userInfo;

    public String jumpSchemeUriText;

    public List<SmallIconData> smallIcon;

    public Builder() {
      smallIcon = Internal.newMutableList();
    }

    /**
     * 元素的文本内容,比如名称
     */
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * 元素的文本内容,比如描述信息
     */
    public Builder setDesc(String desc) {
      this.desc = desc;
      return this;
    }

    /**
     * 元素的图片url
     */
    public Builder setImgUrl(String imgUrl) {
      this.imgUrl = imgUrl;
      return this;
    }

    /**
     * 跳转的schemeUri
     */
    public Builder setJumpSchemeUri(String jumpSchemeUri) {
      this.jumpSchemeUri = jumpSchemeUri;
      return this;
    }

    /**
     * 用户信息
     */
    public Builder setUserInfo(UserInfo userInfo) {
      this.userInfo = userInfo;
      return this;
    }

    /**
     * 跳转schemeUri文案
     */
    public Builder setJumpSchemeUriText(String jumpSchemeUriText) {
      this.jumpSchemeUriText = jumpSchemeUriText;
      return this;
    }

    /**
     * 小圆角图标
     */
    public Builder addAllSmallIcon(List<SmallIconData> smallIcon) {
      Internal.checkElementsNotNull(smallIcon);
      this.smallIcon = smallIcon;
      return this;
    }

    @Override
    public TwoTextOneImgItemData build() {
      return new TwoTextOneImgItemData(name, desc, imgUrl, jumpSchemeUri, userInfo, jumpSchemeUriText, smallIcon, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_TwoTextOneImgItemData extends ProtoAdapter<TwoTextOneImgItemData> {
    public ProtoAdapter_TwoTextOneImgItemData() {
      super(FieldEncoding.LENGTH_DELIMITED, TwoTextOneImgItemData.class);
    }

    @Override
    public int encodedSize(TwoTextOneImgItemData value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.desc)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.imgUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.jumpSchemeUri)
          + UserInfo.ADAPTER.encodedSizeWithTag(5, value.userInfo)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.jumpSchemeUriText)
          + SmallIconData.ADAPTER.asRepeated().encodedSizeWithTag(7, value.smallIcon)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, TwoTextOneImgItemData value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.desc);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.imgUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.jumpSchemeUri);
      UserInfo.ADAPTER.encodeWithTag(writer, 5, value.userInfo);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.jumpSchemeUriText);
      SmallIconData.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.smallIcon);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public TwoTextOneImgItemData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setName(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setImgUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setJumpSchemeUri(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setUserInfo(UserInfo.ADAPTER.decode(reader)); break;
          case 6: builder.setJumpSchemeUriText(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.smallIcon.add(SmallIconData.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public TwoTextOneImgItemData redact(TwoTextOneImgItemData value) {
      Builder builder = value.newBuilder();
      if (builder.userInfo != null) builder.userInfo = UserInfo.ADAPTER.redact(builder.userInfo);
      Internal.redactElements(builder.smallIcon, SmallIconData.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
