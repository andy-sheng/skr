// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 一条回放记录详情
 */
public final class BackInfo extends Message<BackInfo, BackInfo.Builder> {
  public static final ProtoAdapter<BackInfo> ADAPTER = new ProtoAdapter_BackInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_BAID = "";

  public static final Integer DEFAULT_VIEWERCNT = 0;

  public static final String DEFAULT_URL = "";

  public static final Long DEFAULT_STARTTIME = 0L;

  public static final Long DEFAULT_ENDTIME = 0L;

  public static final String DEFAULT_BATITLE = "";

  public static final String DEFAULT_SHAREURL = "";

  public static final String DEFAULT_COVERURL = "";

  public static final String DEFAULT_ADDR = "";

  public static final Integer DEFAULT_REPLAY_TYPE = 0;

  /**
   * 回放id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String baId;

  /**
   * 观众数
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer viewerCnt;

  /**
   * 回放地址
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String url;

  /**
   * 直播开始时间
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long startTime;

  /**
   * 直播结束时间
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long endTime;

  /**
   * 回放标题
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String baTitle;

  /**
   * 分享地址
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String shareUrl;

  /**
   * 房间的封面图片地址
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String coverUrl;

  /**
   * 地点
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String addr;

  /**
   * 回放类型，公开:0 私密:1 口令:2 门票:3
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer replay_type;

  public BackInfo(String baId, Integer viewerCnt, String url, Long startTime, Long endTime,
      String baTitle, String shareUrl, String coverUrl, String addr, Integer replay_type) {
    this(baId, viewerCnt, url, startTime, endTime, baTitle, shareUrl, coverUrl, addr, replay_type, ByteString.EMPTY);
  }

  public BackInfo(String baId, Integer viewerCnt, String url, Long startTime, Long endTime,
      String baTitle, String shareUrl, String coverUrl, String addr, Integer replay_type,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.baId = baId;
    this.viewerCnt = viewerCnt;
    this.url = url;
    this.startTime = startTime;
    this.endTime = endTime;
    this.baTitle = baTitle;
    this.shareUrl = shareUrl;
    this.coverUrl = coverUrl;
    this.addr = addr;
    this.replay_type = replay_type;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.baId = baId;
    builder.viewerCnt = viewerCnt;
    builder.url = url;
    builder.startTime = startTime;
    builder.endTime = endTime;
    builder.baTitle = baTitle;
    builder.shareUrl = shareUrl;
    builder.coverUrl = coverUrl;
    builder.addr = addr;
    builder.replay_type = replay_type;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BackInfo)) return false;
    BackInfo o = (BackInfo) other;
    return unknownFields().equals(o.unknownFields())
        && baId.equals(o.baId)
        && Internal.equals(viewerCnt, o.viewerCnt)
        && Internal.equals(url, o.url)
        && Internal.equals(startTime, o.startTime)
        && Internal.equals(endTime, o.endTime)
        && Internal.equals(baTitle, o.baTitle)
        && Internal.equals(shareUrl, o.shareUrl)
        && Internal.equals(coverUrl, o.coverUrl)
        && Internal.equals(addr, o.addr)
        && Internal.equals(replay_type, o.replay_type);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + baId.hashCode();
      result = result * 37 + (viewerCnt != null ? viewerCnt.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (startTime != null ? startTime.hashCode() : 0);
      result = result * 37 + (endTime != null ? endTime.hashCode() : 0);
      result = result * 37 + (baTitle != null ? baTitle.hashCode() : 0);
      result = result * 37 + (shareUrl != null ? shareUrl.hashCode() : 0);
      result = result * 37 + (coverUrl != null ? coverUrl.hashCode() : 0);
      result = result * 37 + (addr != null ? addr.hashCode() : 0);
      result = result * 37 + (replay_type != null ? replay_type.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", baId=").append(baId);
    if (viewerCnt != null) builder.append(", viewerCnt=").append(viewerCnt);
    if (url != null) builder.append(", url=").append(url);
    if (startTime != null) builder.append(", startTime=").append(startTime);
    if (endTime != null) builder.append(", endTime=").append(endTime);
    if (baTitle != null) builder.append(", baTitle=").append(baTitle);
    if (shareUrl != null) builder.append(", shareUrl=").append(shareUrl);
    if (coverUrl != null) builder.append(", coverUrl=").append(coverUrl);
    if (addr != null) builder.append(", addr=").append(addr);
    if (replay_type != null) builder.append(", replay_type=").append(replay_type);
    return builder.replace(0, 2, "BackInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return BackInfo.ADAPTER.encode(this);
  }

  public static final BackInfo parseFrom(byte[] data) throws IOException {
    BackInfo c = null;
       c = BackInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 回放id
   */
  public String getBaId() {
    if(baId==null){
        return DEFAULT_BAID;
    }
    return baId;
  }

  /**
   * 观众数
   */
  public Integer getViewerCnt() {
    if(viewerCnt==null){
        return DEFAULT_VIEWERCNT;
    }
    return viewerCnt;
  }

  /**
   * 回放地址
   */
  public String getUrl() {
    if(url==null){
        return DEFAULT_URL;
    }
    return url;
  }

  /**
   * 直播开始时间
   */
  public Long getStartTime() {
    if(startTime==null){
        return DEFAULT_STARTTIME;
    }
    return startTime;
  }

  /**
   * 直播结束时间
   */
  public Long getEndTime() {
    if(endTime==null){
        return DEFAULT_ENDTIME;
    }
    return endTime;
  }

  /**
   * 回放标题
   */
  public String getBaTitle() {
    if(baTitle==null){
        return DEFAULT_BATITLE;
    }
    return baTitle;
  }

  /**
   * 分享地址
   */
  public String getShareUrl() {
    if(shareUrl==null){
        return DEFAULT_SHAREURL;
    }
    return shareUrl;
  }

  /**
   * 房间的封面图片地址
   */
  public String getCoverUrl() {
    if(coverUrl==null){
        return DEFAULT_COVERURL;
    }
    return coverUrl;
  }

  /**
   * 地点
   */
  public String getAddr() {
    if(addr==null){
        return DEFAULT_ADDR;
    }
    return addr;
  }

  /**
   * 回放类型，公开:0 私密:1 口令:2 门票:3
   */
  public Integer getReplayType() {
    if(replay_type==null){
        return DEFAULT_REPLAY_TYPE;
    }
    return replay_type;
  }

  /**
   * 回放id
   */
  public boolean hasBaId() {
    return baId!=null;
  }

  /**
   * 观众数
   */
  public boolean hasViewerCnt() {
    return viewerCnt!=null;
  }

  /**
   * 回放地址
   */
  public boolean hasUrl() {
    return url!=null;
  }

  /**
   * 直播开始时间
   */
  public boolean hasStartTime() {
    return startTime!=null;
  }

  /**
   * 直播结束时间
   */
  public boolean hasEndTime() {
    return endTime!=null;
  }

  /**
   * 回放标题
   */
  public boolean hasBaTitle() {
    return baTitle!=null;
  }

  /**
   * 分享地址
   */
  public boolean hasShareUrl() {
    return shareUrl!=null;
  }

  /**
   * 房间的封面图片地址
   */
  public boolean hasCoverUrl() {
    return coverUrl!=null;
  }

  /**
   * 地点
   */
  public boolean hasAddr() {
    return addr!=null;
  }

  /**
   * 回放类型，公开:0 私密:1 口令:2 门票:3
   */
  public boolean hasReplayType() {
    return replay_type!=null;
  }

  public static final class Builder extends Message.Builder<BackInfo, Builder> {
    public String baId;

    public Integer viewerCnt;

    public String url;

    public Long startTime;

    public Long endTime;

    public String baTitle;

    public String shareUrl;

    public String coverUrl;

    public String addr;

    public Integer replay_type;

    public Builder() {
    }

    /**
     * 回放id
     */
    public Builder setBaId(String baId) {
      this.baId = baId;
      return this;
    }

    /**
     * 观众数
     */
    public Builder setViewerCnt(Integer viewerCnt) {
      this.viewerCnt = viewerCnt;
      return this;
    }

    /**
     * 回放地址
     */
    public Builder setUrl(String url) {
      this.url = url;
      return this;
    }

    /**
     * 直播开始时间
     */
    public Builder setStartTime(Long startTime) {
      this.startTime = startTime;
      return this;
    }

    /**
     * 直播结束时间
     */
    public Builder setEndTime(Long endTime) {
      this.endTime = endTime;
      return this;
    }

    /**
     * 回放标题
     */
    public Builder setBaTitle(String baTitle) {
      this.baTitle = baTitle;
      return this;
    }

    /**
     * 分享地址
     */
    public Builder setShareUrl(String shareUrl) {
      this.shareUrl = shareUrl;
      return this;
    }

    /**
     * 房间的封面图片地址
     */
    public Builder setCoverUrl(String coverUrl) {
      this.coverUrl = coverUrl;
      return this;
    }

    /**
     * 地点
     */
    public Builder setAddr(String addr) {
      this.addr = addr;
      return this;
    }

    /**
     * 回放类型，公开:0 私密:1 口令:2 门票:3
     */
    public Builder setReplayType(Integer replay_type) {
      this.replay_type = replay_type;
      return this;
    }

    @Override
    public BackInfo build() {
      return new BackInfo(baId, viewerCnt, url, startTime, endTime, baTitle, shareUrl, coverUrl, addr, replay_type, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BackInfo extends ProtoAdapter<BackInfo> {
    public ProtoAdapter_BackInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, BackInfo.class);
    }

    @Override
    public int encodedSize(BackInfo value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.baId)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.viewerCnt)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.url)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.startTime)
          + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.endTime)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.baTitle)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.shareUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(8, value.coverUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(9, value.addr)
          + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.replay_type)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BackInfo value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.baId);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.viewerCnt);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.url);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.startTime);
      ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.endTime);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.baTitle);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.shareUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 8, value.coverUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 9, value.addr);
      ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.replay_type);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BackInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setBaId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setViewerCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setStartTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.setEndTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.setBaTitle(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setShareUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setCoverUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.setAddr(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.setReplayType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BackInfo redact(BackInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
