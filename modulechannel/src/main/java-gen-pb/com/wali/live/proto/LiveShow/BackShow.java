// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 一个用户的回放记录
 */
public final class BackShow extends Message<BackShow, BackShow.Builder> {
  public static final ProtoAdapter<BackShow> ADAPTER = new ProtoAdapter_BackShow();

  private static final long serialVersionUID = 0L;

  /**
   * 主播信息
   */
  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.LiveShow.UserShow#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final UserShow user;

  /**
   * 回放详情
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LiveShow.BackInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<BackInfo> infos;

  public BackShow(UserShow user, List<BackInfo> infos) {
    this(user, infos, ByteString.EMPTY);
  }

  public BackShow(UserShow user, List<BackInfo> infos, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.user = user;
    this.infos = Internal.immutableCopyOf("infos", infos);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.user = user;
    builder.infos = Internal.copyOf("infos", infos);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BackShow)) return false;
    BackShow o = (BackShow) other;
    return unknownFields().equals(o.unknownFields())
        && user.equals(o.user)
        && infos.equals(o.infos);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + user.hashCode();
      result = result * 37 + infos.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", user=").append(user);
    if (!infos.isEmpty()) builder.append(", infos=").append(infos);
    return builder.replace(0, 2, "BackShow{").append('}').toString();
  }

  public byte[] toByteArray() {
    return BackShow.ADAPTER.encode(this);
  }

  public static final BackShow parseFrom(byte[] data) throws IOException {
    BackShow c = null;
       c = BackShow.ADAPTER.decode(data);
    return c;
  }

  /**
   * 主播信息
   */
  public UserShow getUser() {
    if(user==null){
        return new UserShow.Builder().build();
    }
    return user;
  }

  /**
   * 回放详情
   */
  public List<BackInfo> getInfosList() {
    if(infos==null){
        return new java.util.ArrayList<BackInfo>();
    }
    return infos;
  }

  /**
   * 主播信息
   */
  public boolean hasUser() {
    return user!=null;
  }

  /**
   * 回放详情
   */
  public boolean hasInfosList() {
    return infos!=null;
  }

  public static final class Builder extends Message.Builder<BackShow, Builder> {
    public UserShow user;

    public List<BackInfo> infos;

    public Builder() {
      infos = Internal.newMutableList();
    }

    /**
     * 主播信息
     */
    public Builder setUser(UserShow user) {
      this.user = user;
      return this;
    }

    /**
     * 回放详情
     */
    public Builder addAllInfos(List<BackInfo> infos) {
      Internal.checkElementsNotNull(infos);
      this.infos = infos;
      return this;
    }

    @Override
    public BackShow build() {
      return new BackShow(user, infos, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BackShow extends ProtoAdapter<BackShow> {
    public ProtoAdapter_BackShow() {
      super(FieldEncoding.LENGTH_DELIMITED, BackShow.class);
    }

    @Override
    public int encodedSize(BackShow value) {
      return UserShow.ADAPTER.encodedSizeWithTag(1, value.user)
          + BackInfo.ADAPTER.asRepeated().encodedSizeWithTag(2, value.infos)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BackShow value) throws IOException {
      UserShow.ADAPTER.encodeWithTag(writer, 1, value.user);
      BackInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.infos);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BackShow decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUser(UserShow.ADAPTER.decode(reader)); break;
          case 2: builder.infos.add(BackInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BackShow redact(BackShow value) {
      Builder builder = value.newBuilder();
      builder.user = UserShow.ADAPTER.redact(builder.user);
      Internal.redactElements(builder.infos, BackInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
