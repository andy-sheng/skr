// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.wali.live.proto.Common.Location;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * **************** zhibo.recommend.videolist 拉小视频列表  *****************
 */
public final class GetWaterfallListReq extends Message<GetWaterfallListReq, GetWaterfallListReq.Builder> {
  public static final ProtoAdapter<GetWaterfallListReq> ADAPTER = new ProtoAdapter_GetWaterfallListReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UID = 0L;

  public static final Integer DEFAULT_OPER_TYPE = 0;

  public static final Integer DEFAULT_CHANNEL_ID = 0;

  public static final ByteString DEFAULT_PARAM = ByteString.EMPTY;

  /**
   * 拉列表的用户id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long uid;

  /**
   * 拉列表类型。默认0=第一屏或下滑刷新，1=上滑加载更多
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer oper_type;

  /**
   * 小视频首页频道id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer channel_id;

  /**
   * 拉列表算法参数[客户端不用关心，透传给服务器]。app第一次安装或者清掉缓存后不用填，
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString param;

  /**
   * 下一次请求填rsp中的param，下一次启动app填客户端最近一次缓存的param
   */
  @WireField(
      tag = 5,
      adapter = "com.wali.live.proto.Common.Location#ADAPTER"
  )
  public final Location location;

  public GetWaterfallListReq(Long uid, Integer oper_type, Integer channel_id, ByteString param,
      Location location) {
    this(uid, oper_type, channel_id, param, location, ByteString.EMPTY);
  }

  public GetWaterfallListReq(Long uid, Integer oper_type, Integer channel_id, ByteString param,
      Location location, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.uid = uid;
    this.oper_type = oper_type;
    this.channel_id = channel_id;
    this.param = param;
    this.location = location;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.uid = uid;
    builder.oper_type = oper_type;
    builder.channel_id = channel_id;
    builder.param = param;
    builder.location = location;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetWaterfallListReq)) return false;
    GetWaterfallListReq o = (GetWaterfallListReq) other;
    return unknownFields().equals(o.unknownFields())
        && uid.equals(o.uid)
        && Internal.equals(oper_type, o.oper_type)
        && Internal.equals(channel_id, o.channel_id)
        && Internal.equals(param, o.param)
        && Internal.equals(location, o.location);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + uid.hashCode();
      result = result * 37 + (oper_type != null ? oper_type.hashCode() : 0);
      result = result * 37 + (channel_id != null ? channel_id.hashCode() : 0);
      result = result * 37 + (param != null ? param.hashCode() : 0);
      result = result * 37 + (location != null ? location.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", uid=").append(uid);
    if (oper_type != null) builder.append(", oper_type=").append(oper_type);
    if (channel_id != null) builder.append(", channel_id=").append(channel_id);
    if (param != null) builder.append(", param=").append(param);
    if (location != null) builder.append(", location=").append(location);
    return builder.replace(0, 2, "GetWaterfallListReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GetWaterfallListReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<GetWaterfallListReq, Builder> {
    public Long uid;

    public Integer oper_type;

    public Integer channel_id;

    public ByteString param;

    public Location location;

    public Builder() {
    }

    /**
     * 拉列表的用户id
     */
    public Builder setUid(Long uid) {
      this.uid = uid;
      return this;
    }

    /**
     * 拉列表类型。默认0=第一屏或下滑刷新，1=上滑加载更多
     */
    public Builder setOperType(Integer oper_type) {
      this.oper_type = oper_type;
      return this;
    }

    /**
     * 小视频首页频道id
     */
    public Builder setChannelId(Integer channel_id) {
      this.channel_id = channel_id;
      return this;
    }

    /**
     * 拉列表算法参数[客户端不用关心，透传给服务器]。app第一次安装或者清掉缓存后不用填，
     */
    public Builder setParam(ByteString param) {
      this.param = param;
      return this;
    }

    /**
     * 下一次请求填rsp中的param，下一次启动app填客户端最近一次缓存的param
     */
    public Builder setLocation(Location location) {
      this.location = location;
      return this;
    }

    @Override
    public GetWaterfallListReq build() {
      if (uid == null) {
        throw Internal.missingRequiredFields(uid, "uid");
      }
      return new GetWaterfallListReq(uid, oper_type, channel_id, param, location, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetWaterfallListReq extends ProtoAdapter<GetWaterfallListReq> {
    public ProtoAdapter_GetWaterfallListReq() {
      super(FieldEncoding.LENGTH_DELIMITED, GetWaterfallListReq.class);
    }

    @Override
    public int encodedSize(GetWaterfallListReq value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.uid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.oper_type)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.channel_id)
          + ProtoAdapter.BYTES.encodedSizeWithTag(4, value.param)
          + Location.ADAPTER.encodedSizeWithTag(5, value.location)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetWaterfallListReq value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.uid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.oper_type);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.channel_id);
      ProtoAdapter.BYTES.encodeWithTag(writer, 4, value.param);
      Location.ADAPTER.encodeWithTag(writer, 5, value.location);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetWaterfallListReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setOperType(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setChannelId(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setParam(ProtoAdapter.BYTES.decode(reader)); break;
          case 5: builder.setLocation(Location.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetWaterfallListReq redact(GetWaterfallListReq value) {
      Builder builder = value.newBuilder();
      if (builder.location != null) builder.location = Location.ADAPTER.redact(builder.location);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
