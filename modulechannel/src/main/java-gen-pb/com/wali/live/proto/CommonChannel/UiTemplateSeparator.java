// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * type=14
 */
public final class UiTemplateSeparator extends Message<UiTemplateSeparator, UiTemplateSeparator.Builder> {
  public static final ProtoAdapter<UiTemplateSeparator> ADAPTER = new ProtoAdapter_UiTemplateSeparator();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_COLOR = 0;

  public static final Integer DEFAULT_HEIGHT = 0;

  public static final String DEFAULT_TITLE = "";

  /**
   * 分割线颜色,1:灰色 2:白色
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer color;

  /**
   * 分割线高度,1:默认值,2:头条高度
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer height;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  public UiTemplateSeparator(Integer color, Integer height, String title) {
    this(color, height, title, ByteString.EMPTY);
  }

  public UiTemplateSeparator(Integer color, Integer height, String title,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.color = color;
    this.height = height;
    this.title = title;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.color = color;
    builder.height = height;
    builder.title = title;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UiTemplateSeparator)) return false;
    UiTemplateSeparator o = (UiTemplateSeparator) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(color, o.color)
        && Internal.equals(height, o.height)
        && Internal.equals(title, o.title);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (color != null ? color.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (color != null) builder.append(", color=").append(color);
    if (height != null) builder.append(", height=").append(height);
    if (title != null) builder.append(", title=").append(title);
    return builder.replace(0, 2, "UiTemplateSeparator{").append('}').toString();
  }

  public byte[] toByteArray() {
    return UiTemplateSeparator.ADAPTER.encode(this);
  }

  public static final UiTemplateSeparator parseFrom(byte[] data) throws IOException {
    UiTemplateSeparator c = null;
       c = UiTemplateSeparator.ADAPTER.decode(data);
    return c;
  }

  /**
   * 分割线颜色,1:灰色 2:白色
   */
  public Integer getColor() {
    if(color==null){
        return DEFAULT_COLOR;
    }
    return color;
  }

  /**
   * 分割线高度,1:默认值,2:头条高度
   */
  public Integer getHeight() {
    if(height==null){
        return DEFAULT_HEIGHT;
    }
    return height;
  }

  public String getTitle() {
    if(title==null){
        return DEFAULT_TITLE;
    }
    return title;
  }

  /**
   * 分割线颜色,1:灰色 2:白色
   */
  public boolean hasColor() {
    return color!=null;
  }

  /**
   * 分割线高度,1:默认值,2:头条高度
   */
  public boolean hasHeight() {
    return height!=null;
  }

  public boolean hasTitle() {
    return title!=null;
  }

  public static final class Builder extends Message.Builder<UiTemplateSeparator, Builder> {
    public Integer color;

    public Integer height;

    public String title;

    public Builder() {
    }

    /**
     * 分割线颜色,1:灰色 2:白色
     */
    public Builder setColor(Integer color) {
      this.color = color;
      return this;
    }

    /**
     * 分割线高度,1:默认值,2:头条高度
     */
    public Builder setHeight(Integer height) {
      this.height = height;
      return this;
    }

    public Builder setTitle(String title) {
      this.title = title;
      return this;
    }

    @Override
    public UiTemplateSeparator build() {
      return new UiTemplateSeparator(color, height, title, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UiTemplateSeparator extends ProtoAdapter<UiTemplateSeparator> {
    public ProtoAdapter_UiTemplateSeparator() {
      super(FieldEncoding.LENGTH_DELIMITED, UiTemplateSeparator.class);
    }

    @Override
    public int encodedSize(UiTemplateSeparator value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.color)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.height)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.title)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UiTemplateSeparator value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.color);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.height);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.title);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UiTemplateSeparator decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setColor(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setHeight(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setTitle(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UiTemplateSeparator redact(UiTemplateSeparator value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
