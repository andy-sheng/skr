// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 8 拉取话题直播列表 请求和返回
 */
public final class GetTopicLiveReq extends Message<GetTopicLiveReq, GetTopicLiveReq.Builder> {
  public static final ProtoAdapter<GetTopicLiveReq> ADAPTER = new ProtoAdapter_GetTopicLiveReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_TOPIC = "";

  public static final Integer DEFAULT_LIVETYPE = 0;

  public static final Integer DEFAULT_PAGENUM = 0;

  public static final Integer DEFAULT_SORTTYPE = 0;

  /**
   * 话题名字
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String topic;

  /**
   * 类型，默认0:直播,1:回放,2:直播和回放
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer liveType;

  /**
   * 页码,默认1
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer pageNum;

  /**
   * 排序类型,默认0=人数,1=cms
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sortType;

  public GetTopicLiveReq(String topic, Integer liveType, Integer pageNum, Integer sortType) {
    this(topic, liveType, pageNum, sortType, ByteString.EMPTY);
  }

  public GetTopicLiveReq(String topic, Integer liveType, Integer pageNum, Integer sortType,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.topic = topic;
    this.liveType = liveType;
    this.pageNum = pageNum;
    this.sortType = sortType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.topic = topic;
    builder.liveType = liveType;
    builder.pageNum = pageNum;
    builder.sortType = sortType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetTopicLiveReq)) return false;
    GetTopicLiveReq o = (GetTopicLiveReq) other;
    return unknownFields().equals(o.unknownFields())
        && topic.equals(o.topic)
        && Internal.equals(liveType, o.liveType)
        && Internal.equals(pageNum, o.pageNum)
        && Internal.equals(sortType, o.sortType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + topic.hashCode();
      result = result * 37 + (liveType != null ? liveType.hashCode() : 0);
      result = result * 37 + (pageNum != null ? pageNum.hashCode() : 0);
      result = result * 37 + (sortType != null ? sortType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", topic=").append(topic);
    if (liveType != null) builder.append(", liveType=").append(liveType);
    if (pageNum != null) builder.append(", pageNum=").append(pageNum);
    if (sortType != null) builder.append(", sortType=").append(sortType);
    return builder.replace(0, 2, "GetTopicLiveReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GetTopicLiveReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<GetTopicLiveReq, Builder> {
    public String topic;

    public Integer liveType;

    public Integer pageNum;

    public Integer sortType;

    public Builder() {
    }

    /**
     * 话题名字
     */
    public Builder setTopic(String topic) {
      this.topic = topic;
      return this;
    }

    /**
     * 类型，默认0:直播,1:回放,2:直播和回放
     */
    public Builder setLiveType(Integer liveType) {
      this.liveType = liveType;
      return this;
    }

    /**
     * 页码,默认1
     */
    public Builder setPageNum(Integer pageNum) {
      this.pageNum = pageNum;
      return this;
    }

    /**
     * 排序类型,默认0=人数,1=cms
     */
    public Builder setSortType(Integer sortType) {
      this.sortType = sortType;
      return this;
    }

    @Override
    public GetTopicLiveReq build() {
      if (topic == null) {
        throw Internal.missingRequiredFields(topic, "topic");
      }
      return new GetTopicLiveReq(topic, liveType, pageNum, sortType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetTopicLiveReq extends ProtoAdapter<GetTopicLiveReq> {
    public ProtoAdapter_GetTopicLiveReq() {
      super(FieldEncoding.LENGTH_DELIMITED, GetTopicLiveReq.class);
    }

    @Override
    public int encodedSize(GetTopicLiveReq value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.topic)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.liveType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.pageNum)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.sortType)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetTopicLiveReq value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.topic);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.liveType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.pageNum);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.sortType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetTopicLiveReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTopic(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setLiveType(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setPageNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setSortType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetTopicLiveReq redact(GetTopicLiveReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
