// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class GetTagLivesRsp extends Message<GetTagLivesRsp, GetTagLivesRsp.Builder> {
  public static final ProtoAdapter<GetTagLivesRsp> ADAPTER = new ProtoAdapter_GetTagLivesRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RET = 0;

  public static final Long DEFAULT_CID = 0L;

  /**
   * 返回码
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer ret;

  /**
   * 频道id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long cId;

  /**
   * 带标签的直播列集
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.LiveShow.TagShow#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<TagShow> tags;

  public GetTagLivesRsp(Integer ret, Long cId, List<TagShow> tags) {
    this(ret, cId, tags, ByteString.EMPTY);
  }

  public GetTagLivesRsp(Integer ret, Long cId, List<TagShow> tags, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ret = ret;
    this.cId = cId;
    this.tags = Internal.immutableCopyOf("tags", tags);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ret = ret;
    builder.cId = cId;
    builder.tags = Internal.copyOf("tags", tags);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetTagLivesRsp)) return false;
    GetTagLivesRsp o = (GetTagLivesRsp) other;
    return unknownFields().equals(o.unknownFields())
        && ret.equals(o.ret)
        && Internal.equals(cId, o.cId)
        && tags.equals(o.tags);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + ret.hashCode();
      result = result * 37 + (cId != null ? cId.hashCode() : 0);
      result = result * 37 + tags.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", ret=").append(ret);
    if (cId != null) builder.append(", cId=").append(cId);
    if (!tags.isEmpty()) builder.append(", tags=").append(tags);
    return builder.replace(0, 2, "GetTagLivesRsp{").append('}').toString();
  }

  public static final GetTagLivesRsp parseFrom(byte[] data) throws IOException {
    GetTagLivesRsp c = null;
       c = GetTagLivesRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 返回码
   */
  public Integer getRet() {
    if(ret==null){
        return DEFAULT_RET;
    }
    return ret;
  }

  /**
   * 频道id
   */
  public Long getCId() {
    if(cId==null){
        return DEFAULT_CID;
    }
    return cId;
  }

  /**
   * 带标签的直播列集
   */
  public List<TagShow> getTagsList() {
    if(tags==null){
        return new java.util.ArrayList<TagShow>();
    }
    return tags;
  }

  /**
   * 返回码
   */
  public boolean hasRet() {
    return ret!=null;
  }

  /**
   * 频道id
   */
  public boolean hasCId() {
    return cId!=null;
  }

  /**
   * 带标签的直播列集
   */
  public boolean hasTagsList() {
    return tags!=null;
  }

  public static final class Builder extends Message.Builder<GetTagLivesRsp, Builder> {
    public Integer ret;

    public Long cId;

    public List<TagShow> tags;

    public Builder() {
      tags = Internal.newMutableList();
    }

    /**
     * 返回码
     */
    public Builder setRet(Integer ret) {
      this.ret = ret;
      return this;
    }

    /**
     * 频道id
     */
    public Builder setCId(Long cId) {
      this.cId = cId;
      return this;
    }

    /**
     * 带标签的直播列集
     */
    public Builder addAllTags(List<TagShow> tags) {
      Internal.checkElementsNotNull(tags);
      this.tags = tags;
      return this;
    }

    @Override
    public GetTagLivesRsp build() {
      return new GetTagLivesRsp(ret, cId, tags, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetTagLivesRsp extends ProtoAdapter<GetTagLivesRsp> {
    public ProtoAdapter_GetTagLivesRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetTagLivesRsp.class);
    }

    @Override
    public int encodedSize(GetTagLivesRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.ret)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.cId)
          + TagShow.ADAPTER.asRepeated().encodedSizeWithTag(3, value.tags)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetTagLivesRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.ret);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.cId);
      TagShow.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.tags);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetTagLivesRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRet(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setCId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.tags.add(TagShow.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetTagLivesRsp redact(GetTagLivesRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.tags, TagShow.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
