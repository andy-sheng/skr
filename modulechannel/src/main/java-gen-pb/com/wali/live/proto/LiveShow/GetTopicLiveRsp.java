// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class GetTopicLiveRsp extends Message<GetTopicLiveRsp, GetTopicLiveRsp.Builder> {
  public static final ProtoAdapter<GetTopicLiveRsp> ADAPTER = new ProtoAdapter_GetTopicLiveRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RET = 0;

  public static final String DEFAULT_TOPIC = "";

  public static final Integer DEFAULT_PAGECNT = 0;

  /**
   * 返回码
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer ret;

  /**
   * 话题名字
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String topic;

  /**
   * 直播列表
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.LiveShow.LiveShow#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<LiveShow> lives;

  /**
   * 回放列表
   */
  @WireField(
      tag = 4,
      adapter = "com.wali.live.proto.LiveShow.SingleBackShow#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<SingleBackShow> backs;

  /**
   * 总页数
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer pageCnt;

  public GetTopicLiveRsp(Integer ret, String topic, List<LiveShow> lives,
      List<SingleBackShow> backs, Integer pageCnt) {
    this(ret, topic, lives, backs, pageCnt, ByteString.EMPTY);
  }

  public GetTopicLiveRsp(Integer ret, String topic, List<LiveShow> lives,
      List<SingleBackShow> backs, Integer pageCnt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ret = ret;
    this.topic = topic;
    this.lives = Internal.immutableCopyOf("lives", lives);
    this.backs = Internal.immutableCopyOf("backs", backs);
    this.pageCnt = pageCnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ret = ret;
    builder.topic = topic;
    builder.lives = Internal.copyOf("lives", lives);
    builder.backs = Internal.copyOf("backs", backs);
    builder.pageCnt = pageCnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetTopicLiveRsp)) return false;
    GetTopicLiveRsp o = (GetTopicLiveRsp) other;
    return unknownFields().equals(o.unknownFields())
        && ret.equals(o.ret)
        && Internal.equals(topic, o.topic)
        && lives.equals(o.lives)
        && backs.equals(o.backs)
        && Internal.equals(pageCnt, o.pageCnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + ret.hashCode();
      result = result * 37 + (topic != null ? topic.hashCode() : 0);
      result = result * 37 + lives.hashCode();
      result = result * 37 + backs.hashCode();
      result = result * 37 + (pageCnt != null ? pageCnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", ret=").append(ret);
    if (topic != null) builder.append(", topic=").append(topic);
    if (!lives.isEmpty()) builder.append(", lives=").append(lives);
    if (!backs.isEmpty()) builder.append(", backs=").append(backs);
    if (pageCnt != null) builder.append(", pageCnt=").append(pageCnt);
    return builder.replace(0, 2, "GetTopicLiveRsp{").append('}').toString();
  }

  public static final GetTopicLiveRsp parseFrom(byte[] data) throws IOException {
    GetTopicLiveRsp c = null;
       c = GetTopicLiveRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 返回码
   */
  public Integer getRet() {
    if(ret==null){
        return DEFAULT_RET;
    }
    return ret;
  }

  /**
   * 话题名字
   */
  public String getTopic() {
    if(topic==null){
        return DEFAULT_TOPIC;
    }
    return topic;
  }

  /**
   * 直播列表
   */
  public List<LiveShow> getLivesList() {
    if(lives==null){
        return new java.util.ArrayList<LiveShow>();
    }
    return lives;
  }

  /**
   * 回放列表
   */
  public List<SingleBackShow> getBacksList() {
    if(backs==null){
        return new java.util.ArrayList<SingleBackShow>();
    }
    return backs;
  }

  /**
   * 总页数
   */
  public Integer getPageCnt() {
    if(pageCnt==null){
        return DEFAULT_PAGECNT;
    }
    return pageCnt;
  }

  /**
   * 返回码
   */
  public boolean hasRet() {
    return ret!=null;
  }

  /**
   * 话题名字
   */
  public boolean hasTopic() {
    return topic!=null;
  }

  /**
   * 直播列表
   */
  public boolean hasLivesList() {
    return lives!=null;
  }

  /**
   * 回放列表
   */
  public boolean hasBacksList() {
    return backs!=null;
  }

  /**
   * 总页数
   */
  public boolean hasPageCnt() {
    return pageCnt!=null;
  }

  public static final class Builder extends Message.Builder<GetTopicLiveRsp, Builder> {
    public Integer ret;

    public String topic;

    public List<LiveShow> lives;

    public List<SingleBackShow> backs;

    public Integer pageCnt;

    public Builder() {
      lives = Internal.newMutableList();
      backs = Internal.newMutableList();
    }

    /**
     * 返回码
     */
    public Builder setRet(Integer ret) {
      this.ret = ret;
      return this;
    }

    /**
     * 话题名字
     */
    public Builder setTopic(String topic) {
      this.topic = topic;
      return this;
    }

    /**
     * 直播列表
     */
    public Builder addAllLives(List<LiveShow> lives) {
      Internal.checkElementsNotNull(lives);
      this.lives = lives;
      return this;
    }

    /**
     * 回放列表
     */
    public Builder addAllBacks(List<SingleBackShow> backs) {
      Internal.checkElementsNotNull(backs);
      this.backs = backs;
      return this;
    }

    /**
     * 总页数
     */
    public Builder setPageCnt(Integer pageCnt) {
      this.pageCnt = pageCnt;
      return this;
    }

    @Override
    public GetTopicLiveRsp build() {
      return new GetTopicLiveRsp(ret, topic, lives, backs, pageCnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetTopicLiveRsp extends ProtoAdapter<GetTopicLiveRsp> {
    public ProtoAdapter_GetTopicLiveRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetTopicLiveRsp.class);
    }

    @Override
    public int encodedSize(GetTopicLiveRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.ret)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.topic)
          + LiveShow.ADAPTER.asRepeated().encodedSizeWithTag(3, value.lives)
          + SingleBackShow.ADAPTER.asRepeated().encodedSizeWithTag(4, value.backs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.pageCnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetTopicLiveRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.ret);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.topic);
      LiveShow.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.lives);
      SingleBackShow.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.backs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.pageCnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetTopicLiveRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRet(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setTopic(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.lives.add(LiveShow.ADAPTER.decode(reader)); break;
          case 4: builder.backs.add(SingleBackShow.ADAPTER.decode(reader)); break;
          case 5: builder.setPageCnt(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetTopicLiveRsp redact(GetTopicLiveRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.lives, LiveShow.ADAPTER);
      Internal.redactElements(builder.backs, SingleBackShow.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
