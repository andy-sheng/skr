// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class GetChannelsRsp extends Message<GetChannelsRsp, GetChannelsRsp.Builder> {
  public static final ProtoAdapter<GetChannelsRsp> ADAPTER = new ProtoAdapter_GetChannelsRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RET = 0;

  public static final Long DEFAULT_FCID = 0L;

  public static final Long DEFAULT_DEFCHANNELID = 0L;

  /**
   * 返回码
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer ret;

  /**
   * 父级频道id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long fcId;

  /**
   * 各频道直播信息，包括直播人数
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.LiveShow.ChannelShow#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ChannelShow> channels;

  /**
   * 默认展示频道(当不存在此频道，客户端走自己默认逻辑)
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long defChannelId;

  public GetChannelsRsp(Integer ret, Long fcId, List<ChannelShow> channels, Long defChannelId) {
    this(ret, fcId, channels, defChannelId, ByteString.EMPTY);
  }

  public GetChannelsRsp(Integer ret, Long fcId, List<ChannelShow> channels, Long defChannelId,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ret = ret;
    this.fcId = fcId;
    this.channels = Internal.immutableCopyOf("channels", channels);
    this.defChannelId = defChannelId;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ret = ret;
    builder.fcId = fcId;
    builder.channels = Internal.copyOf("channels", channels);
    builder.defChannelId = defChannelId;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetChannelsRsp)) return false;
    GetChannelsRsp o = (GetChannelsRsp) other;
    return unknownFields().equals(o.unknownFields())
        && ret.equals(o.ret)
        && Internal.equals(fcId, o.fcId)
        && channels.equals(o.channels)
        && Internal.equals(defChannelId, o.defChannelId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + ret.hashCode();
      result = result * 37 + (fcId != null ? fcId.hashCode() : 0);
      result = result * 37 + channels.hashCode();
      result = result * 37 + (defChannelId != null ? defChannelId.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", ret=").append(ret);
    if (fcId != null) builder.append(", fcId=").append(fcId);
    if (!channels.isEmpty()) builder.append(", channels=").append(channels);
    if (defChannelId != null) builder.append(", defChannelId=").append(defChannelId);
    return builder.replace(0, 2, "GetChannelsRsp{").append('}').toString();
  }

  public static final GetChannelsRsp parseFrom(byte[] data) throws IOException {
    GetChannelsRsp c = null;
       c = GetChannelsRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 返回码
   */
  public Integer getRet() {
    if(ret==null){
        return DEFAULT_RET;
    }
    return ret;
  }

  /**
   * 父级频道id
   */
  public Long getFcId() {
    if(fcId==null){
        return DEFAULT_FCID;
    }
    return fcId;
  }

  /**
   * 各频道直播信息，包括直播人数
   */
  public List<ChannelShow> getChannelsList() {
    if(channels==null){
        return new java.util.ArrayList<ChannelShow>();
    }
    return channels;
  }

  /**
   * 默认展示频道(当不存在此频道，客户端走自己默认逻辑)
   */
  public Long getDefChannelId() {
    if(defChannelId==null){
        return DEFAULT_DEFCHANNELID;
    }
    return defChannelId;
  }

  /**
   * 返回码
   */
  public boolean hasRet() {
    return ret!=null;
  }

  /**
   * 父级频道id
   */
  public boolean hasFcId() {
    return fcId!=null;
  }

  /**
   * 各频道直播信息，包括直播人数
   */
  public boolean hasChannelsList() {
    return channels!=null;
  }

  /**
   * 默认展示频道(当不存在此频道，客户端走自己默认逻辑)
   */
  public boolean hasDefChannelId() {
    return defChannelId!=null;
  }

  public static final class Builder extends Message.Builder<GetChannelsRsp, Builder> {
    public Integer ret;

    public Long fcId;

    public List<ChannelShow> channels;

    public Long defChannelId;

    public Builder() {
      channels = Internal.newMutableList();
    }

    /**
     * 返回码
     */
    public Builder setRet(Integer ret) {
      this.ret = ret;
      return this;
    }

    /**
     * 父级频道id
     */
    public Builder setFcId(Long fcId) {
      this.fcId = fcId;
      return this;
    }

    /**
     * 各频道直播信息，包括直播人数
     */
    public Builder addAllChannels(List<ChannelShow> channels) {
      Internal.checkElementsNotNull(channels);
      this.channels = channels;
      return this;
    }

    /**
     * 默认展示频道(当不存在此频道，客户端走自己默认逻辑)
     */
    public Builder setDefChannelId(Long defChannelId) {
      this.defChannelId = defChannelId;
      return this;
    }

    @Override
    public GetChannelsRsp build() {
      return new GetChannelsRsp(ret, fcId, channels, defChannelId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetChannelsRsp extends ProtoAdapter<GetChannelsRsp> {
    public ProtoAdapter_GetChannelsRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetChannelsRsp.class);
    }

    @Override
    public int encodedSize(GetChannelsRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.ret)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.fcId)
          + ChannelShow.ADAPTER.asRepeated().encodedSizeWithTag(3, value.channels)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.defChannelId)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetChannelsRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.ret);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.fcId);
      ChannelShow.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.channels);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.defChannelId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetChannelsRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRet(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setFcId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.channels.add(ChannelShow.ADAPTER.decode(reader)); break;
          case 4: builder.setDefChannelId(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetChannelsRsp redact(GetChannelsRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.channels, ChannelShow.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
