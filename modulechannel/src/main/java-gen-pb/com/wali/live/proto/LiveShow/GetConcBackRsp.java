// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class GetConcBackRsp extends Message<GetConcBackRsp, GetConcBackRsp.Builder> {
  public static final ProtoAdapter<GetConcBackRsp> ADAPTER = new ProtoAdapter_GetConcBackRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RET = 0;

  public static final Long DEFAULT_UID = 0L;

  /**
   * 返回码
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer ret;

  /**
   * 用户id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long uId;

  /**
   * 回放列表
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.LiveShow.BackShow#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<BackShow> back;

  public GetConcBackRsp(Integer ret, Long uId, List<BackShow> back) {
    this(ret, uId, back, ByteString.EMPTY);
  }

  public GetConcBackRsp(Integer ret, Long uId, List<BackShow> back, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ret = ret;
    this.uId = uId;
    this.back = Internal.immutableCopyOf("back", back);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ret = ret;
    builder.uId = uId;
    builder.back = Internal.copyOf("back", back);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetConcBackRsp)) return false;
    GetConcBackRsp o = (GetConcBackRsp) other;
    return unknownFields().equals(o.unknownFields())
        && ret.equals(o.ret)
        && Internal.equals(uId, o.uId)
        && back.equals(o.back);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + ret.hashCode();
      result = result * 37 + (uId != null ? uId.hashCode() : 0);
      result = result * 37 + back.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", ret=").append(ret);
    if (uId != null) builder.append(", uId=").append(uId);
    if (!back.isEmpty()) builder.append(", back=").append(back);
    return builder.replace(0, 2, "GetConcBackRsp{").append('}').toString();
  }

  public static final GetConcBackRsp parseFrom(byte[] data) throws IOException {
    GetConcBackRsp c = null;
       c = GetConcBackRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 返回码
   */
  public Integer getRet() {
    if(ret==null){
        return DEFAULT_RET;
    }
    return ret;
  }

  /**
   * 用户id
   */
  public Long getUId() {
    if(uId==null){
        return DEFAULT_UID;
    }
    return uId;
  }

  /**
   * 回放列表
   */
  public List<BackShow> getBackList() {
    if(back==null){
        return new java.util.ArrayList<BackShow>();
    }
    return back;
  }

  /**
   * 返回码
   */
  public boolean hasRet() {
    return ret!=null;
  }

  /**
   * 用户id
   */
  public boolean hasUId() {
    return uId!=null;
  }

  /**
   * 回放列表
   */
  public boolean hasBackList() {
    return back!=null;
  }

  public static final class Builder extends Message.Builder<GetConcBackRsp, Builder> {
    public Integer ret;

    public Long uId;

    public List<BackShow> back;

    public Builder() {
      back = Internal.newMutableList();
    }

    /**
     * 返回码
     */
    public Builder setRet(Integer ret) {
      this.ret = ret;
      return this;
    }

    /**
     * 用户id
     */
    public Builder setUId(Long uId) {
      this.uId = uId;
      return this;
    }

    /**
     * 回放列表
     */
    public Builder addAllBack(List<BackShow> back) {
      Internal.checkElementsNotNull(back);
      this.back = back;
      return this;
    }

    @Override
    public GetConcBackRsp build() {
      return new GetConcBackRsp(ret, uId, back, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetConcBackRsp extends ProtoAdapter<GetConcBackRsp> {
    public ProtoAdapter_GetConcBackRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetConcBackRsp.class);
    }

    @Override
    public int encodedSize(GetConcBackRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.ret)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.uId)
          + BackShow.ADAPTER.asRepeated().encodedSizeWithTag(3, value.back)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetConcBackRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.ret);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.uId);
      BackShow.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.back);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetConcBackRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRet(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setUId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.back.add(BackShow.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetConcBackRsp redact(GetConcBackRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.back, BackShow.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
