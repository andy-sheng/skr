// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class LiveRecvFlagItem extends Message<LiveRecvFlagItem, LiveRecvFlagItem.Builder> {
  public static final ProtoAdapter<LiveRecvFlagItem> ADAPTER = new ProtoAdapter_LiveRecvFlagItem();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_DATE = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  public static final ByteString DEFAULT_EXTDATA = ByteString.EMPTY;

  public static final String DEFAULT_RECOMMEND = "";

  /**
   * 用户产生行为的时间（毫秒）
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long date;

  /**
   * 打点类型, 1=曝光 2=点击 3=送礼物 4=出房间 5=关注主播 6=喜好反馈 小视频打点类型  100=曝光 101=点击 102=观看 103=点赞 104=评论 105=分享
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  /**
   * 对应打点类型的扩展信息
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString extData;

  /**
   * 服务器下发的打点字串
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String recommend;

  /**
   * 打点具体内容
   */
  @WireField(
      tag = 5,
      adapter = "com.wali.live.proto.CommonChannel.CommonLog#ADAPTER"
  )
  public final CommonLog log;

  public LiveRecvFlagItem(Long date, Integer type, ByteString extData, String recommend,
      CommonLog log) {
    this(date, type, extData, recommend, log, ByteString.EMPTY);
  }

  public LiveRecvFlagItem(Long date, Integer type, ByteString extData, String recommend,
      CommonLog log, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.date = date;
    this.type = type;
    this.extData = extData;
    this.recommend = recommend;
    this.log = log;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.date = date;
    builder.type = type;
    builder.extData = extData;
    builder.recommend = recommend;
    builder.log = log;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LiveRecvFlagItem)) return false;
    LiveRecvFlagItem o = (LiveRecvFlagItem) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(date, o.date)
        && Internal.equals(type, o.type)
        && Internal.equals(extData, o.extData)
        && Internal.equals(recommend, o.recommend)
        && Internal.equals(log, o.log);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (date != null ? date.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (extData != null ? extData.hashCode() : 0);
      result = result * 37 + (recommend != null ? recommend.hashCode() : 0);
      result = result * 37 + (log != null ? log.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (date != null) builder.append(", date=").append(date);
    if (type != null) builder.append(", type=").append(type);
    if (extData != null) builder.append(", extData=").append(extData);
    if (recommend != null) builder.append(", recommend=").append(recommend);
    if (log != null) builder.append(", log=").append(log);
    return builder.replace(0, 2, "LiveRecvFlagItem{").append('}').toString();
  }

  public byte[] toByteArray() {
    return LiveRecvFlagItem.ADAPTER.encode(this);
  }

  public static final LiveRecvFlagItem parseFrom(byte[] data) throws IOException {
    LiveRecvFlagItem c = null;
       c = LiveRecvFlagItem.ADAPTER.decode(data);
    return c;
  }

  /**
   * 用户产生行为的时间（毫秒）
   */
  public Long getDate() {
    if(date==null){
        return DEFAULT_DATE;
    }
    return date;
  }

  /**
   * 打点类型, 1=曝光 2=点击 3=送礼物 4=出房间 5=关注主播 6=喜好反馈 小视频打点类型  100=曝光 101=点击 102=观看 103=点赞 104=评论 105=分享
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  /**
   * 对应打点类型的扩展信息
   */
  public ByteString getExtData() {
    if(extData==null){
        return ByteString.of(new byte[0]);
    }
    return extData;
  }

  /**
   * 服务器下发的打点字串
   */
  public String getRecommend() {
    if(recommend==null){
        return DEFAULT_RECOMMEND;
    }
    return recommend;
  }

  /**
   * 打点具体内容
   */
  public CommonLog getLog() {
    if(log==null){
        return new CommonLog.Builder().build();
    }
    return log;
  }

  /**
   * 用户产生行为的时间（毫秒）
   */
  public boolean hasDate() {
    return date!=null;
  }

  /**
   * 打点类型, 1=曝光 2=点击 3=送礼物 4=出房间 5=关注主播 6=喜好反馈 小视频打点类型  100=曝光 101=点击 102=观看 103=点赞 104=评论 105=分享
   */
  public boolean hasType() {
    return type!=null;
  }

  /**
   * 对应打点类型的扩展信息
   */
  public boolean hasExtData() {
    return extData!=null;
  }

  /**
   * 服务器下发的打点字串
   */
  public boolean hasRecommend() {
    return recommend!=null;
  }

  /**
   * 打点具体内容
   */
  public boolean hasLog() {
    return log!=null;
  }

  public static final class Builder extends Message.Builder<LiveRecvFlagItem, Builder> {
    public Long date;

    public Integer type;

    public ByteString extData;

    public String recommend;

    public CommonLog log;

    public Builder() {
    }

    /**
     * 用户产生行为的时间（毫秒）
     */
    public Builder setDate(Long date) {
      this.date = date;
      return this;
    }

    /**
     * 打点类型, 1=曝光 2=点击 3=送礼物 4=出房间 5=关注主播 6=喜好反馈 小视频打点类型  100=曝光 101=点击 102=观看 103=点赞 104=评论 105=分享
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 对应打点类型的扩展信息
     */
    public Builder setExtData(ByteString extData) {
      this.extData = extData;
      return this;
    }

    /**
     * 服务器下发的打点字串
     */
    public Builder setRecommend(String recommend) {
      this.recommend = recommend;
      return this;
    }

    /**
     * 打点具体内容
     */
    public Builder setLog(CommonLog log) {
      this.log = log;
      return this;
    }

    @Override
    public LiveRecvFlagItem build() {
      return new LiveRecvFlagItem(date, type, extData, recommend, log, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_LiveRecvFlagItem extends ProtoAdapter<LiveRecvFlagItem> {
    public ProtoAdapter_LiveRecvFlagItem() {
      super(FieldEncoding.LENGTH_DELIMITED, LiveRecvFlagItem.class);
    }

    @Override
    public int encodedSize(LiveRecvFlagItem value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.date)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.type)
          + ProtoAdapter.BYTES.encodedSizeWithTag(3, value.extData)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.recommend)
          + CommonLog.ADAPTER.encodedSizeWithTag(5, value.log)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, LiveRecvFlagItem value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.date);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.type);
      ProtoAdapter.BYTES.encodeWithTag(writer, 3, value.extData);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.recommend);
      CommonLog.ADAPTER.encodeWithTag(writer, 5, value.log);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public LiveRecvFlagItem decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setDate(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setExtData(ProtoAdapter.BYTES.decode(reader)); break;
          case 4: builder.setRecommend(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setLog(CommonLog.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public LiveRecvFlagItem redact(LiveRecvFlagItem value) {
      Builder builder = value.newBuilder();
      if (builder.log != null) builder.log = CommonLog.ADAPTER.redact(builder.log);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
