// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class ImageData extends Message<ImageData, ImageData.Builder> {
  public static final ProtoAdapter<ImageData> ADAPTER = new ProtoAdapter_ImageData();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_IMAGE_URL = "";

  public static final String DEFAULT_JUMP_URI = "";

  public static final Integer DEFAULT_WIDTH = 0;

  public static final Integer DEFAULT_HEIGHT = 0;

  public static final String DEFAULT_TITLE = "";

  public static final Integer DEFAULT_EXT_UI = 0;

  /**
   * 封面url
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String image_url;

  /**
   * 跳转scheme
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jump_uri;

  /**
   * 图片宽度
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer width;

  /**
   * 图片高度
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer height;

  /**
   * 标题
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  /**
   * 封面运营角标[同模板协议RichText]
   */
  @WireField(
      tag = 6,
      adapter = "com.wali.live.proto.CommonChannel.RichText#ADAPTER"
  )
  public final RichText mark;

  /**
   * ui样式。默认0=普通，1=附近小视频样式 2=关注好友的小视频样式
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer ext_ui;

  /**
   * 扩展内容
   */
  @WireField(
      tag = 8,
      adapter = "com.wali.live.proto.CommonChannel.ImageExtData#ADAPTER"
  )
  public final ImageExtData ext_data;

  public ImageData(String image_url, String jump_uri, Integer width, Integer height, String title,
      RichText mark, Integer ext_ui, ImageExtData ext_data) {
    this(image_url, jump_uri, width, height, title, mark, ext_ui, ext_data, ByteString.EMPTY);
  }

  public ImageData(String image_url, String jump_uri, Integer width, Integer height, String title,
      RichText mark, Integer ext_ui, ImageExtData ext_data, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.image_url = image_url;
    this.jump_uri = jump_uri;
    this.width = width;
    this.height = height;
    this.title = title;
    this.mark = mark;
    this.ext_ui = ext_ui;
    this.ext_data = ext_data;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.image_url = image_url;
    builder.jump_uri = jump_uri;
    builder.width = width;
    builder.height = height;
    builder.title = title;
    builder.mark = mark;
    builder.ext_ui = ext_ui;
    builder.ext_data = ext_data;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ImageData)) return false;
    ImageData o = (ImageData) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(image_url, o.image_url)
        && Internal.equals(jump_uri, o.jump_uri)
        && Internal.equals(width, o.width)
        && Internal.equals(height, o.height)
        && Internal.equals(title, o.title)
        && Internal.equals(mark, o.mark)
        && Internal.equals(ext_ui, o.ext_ui)
        && Internal.equals(ext_data, o.ext_data);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (image_url != null ? image_url.hashCode() : 0);
      result = result * 37 + (jump_uri != null ? jump_uri.hashCode() : 0);
      result = result * 37 + (width != null ? width.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (mark != null ? mark.hashCode() : 0);
      result = result * 37 + (ext_ui != null ? ext_ui.hashCode() : 0);
      result = result * 37 + (ext_data != null ? ext_data.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (image_url != null) builder.append(", image_url=").append(image_url);
    if (jump_uri != null) builder.append(", jump_uri=").append(jump_uri);
    if (width != null) builder.append(", width=").append(width);
    if (height != null) builder.append(", height=").append(height);
    if (title != null) builder.append(", title=").append(title);
    if (mark != null) builder.append(", mark=").append(mark);
    if (ext_ui != null) builder.append(", ext_ui=").append(ext_ui);
    if (ext_data != null) builder.append(", ext_data=").append(ext_data);
    return builder.replace(0, 2, "ImageData{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ImageData.ADAPTER.encode(this);
  }

  public static final ImageData parseFrom(byte[] data) throws IOException {
    ImageData c = null;
       c = ImageData.ADAPTER.decode(data);
    return c;
  }

  /**
   * 封面url
   */
  public String getImageUrl() {
    if(image_url==null){
        return DEFAULT_IMAGE_URL;
    }
    return image_url;
  }

  /**
   * 跳转scheme
   */
  public String getJumpUri() {
    if(jump_uri==null){
        return DEFAULT_JUMP_URI;
    }
    return jump_uri;
  }

  /**
   * 图片宽度
   */
  public Integer getWidth() {
    if(width==null){
        return DEFAULT_WIDTH;
    }
    return width;
  }

  /**
   * 图片高度
   */
  public Integer getHeight() {
    if(height==null){
        return DEFAULT_HEIGHT;
    }
    return height;
  }

  /**
   * 标题
   */
  public String getTitle() {
    if(title==null){
        return DEFAULT_TITLE;
    }
    return title;
  }

  /**
   * 封面运营角标[同模板协议RichText]
   */
  public RichText getMark() {
    if(mark==null){
        return new RichText.Builder().build();
    }
    return mark;
  }

  /**
   * ui样式。默认0=普通，1=附近小视频样式 2=关注好友的小视频样式
   */
  public Integer getExtUi() {
    if(ext_ui==null){
        return DEFAULT_EXT_UI;
    }
    return ext_ui;
  }

  /**
   * 扩展内容
   */
  public ImageExtData getExtData() {
    if(ext_data==null){
        return new ImageExtData.Builder().build();
    }
    return ext_data;
  }

  /**
   * 封面url
   */
  public boolean hasImageUrl() {
    return image_url!=null;
  }

  /**
   * 跳转scheme
   */
  public boolean hasJumpUri() {
    return jump_uri!=null;
  }

  /**
   * 图片宽度
   */
  public boolean hasWidth() {
    return width!=null;
  }

  /**
   * 图片高度
   */
  public boolean hasHeight() {
    return height!=null;
  }

  /**
   * 标题
   */
  public boolean hasTitle() {
    return title!=null;
  }

  /**
   * 封面运营角标[同模板协议RichText]
   */
  public boolean hasMark() {
    return mark!=null;
  }

  /**
   * ui样式。默认0=普通，1=附近小视频样式 2=关注好友的小视频样式
   */
  public boolean hasExtUi() {
    return ext_ui!=null;
  }

  /**
   * 扩展内容
   */
  public boolean hasExtData() {
    return ext_data!=null;
  }

  public static final class Builder extends Message.Builder<ImageData, Builder> {
    public String image_url;

    public String jump_uri;

    public Integer width;

    public Integer height;

    public String title;

    public RichText mark;

    public Integer ext_ui;

    public ImageExtData ext_data;

    public Builder() {
    }

    /**
     * 封面url
     */
    public Builder setImageUrl(String image_url) {
      this.image_url = image_url;
      return this;
    }

    /**
     * 跳转scheme
     */
    public Builder setJumpUri(String jump_uri) {
      this.jump_uri = jump_uri;
      return this;
    }

    /**
     * 图片宽度
     */
    public Builder setWidth(Integer width) {
      this.width = width;
      return this;
    }

    /**
     * 图片高度
     */
    public Builder setHeight(Integer height) {
      this.height = height;
      return this;
    }

    /**
     * 标题
     */
    public Builder setTitle(String title) {
      this.title = title;
      return this;
    }

    /**
     * 封面运营角标[同模板协议RichText]
     */
    public Builder setMark(RichText mark) {
      this.mark = mark;
      return this;
    }

    /**
     * ui样式。默认0=普通，1=附近小视频样式 2=关注好友的小视频样式
     */
    public Builder setExtUi(Integer ext_ui) {
      this.ext_ui = ext_ui;
      return this;
    }

    /**
     * 扩展内容
     */
    public Builder setExtData(ImageExtData ext_data) {
      this.ext_data = ext_data;
      return this;
    }

    @Override
    public ImageData build() {
      return new ImageData(image_url, jump_uri, width, height, title, mark, ext_ui, ext_data, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ImageData extends ProtoAdapter<ImageData> {
    public ProtoAdapter_ImageData() {
      super(FieldEncoding.LENGTH_DELIMITED, ImageData.class);
    }

    @Override
    public int encodedSize(ImageData value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.image_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.jump_uri)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.width)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.height)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.title)
          + RichText.ADAPTER.encodedSizeWithTag(6, value.mark)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.ext_ui)
          + ImageExtData.ADAPTER.encodedSizeWithTag(8, value.ext_data)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ImageData value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.image_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.jump_uri);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.width);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.height);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.title);
      RichText.ADAPTER.encodeWithTag(writer, 6, value.mark);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.ext_ui);
      ImageExtData.ADAPTER.encodeWithTag(writer, 8, value.ext_data);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ImageData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setImageUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setJumpUri(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setWidth(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setHeight(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setTitle(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setMark(RichText.ADAPTER.decode(reader)); break;
          case 7: builder.setExtUi(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.setExtData(ImageExtData.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ImageData redact(ImageData value) {
      Builder builder = value.newBuilder();
      if (builder.mark != null) builder.mark = RichText.ADAPTER.redact(builder.mark);
      if (builder.ext_data != null) builder.ext_data = ImageExtData.ADAPTER.redact(builder.ext_data);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
