// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class ChannelStyle extends Message<ChannelStyle, ChannelStyle.Builder> {
  public static final ProtoAdapter<ChannelStyle> ADAPTER = new ProtoAdapter_ChannelStyle();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_BG_COLOR = "";

  public static final String DEFAULT_HIGHLIGHT_COLOR = "";

  public static final String DEFAULT_NORMAL_COLOR = "";

  public static final String DEFAULT_STATUS_BAR_COLOR = "";

  /**
   * 导航栏底色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bg_color;

  /**
   * 频道高亮选中的颜色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String highlight_color;

  /**
   * 频道正常的颜色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String normal_color;

  /**
   * 系统状态栏字体颜色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String status_bar_color;

  public ChannelStyle(String bg_color, String highlight_color, String normal_color,
      String status_bar_color) {
    this(bg_color, highlight_color, normal_color, status_bar_color, ByteString.EMPTY);
  }

  public ChannelStyle(String bg_color, String highlight_color, String normal_color,
      String status_bar_color, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.bg_color = bg_color;
    this.highlight_color = highlight_color;
    this.normal_color = normal_color;
    this.status_bar_color = status_bar_color;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.bg_color = bg_color;
    builder.highlight_color = highlight_color;
    builder.normal_color = normal_color;
    builder.status_bar_color = status_bar_color;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChannelStyle)) return false;
    ChannelStyle o = (ChannelStyle) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(bg_color, o.bg_color)
        && Internal.equals(highlight_color, o.highlight_color)
        && Internal.equals(normal_color, o.normal_color)
        && Internal.equals(status_bar_color, o.status_bar_color);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (bg_color != null ? bg_color.hashCode() : 0);
      result = result * 37 + (highlight_color != null ? highlight_color.hashCode() : 0);
      result = result * 37 + (normal_color != null ? normal_color.hashCode() : 0);
      result = result * 37 + (status_bar_color != null ? status_bar_color.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (bg_color != null) builder.append(", bg_color=").append(bg_color);
    if (highlight_color != null) builder.append(", highlight_color=").append(highlight_color);
    if (normal_color != null) builder.append(", normal_color=").append(normal_color);
    if (status_bar_color != null) builder.append(", status_bar_color=").append(status_bar_color);
    return builder.replace(0, 2, "ChannelStyle{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ChannelStyle.ADAPTER.encode(this);
  }

  public static final ChannelStyle parseFrom(byte[] data) throws IOException {
    ChannelStyle c = null;
       c = ChannelStyle.ADAPTER.decode(data);
    return c;
  }

  /**
   * 导航栏底色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  public String getBgColor() {
    if(bg_color==null){
        return DEFAULT_BG_COLOR;
    }
    return bg_color;
  }

  /**
   * 频道高亮选中的颜色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  public String getHighlightColor() {
    if(highlight_color==null){
        return DEFAULT_HIGHLIGHT_COLOR;
    }
    return highlight_color;
  }

  /**
   * 频道正常的颜色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  public String getNormalColor() {
    if(normal_color==null){
        return DEFAULT_NORMAL_COLOR;
    }
    return normal_color;
  }

  /**
   * 系统状态栏字体颜色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  public String getStatusBarColor() {
    if(status_bar_color==null){
        return DEFAULT_STATUS_BAR_COLOR;
    }
    return status_bar_color;
  }

  /**
   * 导航栏底色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  public boolean hasBgColor() {
    return bg_color!=null;
  }

  /**
   * 频道高亮选中的颜色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  public boolean hasHighlightColor() {
    return highlight_color!=null;
  }

  /**
   * 频道正常的颜色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  public boolean hasNormalColor() {
    return normal_color!=null;
  }

  /**
   * 系统状态栏字体颜色，十六进制颜色码, 如 #FFFFFF = 白色
   */
  public boolean hasStatusBarColor() {
    return status_bar_color!=null;
  }

  public static final class Builder extends Message.Builder<ChannelStyle, Builder> {
    public String bg_color;

    public String highlight_color;

    public String normal_color;

    public String status_bar_color;

    public Builder() {
    }

    /**
     * 导航栏底色，十六进制颜色码, 如 #FFFFFF = 白色
     */
    public Builder setBgColor(String bg_color) {
      this.bg_color = bg_color;
      return this;
    }

    /**
     * 频道高亮选中的颜色，十六进制颜色码, 如 #FFFFFF = 白色
     */
    public Builder setHighlightColor(String highlight_color) {
      this.highlight_color = highlight_color;
      return this;
    }

    /**
     * 频道正常的颜色，十六进制颜色码, 如 #FFFFFF = 白色
     */
    public Builder setNormalColor(String normal_color) {
      this.normal_color = normal_color;
      return this;
    }

    /**
     * 系统状态栏字体颜色，十六进制颜色码, 如 #FFFFFF = 白色
     */
    public Builder setStatusBarColor(String status_bar_color) {
      this.status_bar_color = status_bar_color;
      return this;
    }

    @Override
    public ChannelStyle build() {
      return new ChannelStyle(bg_color, highlight_color, normal_color, status_bar_color, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ChannelStyle extends ProtoAdapter<ChannelStyle> {
    public ProtoAdapter_ChannelStyle() {
      super(FieldEncoding.LENGTH_DELIMITED, ChannelStyle.class);
    }

    @Override
    public int encodedSize(ChannelStyle value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.bg_color)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.highlight_color)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.normal_color)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.status_bar_color)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ChannelStyle value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.bg_color);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.highlight_color);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.normal_color);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.status_bar_color);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ChannelStyle decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setBgColor(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setHighlightColor(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setNormalColor(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setStatusBarColor(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ChannelStyle redact(ChannelStyle value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
