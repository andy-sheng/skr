// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 2 拉取子频道列表 请求和返回
 */
public final class GetChannelsReq extends Message<GetChannelsReq, GetChannelsReq.Builder> {
  public static final ProtoAdapter<GetChannelsReq> ADAPTER = new ProtoAdapter_GetChannelsReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_FCID = 0L;

  public static final Integer DEFAULT_APPTYPE = 0;

  public static final Integer DEFAULT_CHANNEL_VERSION = 0;

  /**
   * 父频道id,默认为0,拉取一级频道列表
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long fcId;

  /**
   * 默认0=小米直播,1=电视接入,2=米聊接入,3=新米聊
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer appType;

  /**
   * 频道列表版本,4.8及以上版本必填字段,服务器通过这个字段取不同的列表存储
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer channel_version;

  public GetChannelsReq(Long fcId, Integer appType, Integer channel_version) {
    this(fcId, appType, channel_version, ByteString.EMPTY);
  }

  public GetChannelsReq(Long fcId, Integer appType, Integer channel_version,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.fcId = fcId;
    this.appType = appType;
    this.channel_version = channel_version;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.fcId = fcId;
    builder.appType = appType;
    builder.channel_version = channel_version;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetChannelsReq)) return false;
    GetChannelsReq o = (GetChannelsReq) other;
    return unknownFields().equals(o.unknownFields())
        && fcId.equals(o.fcId)
        && Internal.equals(appType, o.appType)
        && Internal.equals(channel_version, o.channel_version);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + fcId.hashCode();
      result = result * 37 + (appType != null ? appType.hashCode() : 0);
      result = result * 37 + (channel_version != null ? channel_version.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", fcId=").append(fcId);
    if (appType != null) builder.append(", appType=").append(appType);
    if (channel_version != null) builder.append(", channel_version=").append(channel_version);
    return builder.replace(0, 2, "GetChannelsReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GetChannelsReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<GetChannelsReq, Builder> {
    public Long fcId;

    public Integer appType;

    public Integer channel_version;

    public Builder() {
    }

    /**
     * 父频道id,默认为0,拉取一级频道列表
     */
    public Builder setFcId(Long fcId) {
      this.fcId = fcId;
      return this;
    }

    /**
     * 默认0=小米直播,1=电视接入,2=米聊接入,3=新米聊
     */
    public Builder setAppType(Integer appType) {
      this.appType = appType;
      return this;
    }

    /**
     * 频道列表版本,4.8及以上版本必填字段,服务器通过这个字段取不同的列表存储
     */
    public Builder setChannelVersion(Integer channel_version) {
      this.channel_version = channel_version;
      return this;
    }

    @Override
    public GetChannelsReq build() {
      if (fcId == null) {
        throw Internal.missingRequiredFields(fcId, "fcId");
      }
      return new GetChannelsReq(fcId, appType, channel_version, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetChannelsReq extends ProtoAdapter<GetChannelsReq> {
    public ProtoAdapter_GetChannelsReq() {
      super(FieldEncoding.LENGTH_DELIMITED, GetChannelsReq.class);
    }

    @Override
    public int encodedSize(GetChannelsReq value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.fcId)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.appType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.channel_version)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetChannelsReq value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.fcId);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.appType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.channel_version);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetChannelsReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setFcId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setAppType(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setChannelVersion(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetChannelsReq redact(GetChannelsReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
