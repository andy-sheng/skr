// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class ImageExtData extends Message<ImageExtData, ImageExtData.Builder> {
  public static final ProtoAdapter<ImageExtData> ADAPTER = new ProtoAdapter_ImageExtData();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_JOIN_NUM = 0;

  public static final String DEFAULT_IMAGE1 = "";

  public static final String DEFAULT_IMAGE2 = "";

  public static final String DEFAULT_IMAGE3 = "";

  /**
   * 参与人数
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer join_num;

  /**
   * 小封面1
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String image1;

  /**
   * 小封面2
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String image2;

  /**
   * 小封面3
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String image3;

  public ImageExtData(Integer join_num, String image1, String image2, String image3) {
    this(join_num, image1, image2, image3, ByteString.EMPTY);
  }

  public ImageExtData(Integer join_num, String image1, String image2, String image3,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.join_num = join_num;
    this.image1 = image1;
    this.image2 = image2;
    this.image3 = image3;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.join_num = join_num;
    builder.image1 = image1;
    builder.image2 = image2;
    builder.image3 = image3;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ImageExtData)) return false;
    ImageExtData o = (ImageExtData) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(join_num, o.join_num)
        && Internal.equals(image1, o.image1)
        && Internal.equals(image2, o.image2)
        && Internal.equals(image3, o.image3);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (join_num != null ? join_num.hashCode() : 0);
      result = result * 37 + (image1 != null ? image1.hashCode() : 0);
      result = result * 37 + (image2 != null ? image2.hashCode() : 0);
      result = result * 37 + (image3 != null ? image3.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (join_num != null) builder.append(", join_num=").append(join_num);
    if (image1 != null) builder.append(", image1=").append(image1);
    if (image2 != null) builder.append(", image2=").append(image2);
    if (image3 != null) builder.append(", image3=").append(image3);
    return builder.replace(0, 2, "ImageExtData{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ImageExtData.ADAPTER.encode(this);
  }

  public static final ImageExtData parseFrom(byte[] data) throws IOException {
    ImageExtData c = null;
       c = ImageExtData.ADAPTER.decode(data);
    return c;
  }

  /**
   * 参与人数
   */
  public Integer getJoinNum() {
    if(join_num==null){
        return DEFAULT_JOIN_NUM;
    }
    return join_num;
  }

  /**
   * 小封面1
   */
  public String getImage1() {
    if(image1==null){
        return DEFAULT_IMAGE1;
    }
    return image1;
  }

  /**
   * 小封面2
   */
  public String getImage2() {
    if(image2==null){
        return DEFAULT_IMAGE2;
    }
    return image2;
  }

  /**
   * 小封面3
   */
  public String getImage3() {
    if(image3==null){
        return DEFAULT_IMAGE3;
    }
    return image3;
  }

  /**
   * 参与人数
   */
  public boolean hasJoinNum() {
    return join_num!=null;
  }

  /**
   * 小封面1
   */
  public boolean hasImage1() {
    return image1!=null;
  }

  /**
   * 小封面2
   */
  public boolean hasImage2() {
    return image2!=null;
  }

  /**
   * 小封面3
   */
  public boolean hasImage3() {
    return image3!=null;
  }

  public static final class Builder extends Message.Builder<ImageExtData, Builder> {
    public Integer join_num;

    public String image1;

    public String image2;

    public String image3;

    public Builder() {
    }

    /**
     * 参与人数
     */
    public Builder setJoinNum(Integer join_num) {
      this.join_num = join_num;
      return this;
    }

    /**
     * 小封面1
     */
    public Builder setImage1(String image1) {
      this.image1 = image1;
      return this;
    }

    /**
     * 小封面2
     */
    public Builder setImage2(String image2) {
      this.image2 = image2;
      return this;
    }

    /**
     * 小封面3
     */
    public Builder setImage3(String image3) {
      this.image3 = image3;
      return this;
    }

    @Override
    public ImageExtData build() {
      return new ImageExtData(join_num, image1, image2, image3, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ImageExtData extends ProtoAdapter<ImageExtData> {
    public ProtoAdapter_ImageExtData() {
      super(FieldEncoding.LENGTH_DELIMITED, ImageExtData.class);
    }

    @Override
    public int encodedSize(ImageExtData value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.join_num)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.image1)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.image2)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.image3)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ImageExtData value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.join_num);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.image1);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.image2);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.image3);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ImageExtData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setJoinNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setImage1(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setImage2(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setImage3(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ImageExtData redact(ImageExtData value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
