// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class ChannelShow extends Message<ChannelShow, ChannelShow.Builder> {
  public static final ProtoAdapter<ChannelShow> ADAPTER = new ProtoAdapter_ChannelShow();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_CID = 0L;

  public static final String DEFAULT_CNAME = "";

  public static final Boolean DEFAULT_HASCHILD = false;

  public static final Integer DEFAULT_LIVECNT = 0;

  public static final Integer DEFAULT_UITYPE = 0;

  public static final String DEFAULT_URL = "";

  public static final Integer DEFAULT_FLAG = 0;

  public static final String DEFAULT_ICONURL = "";

  /**
   * 频道id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long cId;

  /**
   * 频道名称
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String cName;

  /**
   * 是否有子频道,现不用
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean hasChild;

  /**
   * 直播数目, 现不用
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer liveCnt;

  /**
   * 客户端UI展示类型, 默认=1,分类=2,三列=3,二列=4,动态页样式:5,网页:6
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer uiType;

  /**
   * 刷新信息
   */
  @WireField(
      tag = 6,
      adapter = "com.wali.live.proto.LiveShow.FreshInfo#ADAPTER"
  )
  public final FreshInfo fresh;

  /**
   * 类型是6的时候必须
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String url;

  /**
   * 控制位,第1位表示是否有搜索框
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer flag;

  /**
   * 频道图标地址[子频道]
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String iconUrl;

  /**
   * 频道主题风格
   */
  @WireField(
      tag = 10,
      adapter = "com.wali.live.proto.LiveShow.ChannelStyle#ADAPTER"
  )
  public final ChannelStyle style;

  public ChannelShow(Long cId, String cName, Boolean hasChild, Integer liveCnt, Integer uiType,
      FreshInfo fresh, String url, Integer flag, String iconUrl, ChannelStyle style) {
    this(cId, cName, hasChild, liveCnt, uiType, fresh, url, flag, iconUrl, style, ByteString.EMPTY);
  }

  public ChannelShow(Long cId, String cName, Boolean hasChild, Integer liveCnt, Integer uiType,
      FreshInfo fresh, String url, Integer flag, String iconUrl, ChannelStyle style,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.cId = cId;
    this.cName = cName;
    this.hasChild = hasChild;
    this.liveCnt = liveCnt;
    this.uiType = uiType;
    this.fresh = fresh;
    this.url = url;
    this.flag = flag;
    this.iconUrl = iconUrl;
    this.style = style;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.cId = cId;
    builder.cName = cName;
    builder.hasChild = hasChild;
    builder.liveCnt = liveCnt;
    builder.uiType = uiType;
    builder.fresh = fresh;
    builder.url = url;
    builder.flag = flag;
    builder.iconUrl = iconUrl;
    builder.style = style;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChannelShow)) return false;
    ChannelShow o = (ChannelShow) other;
    return unknownFields().equals(o.unknownFields())
        && cId.equals(o.cId)
        && cName.equals(o.cName)
        && Internal.equals(hasChild, o.hasChild)
        && Internal.equals(liveCnt, o.liveCnt)
        && Internal.equals(uiType, o.uiType)
        && Internal.equals(fresh, o.fresh)
        && Internal.equals(url, o.url)
        && Internal.equals(flag, o.flag)
        && Internal.equals(iconUrl, o.iconUrl)
        && Internal.equals(style, o.style);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + cId.hashCode();
      result = result * 37 + cName.hashCode();
      result = result * 37 + (hasChild != null ? hasChild.hashCode() : 0);
      result = result * 37 + (liveCnt != null ? liveCnt.hashCode() : 0);
      result = result * 37 + (uiType != null ? uiType.hashCode() : 0);
      result = result * 37 + (fresh != null ? fresh.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (flag != null ? flag.hashCode() : 0);
      result = result * 37 + (iconUrl != null ? iconUrl.hashCode() : 0);
      result = result * 37 + (style != null ? style.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", cId=").append(cId);
    builder.append(", cName=").append(cName);
    if (hasChild != null) builder.append(", hasChild=").append(hasChild);
    if (liveCnt != null) builder.append(", liveCnt=").append(liveCnt);
    if (uiType != null) builder.append(", uiType=").append(uiType);
    if (fresh != null) builder.append(", fresh=").append(fresh);
    if (url != null) builder.append(", url=").append(url);
    if (flag != null) builder.append(", flag=").append(flag);
    if (iconUrl != null) builder.append(", iconUrl=").append(iconUrl);
    if (style != null) builder.append(", style=").append(style);
    return builder.replace(0, 2, "ChannelShow{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ChannelShow.ADAPTER.encode(this);
  }

  public static final ChannelShow parseFrom(byte[] data) throws IOException {
    ChannelShow c = null;
       c = ChannelShow.ADAPTER.decode(data);
    return c;
  }

  /**
   * 频道id
   */
  public Long getCId() {
    if(cId==null){
        return DEFAULT_CID;
    }
    return cId;
  }

  /**
   * 频道名称
   */
  public String getCName() {
    if(cName==null){
        return DEFAULT_CNAME;
    }
    return cName;
  }

  /**
   * 是否有子频道,现不用
   */
  public Boolean getHasChild() {
    if(hasChild==null){
        return DEFAULT_HASCHILD;
    }
    return hasChild;
  }

  /**
   * 直播数目, 现不用
   */
  public Integer getLiveCnt() {
    if(liveCnt==null){
        return DEFAULT_LIVECNT;
    }
    return liveCnt;
  }

  /**
   * 客户端UI展示类型, 默认=1,分类=2,三列=3,二列=4,动态页样式:5,网页:6
   */
  public Integer getUiType() {
    if(uiType==null){
        return DEFAULT_UITYPE;
    }
    return uiType;
  }

  /**
   * 刷新信息
   */
  public FreshInfo getFresh() {
    if(fresh==null){
        return new FreshInfo.Builder().build();
    }
    return fresh;
  }

  /**
   * 类型是6的时候必须
   */
  public String getUrl() {
    if(url==null){
        return DEFAULT_URL;
    }
    return url;
  }

  /**
   * 控制位,第1位表示是否有搜索框
   */
  public Integer getFlag() {
    if(flag==null){
        return DEFAULT_FLAG;
    }
    return flag;
  }

  /**
   * 频道图标地址[子频道]
   */
  public String getIconUrl() {
    if(iconUrl==null){
        return DEFAULT_ICONURL;
    }
    return iconUrl;
  }

  /**
   * 频道主题风格
   */
  public ChannelStyle getStyle() {
    if(style==null){
        return new ChannelStyle.Builder().build();
    }
    return style;
  }

  /**
   * 频道id
   */
  public boolean hasCId() {
    return cId!=null;
  }

  /**
   * 频道名称
   */
  public boolean hasCName() {
    return cName!=null;
  }

  /**
   * 是否有子频道,现不用
   */
  public boolean hasHasChild() {
    return hasChild!=null;
  }

  /**
   * 直播数目, 现不用
   */
  public boolean hasLiveCnt() {
    return liveCnt!=null;
  }

  /**
   * 客户端UI展示类型, 默认=1,分类=2,三列=3,二列=4,动态页样式:5,网页:6
   */
  public boolean hasUiType() {
    return uiType!=null;
  }

  /**
   * 刷新信息
   */
  public boolean hasFresh() {
    return fresh!=null;
  }

  /**
   * 类型是6的时候必须
   */
  public boolean hasUrl() {
    return url!=null;
  }

  /**
   * 控制位,第1位表示是否有搜索框
   */
  public boolean hasFlag() {
    return flag!=null;
  }

  /**
   * 频道图标地址[子频道]
   */
  public boolean hasIconUrl() {
    return iconUrl!=null;
  }

  /**
   * 频道主题风格
   */
  public boolean hasStyle() {
    return style!=null;
  }

  public static final class Builder extends Message.Builder<ChannelShow, Builder> {
    public Long cId;

    public String cName;

    public Boolean hasChild;

    public Integer liveCnt;

    public Integer uiType;

    public FreshInfo fresh;

    public String url;

    public Integer flag;

    public String iconUrl;

    public ChannelStyle style;

    public Builder() {
    }

    /**
     * 频道id
     */
    public Builder setCId(Long cId) {
      this.cId = cId;
      return this;
    }

    /**
     * 频道名称
     */
    public Builder setCName(String cName) {
      this.cName = cName;
      return this;
    }

    /**
     * 是否有子频道,现不用
     */
    public Builder setHasChild(Boolean hasChild) {
      this.hasChild = hasChild;
      return this;
    }

    /**
     * 直播数目, 现不用
     */
    public Builder setLiveCnt(Integer liveCnt) {
      this.liveCnt = liveCnt;
      return this;
    }

    /**
     * 客户端UI展示类型, 默认=1,分类=2,三列=3,二列=4,动态页样式:5,网页:6
     */
    public Builder setUiType(Integer uiType) {
      this.uiType = uiType;
      return this;
    }

    /**
     * 刷新信息
     */
    public Builder setFresh(FreshInfo fresh) {
      this.fresh = fresh;
      return this;
    }

    /**
     * 类型是6的时候必须
     */
    public Builder setUrl(String url) {
      this.url = url;
      return this;
    }

    /**
     * 控制位,第1位表示是否有搜索框
     */
    public Builder setFlag(Integer flag) {
      this.flag = flag;
      return this;
    }

    /**
     * 频道图标地址[子频道]
     */
    public Builder setIconUrl(String iconUrl) {
      this.iconUrl = iconUrl;
      return this;
    }

    /**
     * 频道主题风格
     */
    public Builder setStyle(ChannelStyle style) {
      this.style = style;
      return this;
    }

    @Override
    public ChannelShow build() {
      return new ChannelShow(cId, cName, hasChild, liveCnt, uiType, fresh, url, flag, iconUrl, style, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ChannelShow extends ProtoAdapter<ChannelShow> {
    public ProtoAdapter_ChannelShow() {
      super(FieldEncoding.LENGTH_DELIMITED, ChannelShow.class);
    }

    @Override
    public int encodedSize(ChannelShow value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.cId)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.cName)
          + ProtoAdapter.BOOL.encodedSizeWithTag(3, value.hasChild)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.liveCnt)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.uiType)
          + FreshInfo.ADAPTER.encodedSizeWithTag(6, value.fresh)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.url)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.flag)
          + ProtoAdapter.STRING.encodedSizeWithTag(9, value.iconUrl)
          + ChannelStyle.ADAPTER.encodedSizeWithTag(10, value.style)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ChannelShow value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.cId);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.cName);
      ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.hasChild);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.liveCnt);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.uiType);
      FreshInfo.ADAPTER.encodeWithTag(writer, 6, value.fresh);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.url);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.flag);
      ProtoAdapter.STRING.encodeWithTag(writer, 9, value.iconUrl);
      ChannelStyle.ADAPTER.encodeWithTag(writer, 10, value.style);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ChannelShow decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setCId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setCName(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setHasChild(ProtoAdapter.BOOL.decode(reader)); break;
          case 4: builder.setLiveCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setUiType(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setFresh(FreshInfo.ADAPTER.decode(reader)); break;
          case 7: builder.setUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setFlag(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.setIconUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.setStyle(ChannelStyle.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ChannelShow redact(ChannelShow value) {
      Builder builder = value.newBuilder();
      if (builder.fresh != null) builder.fresh = FreshInfo.ADAPTER.redact(builder.fresh);
      if (builder.style != null) builder.style = ChannelStyle.ADAPTER.redact(builder.style);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
