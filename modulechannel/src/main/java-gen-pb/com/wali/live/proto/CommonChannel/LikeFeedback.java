// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * type=6 extData填充内容
 */
public final class LikeFeedback extends Message<LikeFeedback, LikeFeedback.Builder> {
  public static final ProtoAdapter<LikeFeedback> ADAPTER = new ProtoAdapter_LikeFeedback();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final String DEFAULT_ROOMID = "";

  /**
   * 不喜欢主播的id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long zuid;

  /**
   * 不喜欢直播的房间id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String roomId;

  public LikeFeedback(Long zuid, String roomId) {
    this(zuid, roomId, ByteString.EMPTY);
  }

  public LikeFeedback(Long zuid, String roomId, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.zuid = zuid;
    this.roomId = roomId;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.zuid = zuid;
    builder.roomId = roomId;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LikeFeedback)) return false;
    LikeFeedback o = (LikeFeedback) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(zuid, o.zuid)
        && Internal.equals(roomId, o.roomId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (zuid != null ? zuid.hashCode() : 0);
      result = result * 37 + (roomId != null ? roomId.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (zuid != null) builder.append(", zuid=").append(zuid);
    if (roomId != null) builder.append(", roomId=").append(roomId);
    return builder.replace(0, 2, "LikeFeedback{").append('}').toString();
  }

  public byte[] toByteArray() {
    return LikeFeedback.ADAPTER.encode(this);
  }

  public static final LikeFeedback parseFrom(byte[] data) throws IOException {
    LikeFeedback c = null;
       c = LikeFeedback.ADAPTER.decode(data);
    return c;
  }

  /**
   * 不喜欢主播的id
   */
  public Long getZuid() {
    if(zuid==null){
        return DEFAULT_ZUID;
    }
    return zuid;
  }

  /**
   * 不喜欢直播的房间id
   */
  public String getRoomId() {
    if(roomId==null){
        return DEFAULT_ROOMID;
    }
    return roomId;
  }

  /**
   * 不喜欢主播的id
   */
  public boolean hasZuid() {
    return zuid!=null;
  }

  /**
   * 不喜欢直播的房间id
   */
  public boolean hasRoomId() {
    return roomId!=null;
  }

  public static final class Builder extends Message.Builder<LikeFeedback, Builder> {
    public Long zuid;

    public String roomId;

    public Builder() {
    }

    /**
     * 不喜欢主播的id
     */
    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * 不喜欢直播的房间id
     */
    public Builder setRoomId(String roomId) {
      this.roomId = roomId;
      return this;
    }

    @Override
    public LikeFeedback build() {
      return new LikeFeedback(zuid, roomId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_LikeFeedback extends ProtoAdapter<LikeFeedback> {
    public ProtoAdapter_LikeFeedback() {
      super(FieldEncoding.LENGTH_DELIMITED, LikeFeedback.class);
    }

    @Override
    public int encodedSize(LikeFeedback value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.zuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.roomId)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, LikeFeedback value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.zuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.roomId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public LikeFeedback decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setRoomId(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public LikeFeedback redact(LikeFeedback value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
