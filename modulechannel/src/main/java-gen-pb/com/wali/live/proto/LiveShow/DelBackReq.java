// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 6 删除回放 请求和返回
 */
public final class DelBackReq extends Message<DelBackReq, DelBackReq.Builder> {
  public static final ProtoAdapter<DelBackReq> ADAPTER = new ProtoAdapter_DelBackReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UID = 0L;

  /**
   * 用户id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long uId;

  /**
   * 回放id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> baId;

  public DelBackReq(Long uId, List<String> baId) {
    this(uId, baId, ByteString.EMPTY);
  }

  public DelBackReq(Long uId, List<String> baId, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.uId = uId;
    this.baId = Internal.immutableCopyOf("baId", baId);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.uId = uId;
    builder.baId = Internal.copyOf("baId", baId);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DelBackReq)) return false;
    DelBackReq o = (DelBackReq) other;
    return unknownFields().equals(o.unknownFields())
        && uId.equals(o.uId)
        && baId.equals(o.baId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + uId.hashCode();
      result = result * 37 + baId.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", uId=").append(uId);
    if (!baId.isEmpty()) builder.append(", baId=").append(baId);
    return builder.replace(0, 2, "DelBackReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return DelBackReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<DelBackReq, Builder> {
    public Long uId;

    public List<String> baId;

    public Builder() {
      baId = Internal.newMutableList();
    }

    /**
     * 用户id
     */
    public Builder setUId(Long uId) {
      this.uId = uId;
      return this;
    }

    /**
     * 回放id
     */
    public Builder addAllBaId(List<String> baId) {
      Internal.checkElementsNotNull(baId);
      this.baId = baId;
      return this;
    }

    @Override
    public DelBackReq build() {
      if (uId == null) {
        throw Internal.missingRequiredFields(uId, "uId");
      }
      return new DelBackReq(uId, baId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DelBackReq extends ProtoAdapter<DelBackReq> {
    public ProtoAdapter_DelBackReq() {
      super(FieldEncoding.LENGTH_DELIMITED, DelBackReq.class);
    }

    @Override
    public int encodedSize(DelBackReq value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.uId)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(2, value.baId)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, DelBackReq value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.uId);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 2, value.baId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DelBackReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.baId.add(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public DelBackReq redact(DelBackReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
