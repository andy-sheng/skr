// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class LiveOrReplayItemInfo extends Message<LiveOrReplayItemInfo, LiveOrReplayItemInfo.Builder> {
  public static final ProtoAdapter<LiveOrReplayItemInfo> ADAPTER = new ProtoAdapter_LiveOrReplayItemInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  public static final ByteString DEFAULT_ITEMS = ByteString.EMPTY;

  public static final String DEFAULT_JUMPSCHEMEURI = "";

  public static final String DEFAULT_UPRIGHTTEXT = "";

  public static final String DEFAULT_DOWNTEXT1 = "";

  public static final String DEFAULT_DOWNTEXT2 = "";

  public static final String DEFAULT_IMGURL = "";

  public static final Long DEFAULT_PUBLISHTIME = 0L;

  public static final String DEFAULT_UPLEFTTEXT = "";

  public static final String DEFAULT_IMGURL2 = "";

  public static final Integer DEFAULT_DISTANCE = 0;

  public static final Integer DEFAULT_WIDTH = 0;

  public static final Integer DEFAULT_HEIGHT = 0;

  public static final Integer DEFAULT_DOWNTEXTTYPE = 0;

  /**
   * 1直播， 2回放, 3 配置用户信息 4 小视频 5 电视台 6 图文,8混排图文，9直播间组，10电台组
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer type;

  /**
   * 1对应 LiveInfo， 2对应BackInfo 3.对应 UserInfo 4. 对应小视频信息,8对应LiveOrReplayImageData,9对应LiveGroupExtData,10:RadioGroupExtData
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.REQUIRED
  )
  public final ByteString items;

  /**
   * 跳转的schemeUri
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jumpSchemeUri;

  /**
   * 右上角文案，直播，回放
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String upRightText;

  /**
   * 下方第一行文案
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String downText1;

  /**
   * 下发第二行文案
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String downText2;

  /**
   * 配置的元素的图片url
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String imgUrl;

  /**
   * 发布时间
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long publishTime;

  /**
   * 左上角文案(游戏新样式增加) [3.0废弃字段]
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String upLeftText;

  /**
   * 配置的元素的图片url2(目前样式33用到)
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String imgUrl2;

  /**
   * 列表挂件信息
   */
  @WireField(
      tag = 11,
      adapter = "com.wali.live.proto.CommonChannel.ListWidgetInfo#ADAPTER"
  )
  public final ListWidgetInfo widget;

  /**
   * 封面左上角信息
   */
  @WireField(
      tag = 12,
      adapter = "com.wali.live.proto.CommonChannel.RichText#ADAPTER"
  )
  public final RichText topLeft;

  /**
   * 封面中间文本
   */
  @WireField(
      tag = 13,
      adapter = "com.wali.live.proto.CommonChannel.MiddleInfo#ADAPTER"
  )
  public final MiddleInfo middle;

  /**
   * 标签[目前只有一个，考虑会扩展为多个，定义为repeated]
   */
  @WireField(
      tag = 14,
      adapter = "com.wali.live.proto.CommonChannel.RichText#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<RichText> label;

  /**
   * 距离，单位：米[附近直播功能用到]
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer distance;

  /**
   * 图片或者小视频宽度
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer width;

  /**
   * 图片或者小视频高度
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer height;

  /**
   * 1.距离；2.位置；3.人数(字段未设置，默认显示优先级为 距离>位置>人数)
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer downtextType;

  public LiveOrReplayItemInfo(Integer type, ByteString items, String jumpSchemeUri,
      String upRightText, String downText1, String downText2, String imgUrl, Long publishTime,
      String upLeftText, String imgUrl2, ListWidgetInfo widget, RichText topLeft, MiddleInfo middle,
      List<RichText> label, Integer distance, Integer width, Integer height, Integer downtextType) {
    this(type, items, jumpSchemeUri, upRightText, downText1, downText2, imgUrl, publishTime, upLeftText, imgUrl2, widget, topLeft, middle, label, distance, width, height, downtextType, ByteString.EMPTY);
  }

  public LiveOrReplayItemInfo(Integer type, ByteString items, String jumpSchemeUri,
      String upRightText, String downText1, String downText2, String imgUrl, Long publishTime,
      String upLeftText, String imgUrl2, ListWidgetInfo widget, RichText topLeft, MiddleInfo middle,
      List<RichText> label, Integer distance, Integer width, Integer height, Integer downtextType,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.items = items;
    this.jumpSchemeUri = jumpSchemeUri;
    this.upRightText = upRightText;
    this.downText1 = downText1;
    this.downText2 = downText2;
    this.imgUrl = imgUrl;
    this.publishTime = publishTime;
    this.upLeftText = upLeftText;
    this.imgUrl2 = imgUrl2;
    this.widget = widget;
    this.topLeft = topLeft;
    this.middle = middle;
    this.label = Internal.immutableCopyOf("label", label);
    this.distance = distance;
    this.width = width;
    this.height = height;
    this.downtextType = downtextType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.items = items;
    builder.jumpSchemeUri = jumpSchemeUri;
    builder.upRightText = upRightText;
    builder.downText1 = downText1;
    builder.downText2 = downText2;
    builder.imgUrl = imgUrl;
    builder.publishTime = publishTime;
    builder.upLeftText = upLeftText;
    builder.imgUrl2 = imgUrl2;
    builder.widget = widget;
    builder.topLeft = topLeft;
    builder.middle = middle;
    builder.label = Internal.copyOf("label", label);
    builder.distance = distance;
    builder.width = width;
    builder.height = height;
    builder.downtextType = downtextType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LiveOrReplayItemInfo)) return false;
    LiveOrReplayItemInfo o = (LiveOrReplayItemInfo) other;
    return unknownFields().equals(o.unknownFields())
        && type.equals(o.type)
        && items.equals(o.items)
        && Internal.equals(jumpSchemeUri, o.jumpSchemeUri)
        && Internal.equals(upRightText, o.upRightText)
        && Internal.equals(downText1, o.downText1)
        && Internal.equals(downText2, o.downText2)
        && Internal.equals(imgUrl, o.imgUrl)
        && Internal.equals(publishTime, o.publishTime)
        && Internal.equals(upLeftText, o.upLeftText)
        && Internal.equals(imgUrl2, o.imgUrl2)
        && Internal.equals(widget, o.widget)
        && Internal.equals(topLeft, o.topLeft)
        && Internal.equals(middle, o.middle)
        && label.equals(o.label)
        && Internal.equals(distance, o.distance)
        && Internal.equals(width, o.width)
        && Internal.equals(height, o.height)
        && Internal.equals(downtextType, o.downtextType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + type.hashCode();
      result = result * 37 + items.hashCode();
      result = result * 37 + (jumpSchemeUri != null ? jumpSchemeUri.hashCode() : 0);
      result = result * 37 + (upRightText != null ? upRightText.hashCode() : 0);
      result = result * 37 + (downText1 != null ? downText1.hashCode() : 0);
      result = result * 37 + (downText2 != null ? downText2.hashCode() : 0);
      result = result * 37 + (imgUrl != null ? imgUrl.hashCode() : 0);
      result = result * 37 + (publishTime != null ? publishTime.hashCode() : 0);
      result = result * 37 + (upLeftText != null ? upLeftText.hashCode() : 0);
      result = result * 37 + (imgUrl2 != null ? imgUrl2.hashCode() : 0);
      result = result * 37 + (widget != null ? widget.hashCode() : 0);
      result = result * 37 + (topLeft != null ? topLeft.hashCode() : 0);
      result = result * 37 + (middle != null ? middle.hashCode() : 0);
      result = result * 37 + label.hashCode();
      result = result * 37 + (distance != null ? distance.hashCode() : 0);
      result = result * 37 + (width != null ? width.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      result = result * 37 + (downtextType != null ? downtextType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", type=").append(type);
    builder.append(", items=").append(items);
    if (jumpSchemeUri != null) builder.append(", jumpSchemeUri=").append(jumpSchemeUri);
    if (upRightText != null) builder.append(", upRightText=").append(upRightText);
    if (downText1 != null) builder.append(", downText1=").append(downText1);
    if (downText2 != null) builder.append(", downText2=").append(downText2);
    if (imgUrl != null) builder.append(", imgUrl=").append(imgUrl);
    if (publishTime != null) builder.append(", publishTime=").append(publishTime);
    if (upLeftText != null) builder.append(", upLeftText=").append(upLeftText);
    if (imgUrl2 != null) builder.append(", imgUrl2=").append(imgUrl2);
    if (widget != null) builder.append(", widget=").append(widget);
    if (topLeft != null) builder.append(", topLeft=").append(topLeft);
    if (middle != null) builder.append(", middle=").append(middle);
    if (!label.isEmpty()) builder.append(", label=").append(label);
    if (distance != null) builder.append(", distance=").append(distance);
    if (width != null) builder.append(", width=").append(width);
    if (height != null) builder.append(", height=").append(height);
    if (downtextType != null) builder.append(", downtextType=").append(downtextType);
    return builder.replace(0, 2, "LiveOrReplayItemInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return LiveOrReplayItemInfo.ADAPTER.encode(this);
  }

  public static final LiveOrReplayItemInfo parseFrom(byte[] data) throws IOException {
    LiveOrReplayItemInfo c = null;
       c = LiveOrReplayItemInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 1直播， 2回放, 3 配置用户信息 4 小视频 5 电视台 6 图文,8混排图文，9直播间组，10电台组
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  /**
   * 1对应 LiveInfo， 2对应BackInfo 3.对应 UserInfo 4. 对应小视频信息,8对应LiveOrReplayImageData,9对应LiveGroupExtData,10:RadioGroupExtData
   */
  public ByteString getItems() {
    if(items==null){
        return ByteString.of(new byte[0]);
    }
    return items;
  }

  /**
   * 跳转的schemeUri
   */
  public String getJumpSchemeUri() {
    if(jumpSchemeUri==null){
        return DEFAULT_JUMPSCHEMEURI;
    }
    return jumpSchemeUri;
  }

  /**
   * 右上角文案，直播，回放
   */
  public String getUpRightText() {
    if(upRightText==null){
        return DEFAULT_UPRIGHTTEXT;
    }
    return upRightText;
  }

  /**
   * 下方第一行文案
   */
  public String getDownText1() {
    if(downText1==null){
        return DEFAULT_DOWNTEXT1;
    }
    return downText1;
  }

  /**
   * 下发第二行文案
   */
  public String getDownText2() {
    if(downText2==null){
        return DEFAULT_DOWNTEXT2;
    }
    return downText2;
  }

  /**
   * 配置的元素的图片url
   */
  public String getImgUrl() {
    if(imgUrl==null){
        return DEFAULT_IMGURL;
    }
    return imgUrl;
  }

  /**
   * 发布时间
   */
  public Long getPublishTime() {
    if(publishTime==null){
        return DEFAULT_PUBLISHTIME;
    }
    return publishTime;
  }

  /**
   * 左上角文案(游戏新样式增加) [3.0废弃字段]
   */
  public String getUpLeftText() {
    if(upLeftText==null){
        return DEFAULT_UPLEFTTEXT;
    }
    return upLeftText;
  }

  /**
   * 配置的元素的图片url2(目前样式33用到)
   */
  public String getImgUrl2() {
    if(imgUrl2==null){
        return DEFAULT_IMGURL2;
    }
    return imgUrl2;
  }

  /**
   * 列表挂件信息
   */
  public ListWidgetInfo getWidget() {
    if(widget==null){
        return new ListWidgetInfo.Builder().build();
    }
    return widget;
  }

  /**
   * 封面左上角信息
   */
  public RichText getTopLeft() {
    if(topLeft==null){
        return new RichText.Builder().build();
    }
    return topLeft;
  }

  /**
   * 封面中间文本
   */
  public MiddleInfo getMiddle() {
    if(middle==null){
        return new MiddleInfo.Builder().build();
    }
    return middle;
  }

  /**
   * 标签[目前只有一个，考虑会扩展为多个，定义为repeated]
   */
  public List<RichText> getLabelList() {
    if(label==null){
        return new java.util.ArrayList<RichText>();
    }
    return label;
  }

  /**
   * 距离，单位：米[附近直播功能用到]
   */
  public Integer getDistance() {
    if(distance==null){
        return DEFAULT_DISTANCE;
    }
    return distance;
  }

  /**
   * 图片或者小视频宽度
   */
  public Integer getWidth() {
    if(width==null){
        return DEFAULT_WIDTH;
    }
    return width;
  }

  /**
   * 图片或者小视频高度
   */
  public Integer getHeight() {
    if(height==null){
        return DEFAULT_HEIGHT;
    }
    return height;
  }

  /**
   * 1.距离；2.位置；3.人数(字段未设置，默认显示优先级为 距离>位置>人数)
   */
  public Integer getDowntextType() {
    if(downtextType==null){
        return DEFAULT_DOWNTEXTTYPE;
    }
    return downtextType;
  }

  /**
   * 1直播， 2回放, 3 配置用户信息 4 小视频 5 电视台 6 图文,8混排图文，9直播间组，10电台组
   */
  public boolean hasType() {
    return type!=null;
  }

  /**
   * 1对应 LiveInfo， 2对应BackInfo 3.对应 UserInfo 4. 对应小视频信息,8对应LiveOrReplayImageData,9对应LiveGroupExtData,10:RadioGroupExtData
   */
  public boolean hasItems() {
    return items!=null;
  }

  /**
   * 跳转的schemeUri
   */
  public boolean hasJumpSchemeUri() {
    return jumpSchemeUri!=null;
  }

  /**
   * 右上角文案，直播，回放
   */
  public boolean hasUpRightText() {
    return upRightText!=null;
  }

  /**
   * 下方第一行文案
   */
  public boolean hasDownText1() {
    return downText1!=null;
  }

  /**
   * 下发第二行文案
   */
  public boolean hasDownText2() {
    return downText2!=null;
  }

  /**
   * 配置的元素的图片url
   */
  public boolean hasImgUrl() {
    return imgUrl!=null;
  }

  /**
   * 发布时间
   */
  public boolean hasPublishTime() {
    return publishTime!=null;
  }

  /**
   * 左上角文案(游戏新样式增加) [3.0废弃字段]
   */
  public boolean hasUpLeftText() {
    return upLeftText!=null;
  }

  /**
   * 配置的元素的图片url2(目前样式33用到)
   */
  public boolean hasImgUrl2() {
    return imgUrl2!=null;
  }

  /**
   * 列表挂件信息
   */
  public boolean hasWidget() {
    return widget!=null;
  }

  /**
   * 封面左上角信息
   */
  public boolean hasTopLeft() {
    return topLeft!=null;
  }

  /**
   * 封面中间文本
   */
  public boolean hasMiddle() {
    return middle!=null;
  }

  /**
   * 标签[目前只有一个，考虑会扩展为多个，定义为repeated]
   */
  public boolean hasLabelList() {
    return label!=null;
  }

  /**
   * 距离，单位：米[附近直播功能用到]
   */
  public boolean hasDistance() {
    return distance!=null;
  }

  /**
   * 图片或者小视频宽度
   */
  public boolean hasWidth() {
    return width!=null;
  }

  /**
   * 图片或者小视频高度
   */
  public boolean hasHeight() {
    return height!=null;
  }

  /**
   * 1.距离；2.位置；3.人数(字段未设置，默认显示优先级为 距离>位置>人数)
   */
  public boolean hasDowntextType() {
    return downtextType!=null;
  }

  public static final class Builder extends Message.Builder<LiveOrReplayItemInfo, Builder> {
    public Integer type;

    public ByteString items;

    public String jumpSchemeUri;

    public String upRightText;

    public String downText1;

    public String downText2;

    public String imgUrl;

    public Long publishTime;

    public String upLeftText;

    public String imgUrl2;

    public ListWidgetInfo widget;

    public RichText topLeft;

    public MiddleInfo middle;

    public List<RichText> label;

    public Integer distance;

    public Integer width;

    public Integer height;

    public Integer downtextType;

    public Builder() {
      label = Internal.newMutableList();
    }

    /**
     * 1直播， 2回放, 3 配置用户信息 4 小视频 5 电视台 6 图文,8混排图文，9直播间组，10电台组
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 1对应 LiveInfo， 2对应BackInfo 3.对应 UserInfo 4. 对应小视频信息,8对应LiveOrReplayImageData,9对应LiveGroupExtData,10:RadioGroupExtData
     */
    public Builder setItems(ByteString items) {
      this.items = items;
      return this;
    }

    /**
     * 跳转的schemeUri
     */
    public Builder setJumpSchemeUri(String jumpSchemeUri) {
      this.jumpSchemeUri = jumpSchemeUri;
      return this;
    }

    /**
     * 右上角文案，直播，回放
     */
    public Builder setUpRightText(String upRightText) {
      this.upRightText = upRightText;
      return this;
    }

    /**
     * 下方第一行文案
     */
    public Builder setDownText1(String downText1) {
      this.downText1 = downText1;
      return this;
    }

    /**
     * 下发第二行文案
     */
    public Builder setDownText2(String downText2) {
      this.downText2 = downText2;
      return this;
    }

    /**
     * 配置的元素的图片url
     */
    public Builder setImgUrl(String imgUrl) {
      this.imgUrl = imgUrl;
      return this;
    }

    /**
     * 发布时间
     */
    public Builder setPublishTime(Long publishTime) {
      this.publishTime = publishTime;
      return this;
    }

    /**
     * 左上角文案(游戏新样式增加) [3.0废弃字段]
     */
    public Builder setUpLeftText(String upLeftText) {
      this.upLeftText = upLeftText;
      return this;
    }

    /**
     * 配置的元素的图片url2(目前样式33用到)
     */
    public Builder setImgUrl2(String imgUrl2) {
      this.imgUrl2 = imgUrl2;
      return this;
    }

    /**
     * 列表挂件信息
     */
    public Builder setWidget(ListWidgetInfo widget) {
      this.widget = widget;
      return this;
    }

    /**
     * 封面左上角信息
     */
    public Builder setTopLeft(RichText topLeft) {
      this.topLeft = topLeft;
      return this;
    }

    /**
     * 封面中间文本
     */
    public Builder setMiddle(MiddleInfo middle) {
      this.middle = middle;
      return this;
    }

    /**
     * 标签[目前只有一个，考虑会扩展为多个，定义为repeated]
     */
    public Builder addAllLabel(List<RichText> label) {
      Internal.checkElementsNotNull(label);
      this.label = label;
      return this;
    }

    /**
     * 距离，单位：米[附近直播功能用到]
     */
    public Builder setDistance(Integer distance) {
      this.distance = distance;
      return this;
    }

    /**
     * 图片或者小视频宽度
     */
    public Builder setWidth(Integer width) {
      this.width = width;
      return this;
    }

    /**
     * 图片或者小视频高度
     */
    public Builder setHeight(Integer height) {
      this.height = height;
      return this;
    }

    /**
     * 1.距离；2.位置；3.人数(字段未设置，默认显示优先级为 距离>位置>人数)
     */
    public Builder setDowntextType(Integer downtextType) {
      this.downtextType = downtextType;
      return this;
    }

    @Override
    public LiveOrReplayItemInfo build() {
      return new LiveOrReplayItemInfo(type, items, jumpSchemeUri, upRightText, downText1, downText2, imgUrl, publishTime, upLeftText, imgUrl2, widget, topLeft, middle, label, distance, width, height, downtextType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_LiveOrReplayItemInfo extends ProtoAdapter<LiveOrReplayItemInfo> {
    public ProtoAdapter_LiveOrReplayItemInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, LiveOrReplayItemInfo.class);
    }

    @Override
    public int encodedSize(LiveOrReplayItemInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.type)
          + ProtoAdapter.BYTES.encodedSizeWithTag(2, value.items)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.jumpSchemeUri)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.upRightText)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.downText1)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.downText2)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.imgUrl)
          + ProtoAdapter.UINT64.encodedSizeWithTag(8, value.publishTime)
          + ProtoAdapter.STRING.encodedSizeWithTag(9, value.upLeftText)
          + ProtoAdapter.STRING.encodedSizeWithTag(10, value.imgUrl2)
          + ListWidgetInfo.ADAPTER.encodedSizeWithTag(11, value.widget)
          + RichText.ADAPTER.encodedSizeWithTag(12, value.topLeft)
          + MiddleInfo.ADAPTER.encodedSizeWithTag(13, value.middle)
          + RichText.ADAPTER.asRepeated().encodedSizeWithTag(14, value.label)
          + ProtoAdapter.UINT32.encodedSizeWithTag(15, value.distance)
          + ProtoAdapter.UINT32.encodedSizeWithTag(16, value.width)
          + ProtoAdapter.UINT32.encodedSizeWithTag(17, value.height)
          + ProtoAdapter.INT32.encodedSizeWithTag(18, value.downtextType)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, LiveOrReplayItemInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.type);
      ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.items);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.jumpSchemeUri);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.upRightText);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.downText1);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.downText2);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.imgUrl);
      ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.publishTime);
      ProtoAdapter.STRING.encodeWithTag(writer, 9, value.upLeftText);
      ProtoAdapter.STRING.encodeWithTag(writer, 10, value.imgUrl2);
      ListWidgetInfo.ADAPTER.encodeWithTag(writer, 11, value.widget);
      RichText.ADAPTER.encodeWithTag(writer, 12, value.topLeft);
      MiddleInfo.ADAPTER.encodeWithTag(writer, 13, value.middle);
      RichText.ADAPTER.asRepeated().encodeWithTag(writer, 14, value.label);
      ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.distance);
      ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.width);
      ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.height);
      ProtoAdapter.INT32.encodeWithTag(writer, 18, value.downtextType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public LiveOrReplayItemInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setItems(ProtoAdapter.BYTES.decode(reader)); break;
          case 3: builder.setJumpSchemeUri(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setUpRightText(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setDownText1(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setDownText2(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setImgUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setPublishTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.setUpLeftText(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.setImgUrl2(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.setWidget(ListWidgetInfo.ADAPTER.decode(reader)); break;
          case 12: builder.setTopLeft(RichText.ADAPTER.decode(reader)); break;
          case 13: builder.setMiddle(MiddleInfo.ADAPTER.decode(reader)); break;
          case 14: builder.label.add(RichText.ADAPTER.decode(reader)); break;
          case 15: builder.setDistance(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.setWidth(ProtoAdapter.UINT32.decode(reader)); break;
          case 17: builder.setHeight(ProtoAdapter.UINT32.decode(reader)); break;
          case 18: builder.setDowntextType(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public LiveOrReplayItemInfo redact(LiveOrReplayItemInfo value) {
      Builder builder = value.newBuilder();
      if (builder.widget != null) builder.widget = ListWidgetInfo.ADAPTER.redact(builder.widget);
      if (builder.topLeft != null) builder.topLeft = RichText.ADAPTER.redact(builder.topLeft);
      if (builder.middle != null) builder.middle = MiddleInfo.ADAPTER.redact(builder.middle);
      Internal.redactElements(builder.label, RichText.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
