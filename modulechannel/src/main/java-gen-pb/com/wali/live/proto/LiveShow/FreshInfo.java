// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveShow.proto
package com.wali.live.proto.LiveShow;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class FreshInfo extends Message<FreshInfo, FreshInfo.Builder> {
  public static final ProtoAdapter<FreshInfo> ADAPTER = new ProtoAdapter_FreshInfo();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_ISAUTO = false;

  public static final Long DEFAULT_INTERVAL = 0L;

  /**
   * 是否自动刷新
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isAuto;

  /**
   * 刷新的时间间隔
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long interval;

  public FreshInfo(Boolean isAuto, Long interval) {
    this(isAuto, interval, ByteString.EMPTY);
  }

  public FreshInfo(Boolean isAuto, Long interval, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.isAuto = isAuto;
    this.interval = interval;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.isAuto = isAuto;
    builder.interval = interval;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FreshInfo)) return false;
    FreshInfo o = (FreshInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(isAuto, o.isAuto)
        && Internal.equals(interval, o.interval);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (isAuto != null ? isAuto.hashCode() : 0);
      result = result * 37 + (interval != null ? interval.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (isAuto != null) builder.append(", isAuto=").append(isAuto);
    if (interval != null) builder.append(", interval=").append(interval);
    return builder.replace(0, 2, "FreshInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return FreshInfo.ADAPTER.encode(this);
  }

  public static final FreshInfo parseFrom(byte[] data) throws IOException {
    FreshInfo c = null;
       c = FreshInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 是否自动刷新
   */
  public Boolean getIsAuto() {
    if(isAuto==null){
        return DEFAULT_ISAUTO;
    }
    return isAuto;
  }

  /**
   * 刷新的时间间隔
   */
  public Long getInterval() {
    if(interval==null){
        return DEFAULT_INTERVAL;
    }
    return interval;
  }

  /**
   * 是否自动刷新
   */
  public boolean hasIsAuto() {
    return isAuto!=null;
  }

  /**
   * 刷新的时间间隔
   */
  public boolean hasInterval() {
    return interval!=null;
  }

  public static final class Builder extends Message.Builder<FreshInfo, Builder> {
    public Boolean isAuto;

    public Long interval;

    public Builder() {
    }

    /**
     * 是否自动刷新
     */
    public Builder setIsAuto(Boolean isAuto) {
      this.isAuto = isAuto;
      return this;
    }

    /**
     * 刷新的时间间隔
     */
    public Builder setInterval(Long interval) {
      this.interval = interval;
      return this;
    }

    @Override
    public FreshInfo build() {
      return new FreshInfo(isAuto, interval, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_FreshInfo extends ProtoAdapter<FreshInfo> {
    public ProtoAdapter_FreshInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, FreshInfo.class);
    }

    @Override
    public int encodedSize(FreshInfo value) {
      return ProtoAdapter.BOOL.encodedSizeWithTag(1, value.isAuto)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.interval)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, FreshInfo value) throws IOException {
      ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.isAuto);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.interval);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public FreshInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setIsAuto(ProtoAdapter.BOOL.decode(reader)); break;
          case 2: builder.setInterval(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public FreshInfo redact(FreshInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
