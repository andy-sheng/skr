// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class ButtonData extends Message<ButtonData, ButtonData.Builder> {
  public static final ProtoAdapter<ButtonData> ADAPTER = new ProtoAdapter_ButtonData();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_BUTTON_TEXT = "";

  public static final String DEFAULT_BUTTON_URI = "";

  public static final String DEFAULT_IMAGE_URL = "";

  public static final String DEFAULT_TEXT = "";

  public static final String DEFAULT_JUMP_URI = "";

  /**
   * button文案
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String button_text;

  /**
   * 点击button跳转scheme
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String button_uri;

  /**
   * 头图
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String image_url;

  /**
   * 文案
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String text;

  /**
   * 点击封面跳转scheme
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jump_uri;

  public ButtonData(String button_text, String button_uri, String image_url, String text,
      String jump_uri) {
    this(button_text, button_uri, image_url, text, jump_uri, ByteString.EMPTY);
  }

  public ButtonData(String button_text, String button_uri, String image_url, String text,
      String jump_uri, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.button_text = button_text;
    this.button_uri = button_uri;
    this.image_url = image_url;
    this.text = text;
    this.jump_uri = jump_uri;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.button_text = button_text;
    builder.button_uri = button_uri;
    builder.image_url = image_url;
    builder.text = text;
    builder.jump_uri = jump_uri;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ButtonData)) return false;
    ButtonData o = (ButtonData) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(button_text, o.button_text)
        && Internal.equals(button_uri, o.button_uri)
        && Internal.equals(image_url, o.image_url)
        && Internal.equals(text, o.text)
        && Internal.equals(jump_uri, o.jump_uri);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (button_text != null ? button_text.hashCode() : 0);
      result = result * 37 + (button_uri != null ? button_uri.hashCode() : 0);
      result = result * 37 + (image_url != null ? image_url.hashCode() : 0);
      result = result * 37 + (text != null ? text.hashCode() : 0);
      result = result * 37 + (jump_uri != null ? jump_uri.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (button_text != null) builder.append(", button_text=").append(button_text);
    if (button_uri != null) builder.append(", button_uri=").append(button_uri);
    if (image_url != null) builder.append(", image_url=").append(image_url);
    if (text != null) builder.append(", text=").append(text);
    if (jump_uri != null) builder.append(", jump_uri=").append(jump_uri);
    return builder.replace(0, 2, "ButtonData{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ButtonData.ADAPTER.encode(this);
  }

  public static final ButtonData parseFrom(byte[] data) throws IOException {
    ButtonData c = null;
       c = ButtonData.ADAPTER.decode(data);
    return c;
  }

  /**
   * button文案
   */
  public String getButtonText() {
    if(button_text==null){
        return DEFAULT_BUTTON_TEXT;
    }
    return button_text;
  }

  /**
   * 点击button跳转scheme
   */
  public String getButtonUri() {
    if(button_uri==null){
        return DEFAULT_BUTTON_URI;
    }
    return button_uri;
  }

  /**
   * 头图
   */
  public String getImageUrl() {
    if(image_url==null){
        return DEFAULT_IMAGE_URL;
    }
    return image_url;
  }

  /**
   * 文案
   */
  public String getText() {
    if(text==null){
        return DEFAULT_TEXT;
    }
    return text;
  }

  /**
   * 点击封面跳转scheme
   */
  public String getJumpUri() {
    if(jump_uri==null){
        return DEFAULT_JUMP_URI;
    }
    return jump_uri;
  }

  /**
   * button文案
   */
  public boolean hasButtonText() {
    return button_text!=null;
  }

  /**
   * 点击button跳转scheme
   */
  public boolean hasButtonUri() {
    return button_uri!=null;
  }

  /**
   * 头图
   */
  public boolean hasImageUrl() {
    return image_url!=null;
  }

  /**
   * 文案
   */
  public boolean hasText() {
    return text!=null;
  }

  /**
   * 点击封面跳转scheme
   */
  public boolean hasJumpUri() {
    return jump_uri!=null;
  }

  public static final class Builder extends Message.Builder<ButtonData, Builder> {
    public String button_text;

    public String button_uri;

    public String image_url;

    public String text;

    public String jump_uri;

    public Builder() {
    }

    /**
     * button文案
     */
    public Builder setButtonText(String button_text) {
      this.button_text = button_text;
      return this;
    }

    /**
     * 点击button跳转scheme
     */
    public Builder setButtonUri(String button_uri) {
      this.button_uri = button_uri;
      return this;
    }

    /**
     * 头图
     */
    public Builder setImageUrl(String image_url) {
      this.image_url = image_url;
      return this;
    }

    /**
     * 文案
     */
    public Builder setText(String text) {
      this.text = text;
      return this;
    }

    /**
     * 点击封面跳转scheme
     */
    public Builder setJumpUri(String jump_uri) {
      this.jump_uri = jump_uri;
      return this;
    }

    @Override
    public ButtonData build() {
      return new ButtonData(button_text, button_uri, image_url, text, jump_uri, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ButtonData extends ProtoAdapter<ButtonData> {
    public ProtoAdapter_ButtonData() {
      super(FieldEncoding.LENGTH_DELIMITED, ButtonData.class);
    }

    @Override
    public int encodedSize(ButtonData value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.button_text)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.button_uri)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.image_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.text)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.jump_uri)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ButtonData value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.button_text);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.button_uri);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.image_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.text);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.jump_uri);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ButtonData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setButtonText(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setButtonUri(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setImageUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setText(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setJumpUri(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ButtonData redact(ButtonData value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
