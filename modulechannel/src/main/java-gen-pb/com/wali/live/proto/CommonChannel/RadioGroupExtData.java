// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * type=10 电台组信息
 */
public final class RadioGroupExtData extends Message<RadioGroupExtData, RadioGroupExtData.Builder> {
  public static final ProtoAdapter<RadioGroupExtData> ADAPTER = new ProtoAdapter_RadioGroupExtData();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_GROUPCNT = 0;

  /**
   * 乘员信息
   */
  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.CommonChannel.GroupMemberData#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<GroupMemberData> member;

  /**
   * 分组人数
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer groupCnt;

  public RadioGroupExtData(List<GroupMemberData> member, Integer groupCnt) {
    this(member, groupCnt, ByteString.EMPTY);
  }

  public RadioGroupExtData(List<GroupMemberData> member, Integer groupCnt,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.member = Internal.immutableCopyOf("member", member);
    this.groupCnt = groupCnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.member = Internal.copyOf("member", member);
    builder.groupCnt = groupCnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RadioGroupExtData)) return false;
    RadioGroupExtData o = (RadioGroupExtData) other;
    return unknownFields().equals(o.unknownFields())
        && member.equals(o.member)
        && Internal.equals(groupCnt, o.groupCnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + member.hashCode();
      result = result * 37 + (groupCnt != null ? groupCnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!member.isEmpty()) builder.append(", member=").append(member);
    if (groupCnt != null) builder.append(", groupCnt=").append(groupCnt);
    return builder.replace(0, 2, "RadioGroupExtData{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RadioGroupExtData.ADAPTER.encode(this);
  }

  public static final RadioGroupExtData parseFrom(byte[] data) throws IOException {
    RadioGroupExtData c = null;
       c = RadioGroupExtData.ADAPTER.decode(data);
    return c;
  }

  /**
   * 乘员信息
   */
  public List<GroupMemberData> getMemberList() {
    if(member==null){
        return new java.util.ArrayList<GroupMemberData>();
    }
    return member;
  }

  /**
   * 分组人数
   */
  public Integer getGroupCnt() {
    if(groupCnt==null){
        return DEFAULT_GROUPCNT;
    }
    return groupCnt;
  }

  /**
   * 乘员信息
   */
  public boolean hasMemberList() {
    return member!=null;
  }

  /**
   * 分组人数
   */
  public boolean hasGroupCnt() {
    return groupCnt!=null;
  }

  public static final class Builder extends Message.Builder<RadioGroupExtData, Builder> {
    public List<GroupMemberData> member;

    public Integer groupCnt;

    public Builder() {
      member = Internal.newMutableList();
    }

    /**
     * 乘员信息
     */
    public Builder addAllMember(List<GroupMemberData> member) {
      Internal.checkElementsNotNull(member);
      this.member = member;
      return this;
    }

    /**
     * 分组人数
     */
    public Builder setGroupCnt(Integer groupCnt) {
      this.groupCnt = groupCnt;
      return this;
    }

    @Override
    public RadioGroupExtData build() {
      return new RadioGroupExtData(member, groupCnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RadioGroupExtData extends ProtoAdapter<RadioGroupExtData> {
    public ProtoAdapter_RadioGroupExtData() {
      super(FieldEncoding.LENGTH_DELIMITED, RadioGroupExtData.class);
    }

    @Override
    public int encodedSize(RadioGroupExtData value) {
      return GroupMemberData.ADAPTER.asRepeated().encodedSizeWithTag(1, value.member)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.groupCnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RadioGroupExtData value) throws IOException {
      GroupMemberData.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.member);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.groupCnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RadioGroupExtData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.member.add(GroupMemberData.ADAPTER.decode(reader)); break;
          case 2: builder.setGroupCnt(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RadioGroupExtData redact(RadioGroupExtData value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.member, GroupMemberData.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
