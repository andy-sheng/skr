// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonChannel.proto
package com.wali.live.proto.CommonChannel;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class GroupData extends Message<GroupData, GroupData.Builder> {
  public static final ProtoAdapter<GroupData> ADAPTER = new ProtoAdapter_GroupData();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_FRAMEURI = "";

  public static final String DEFAULT_COVERURI = "";

  public static final String DEFAULT_JUMPSCHEMEURI = "";

  public static final Integer DEFAULT_GROUPCNT = 0;

  /**
   * 边框
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String frameUri;

  /**
   * 封面图
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String coverUri;

  /**
   * 点击封面后的跳转
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jumpSchemeUri;

  /**
   * 乘员信息
   */
  @WireField(
      tag = 4,
      adapter = "com.wali.live.proto.CommonChannel.GroupMemberData#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<GroupMemberData> member;

  /**
   * 分组人数
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer groupCnt;

  public GroupData(String frameUri, String coverUri, String jumpSchemeUri,
      List<GroupMemberData> member, Integer groupCnt) {
    this(frameUri, coverUri, jumpSchemeUri, member, groupCnt, ByteString.EMPTY);
  }

  public GroupData(String frameUri, String coverUri, String jumpSchemeUri,
      List<GroupMemberData> member, Integer groupCnt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.frameUri = frameUri;
    this.coverUri = coverUri;
    this.jumpSchemeUri = jumpSchemeUri;
    this.member = Internal.immutableCopyOf("member", member);
    this.groupCnt = groupCnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.frameUri = frameUri;
    builder.coverUri = coverUri;
    builder.jumpSchemeUri = jumpSchemeUri;
    builder.member = Internal.copyOf("member", member);
    builder.groupCnt = groupCnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GroupData)) return false;
    GroupData o = (GroupData) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(frameUri, o.frameUri)
        && Internal.equals(coverUri, o.coverUri)
        && Internal.equals(jumpSchemeUri, o.jumpSchemeUri)
        && member.equals(o.member)
        && Internal.equals(groupCnt, o.groupCnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (frameUri != null ? frameUri.hashCode() : 0);
      result = result * 37 + (coverUri != null ? coverUri.hashCode() : 0);
      result = result * 37 + (jumpSchemeUri != null ? jumpSchemeUri.hashCode() : 0);
      result = result * 37 + member.hashCode();
      result = result * 37 + (groupCnt != null ? groupCnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (frameUri != null) builder.append(", frameUri=").append(frameUri);
    if (coverUri != null) builder.append(", coverUri=").append(coverUri);
    if (jumpSchemeUri != null) builder.append(", jumpSchemeUri=").append(jumpSchemeUri);
    if (!member.isEmpty()) builder.append(", member=").append(member);
    if (groupCnt != null) builder.append(", groupCnt=").append(groupCnt);
    return builder.replace(0, 2, "GroupData{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GroupData.ADAPTER.encode(this);
  }

  public static final GroupData parseFrom(byte[] data) throws IOException {
    GroupData c = null;
       c = GroupData.ADAPTER.decode(data);
    return c;
  }

  /**
   * 边框
   */
  public String getFrameUri() {
    if(frameUri==null){
        return DEFAULT_FRAMEURI;
    }
    return frameUri;
  }

  /**
   * 封面图
   */
  public String getCoverUri() {
    if(coverUri==null){
        return DEFAULT_COVERURI;
    }
    return coverUri;
  }

  /**
   * 点击封面后的跳转
   */
  public String getJumpSchemeUri() {
    if(jumpSchemeUri==null){
        return DEFAULT_JUMPSCHEMEURI;
    }
    return jumpSchemeUri;
  }

  /**
   * 乘员信息
   */
  public List<GroupMemberData> getMemberList() {
    if(member==null){
        return new java.util.ArrayList<GroupMemberData>();
    }
    return member;
  }

  /**
   * 分组人数
   */
  public Integer getGroupCnt() {
    if(groupCnt==null){
        return DEFAULT_GROUPCNT;
    }
    return groupCnt;
  }

  /**
   * 边框
   */
  public boolean hasFrameUri() {
    return frameUri!=null;
  }

  /**
   * 封面图
   */
  public boolean hasCoverUri() {
    return coverUri!=null;
  }

  /**
   * 点击封面后的跳转
   */
  public boolean hasJumpSchemeUri() {
    return jumpSchemeUri!=null;
  }

  /**
   * 乘员信息
   */
  public boolean hasMemberList() {
    return member!=null;
  }

  /**
   * 分组人数
   */
  public boolean hasGroupCnt() {
    return groupCnt!=null;
  }

  public static final class Builder extends Message.Builder<GroupData, Builder> {
    public String frameUri;

    public String coverUri;

    public String jumpSchemeUri;

    public List<GroupMemberData> member;

    public Integer groupCnt;

    public Builder() {
      member = Internal.newMutableList();
    }

    /**
     * 边框
     */
    public Builder setFrameUri(String frameUri) {
      this.frameUri = frameUri;
      return this;
    }

    /**
     * 封面图
     */
    public Builder setCoverUri(String coverUri) {
      this.coverUri = coverUri;
      return this;
    }

    /**
     * 点击封面后的跳转
     */
    public Builder setJumpSchemeUri(String jumpSchemeUri) {
      this.jumpSchemeUri = jumpSchemeUri;
      return this;
    }

    /**
     * 乘员信息
     */
    public Builder addAllMember(List<GroupMemberData> member) {
      Internal.checkElementsNotNull(member);
      this.member = member;
      return this;
    }

    /**
     * 分组人数
     */
    public Builder setGroupCnt(Integer groupCnt) {
      this.groupCnt = groupCnt;
      return this;
    }

    @Override
    public GroupData build() {
      return new GroupData(frameUri, coverUri, jumpSchemeUri, member, groupCnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GroupData extends ProtoAdapter<GroupData> {
    public ProtoAdapter_GroupData() {
      super(FieldEncoding.LENGTH_DELIMITED, GroupData.class);
    }

    @Override
    public int encodedSize(GroupData value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.frameUri)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.coverUri)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.jumpSchemeUri)
          + GroupMemberData.ADAPTER.asRepeated().encodedSizeWithTag(4, value.member)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.groupCnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GroupData value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.frameUri);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.coverUri);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.jumpSchemeUri);
      GroupMemberData.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.member);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.groupCnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GroupData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setFrameUri(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setCoverUri(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setJumpSchemeUri(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.member.add(GroupMemberData.ADAPTER.decode(reader)); break;
          case 5: builder.setGroupCnt(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GroupData redact(GroupData value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.member, GroupMemberData.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
