// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Common.proto
package com.wali.live.proto.Common;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 只有err_code == 0 , 并且has_update == true才需要更新，其他情况不更新
 * 当err_code == 0 && has_update == true
 *   如果设置了addtionalUrl 使用差分包升级，
 *   否则使用全量包
 */
public final class GetUpgradeInfoRsp extends Message<GetUpgradeInfoRsp, GetUpgradeInfoRsp.Builder> {
  public static final ProtoAdapter<GetUpgradeInfoRsp> ADAPTER = new ProtoAdapter_GetUpgradeInfoRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ERR_CODE = 0;

  public static final String DEFAULT_ERR_MSG = "";

  public static final Boolean DEFAULT_HASUPDATE = false;

  public static final Integer DEFAULT_TOVERSION = 0;

  public static final String DEFAULT_APKURL = "";

  public static final String DEFAULT_REMARK = "";

  public static final String DEFAULT_ADDITIONALURL = "";

  public static final String DEFAULT_ADDITIONALSIZE = "";

  public static final Integer DEFAULT_FULLSIZE = 0;

  public static final String DEFAULT_FULLHASH = "";

  public static final Boolean DEFAULT_FORCED = false;

  public static final String DEFAULT_ADDITIONALMD5 = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer err_code;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String err_msg;

  /**
   * 是否有升级
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean hasUpdate;

  /**
   * 目标版本号
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer toVersion;

  /**
   * 完整apk下载地址
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String apkUrl;

  /**
   * 修复了几个bug 升级文案
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String remark;

  /**
   * 差分包下载地址，没有就走全量升级
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String additionalUrl;

  /**
   * 差分包大小
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String additionalSize;

  /**
   * 完整apk大小，供展示用
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer fullSize;

  /**
   * 完整apk的md5值
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String fullHash;

  /**
   * 是否是强制升级
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean forced;

  /**
   * 增量包的md5
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String additionalMd5;

  public GetUpgradeInfoRsp(Integer err_code, String err_msg, Boolean hasUpdate, Integer toVersion,
      String apkUrl, String remark, String additionalUrl, String additionalSize, Integer fullSize,
      String fullHash, Boolean forced, String additionalMd5) {
    this(err_code, err_msg, hasUpdate, toVersion, apkUrl, remark, additionalUrl, additionalSize, fullSize, fullHash, forced, additionalMd5, ByteString.EMPTY);
  }

  public GetUpgradeInfoRsp(Integer err_code, String err_msg, Boolean hasUpdate, Integer toVersion,
      String apkUrl, String remark, String additionalUrl, String additionalSize, Integer fullSize,
      String fullHash, Boolean forced, String additionalMd5, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.err_code = err_code;
    this.err_msg = err_msg;
    this.hasUpdate = hasUpdate;
    this.toVersion = toVersion;
    this.apkUrl = apkUrl;
    this.remark = remark;
    this.additionalUrl = additionalUrl;
    this.additionalSize = additionalSize;
    this.fullSize = fullSize;
    this.fullHash = fullHash;
    this.forced = forced;
    this.additionalMd5 = additionalMd5;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.err_code = err_code;
    builder.err_msg = err_msg;
    builder.hasUpdate = hasUpdate;
    builder.toVersion = toVersion;
    builder.apkUrl = apkUrl;
    builder.remark = remark;
    builder.additionalUrl = additionalUrl;
    builder.additionalSize = additionalSize;
    builder.fullSize = fullSize;
    builder.fullHash = fullHash;
    builder.forced = forced;
    builder.additionalMd5 = additionalMd5;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetUpgradeInfoRsp)) return false;
    GetUpgradeInfoRsp o = (GetUpgradeInfoRsp) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(err_code, o.err_code)
        && Internal.equals(err_msg, o.err_msg)
        && Internal.equals(hasUpdate, o.hasUpdate)
        && Internal.equals(toVersion, o.toVersion)
        && Internal.equals(apkUrl, o.apkUrl)
        && Internal.equals(remark, o.remark)
        && Internal.equals(additionalUrl, o.additionalUrl)
        && Internal.equals(additionalSize, o.additionalSize)
        && Internal.equals(fullSize, o.fullSize)
        && Internal.equals(fullHash, o.fullHash)
        && Internal.equals(forced, o.forced)
        && Internal.equals(additionalMd5, o.additionalMd5);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (err_code != null ? err_code.hashCode() : 0);
      result = result * 37 + (err_msg != null ? err_msg.hashCode() : 0);
      result = result * 37 + (hasUpdate != null ? hasUpdate.hashCode() : 0);
      result = result * 37 + (toVersion != null ? toVersion.hashCode() : 0);
      result = result * 37 + (apkUrl != null ? apkUrl.hashCode() : 0);
      result = result * 37 + (remark != null ? remark.hashCode() : 0);
      result = result * 37 + (additionalUrl != null ? additionalUrl.hashCode() : 0);
      result = result * 37 + (additionalSize != null ? additionalSize.hashCode() : 0);
      result = result * 37 + (fullSize != null ? fullSize.hashCode() : 0);
      result = result * 37 + (fullHash != null ? fullHash.hashCode() : 0);
      result = result * 37 + (forced != null ? forced.hashCode() : 0);
      result = result * 37 + (additionalMd5 != null ? additionalMd5.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (err_code != null) builder.append(", err_code=").append(err_code);
    if (err_msg != null) builder.append(", err_msg=").append(err_msg);
    if (hasUpdate != null) builder.append(", hasUpdate=").append(hasUpdate);
    if (toVersion != null) builder.append(", toVersion=").append(toVersion);
    if (apkUrl != null) builder.append(", apkUrl=").append(apkUrl);
    if (remark != null) builder.append(", remark=").append(remark);
    if (additionalUrl != null) builder.append(", additionalUrl=").append(additionalUrl);
    if (additionalSize != null) builder.append(", additionalSize=").append(additionalSize);
    if (fullSize != null) builder.append(", fullSize=").append(fullSize);
    if (fullHash != null) builder.append(", fullHash=").append(fullHash);
    if (forced != null) builder.append(", forced=").append(forced);
    if (additionalMd5 != null) builder.append(", additionalMd5=").append(additionalMd5);
    return builder.replace(0, 2, "GetUpgradeInfoRsp{").append('}').toString();
  }

  public static final GetUpgradeInfoRsp parseFrom(byte[] data) throws IOException {
    GetUpgradeInfoRsp c = null;
       c = GetUpgradeInfoRsp.ADAPTER.decode(data);
    return c;
  }

  public Integer getErrCode() {
    if(err_code==null){
        return DEFAULT_ERR_CODE;
    }
    return err_code;
  }

  public String getErrMsg() {
    if(err_msg==null){
        return DEFAULT_ERR_MSG;
    }
    return err_msg;
  }

  /**
   * 是否有升级
   */
  public Boolean getHasUpdate() {
    if(hasUpdate==null){
        return DEFAULT_HASUPDATE;
    }
    return hasUpdate;
  }

  /**
   * 目标版本号
   */
  public Integer getToVersion() {
    if(toVersion==null){
        return DEFAULT_TOVERSION;
    }
    return toVersion;
  }

  /**
   * 完整apk下载地址
   */
  public String getApkUrl() {
    if(apkUrl==null){
        return DEFAULT_APKURL;
    }
    return apkUrl;
  }

  /**
   * 修复了几个bug 升级文案
   */
  public String getRemark() {
    if(remark==null){
        return DEFAULT_REMARK;
    }
    return remark;
  }

  /**
   * 差分包下载地址，没有就走全量升级
   */
  public String getAdditionalUrl() {
    if(additionalUrl==null){
        return DEFAULT_ADDITIONALURL;
    }
    return additionalUrl;
  }

  /**
   * 差分包大小
   */
  public String getAdditionalSize() {
    if(additionalSize==null){
        return DEFAULT_ADDITIONALSIZE;
    }
    return additionalSize;
  }

  /**
   * 完整apk大小，供展示用
   */
  public Integer getFullSize() {
    if(fullSize==null){
        return DEFAULT_FULLSIZE;
    }
    return fullSize;
  }

  /**
   * 完整apk的md5值
   */
  public String getFullHash() {
    if(fullHash==null){
        return DEFAULT_FULLHASH;
    }
    return fullHash;
  }

  /**
   * 是否是强制升级
   */
  public Boolean getForced() {
    if(forced==null){
        return DEFAULT_FORCED;
    }
    return forced;
  }

  /**
   * 增量包的md5
   */
  public String getAdditionalMd5() {
    if(additionalMd5==null){
        return DEFAULT_ADDITIONALMD5;
    }
    return additionalMd5;
  }

  public boolean hasErrCode() {
    return err_code!=null;
  }

  public boolean hasErrMsg() {
    return err_msg!=null;
  }

  /**
   * 是否有升级
   */
  public boolean hasHasUpdate() {
    return hasUpdate!=null;
  }

  /**
   * 目标版本号
   */
  public boolean hasToVersion() {
    return toVersion!=null;
  }

  /**
   * 完整apk下载地址
   */
  public boolean hasApkUrl() {
    return apkUrl!=null;
  }

  /**
   * 修复了几个bug 升级文案
   */
  public boolean hasRemark() {
    return remark!=null;
  }

  /**
   * 差分包下载地址，没有就走全量升级
   */
  public boolean hasAdditionalUrl() {
    return additionalUrl!=null;
  }

  /**
   * 差分包大小
   */
  public boolean hasAdditionalSize() {
    return additionalSize!=null;
  }

  /**
   * 完整apk大小，供展示用
   */
  public boolean hasFullSize() {
    return fullSize!=null;
  }

  /**
   * 完整apk的md5值
   */
  public boolean hasFullHash() {
    return fullHash!=null;
  }

  /**
   * 是否是强制升级
   */
  public boolean hasForced() {
    return forced!=null;
  }

  /**
   * 增量包的md5
   */
  public boolean hasAdditionalMd5() {
    return additionalMd5!=null;
  }

  public static final class Builder extends Message.Builder<GetUpgradeInfoRsp, Builder> {
    public Integer err_code;

    public String err_msg;

    public Boolean hasUpdate;

    public Integer toVersion;

    public String apkUrl;

    public String remark;

    public String additionalUrl;

    public String additionalSize;

    public Integer fullSize;

    public String fullHash;

    public Boolean forced;

    public String additionalMd5;

    public Builder() {
    }

    public Builder setErrCode(Integer err_code) {
      this.err_code = err_code;
      return this;
    }

    public Builder setErrMsg(String err_msg) {
      this.err_msg = err_msg;
      return this;
    }

    /**
     * 是否有升级
     */
    public Builder setHasUpdate(Boolean hasUpdate) {
      this.hasUpdate = hasUpdate;
      return this;
    }

    /**
     * 目标版本号
     */
    public Builder setToVersion(Integer toVersion) {
      this.toVersion = toVersion;
      return this;
    }

    /**
     * 完整apk下载地址
     */
    public Builder setApkUrl(String apkUrl) {
      this.apkUrl = apkUrl;
      return this;
    }

    /**
     * 修复了几个bug 升级文案
     */
    public Builder setRemark(String remark) {
      this.remark = remark;
      return this;
    }

    /**
     * 差分包下载地址，没有就走全量升级
     */
    public Builder setAdditionalUrl(String additionalUrl) {
      this.additionalUrl = additionalUrl;
      return this;
    }

    /**
     * 差分包大小
     */
    public Builder setAdditionalSize(String additionalSize) {
      this.additionalSize = additionalSize;
      return this;
    }

    /**
     * 完整apk大小，供展示用
     */
    public Builder setFullSize(Integer fullSize) {
      this.fullSize = fullSize;
      return this;
    }

    /**
     * 完整apk的md5值
     */
    public Builder setFullHash(String fullHash) {
      this.fullHash = fullHash;
      return this;
    }

    /**
     * 是否是强制升级
     */
    public Builder setForced(Boolean forced) {
      this.forced = forced;
      return this;
    }

    /**
     * 增量包的md5
     */
    public Builder setAdditionalMd5(String additionalMd5) {
      this.additionalMd5 = additionalMd5;
      return this;
    }

    @Override
    public GetUpgradeInfoRsp build() {
      return new GetUpgradeInfoRsp(err_code, err_msg, hasUpdate, toVersion, apkUrl, remark, additionalUrl, additionalSize, fullSize, fullHash, forced, additionalMd5, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetUpgradeInfoRsp extends ProtoAdapter<GetUpgradeInfoRsp> {
    public ProtoAdapter_GetUpgradeInfoRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetUpgradeInfoRsp.class);
    }

    @Override
    public int encodedSize(GetUpgradeInfoRsp value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.err_code)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.err_msg)
          + ProtoAdapter.BOOL.encodedSizeWithTag(3, value.hasUpdate)
          + ProtoAdapter.INT32.encodedSizeWithTag(4, value.toVersion)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.apkUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.remark)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.additionalUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(8, value.additionalSize)
          + ProtoAdapter.INT32.encodedSizeWithTag(9, value.fullSize)
          + ProtoAdapter.STRING.encodedSizeWithTag(10, value.fullHash)
          + ProtoAdapter.BOOL.encodedSizeWithTag(11, value.forced)
          + ProtoAdapter.STRING.encodedSizeWithTag(12, value.additionalMd5)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetUpgradeInfoRsp value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.err_code);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.err_msg);
      ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.hasUpdate);
      ProtoAdapter.INT32.encodeWithTag(writer, 4, value.toVersion);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.apkUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.remark);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.additionalUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 8, value.additionalSize);
      ProtoAdapter.INT32.encodeWithTag(writer, 9, value.fullSize);
      ProtoAdapter.STRING.encodeWithTag(writer, 10, value.fullHash);
      ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.forced);
      ProtoAdapter.STRING.encodeWithTag(writer, 12, value.additionalMd5);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetUpgradeInfoRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setErrCode(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.setErrMsg(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setHasUpdate(ProtoAdapter.BOOL.decode(reader)); break;
          case 4: builder.setToVersion(ProtoAdapter.INT32.decode(reader)); break;
          case 5: builder.setApkUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setRemark(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setAdditionalUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setAdditionalSize(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.setFullSize(ProtoAdapter.INT32.decode(reader)); break;
          case 10: builder.setFullHash(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.setForced(ProtoAdapter.BOOL.decode(reader)); break;
          case 12: builder.setAdditionalMd5(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetUpgradeInfoRsp redact(GetUpgradeInfoRsp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
