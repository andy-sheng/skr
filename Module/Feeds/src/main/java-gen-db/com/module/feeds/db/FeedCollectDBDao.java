package com.module.feeds.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.module.feeds.watch.manager.FeedCollectDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FEED_COLLECT_DB".
*/
public class FeedCollectDBDao extends AbstractDao<FeedCollectDB, Integer> {

    public static final String TABLENAME = "FEED_COLLECT_DB";

    /**
     * Properties of entity FeedCollectDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FeedID = new Property(0, Integer.class, "feedID", true, "FEED_ID");
        public final static Property FeedType = new Property(1, Integer.class, "feedType", false, "FEED_TYPE");
        public final static Property FeedSong = new Property(2, String.class, "feedSong", false, "FEED_SONG");
        public final static Property User = new Property(3, String.class, "user", false, "USER");
    }


    public FeedCollectDBDao(DaoConfig config) {
        super(config);
    }
    
    public FeedCollectDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FEED_COLLECT_DB\" (" + //
                "\"FEED_ID\" INTEGER PRIMARY KEY ," + // 0: feedID
                "\"FEED_TYPE\" INTEGER," + // 1: feedType
                "\"FEED_SONG\" TEXT," + // 2: feedSong
                "\"USER\" TEXT);"); // 3: user
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FEED_COLLECT_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FeedCollectDB entity) {
        stmt.clearBindings();
 
        Integer feedID = entity.getFeedID();
        if (feedID != null) {
            stmt.bindLong(1, feedID);
        }
 
        Integer feedType = entity.getFeedType();
        if (feedType != null) {
            stmt.bindLong(2, feedType);
        }
 
        String feedSong = entity.getFeedSong();
        if (feedSong != null) {
            stmt.bindString(3, feedSong);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(4, user);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FeedCollectDB entity) {
        stmt.clearBindings();
 
        Integer feedID = entity.getFeedID();
        if (feedID != null) {
            stmt.bindLong(1, feedID);
        }
 
        Integer feedType = entity.getFeedType();
        if (feedType != null) {
            stmt.bindLong(2, feedType);
        }
 
        String feedSong = entity.getFeedSong();
        if (feedSong != null) {
            stmt.bindString(3, feedSong);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(4, user);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public FeedCollectDB readEntity(Cursor cursor, int offset) {
        FeedCollectDB entity = new FeedCollectDB( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // feedID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // feedType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // feedSong
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // user
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FeedCollectDB entity, int offset) {
        entity.setFeedID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setFeedType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFeedSong(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(FeedCollectDB entity, long rowId) {
        return entity.getFeedID();
    }
    
    @Override
    public Integer getKey(FeedCollectDB entity) {
        if(entity != null) {
            return entity.getFeedID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FeedCollectDB entity) {
        return entity.getFeedID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
