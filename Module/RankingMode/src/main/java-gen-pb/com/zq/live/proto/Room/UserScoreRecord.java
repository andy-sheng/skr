// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 用户分值变动记录
 */
public final class UserScoreRecord extends Message<UserScoreRecord, UserScoreRecord.Builder> {
  public static final ProtoAdapter<UserScoreRecord> ADAPTER = new ProtoAdapter_UserScoreRecord();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final EScoreType DEFAULT_SCORETYPE = EScoreType.ST_UNKNOWN;

  public static final Integer DEFAULT_SCORENOW = 0;

  public static final Integer DEFAULT_SCOREBEFORE = 0;

  public static final String DEFAULT_SCORETYPEDESC = "";

  public static final String DEFAULT_SCORENOWDESC = "";

  public static final String DEFAULT_SCOREBEFOREDESC = "";

  /**
   * 用户标识
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer userID;

  /**
   * 分值类型
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.Room.EScoreType#ADAPTER"
  )
  public final EScoreType scoreType;

  /**
   * 当前总分
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer scoreNow;

  /**
   * 之前总分
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer scoreBefore;

  /**
   * 分值变动详情
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Room.ScoreItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ScoreItem> items;

  /**
   * 分值类型描述
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String scoreTypeDesc;

  /**
   * 当前分值描述
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String scoreNowDesc;

  /**
   * 之前分支描述
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String scoreBeforeDesc;

  public UserScoreRecord(Integer userID, EScoreType scoreType, Integer scoreNow,
      Integer scoreBefore, List<ScoreItem> items, String scoreTypeDesc, String scoreNowDesc,
      String scoreBeforeDesc) {
    this(userID, scoreType, scoreNow, scoreBefore, items, scoreTypeDesc, scoreNowDesc, scoreBeforeDesc, ByteString.EMPTY);
  }

  public UserScoreRecord(Integer userID, EScoreType scoreType, Integer scoreNow,
      Integer scoreBefore, List<ScoreItem> items, String scoreTypeDesc, String scoreNowDesc,
      String scoreBeforeDesc, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.scoreType = scoreType;
    this.scoreNow = scoreNow;
    this.scoreBefore = scoreBefore;
    this.items = Internal.immutableCopyOf("items", items);
    this.scoreTypeDesc = scoreTypeDesc;
    this.scoreNowDesc = scoreNowDesc;
    this.scoreBeforeDesc = scoreBeforeDesc;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.scoreType = scoreType;
    builder.scoreNow = scoreNow;
    builder.scoreBefore = scoreBefore;
    builder.items = Internal.copyOf("items", items);
    builder.scoreTypeDesc = scoreTypeDesc;
    builder.scoreNowDesc = scoreNowDesc;
    builder.scoreBeforeDesc = scoreBeforeDesc;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UserScoreRecord)) return false;
    UserScoreRecord o = (UserScoreRecord) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(scoreType, o.scoreType)
        && Internal.equals(scoreNow, o.scoreNow)
        && Internal.equals(scoreBefore, o.scoreBefore)
        && items.equals(o.items)
        && Internal.equals(scoreTypeDesc, o.scoreTypeDesc)
        && Internal.equals(scoreNowDesc, o.scoreNowDesc)
        && Internal.equals(scoreBeforeDesc, o.scoreBeforeDesc);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (scoreType != null ? scoreType.hashCode() : 0);
      result = result * 37 + (scoreNow != null ? scoreNow.hashCode() : 0);
      result = result * 37 + (scoreBefore != null ? scoreBefore.hashCode() : 0);
      result = result * 37 + items.hashCode();
      result = result * 37 + (scoreTypeDesc != null ? scoreTypeDesc.hashCode() : 0);
      result = result * 37 + (scoreNowDesc != null ? scoreNowDesc.hashCode() : 0);
      result = result * 37 + (scoreBeforeDesc != null ? scoreBeforeDesc.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (scoreType != null) builder.append(", scoreType=").append(scoreType);
    if (scoreNow != null) builder.append(", scoreNow=").append(scoreNow);
    if (scoreBefore != null) builder.append(", scoreBefore=").append(scoreBefore);
    if (!items.isEmpty()) builder.append(", items=").append(items);
    if (scoreTypeDesc != null) builder.append(", scoreTypeDesc=").append(scoreTypeDesc);
    if (scoreNowDesc != null) builder.append(", scoreNowDesc=").append(scoreNowDesc);
    if (scoreBeforeDesc != null) builder.append(", scoreBeforeDesc=").append(scoreBeforeDesc);
    return builder.replace(0, 2, "UserScoreRecord{").append('}').toString();
  }

  public byte[] toByteArray() {
    return UserScoreRecord.ADAPTER.encode(this);
  }

  public static final UserScoreRecord parseFrom(byte[] data) throws IOException {
    UserScoreRecord c = null;
       c = UserScoreRecord.ADAPTER.decode(data);
    return c;
  }

  /**
   * 用户标识
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 分值类型
   */
  public EScoreType getScoreType() {
    if(scoreType==null){
        return new EScoreType.Builder().build();
    }
    return scoreType;
  }

  /**
   * 当前总分
   */
  public Integer getScoreNow() {
    if(scoreNow==null){
        return DEFAULT_SCORENOW;
    }
    return scoreNow;
  }

  /**
   * 之前总分
   */
  public Integer getScoreBefore() {
    if(scoreBefore==null){
        return DEFAULT_SCOREBEFORE;
    }
    return scoreBefore;
  }

  /**
   * 分值变动详情
   */
  public List<ScoreItem> getItemsList() {
    if(items==null){
        return new java.util.ArrayList<ScoreItem>();
    }
    return items;
  }

  /**
   * 分值类型描述
   */
  public String getScoreTypeDesc() {
    if(scoreTypeDesc==null){
        return DEFAULT_SCORETYPEDESC;
    }
    return scoreTypeDesc;
  }

  /**
   * 当前分值描述
   */
  public String getScoreNowDesc() {
    if(scoreNowDesc==null){
        return DEFAULT_SCORENOWDESC;
    }
    return scoreNowDesc;
  }

  /**
   * 之前分支描述
   */
  public String getScoreBeforeDesc() {
    if(scoreBeforeDesc==null){
        return DEFAULT_SCOREBEFOREDESC;
    }
    return scoreBeforeDesc;
  }

  /**
   * 用户标识
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 分值类型
   */
  public boolean hasScoreType() {
    return scoreType!=null;
  }

  /**
   * 当前总分
   */
  public boolean hasScoreNow() {
    return scoreNow!=null;
  }

  /**
   * 之前总分
   */
  public boolean hasScoreBefore() {
    return scoreBefore!=null;
  }

  /**
   * 分值变动详情
   */
  public boolean hasItemsList() {
    return items!=null;
  }

  /**
   * 分值类型描述
   */
  public boolean hasScoreTypeDesc() {
    return scoreTypeDesc!=null;
  }

  /**
   * 当前分值描述
   */
  public boolean hasScoreNowDesc() {
    return scoreNowDesc!=null;
  }

  /**
   * 之前分支描述
   */
  public boolean hasScoreBeforeDesc() {
    return scoreBeforeDesc!=null;
  }

  public static final class Builder extends Message.Builder<UserScoreRecord, Builder> {
    public Integer userID;

    public EScoreType scoreType;

    public Integer scoreNow;

    public Integer scoreBefore;

    public List<ScoreItem> items;

    public String scoreTypeDesc;

    public String scoreNowDesc;

    public String scoreBeforeDesc;

    public Builder() {
      items = Internal.newMutableList();
    }

    /**
     * 用户标识
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 分值类型
     */
    public Builder setScoreType(EScoreType scoreType) {
      this.scoreType = scoreType;
      return this;
    }

    /**
     * 当前总分
     */
    public Builder setScoreNow(Integer scoreNow) {
      this.scoreNow = scoreNow;
      return this;
    }

    /**
     * 之前总分
     */
    public Builder setScoreBefore(Integer scoreBefore) {
      this.scoreBefore = scoreBefore;
      return this;
    }

    /**
     * 分值变动详情
     */
    public Builder addAllItems(List<ScoreItem> items) {
      Internal.checkElementsNotNull(items);
      this.items = items;
      return this;
    }

    /**
     * 分值类型描述
     */
    public Builder setScoreTypeDesc(String scoreTypeDesc) {
      this.scoreTypeDesc = scoreTypeDesc;
      return this;
    }

    /**
     * 当前分值描述
     */
    public Builder setScoreNowDesc(String scoreNowDesc) {
      this.scoreNowDesc = scoreNowDesc;
      return this;
    }

    /**
     * 之前分支描述
     */
    public Builder setScoreBeforeDesc(String scoreBeforeDesc) {
      this.scoreBeforeDesc = scoreBeforeDesc;
      return this;
    }

    @Override
    public UserScoreRecord build() {
      return new UserScoreRecord(userID, scoreType, scoreNow, scoreBefore, items, scoreTypeDesc, scoreNowDesc, scoreBeforeDesc, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UserScoreRecord extends ProtoAdapter<UserScoreRecord> {
    public ProtoAdapter_UserScoreRecord() {
      super(FieldEncoding.LENGTH_DELIMITED, UserScoreRecord.class);
    }

    @Override
    public int encodedSize(UserScoreRecord value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + EScoreType.ADAPTER.encodedSizeWithTag(2, value.scoreType)
          + ProtoAdapter.INT32.encodedSizeWithTag(3, value.scoreNow)
          + ProtoAdapter.INT32.encodedSizeWithTag(4, value.scoreBefore)
          + ScoreItem.ADAPTER.asRepeated().encodedSizeWithTag(5, value.items)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.scoreTypeDesc)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.scoreNowDesc)
          + ProtoAdapter.STRING.encodedSizeWithTag(8, value.scoreBeforeDesc)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UserScoreRecord value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      EScoreType.ADAPTER.encodeWithTag(writer, 2, value.scoreType);
      ProtoAdapter.INT32.encodeWithTag(writer, 3, value.scoreNow);
      ProtoAdapter.INT32.encodeWithTag(writer, 4, value.scoreBefore);
      ScoreItem.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.items);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.scoreTypeDesc);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.scoreNowDesc);
      ProtoAdapter.STRING.encodeWithTag(writer, 8, value.scoreBeforeDesc);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UserScoreRecord decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: {
            try {
              builder.setScoreType(EScoreType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setScoreNow(ProtoAdapter.INT32.decode(reader)); break;
          case 4: builder.setScoreBefore(ProtoAdapter.INT32.decode(reader)); break;
          case 5: builder.items.add(ScoreItem.ADAPTER.decode(reader)); break;
          case 6: builder.setScoreTypeDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setScoreNowDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setScoreBeforeDesc(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UserScoreRecord redact(UserScoreRecord value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.items, ScoreItem.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
