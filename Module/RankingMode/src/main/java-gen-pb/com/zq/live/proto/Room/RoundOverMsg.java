// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 游戏轮次结束通知消息
 */
public final class RoundOverMsg extends Message<RoundOverMsg, RoundOverMsg.Builder> {
  public static final ProtoAdapter<RoundOverMsg> ADAPTER = new ProtoAdapter_RoundOverMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ROUNDOVERTIMEMS = 0L;

  public static final Integer DEFAULT_NEXTROUNDSEQ = 0;

  public static final Integer DEFAULT_NEXTUSERID = 0;

  public static final Integer DEFAULT_NEXTMUSICID = 0;

  /**
   * 轮次结束的毫秒时间戳
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  public final Long roundOverTimeMs;

  /**
   * 下一轮顺序
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer nextRoundSeq;

  /**
   * 下一个用户ID
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer nextUserID;

  /**
   * 下一首歌曲ID
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer nextMusicID;

  public RoundOverMsg(Long roundOverTimeMs, Integer nextRoundSeq, Integer nextUserID,
      Integer nextMusicID) {
    this(roundOverTimeMs, nextRoundSeq, nextUserID, nextMusicID, ByteString.EMPTY);
  }

  public RoundOverMsg(Long roundOverTimeMs, Integer nextRoundSeq, Integer nextUserID,
      Integer nextMusicID, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roundOverTimeMs = roundOverTimeMs;
    this.nextRoundSeq = nextRoundSeq;
    this.nextUserID = nextUserID;
    this.nextMusicID = nextMusicID;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roundOverTimeMs = roundOverTimeMs;
    builder.nextRoundSeq = nextRoundSeq;
    builder.nextUserID = nextUserID;
    builder.nextMusicID = nextMusicID;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RoundOverMsg)) return false;
    RoundOverMsg o = (RoundOverMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roundOverTimeMs, o.roundOverTimeMs)
        && Internal.equals(nextRoundSeq, o.nextRoundSeq)
        && Internal.equals(nextUserID, o.nextUserID)
        && Internal.equals(nextMusicID, o.nextMusicID);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roundOverTimeMs != null ? roundOverTimeMs.hashCode() : 0);
      result = result * 37 + (nextRoundSeq != null ? nextRoundSeq.hashCode() : 0);
      result = result * 37 + (nextUserID != null ? nextUserID.hashCode() : 0);
      result = result * 37 + (nextMusicID != null ? nextMusicID.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roundOverTimeMs != null) builder.append(", roundOverTimeMs=").append(roundOverTimeMs);
    if (nextRoundSeq != null) builder.append(", nextRoundSeq=").append(nextRoundSeq);
    if (nextUserID != null) builder.append(", nextUserID=").append(nextUserID);
    if (nextMusicID != null) builder.append(", nextMusicID=").append(nextMusicID);
    return builder.replace(0, 2, "RoundOverMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RoundOverMsg.ADAPTER.encode(this);
  }

  public static final RoundOverMsg parseFrom(byte[] data) throws IOException {
    RoundOverMsg c = null;
       c = RoundOverMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 轮次结束的毫秒时间戳
   */
  public Long getRoundOverTimeMs() {
    if(roundOverTimeMs==null){
        return DEFAULT_ROUNDOVERTIMEMS;
    }
    return roundOverTimeMs;
  }

  /**
   * 下一轮顺序
   */
  public Integer getNextRoundSeq() {
    if(nextRoundSeq==null){
        return DEFAULT_NEXTROUNDSEQ;
    }
    return nextRoundSeq;
  }

  /**
   * 下一个用户ID
   */
  public Integer getNextUserID() {
    if(nextUserID==null){
        return DEFAULT_NEXTUSERID;
    }
    return nextUserID;
  }

  /**
   * 下一首歌曲ID
   */
  public Integer getNextMusicID() {
    if(nextMusicID==null){
        return DEFAULT_NEXTMUSICID;
    }
    return nextMusicID;
  }

  /**
   * 轮次结束的毫秒时间戳
   */
  public boolean hasRoundOverTimeMs() {
    return roundOverTimeMs!=null;
  }

  /**
   * 下一轮顺序
   */
  public boolean hasNextRoundSeq() {
    return nextRoundSeq!=null;
  }

  /**
   * 下一个用户ID
   */
  public boolean hasNextUserID() {
    return nextUserID!=null;
  }

  /**
   * 下一首歌曲ID
   */
  public boolean hasNextMusicID() {
    return nextMusicID!=null;
  }

  public static final class Builder extends Message.Builder<RoundOverMsg, Builder> {
    public Long roundOverTimeMs;

    public Integer nextRoundSeq;

    public Integer nextUserID;

    public Integer nextMusicID;

    public Builder() {
    }

    /**
     * 轮次结束的毫秒时间戳
     */
    public Builder setRoundOverTimeMs(Long roundOverTimeMs) {
      this.roundOverTimeMs = roundOverTimeMs;
      return this;
    }

    /**
     * 下一轮顺序
     */
    public Builder setNextRoundSeq(Integer nextRoundSeq) {
      this.nextRoundSeq = nextRoundSeq;
      return this;
    }

    /**
     * 下一个用户ID
     */
    public Builder setNextUserID(Integer nextUserID) {
      this.nextUserID = nextUserID;
      return this;
    }

    /**
     * 下一首歌曲ID
     */
    public Builder setNextMusicID(Integer nextMusicID) {
      this.nextMusicID = nextMusicID;
      return this;
    }

    @Override
    public RoundOverMsg build() {
      return new RoundOverMsg(roundOverTimeMs, nextRoundSeq, nextUserID, nextMusicID, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RoundOverMsg extends ProtoAdapter<RoundOverMsg> {
    public ProtoAdapter_RoundOverMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, RoundOverMsg.class);
    }

    @Override
    public int encodedSize(RoundOverMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.roundOverTimeMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.nextRoundSeq)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.nextUserID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.nextMusicID)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RoundOverMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.roundOverTimeMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.nextRoundSeq);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.nextUserID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.nextMusicID);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RoundOverMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoundOverTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: builder.setNextRoundSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setNextUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setNextMusicID(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RoundOverMsg redact(RoundOverMsg value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
