// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 轮次和游戏结束通知消息
 */
public final class RoundAndGameOverMsg extends Message<RoundAndGameOverMsg, RoundAndGameOverMsg.Builder> {
  public static final ProtoAdapter<RoundAndGameOverMsg> ADAPTER = new ProtoAdapter_RoundAndGameOverMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ROUNDOVERTIMEMS = 0L;

  public static final Integer DEFAULT_EXITUSERID = 0;

  /**
   * 轮次结束的毫秒时间戳
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  public final Long roundOverTimeMs;

  /**
   * 当前轮次信息
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.Room.RoundInfo#ADAPTER"
  )
  public final RoundInfo currentRound;

  /**
   * 退出用户的ID
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer exitUserID;

  /**
   * 投票打分信息
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.Room.VoteInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<VoteInfo> voteInfo;

  /**
   * 分值信息
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Room.UserScoreRecord#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<UserScoreRecord> userScoreRecord;

  public RoundAndGameOverMsg(Long roundOverTimeMs, RoundInfo currentRound, Integer exitUserID,
      List<VoteInfo> voteInfo, List<UserScoreRecord> userScoreRecord) {
    this(roundOverTimeMs, currentRound, exitUserID, voteInfo, userScoreRecord, ByteString.EMPTY);
  }

  public RoundAndGameOverMsg(Long roundOverTimeMs, RoundInfo currentRound, Integer exitUserID,
      List<VoteInfo> voteInfo, List<UserScoreRecord> userScoreRecord, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roundOverTimeMs = roundOverTimeMs;
    this.currentRound = currentRound;
    this.exitUserID = exitUserID;
    this.voteInfo = Internal.immutableCopyOf("voteInfo", voteInfo);
    this.userScoreRecord = Internal.immutableCopyOf("userScoreRecord", userScoreRecord);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roundOverTimeMs = roundOverTimeMs;
    builder.currentRound = currentRound;
    builder.exitUserID = exitUserID;
    builder.voteInfo = Internal.copyOf("voteInfo", voteInfo);
    builder.userScoreRecord = Internal.copyOf("userScoreRecord", userScoreRecord);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RoundAndGameOverMsg)) return false;
    RoundAndGameOverMsg o = (RoundAndGameOverMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roundOverTimeMs, o.roundOverTimeMs)
        && Internal.equals(currentRound, o.currentRound)
        && Internal.equals(exitUserID, o.exitUserID)
        && voteInfo.equals(o.voteInfo)
        && userScoreRecord.equals(o.userScoreRecord);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roundOverTimeMs != null ? roundOverTimeMs.hashCode() : 0);
      result = result * 37 + (currentRound != null ? currentRound.hashCode() : 0);
      result = result * 37 + (exitUserID != null ? exitUserID.hashCode() : 0);
      result = result * 37 + voteInfo.hashCode();
      result = result * 37 + userScoreRecord.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roundOverTimeMs != null) builder.append(", roundOverTimeMs=").append(roundOverTimeMs);
    if (currentRound != null) builder.append(", currentRound=").append(currentRound);
    if (exitUserID != null) builder.append(", exitUserID=").append(exitUserID);
    if (!voteInfo.isEmpty()) builder.append(", voteInfo=").append(voteInfo);
    if (!userScoreRecord.isEmpty()) builder.append(", userScoreRecord=").append(userScoreRecord);
    return builder.replace(0, 2, "RoundAndGameOverMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RoundAndGameOverMsg.ADAPTER.encode(this);
  }

  public static final RoundAndGameOverMsg parseFrom(byte[] data) throws IOException {
    RoundAndGameOverMsg c = null;
       c = RoundAndGameOverMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 轮次结束的毫秒时间戳
   */
  public Long getRoundOverTimeMs() {
    if(roundOverTimeMs==null){
        return DEFAULT_ROUNDOVERTIMEMS;
    }
    return roundOverTimeMs;
  }

  /**
   * 当前轮次信息
   */
  public RoundInfo getCurrentRound() {
    if(currentRound==null){
        return new RoundInfo.Builder().build();
    }
    return currentRound;
  }

  /**
   * 退出用户的ID
   */
  public Integer getExitUserID() {
    if(exitUserID==null){
        return DEFAULT_EXITUSERID;
    }
    return exitUserID;
  }

  /**
   * 投票打分信息
   */
  public List<VoteInfo> getVoteInfoList() {
    if(voteInfo==null){
        return new java.util.ArrayList<VoteInfo>();
    }
    return voteInfo;
  }

  /**
   * 分值信息
   */
  public List<UserScoreRecord> getUserScoreRecordList() {
    if(userScoreRecord==null){
        return new java.util.ArrayList<UserScoreRecord>();
    }
    return userScoreRecord;
  }

  /**
   * 轮次结束的毫秒时间戳
   */
  public boolean hasRoundOverTimeMs() {
    return roundOverTimeMs!=null;
  }

  /**
   * 当前轮次信息
   */
  public boolean hasCurrentRound() {
    return currentRound!=null;
  }

  /**
   * 退出用户的ID
   */
  public boolean hasExitUserID() {
    return exitUserID!=null;
  }

  /**
   * 投票打分信息
   */
  public boolean hasVoteInfoList() {
    return voteInfo!=null;
  }

  /**
   * 分值信息
   */
  public boolean hasUserScoreRecordList() {
    return userScoreRecord!=null;
  }

  public static final class Builder extends Message.Builder<RoundAndGameOverMsg, Builder> {
    public Long roundOverTimeMs;

    public RoundInfo currentRound;

    public Integer exitUserID;

    public List<VoteInfo> voteInfo;

    public List<UserScoreRecord> userScoreRecord;

    public Builder() {
      voteInfo = Internal.newMutableList();
      userScoreRecord = Internal.newMutableList();
    }

    /**
     * 轮次结束的毫秒时间戳
     */
    public Builder setRoundOverTimeMs(Long roundOverTimeMs) {
      this.roundOverTimeMs = roundOverTimeMs;
      return this;
    }

    /**
     * 当前轮次信息
     */
    public Builder setCurrentRound(RoundInfo currentRound) {
      this.currentRound = currentRound;
      return this;
    }

    /**
     * 退出用户的ID
     */
    public Builder setExitUserID(Integer exitUserID) {
      this.exitUserID = exitUserID;
      return this;
    }

    /**
     * 投票打分信息
     */
    public Builder addAllVoteInfo(List<VoteInfo> voteInfo) {
      Internal.checkElementsNotNull(voteInfo);
      this.voteInfo = voteInfo;
      return this;
    }

    /**
     * 分值信息
     */
    public Builder addAllUserScoreRecord(List<UserScoreRecord> userScoreRecord) {
      Internal.checkElementsNotNull(userScoreRecord);
      this.userScoreRecord = userScoreRecord;
      return this;
    }

    @Override
    public RoundAndGameOverMsg build() {
      return new RoundAndGameOverMsg(roundOverTimeMs, currentRound, exitUserID, voteInfo, userScoreRecord, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RoundAndGameOverMsg extends ProtoAdapter<RoundAndGameOverMsg> {
    public ProtoAdapter_RoundAndGameOverMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, RoundAndGameOverMsg.class);
    }

    @Override
    public int encodedSize(RoundAndGameOverMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.roundOverTimeMs)
          + RoundInfo.ADAPTER.encodedSizeWithTag(2, value.currentRound)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.exitUserID)
          + VoteInfo.ADAPTER.asRepeated().encodedSizeWithTag(4, value.voteInfo)
          + UserScoreRecord.ADAPTER.asRepeated().encodedSizeWithTag(5, value.userScoreRecord)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RoundAndGameOverMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.roundOverTimeMs);
      RoundInfo.ADAPTER.encodeWithTag(writer, 2, value.currentRound);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.exitUserID);
      VoteInfo.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.voteInfo);
      UserScoreRecord.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.userScoreRecord);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RoundAndGameOverMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoundOverTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: builder.setCurrentRound(RoundInfo.ADAPTER.decode(reader)); break;
          case 3: builder.setExitUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.voteInfo.add(VoteInfo.ADAPTER.decode(reader)); break;
          case 5: builder.userScoreRecord.add(UserScoreRecord.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RoundAndGameOverMsg redact(RoundAndGameOverMsg value) {
      Builder builder = value.newBuilder();
      if (builder.currentRound != null) builder.currentRound = RoundInfo.ADAPTER.redact(builder.currentRound);
      Internal.redactElements(builder.voteInfo, VoteInfo.ADAPTER);
      Internal.redactElements(builder.userScoreRecord, UserScoreRecord.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
