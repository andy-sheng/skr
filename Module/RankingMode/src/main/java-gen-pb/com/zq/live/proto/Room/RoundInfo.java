// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class RoundInfo extends Message<RoundInfo, RoundInfo.Builder> {
  public static final ProtoAdapter<RoundInfo> ADAPTER = new ProtoAdapter_RoundInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ROUNDSEQ = 0;

  public static final Long DEFAULT_ROUNDBEGINMS = 0L;

  public static final Long DEFAULT_ROUNDENDMS = 0L;

  public static final Integer DEFAULT_ITEMID = 0;

  /**
   * 轮次顺序
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer roundSeq;

  /**
   * 轮次开始时间戳
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  public final Long roundBeginMs;

  /**
   * 轮次结束时间戳
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  public final Long roundEndMs;

  /**
   * 曲库id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer itemID;

  public RoundInfo(Integer roundSeq, Long roundBeginMs, Long roundEndMs, Integer itemID) {
    this(roundSeq, roundBeginMs, roundEndMs, itemID, ByteString.EMPTY);
  }

  public RoundInfo(Integer roundSeq, Long roundBeginMs, Long roundEndMs, Integer itemID,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roundSeq = roundSeq;
    this.roundBeginMs = roundBeginMs;
    this.roundEndMs = roundEndMs;
    this.itemID = itemID;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roundSeq = roundSeq;
    builder.roundBeginMs = roundBeginMs;
    builder.roundEndMs = roundEndMs;
    builder.itemID = itemID;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RoundInfo)) return false;
    RoundInfo o = (RoundInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roundSeq, o.roundSeq)
        && Internal.equals(roundBeginMs, o.roundBeginMs)
        && Internal.equals(roundEndMs, o.roundEndMs)
        && Internal.equals(itemID, o.itemID);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roundSeq != null ? roundSeq.hashCode() : 0);
      result = result * 37 + (roundBeginMs != null ? roundBeginMs.hashCode() : 0);
      result = result * 37 + (roundEndMs != null ? roundEndMs.hashCode() : 0);
      result = result * 37 + (itemID != null ? itemID.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roundSeq != null) builder.append(", roundSeq=").append(roundSeq);
    if (roundBeginMs != null) builder.append(", roundBeginMs=").append(roundBeginMs);
    if (roundEndMs != null) builder.append(", roundEndMs=").append(roundEndMs);
    if (itemID != null) builder.append(", itemID=").append(itemID);
    return builder.replace(0, 2, "RoundInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RoundInfo.ADAPTER.encode(this);
  }

  public static final RoundInfo parseFrom(byte[] data) throws IOException {
    RoundInfo c = null;
       c = RoundInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 轮次顺序
   */
  public Integer getRoundSeq() {
    if(roundSeq==null){
        return DEFAULT_ROUNDSEQ;
    }
    return roundSeq;
  }

  /**
   * 轮次开始时间戳
   */
  public Long getRoundBeginMs() {
    if(roundBeginMs==null){
        return DEFAULT_ROUNDBEGINMS;
    }
    return roundBeginMs;
  }

  /**
   * 轮次结束时间戳
   */
  public Long getRoundEndMs() {
    if(roundEndMs==null){
        return DEFAULT_ROUNDENDMS;
    }
    return roundEndMs;
  }

  /**
   * 曲库id
   */
  public Integer getItemID() {
    if(itemID==null){
        return DEFAULT_ITEMID;
    }
    return itemID;
  }

  /**
   * 轮次顺序
   */
  public boolean hasRoundSeq() {
    return roundSeq!=null;
  }

  /**
   * 轮次开始时间戳
   */
  public boolean hasRoundBeginMs() {
    return roundBeginMs!=null;
  }

  /**
   * 轮次结束时间戳
   */
  public boolean hasRoundEndMs() {
    return roundEndMs!=null;
  }

  /**
   * 曲库id
   */
  public boolean hasItemID() {
    return itemID!=null;
  }

  public static final class Builder extends Message.Builder<RoundInfo, Builder> {
    public Integer roundSeq;

    public Long roundBeginMs;

    public Long roundEndMs;

    public Integer itemID;

    public Builder() {
    }

    /**
     * 轮次顺序
     */
    public Builder setRoundSeq(Integer roundSeq) {
      this.roundSeq = roundSeq;
      return this;
    }

    /**
     * 轮次开始时间戳
     */
    public Builder setRoundBeginMs(Long roundBeginMs) {
      this.roundBeginMs = roundBeginMs;
      return this;
    }

    /**
     * 轮次结束时间戳
     */
    public Builder setRoundEndMs(Long roundEndMs) {
      this.roundEndMs = roundEndMs;
      return this;
    }

    /**
     * 曲库id
     */
    public Builder setItemID(Integer itemID) {
      this.itemID = itemID;
      return this;
    }

    @Override
    public RoundInfo build() {
      return new RoundInfo(roundSeq, roundBeginMs, roundEndMs, itemID, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RoundInfo extends ProtoAdapter<RoundInfo> {
    public ProtoAdapter_RoundInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, RoundInfo.class);
    }

    @Override
    public int encodedSize(RoundInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.roundSeq)
          + ProtoAdapter.SINT64.encodedSizeWithTag(2, value.roundBeginMs)
          + ProtoAdapter.SINT64.encodedSizeWithTag(3, value.roundEndMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.itemID)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RoundInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.roundSeq);
      ProtoAdapter.SINT64.encodeWithTag(writer, 2, value.roundBeginMs);
      ProtoAdapter.SINT64.encodeWithTag(writer, 3, value.roundEndMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.itemID);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RoundInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoundSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setRoundBeginMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 3: builder.setRoundEndMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 4: builder.setItemID(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RoundInfo redact(RoundInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
