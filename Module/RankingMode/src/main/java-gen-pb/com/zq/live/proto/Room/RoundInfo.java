// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class RoundInfo extends Message<RoundInfo, RoundInfo.Builder> {
  public static final ProtoAdapter<RoundInfo> ADAPTER = new ProtoAdapter_RoundInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_PLAYBOOKID = 0;

  public static final Integer DEFAULT_ROUNDSEQ = 0;

  public static final Integer DEFAULT_SINGBEGINMS = 0;

  public static final Integer DEFAULT_SINGENDMS = 0;

  /**
   * 玩家id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer userID;

  /**
   * 曲库id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer playbookID;

  /**
   * 轮次顺序
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer roundSeq;

  /**
   * 轮次开始时间戳
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer singBeginMs;

  /**
   * 轮次结束时间戳
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer singEndMs;

  public RoundInfo(Integer userID, Integer playbookID, Integer roundSeq, Integer singBeginMs,
      Integer singEndMs) {
    this(userID, playbookID, roundSeq, singBeginMs, singEndMs, ByteString.EMPTY);
  }

  public RoundInfo(Integer userID, Integer playbookID, Integer roundSeq, Integer singBeginMs,
      Integer singEndMs, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.playbookID = playbookID;
    this.roundSeq = roundSeq;
    this.singBeginMs = singBeginMs;
    this.singEndMs = singEndMs;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.playbookID = playbookID;
    builder.roundSeq = roundSeq;
    builder.singBeginMs = singBeginMs;
    builder.singEndMs = singEndMs;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RoundInfo)) return false;
    RoundInfo o = (RoundInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(playbookID, o.playbookID)
        && Internal.equals(roundSeq, o.roundSeq)
        && Internal.equals(singBeginMs, o.singBeginMs)
        && Internal.equals(singEndMs, o.singEndMs);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (playbookID != null ? playbookID.hashCode() : 0);
      result = result * 37 + (roundSeq != null ? roundSeq.hashCode() : 0);
      result = result * 37 + (singBeginMs != null ? singBeginMs.hashCode() : 0);
      result = result * 37 + (singEndMs != null ? singEndMs.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (playbookID != null) builder.append(", playbookID=").append(playbookID);
    if (roundSeq != null) builder.append(", roundSeq=").append(roundSeq);
    if (singBeginMs != null) builder.append(", singBeginMs=").append(singBeginMs);
    if (singEndMs != null) builder.append(", singEndMs=").append(singEndMs);
    return builder.replace(0, 2, "RoundInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RoundInfo.ADAPTER.encode(this);
  }

  public static final RoundInfo parseFrom(byte[] data) throws IOException {
    RoundInfo c = null;
       c = RoundInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 玩家id
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 曲库id
   */
  public Integer getPlaybookID() {
    if(playbookID==null){
        return DEFAULT_PLAYBOOKID;
    }
    return playbookID;
  }

  /**
   * 轮次顺序
   */
  public Integer getRoundSeq() {
    if(roundSeq==null){
        return DEFAULT_ROUNDSEQ;
    }
    return roundSeq;
  }

  /**
   * 轮次开始时间戳
   */
  public Integer getSingBeginMs() {
    if(singBeginMs==null){
        return DEFAULT_SINGBEGINMS;
    }
    return singBeginMs;
  }

  /**
   * 轮次结束时间戳
   */
  public Integer getSingEndMs() {
    if(singEndMs==null){
        return DEFAULT_SINGENDMS;
    }
    return singEndMs;
  }

  /**
   * 玩家id
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 曲库id
   */
  public boolean hasPlaybookID() {
    return playbookID!=null;
  }

  /**
   * 轮次顺序
   */
  public boolean hasRoundSeq() {
    return roundSeq!=null;
  }

  /**
   * 轮次开始时间戳
   */
  public boolean hasSingBeginMs() {
    return singBeginMs!=null;
  }

  /**
   * 轮次结束时间戳
   */
  public boolean hasSingEndMs() {
    return singEndMs!=null;
  }

  public static final class Builder extends Message.Builder<RoundInfo, Builder> {
    public Integer userID;

    public Integer playbookID;

    public Integer roundSeq;

    public Integer singBeginMs;

    public Integer singEndMs;

    public Builder() {
    }

    /**
     * 玩家id
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 曲库id
     */
    public Builder setPlaybookID(Integer playbookID) {
      this.playbookID = playbookID;
      return this;
    }

    /**
     * 轮次顺序
     */
    public Builder setRoundSeq(Integer roundSeq) {
      this.roundSeq = roundSeq;
      return this;
    }

    /**
     * 轮次开始时间戳
     */
    public Builder setSingBeginMs(Integer singBeginMs) {
      this.singBeginMs = singBeginMs;
      return this;
    }

    /**
     * 轮次结束时间戳
     */
    public Builder setSingEndMs(Integer singEndMs) {
      this.singEndMs = singEndMs;
      return this;
    }

    @Override
    public RoundInfo build() {
      return new RoundInfo(userID, playbookID, roundSeq, singBeginMs, singEndMs, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RoundInfo extends ProtoAdapter<RoundInfo> {
    public ProtoAdapter_RoundInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, RoundInfo.class);
    }

    @Override
    public int encodedSize(RoundInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.playbookID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.roundSeq)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.singBeginMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.singEndMs)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RoundInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.playbookID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.roundSeq);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.singBeginMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.singEndMs);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RoundInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setPlaybookID(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setRoundSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setSingBeginMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setSingEndMs(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RoundInfo redact(RoundInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
