package com.module.playways.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.module.playways.room.gift.GiftDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GIFT_DB".
*/
public class GiftDBDao extends AbstractDao<GiftDB, Integer> {

    public static final String TABLENAME = "GIFT_DB";

    /**
     * Properties of entity GiftDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GiftId = new Property(0, Integer.class, "giftId", true, "GIFT_ID");
    }


    public GiftDBDao(DaoConfig config) {
        super(config);
    }
    
    public GiftDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GIFT_DB\" (" + //
                "\"GIFT_ID\" INTEGER PRIMARY KEY );"); // 0: giftId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_GIFT_DB_GIFT_ID_DESC ON GIFT_DB" +
                " (\"GIFT_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GIFT_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GiftDB entity) {
        stmt.clearBindings();
 
        Integer giftId = entity.getGiftId();
        if (giftId != null) {
            stmt.bindLong(1, giftId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GiftDB entity) {
        stmt.clearBindings();
 
        Integer giftId = entity.getGiftId();
        if (giftId != null) {
            stmt.bindLong(1, giftId);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public GiftDB readEntity(Cursor cursor, int offset) {
        GiftDB entity = new GiftDB( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0) // giftId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GiftDB entity, int offset) {
        entity.setGiftId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(GiftDB entity, long rowId) {
        return entity.getGiftId();
    }
    
    @Override
    public Integer getKey(GiftDB entity) {
        if(entity != null) {
            return entity.getGiftId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GiftDB entity) {
        return entity.getGiftId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
