// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class QuestionAudio extends Message<QuestionAudio, QuestionAudio.Builder> {
  public static final ProtoAdapter<QuestionAudio> ADAPTER = new ProtoAdapter_QuestionAudio();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_URL = "";

  public static final Integer DEFAULT_DURTIMEMS = 0;

  /**
   * 资源地址
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String URL;

  /**
   * 持续时长（毫秒）
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer durTimeMs;

  public QuestionAudio(String URL, Integer durTimeMs) {
    this(URL, durTimeMs, ByteString.EMPTY);
  }

  public QuestionAudio(String URL, Integer durTimeMs, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.URL = URL;
    this.durTimeMs = durTimeMs;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.URL = URL;
    builder.durTimeMs = durTimeMs;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof QuestionAudio)) return false;
    QuestionAudio o = (QuestionAudio) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(URL, o.URL)
        && Internal.equals(durTimeMs, o.durTimeMs);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (URL != null ? URL.hashCode() : 0);
      result = result * 37 + (durTimeMs != null ? durTimeMs.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (URL != null) builder.append(", URL=").append(URL);
    if (durTimeMs != null) builder.append(", durTimeMs=").append(durTimeMs);
    return builder.replace(0, 2, "QuestionAudio{").append('}').toString();
  }

  public byte[] toByteArray() {
    return QuestionAudio.ADAPTER.encode(this);
  }

  public static final QuestionAudio parseFrom(byte[] data) throws IOException {
    QuestionAudio c = null;
       c = QuestionAudio.ADAPTER.decode(data);
    return c;
  }

  /**
   * 资源地址
   */
  public String getURL() {
    if(URL==null){
        return DEFAULT_URL;
    }
    return URL;
  }

  /**
   * 持续时长（毫秒）
   */
  public Integer getDurTimeMs() {
    if(durTimeMs==null){
        return DEFAULT_DURTIMEMS;
    }
    return durTimeMs;
  }

  /**
   * 资源地址
   */
  public boolean hasURL() {
    return URL!=null;
  }

  /**
   * 持续时长（毫秒）
   */
  public boolean hasDurTimeMs() {
    return durTimeMs!=null;
  }

  public static final class Builder extends Message.Builder<QuestionAudio, Builder> {
    private String URL;

    private Integer durTimeMs;

    public Builder() {
    }

    /**
     * 资源地址
     */
    public Builder setURL(String URL) {
      this.URL = URL;
      return this;
    }

    /**
     * 持续时长（毫秒）
     */
    public Builder setDurTimeMs(Integer durTimeMs) {
      this.durTimeMs = durTimeMs;
      return this;
    }

    @Override
    public QuestionAudio build() {
      return new QuestionAudio(URL, durTimeMs, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_QuestionAudio extends ProtoAdapter<QuestionAudio> {
    public ProtoAdapter_QuestionAudio() {
      super(FieldEncoding.LENGTH_DELIMITED, QuestionAudio.class);
    }

    @Override
    public int encodedSize(QuestionAudio value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.URL)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.durTimeMs)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, QuestionAudio value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.URL);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.durTimeMs);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public QuestionAudio decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setURL(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setDurTimeMs(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public QuestionAudio redact(QuestionAudio value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
