// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.UserInfo;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 语音消息
 */
public final class AudioMsg extends Message<AudioMsg, AudioMsg.Builder> {
  public static final ProtoAdapter<AudioMsg> ADAPTER = new ProtoAdapter_AudioMsg();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_MSGURL = "";

  public static final Long DEFAULT_DURATION = 0L;

  /**
   * 语音内容地址
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String msgUrl;

  /**
   * 接收者信息
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.Common.UserInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<UserInfo> receiver;

  /**
   * 语音时长
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long duration;

  public AudioMsg(String msgUrl, List<UserInfo> receiver, Long duration) {
    this(msgUrl, receiver, duration, ByteString.EMPTY);
  }

  public AudioMsg(String msgUrl, List<UserInfo> receiver, Long duration, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.msgUrl = msgUrl;
    this.receiver = Internal.immutableCopyOf("receiver", receiver);
    this.duration = duration;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.msgUrl = msgUrl;
    builder.receiver = Internal.copyOf("receiver", receiver);
    builder.duration = duration;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AudioMsg)) return false;
    AudioMsg o = (AudioMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(msgUrl, o.msgUrl)
        && receiver.equals(o.receiver)
        && Internal.equals(duration, o.duration);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (msgUrl != null ? msgUrl.hashCode() : 0);
      result = result * 37 + receiver.hashCode();
      result = result * 37 + (duration != null ? duration.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (msgUrl != null) builder.append(", msgUrl=").append(msgUrl);
    if (!receiver.isEmpty()) builder.append(", receiver=").append(receiver);
    if (duration != null) builder.append(", duration=").append(duration);
    return builder.replace(0, 2, "AudioMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return AudioMsg.ADAPTER.encode(this);
  }

  public static final AudioMsg parseFrom(byte[] data) throws IOException {
    AudioMsg c = null;
       c = AudioMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 语音内容地址
   */
  public String getMsgUrl() {
    if(msgUrl==null){
        return DEFAULT_MSGURL;
    }
    return msgUrl;
  }

  /**
   * 接收者信息
   */
  public List<UserInfo> getReceiverList() {
    if(receiver==null){
        return new java.util.ArrayList<UserInfo>();
    }
    return receiver;
  }

  /**
   * 语音时长
   */
  public Long getDuration() {
    if(duration==null){
        return DEFAULT_DURATION;
    }
    return duration;
  }

  /**
   * 语音内容地址
   */
  public boolean hasMsgUrl() {
    return msgUrl!=null;
  }

  /**
   * 接收者信息
   */
  public boolean hasReceiverList() {
    return receiver!=null;
  }

  /**
   * 语音时长
   */
  public boolean hasDuration() {
    return duration!=null;
  }

  public static final class Builder extends Message.Builder<AudioMsg, Builder> {
    private String msgUrl;

    private List<UserInfo> receiver;

    private Long duration;

    public Builder() {
      receiver = Internal.newMutableList();
    }

    /**
     * 语音内容地址
     */
    public Builder setMsgUrl(String msgUrl) {
      this.msgUrl = msgUrl;
      return this;
    }

    /**
     * 接收者信息
     */
    public Builder addAllReceiver(List<UserInfo> receiver) {
      Internal.checkElementsNotNull(receiver);
      this.receiver = receiver;
      return this;
    }

    /**
     * 语音时长
     */
    public Builder setDuration(Long duration) {
      this.duration = duration;
      return this;
    }

    @Override
    public AudioMsg build() {
      return new AudioMsg(msgUrl, receiver, duration, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_AudioMsg extends ProtoAdapter<AudioMsg> {
    public ProtoAdapter_AudioMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, AudioMsg.class);
    }

    @Override
    public int encodedSize(AudioMsg value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.msgUrl)
          + UserInfo.ADAPTER.asRepeated().encodedSizeWithTag(2, value.receiver)
          + ProtoAdapter.SINT64.encodedSizeWithTag(3, value.duration)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AudioMsg value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.msgUrl);
      UserInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.receiver);
      ProtoAdapter.SINT64.encodeWithTag(writer, 3, value.duration);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AudioMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setMsgUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.receiver.add(UserInfo.ADAPTER.decode(reader)); break;
          case 3: builder.setDuration(ProtoAdapter.SINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AudioMsg redact(AudioMsg value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.receiver, UserInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
