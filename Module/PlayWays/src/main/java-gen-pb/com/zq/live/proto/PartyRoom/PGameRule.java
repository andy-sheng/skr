// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.GameMode;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PGameRule extends Message<PGameRule, PGameRule.Builder> {
  public static final ProtoAdapter<PGameRule> ADAPTER = new ProtoAdapter_PGameRule();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RULEID = 0;

  public static final String DEFAULT_RULENAME = "";

  public static final String DEFAULT_RULEDESC = "";

  public static final EPGameType DEFAULT_RULETYPE = EPGameType.PGT_Unknown;

  /**
   * 游戏规则标识
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer ruleID;

  /**
   * 游戏规则名称
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String ruleName;

  /**
   * 游戏规则描述
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String ruleDesc;

  /**
   * 游戏类型
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.PartyRoom.EPGameType#ADAPTER"
  )
  private final EPGameType ruleType;

  /**
   * 游戏模式
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Common.GameMode#ADAPTER"
  )
  private final GameMode gameMode;

  public PGameRule(Integer ruleID, String ruleName, String ruleDesc, EPGameType ruleType,
      GameMode gameMode) {
    this(ruleID, ruleName, ruleDesc, ruleType, gameMode, ByteString.EMPTY);
  }

  public PGameRule(Integer ruleID, String ruleName, String ruleDesc, EPGameType ruleType,
      GameMode gameMode, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ruleID = ruleID;
    this.ruleName = ruleName;
    this.ruleDesc = ruleDesc;
    this.ruleType = ruleType;
    this.gameMode = gameMode;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ruleID = ruleID;
    builder.ruleName = ruleName;
    builder.ruleDesc = ruleDesc;
    builder.ruleType = ruleType;
    builder.gameMode = gameMode;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PGameRule)) return false;
    PGameRule o = (PGameRule) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(ruleID, o.ruleID)
        && Internal.equals(ruleName, o.ruleName)
        && Internal.equals(ruleDesc, o.ruleDesc)
        && Internal.equals(ruleType, o.ruleType)
        && Internal.equals(gameMode, o.gameMode);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (ruleID != null ? ruleID.hashCode() : 0);
      result = result * 37 + (ruleName != null ? ruleName.hashCode() : 0);
      result = result * 37 + (ruleDesc != null ? ruleDesc.hashCode() : 0);
      result = result * 37 + (ruleType != null ? ruleType.hashCode() : 0);
      result = result * 37 + (gameMode != null ? gameMode.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (ruleID != null) builder.append(", ruleID=").append(ruleID);
    if (ruleName != null) builder.append(", ruleName=").append(ruleName);
    if (ruleDesc != null) builder.append(", ruleDesc=").append(ruleDesc);
    if (ruleType != null) builder.append(", ruleType=").append(ruleType);
    if (gameMode != null) builder.append(", gameMode=").append(gameMode);
    return builder.replace(0, 2, "PGameRule{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PGameRule.ADAPTER.encode(this);
  }

  public static final PGameRule parseFrom(byte[] data) throws IOException {
    PGameRule c = null;
       c = PGameRule.ADAPTER.decode(data);
    return c;
  }

  /**
   * 游戏规则标识
   */
  public Integer getRuleID() {
    if(ruleID==null){
        return DEFAULT_RULEID;
    }
    return ruleID;
  }

  /**
   * 游戏规则名称
   */
  public String getRuleName() {
    if(ruleName==null){
        return DEFAULT_RULENAME;
    }
    return ruleName;
  }

  /**
   * 游戏规则描述
   */
  public String getRuleDesc() {
    if(ruleDesc==null){
        return DEFAULT_RULEDESC;
    }
    return ruleDesc;
  }

  /**
   * 游戏类型
   */
  public EPGameType getRuleType() {
    if(ruleType==null){
        return new EPGameType.Builder().build();
    }
    return ruleType;
  }

  /**
   * 游戏模式
   */
  public GameMode getGameMode() {
    if(gameMode==null){
        return new GameMode.Builder().build();
    }
    return gameMode;
  }

  /**
   * 游戏规则标识
   */
  public boolean hasRuleID() {
    return ruleID!=null;
  }

  /**
   * 游戏规则名称
   */
  public boolean hasRuleName() {
    return ruleName!=null;
  }

  /**
   * 游戏规则描述
   */
  public boolean hasRuleDesc() {
    return ruleDesc!=null;
  }

  /**
   * 游戏类型
   */
  public boolean hasRuleType() {
    return ruleType!=null;
  }

  /**
   * 游戏模式
   */
  public boolean hasGameMode() {
    return gameMode!=null;
  }

  public static final class Builder extends Message.Builder<PGameRule, Builder> {
    private Integer ruleID;

    private String ruleName;

    private String ruleDesc;

    private EPGameType ruleType;

    private GameMode gameMode;

    public Builder() {
    }

    /**
     * 游戏规则标识
     */
    public Builder setRuleID(Integer ruleID) {
      this.ruleID = ruleID;
      return this;
    }

    /**
     * 游戏规则名称
     */
    public Builder setRuleName(String ruleName) {
      this.ruleName = ruleName;
      return this;
    }

    /**
     * 游戏规则描述
     */
    public Builder setRuleDesc(String ruleDesc) {
      this.ruleDesc = ruleDesc;
      return this;
    }

    /**
     * 游戏类型
     */
    public Builder setRuleType(EPGameType ruleType) {
      this.ruleType = ruleType;
      return this;
    }

    /**
     * 游戏模式
     */
    public Builder setGameMode(GameMode gameMode) {
      this.gameMode = gameMode;
      return this;
    }

    @Override
    public PGameRule build() {
      return new PGameRule(ruleID, ruleName, ruleDesc, ruleType, gameMode, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PGameRule extends ProtoAdapter<PGameRule> {
    public ProtoAdapter_PGameRule() {
      super(FieldEncoding.LENGTH_DELIMITED, PGameRule.class);
    }

    @Override
    public int encodedSize(PGameRule value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.ruleID)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.ruleName)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.ruleDesc)
          + EPGameType.ADAPTER.encodedSizeWithTag(4, value.ruleType)
          + GameMode.ADAPTER.encodedSizeWithTag(5, value.gameMode)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PGameRule value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.ruleID);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.ruleName);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.ruleDesc);
      EPGameType.ADAPTER.encodeWithTag(writer, 4, value.ruleType);
      GameMode.ADAPTER.encodeWithTag(writer, 5, value.gameMode);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PGameRule decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRuleID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setRuleName(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setRuleDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 4: {
            try {
              builder.setRuleType(EPGameType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 5: builder.setGameMode(GameMode.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PGameRule redact(PGameRule value) {
      Builder builder = value.newBuilder();
      if (builder.gameMode != null) builder.gameMode = GameMode.ADAPTER.redact(builder.gameMode);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
