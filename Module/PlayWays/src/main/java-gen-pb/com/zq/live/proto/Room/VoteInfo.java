// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 投票信息
 */
public final class VoteInfo extends Message<VoteInfo, VoteInfo.Builder> {
  public static final ProtoAdapter<VoteInfo> ADAPTER = new ProtoAdapter_VoteInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_ITEMID = 0;

  public static final Integer DEFAULT_RANK = 0;

  public static final Boolean DEFAULT_ISESCAPE = false;

  public static final Boolean DEFAULT_SYSVOTE = false;

  public static final Integer DEFAULT_SYSSCORE = 0;

  /**
   * 用户标识
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer userID;

  /**
   * 演唱曲目ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer itemID;

  /**
   * 排名
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  public final Integer rank;

  /**
   * 是否逃跑
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isEscape;

  /**
   * 系统是否投票
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean sysVote;

  /**
   * 系统打分分值
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  public final Integer sysScore;

  /**
   * 投票者
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> voter;

  public VoteInfo(Integer userID, Integer itemID, Integer rank, Boolean isEscape, Boolean sysVote,
      Integer sysScore, List<Integer> voter) {
    this(userID, itemID, rank, isEscape, sysVote, sysScore, voter, ByteString.EMPTY);
  }

  public VoteInfo(Integer userID, Integer itemID, Integer rank, Boolean isEscape, Boolean sysVote,
      Integer sysScore, List<Integer> voter, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.itemID = itemID;
    this.rank = rank;
    this.isEscape = isEscape;
    this.sysVote = sysVote;
    this.sysScore = sysScore;
    this.voter = Internal.immutableCopyOf("voter", voter);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.itemID = itemID;
    builder.rank = rank;
    builder.isEscape = isEscape;
    builder.sysVote = sysVote;
    builder.sysScore = sysScore;
    builder.voter = Internal.copyOf("voter", voter);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VoteInfo)) return false;
    VoteInfo o = (VoteInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(itemID, o.itemID)
        && Internal.equals(rank, o.rank)
        && Internal.equals(isEscape, o.isEscape)
        && Internal.equals(sysVote, o.sysVote)
        && Internal.equals(sysScore, o.sysScore)
        && voter.equals(o.voter);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (itemID != null ? itemID.hashCode() : 0);
      result = result * 37 + (rank != null ? rank.hashCode() : 0);
      result = result * 37 + (isEscape != null ? isEscape.hashCode() : 0);
      result = result * 37 + (sysVote != null ? sysVote.hashCode() : 0);
      result = result * 37 + (sysScore != null ? sysScore.hashCode() : 0);
      result = result * 37 + voter.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (itemID != null) builder.append(", itemID=").append(itemID);
    if (rank != null) builder.append(", rank=").append(rank);
    if (isEscape != null) builder.append(", isEscape=").append(isEscape);
    if (sysVote != null) builder.append(", sysVote=").append(sysVote);
    if (sysScore != null) builder.append(", sysScore=").append(sysScore);
    if (!voter.isEmpty()) builder.append(", voter=").append(voter);
    return builder.replace(0, 2, "VoteInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return VoteInfo.ADAPTER.encode(this);
  }

  public static final VoteInfo parseFrom(byte[] data) throws IOException {
    VoteInfo c = null;
       c = VoteInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 用户标识
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 演唱曲目ID
   */
  public Integer getItemID() {
    if(itemID==null){
        return DEFAULT_ITEMID;
    }
    return itemID;
  }

  /**
   * 排名
   */
  public Integer getRank() {
    if(rank==null){
        return DEFAULT_RANK;
    }
    return rank;
  }

  /**
   * 是否逃跑
   */
  public Boolean getIsEscape() {
    if(isEscape==null){
        return DEFAULT_ISESCAPE;
    }
    return isEscape;
  }

  /**
   * 系统是否投票
   */
  public Boolean getSysVote() {
    if(sysVote==null){
        return DEFAULT_SYSVOTE;
    }
    return sysVote;
  }

  /**
   * 系统打分分值
   */
  public Integer getSysScore() {
    if(sysScore==null){
        return DEFAULT_SYSSCORE;
    }
    return sysScore;
  }

  /**
   * 投票者
   */
  public List<Integer> getVoterList() {
    if(voter==null){
        return new java.util.ArrayList<Integer>();
    }
    return voter;
  }

  /**
   * 用户标识
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 演唱曲目ID
   */
  public boolean hasItemID() {
    return itemID!=null;
  }

  /**
   * 排名
   */
  public boolean hasRank() {
    return rank!=null;
  }

  /**
   * 是否逃跑
   */
  public boolean hasIsEscape() {
    return isEscape!=null;
  }

  /**
   * 系统是否投票
   */
  public boolean hasSysVote() {
    return sysVote!=null;
  }

  /**
   * 系统打分分值
   */
  public boolean hasSysScore() {
    return sysScore!=null;
  }

  /**
   * 投票者
   */
  public boolean hasVoterList() {
    return voter!=null;
  }

  public static final class Builder extends Message.Builder<VoteInfo, Builder> {
    public Integer userID;

    public Integer itemID;

    public Integer rank;

    public Boolean isEscape;

    public Boolean sysVote;

    public Integer sysScore;

    public List<Integer> voter;

    public Builder() {
      voter = Internal.newMutableList();
    }

    /**
     * 用户标识
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 演唱曲目ID
     */
    public Builder setItemID(Integer itemID) {
      this.itemID = itemID;
      return this;
    }

    /**
     * 排名
     */
    public Builder setRank(Integer rank) {
      this.rank = rank;
      return this;
    }

    /**
     * 是否逃跑
     */
    public Builder setIsEscape(Boolean isEscape) {
      this.isEscape = isEscape;
      return this;
    }

    /**
     * 系统是否投票
     */
    public Builder setSysVote(Boolean sysVote) {
      this.sysVote = sysVote;
      return this;
    }

    /**
     * 系统打分分值
     */
    public Builder setSysScore(Integer sysScore) {
      this.sysScore = sysScore;
      return this;
    }

    /**
     * 投票者
     */
    public Builder addAllVoter(List<Integer> voter) {
      Internal.checkElementsNotNull(voter);
      this.voter = voter;
      return this;
    }

    @Override
    public VoteInfo build() {
      return new VoteInfo(userID, itemID, rank, isEscape, sysVote, sysScore, voter, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VoteInfo extends ProtoAdapter<VoteInfo> {
    public ProtoAdapter_VoteInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, VoteInfo.class);
    }

    @Override
    public int encodedSize(VoteInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.itemID)
          + ProtoAdapter.SINT32.encodedSizeWithTag(3, value.rank)
          + ProtoAdapter.BOOL.encodedSizeWithTag(4, value.isEscape)
          + ProtoAdapter.BOOL.encodedSizeWithTag(5, value.sysVote)
          + ProtoAdapter.SINT32.encodedSizeWithTag(6, value.sysScore)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(7, value.voter)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VoteInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.itemID);
      ProtoAdapter.SINT32.encodeWithTag(writer, 3, value.rank);
      ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.isEscape);
      ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.sysVote);
      ProtoAdapter.SINT32.encodeWithTag(writer, 6, value.sysScore);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 7, value.voter);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VoteInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setItemID(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setRank(ProtoAdapter.SINT32.decode(reader)); break;
          case 4: builder.setIsEscape(ProtoAdapter.BOOL.decode(reader)); break;
          case 5: builder.setSysVote(ProtoAdapter.BOOL.decode(reader)); break;
          case 6: builder.setSysScore(ProtoAdapter.SINT32.decode(reader)); break;
          case 7: builder.voter.add(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VoteInfo redact(VoteInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
