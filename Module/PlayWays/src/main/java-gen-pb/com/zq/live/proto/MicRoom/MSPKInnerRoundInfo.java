// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: mic_room.proto
package com.zq.live.proto.MicRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class MSPKInnerRoundInfo extends Message<MSPKInnerRoundInfo, MSPKInnerRoundInfo.Builder> {
  public static final ProtoAdapter<MSPKInnerRoundInfo> ADAPTER = new ProtoAdapter_MSPKInnerRoundInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_SINGBEGINMS = 0;

  public static final Integer DEFAULT_SINGENDMS = 0;

  public static final EMRoundOverReason DEFAULT_OVERREASON = EMRoundOverReason.MROR_UNKNOWN;

  public static final Float DEFAULT_SPKFINALSCORE = 0.0f;

  public static final Boolean DEFAULT_ISWIN = false;

  /**
   * 抢唱成功的玩家id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer userID;

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer singBeginMs;

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer singEndMs;

  /**
   * 切换轮次原因
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.MicRoom.EMRoundOverReason#ADAPTER"
  )
  private final EMRoundOverReason overReason;

  /**
   * 最终得分
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  private final Float SPKFinalScore;

  /**
   * 是否获胜
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean isWin;

  public MSPKInnerRoundInfo(Integer userID, Integer singBeginMs, Integer singEndMs,
      EMRoundOverReason overReason, Float SPKFinalScore, Boolean isWin) {
    this(userID, singBeginMs, singEndMs, overReason, SPKFinalScore, isWin, ByteString.EMPTY);
  }

  public MSPKInnerRoundInfo(Integer userID, Integer singBeginMs, Integer singEndMs,
      EMRoundOverReason overReason, Float SPKFinalScore, Boolean isWin, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.singBeginMs = singBeginMs;
    this.singEndMs = singEndMs;
    this.overReason = overReason;
    this.SPKFinalScore = SPKFinalScore;
    this.isWin = isWin;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.singBeginMs = singBeginMs;
    builder.singEndMs = singEndMs;
    builder.overReason = overReason;
    builder.SPKFinalScore = SPKFinalScore;
    builder.isWin = isWin;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MSPKInnerRoundInfo)) return false;
    MSPKInnerRoundInfo o = (MSPKInnerRoundInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(singBeginMs, o.singBeginMs)
        && Internal.equals(singEndMs, o.singEndMs)
        && Internal.equals(overReason, o.overReason)
        && Internal.equals(SPKFinalScore, o.SPKFinalScore)
        && Internal.equals(isWin, o.isWin);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (singBeginMs != null ? singBeginMs.hashCode() : 0);
      result = result * 37 + (singEndMs != null ? singEndMs.hashCode() : 0);
      result = result * 37 + (overReason != null ? overReason.hashCode() : 0);
      result = result * 37 + (SPKFinalScore != null ? SPKFinalScore.hashCode() : 0);
      result = result * 37 + (isWin != null ? isWin.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (singBeginMs != null) builder.append(", singBeginMs=").append(singBeginMs);
    if (singEndMs != null) builder.append(", singEndMs=").append(singEndMs);
    if (overReason != null) builder.append(", overReason=").append(overReason);
    if (SPKFinalScore != null) builder.append(", SPKFinalScore=").append(SPKFinalScore);
    if (isWin != null) builder.append(", isWin=").append(isWin);
    return builder.replace(0, 2, "MSPKInnerRoundInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MSPKInnerRoundInfo.ADAPTER.encode(this);
  }

  public static final MSPKInnerRoundInfo parseFrom(byte[] data) throws IOException {
    MSPKInnerRoundInfo c = null;
       c = MSPKInnerRoundInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 抢唱成功的玩家id
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  public Integer getSingBeginMs() {
    if(singBeginMs==null){
        return DEFAULT_SINGBEGINMS;
    }
    return singBeginMs;
  }

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  public Integer getSingEndMs() {
    if(singEndMs==null){
        return DEFAULT_SINGENDMS;
    }
    return singEndMs;
  }

  /**
   * 切换轮次原因
   */
  public EMRoundOverReason getOverReason() {
    if(overReason==null){
        return new EMRoundOverReason.Builder().build();
    }
    return overReason;
  }

  /**
   * 最终得分
   */
  public Float getSPKFinalScore() {
    if(SPKFinalScore==null){
        return DEFAULT_SPKFINALSCORE;
    }
    return SPKFinalScore;
  }

  /**
   * 是否获胜
   */
  public Boolean getIsWin() {
    if(isWin==null){
        return DEFAULT_ISWIN;
    }
    return isWin;
  }

  /**
   * 抢唱成功的玩家id
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  public boolean hasSingBeginMs() {
    return singBeginMs!=null;
  }

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  public boolean hasSingEndMs() {
    return singEndMs!=null;
  }

  /**
   * 切换轮次原因
   */
  public boolean hasOverReason() {
    return overReason!=null;
  }

  /**
   * 最终得分
   */
  public boolean hasSPKFinalScore() {
    return SPKFinalScore!=null;
  }

  /**
   * 是否获胜
   */
  public boolean hasIsWin() {
    return isWin!=null;
  }

  public static final class Builder extends Message.Builder<MSPKInnerRoundInfo, Builder> {
    private Integer userID;

    private Integer singBeginMs;

    private Integer singEndMs;

    private EMRoundOverReason overReason;

    private Float SPKFinalScore;

    private Boolean isWin;

    public Builder() {
    }

    /**
     * 抢唱成功的玩家id
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 演唱开始相对时间（相对于startTimeMs时间）
     */
    public Builder setSingBeginMs(Integer singBeginMs) {
      this.singBeginMs = singBeginMs;
      return this;
    }

    /**
     * 演唱结束相对时间（相对于startTimeMs时间）
     */
    public Builder setSingEndMs(Integer singEndMs) {
      this.singEndMs = singEndMs;
      return this;
    }

    /**
     * 切换轮次原因
     */
    public Builder setOverReason(EMRoundOverReason overReason) {
      this.overReason = overReason;
      return this;
    }

    /**
     * 最终得分
     */
    public Builder setSPKFinalScore(Float SPKFinalScore) {
      this.SPKFinalScore = SPKFinalScore;
      return this;
    }

    /**
     * 是否获胜
     */
    public Builder setIsWin(Boolean isWin) {
      this.isWin = isWin;
      return this;
    }

    @Override
    public MSPKInnerRoundInfo build() {
      return new MSPKInnerRoundInfo(userID, singBeginMs, singEndMs, overReason, SPKFinalScore, isWin, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MSPKInnerRoundInfo extends ProtoAdapter<MSPKInnerRoundInfo> {
    public ProtoAdapter_MSPKInnerRoundInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, MSPKInnerRoundInfo.class);
    }

    @Override
    public int encodedSize(MSPKInnerRoundInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.singBeginMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.singEndMs)
          + EMRoundOverReason.ADAPTER.encodedSizeWithTag(4, value.overReason)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(5, value.SPKFinalScore)
          + ProtoAdapter.BOOL.encodedSizeWithTag(6, value.isWin)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MSPKInnerRoundInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.singBeginMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.singEndMs);
      EMRoundOverReason.ADAPTER.encodeWithTag(writer, 4, value.overReason);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 5, value.SPKFinalScore);
      ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.isWin);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MSPKInnerRoundInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setSingBeginMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setSingEndMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: {
            try {
              builder.setOverReason(EMRoundOverReason.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 5: builder.setSPKFinalScore(ProtoAdapter.FLOAT.decode(reader)); break;
          case 6: builder.setIsWin(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MSPKInnerRoundInfo redact(MSPKInnerRoundInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
