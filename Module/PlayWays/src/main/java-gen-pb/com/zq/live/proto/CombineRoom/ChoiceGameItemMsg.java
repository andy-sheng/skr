// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CombineRoom.proto
package com.zq.live.proto.CombineRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class ChoiceGameItemMsg extends Message<ChoiceGameItemMsg, ChoiceGameItemMsg.Builder> {
  public static final ProtoAdapter<ChoiceGameItemMsg> ADAPTER = new ProtoAdapter_ChoiceGameItemMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_PANELSEQ = 0;

  public static final Integer DEFAULT_ITEMID = 0;

  /**
   * 选择游戏的用户id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer userID;

  /**
   * 当前面板次序
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer panelSeq;

  /**
   * 当前选择的游戏id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer itemID;

  /**
   * 已经选择的游戏id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  private final List<Integer> itemIDs;

  public ChoiceGameItemMsg(Integer userID, Integer panelSeq, Integer itemID,
      List<Integer> itemIDs) {
    this(userID, panelSeq, itemID, itemIDs, ByteString.EMPTY);
  }

  public ChoiceGameItemMsg(Integer userID, Integer panelSeq, Integer itemID, List<Integer> itemIDs,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.panelSeq = panelSeq;
    this.itemID = itemID;
    this.itemIDs = Internal.immutableCopyOf("itemIDs", itemIDs);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.panelSeq = panelSeq;
    builder.itemID = itemID;
    builder.itemIDs = Internal.copyOf("itemIDs", itemIDs);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChoiceGameItemMsg)) return false;
    ChoiceGameItemMsg o = (ChoiceGameItemMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(panelSeq, o.panelSeq)
        && Internal.equals(itemID, o.itemID)
        && itemIDs.equals(o.itemIDs);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (panelSeq != null ? panelSeq.hashCode() : 0);
      result = result * 37 + (itemID != null ? itemID.hashCode() : 0);
      result = result * 37 + itemIDs.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (panelSeq != null) builder.append(", panelSeq=").append(panelSeq);
    if (itemID != null) builder.append(", itemID=").append(itemID);
    if (!itemIDs.isEmpty()) builder.append(", itemIDs=").append(itemIDs);
    return builder.replace(0, 2, "ChoiceGameItemMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ChoiceGameItemMsg.ADAPTER.encode(this);
  }

  public static final ChoiceGameItemMsg parseFrom(byte[] data) throws IOException {
    ChoiceGameItemMsg c = null;
       c = ChoiceGameItemMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 选择游戏的用户id
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 当前面板次序
   */
  public Integer getPanelSeq() {
    if(panelSeq==null){
        return DEFAULT_PANELSEQ;
    }
    return panelSeq;
  }

  /**
   * 当前选择的游戏id
   */
  public Integer getItemID() {
    if(itemID==null){
        return DEFAULT_ITEMID;
    }
    return itemID;
  }

  /**
   * 已经选择的游戏id
   */
  public List<Integer> getItemIDsList() {
    if(itemIDs==null){
        return new java.util.ArrayList<Integer>();
    }
    return itemIDs;
  }

  /**
   * 选择游戏的用户id
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 当前面板次序
   */
  public boolean hasPanelSeq() {
    return panelSeq!=null;
  }

  /**
   * 当前选择的游戏id
   */
  public boolean hasItemID() {
    return itemID!=null;
  }

  /**
   * 已经选择的游戏id
   */
  public boolean hasItemIDsList() {
    return itemIDs!=null;
  }

  public static final class Builder extends Message.Builder<ChoiceGameItemMsg, Builder> {
    private Integer userID;

    private Integer panelSeq;

    private Integer itemID;

    private List<Integer> itemIDs;

    public Builder() {
      itemIDs = Internal.newMutableList();
    }

    /**
     * 选择游戏的用户id
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 当前面板次序
     */
    public Builder setPanelSeq(Integer panelSeq) {
      this.panelSeq = panelSeq;
      return this;
    }

    /**
     * 当前选择的游戏id
     */
    public Builder setItemID(Integer itemID) {
      this.itemID = itemID;
      return this;
    }

    /**
     * 已经选择的游戏id
     */
    public Builder addAllItemIDs(List<Integer> itemIDs) {
      Internal.checkElementsNotNull(itemIDs);
      this.itemIDs = itemIDs;
      return this;
    }

    @Override
    public ChoiceGameItemMsg build() {
      return new ChoiceGameItemMsg(userID, panelSeq, itemID, itemIDs, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ChoiceGameItemMsg extends ProtoAdapter<ChoiceGameItemMsg> {
    public ProtoAdapter_ChoiceGameItemMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, ChoiceGameItemMsg.class);
    }

    @Override
    public int encodedSize(ChoiceGameItemMsg value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.panelSeq)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.itemID)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(4, value.itemIDs)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ChoiceGameItemMsg value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.panelSeq);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.itemID);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 4, value.itemIDs);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ChoiceGameItemMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setPanelSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setItemID(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.itemIDs.add(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ChoiceGameItemMsg redact(ChoiceGameItemMsg value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
