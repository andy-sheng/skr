// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class QRoundAndGameOverMsg extends Message<QRoundAndGameOverMsg, QRoundAndGameOverMsg.Builder> {
  public static final ProtoAdapter<QRoundAndGameOverMsg> ADAPTER = new ProtoAdapter_QRoundAndGameOverMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ROUNDOVERTIMEMS = 0L;

  public static final Integer DEFAULT_EXITUSERID = 0;

  public static final EQRoundOverReason DEFAULT_OVERREASON = EQRoundOverReason.ROR_UNKNOWN;

  public static final EQRoundResultType DEFAULT_RESULTTYPE = EQRoundResultType.ROT_UNKNOWN;

  /**
   * 本轮次结束的毫秒时间戳
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  public final Long roundOverTimeMs;

  /**
   * 退出用户的ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer exitUserID;

  /**
   * 切换轮次原因
   */
  @WireField(
      tag = 3,
      adapter = "com.zq.live.proto.Room.EQRoundOverReason#ADAPTER"
  )
  public final EQRoundOverReason overReason;

  /**
   * 演唱结果信息
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.Room.EQRoundResultType#ADAPTER"
  )
  public final EQRoundResultType resultType;

  /**
   * 最终结果信息
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Room.QResultInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<QResultInfo> resultInfo;

  public QRoundAndGameOverMsg(Long roundOverTimeMs, Integer exitUserID,
      EQRoundOverReason overReason, EQRoundResultType resultType, List<QResultInfo> resultInfo) {
    this(roundOverTimeMs, exitUserID, overReason, resultType, resultInfo, ByteString.EMPTY);
  }

  public QRoundAndGameOverMsg(Long roundOverTimeMs, Integer exitUserID,
      EQRoundOverReason overReason, EQRoundResultType resultType, List<QResultInfo> resultInfo,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roundOverTimeMs = roundOverTimeMs;
    this.exitUserID = exitUserID;
    this.overReason = overReason;
    this.resultType = resultType;
    this.resultInfo = Internal.immutableCopyOf("resultInfo", resultInfo);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roundOverTimeMs = roundOverTimeMs;
    builder.exitUserID = exitUserID;
    builder.overReason = overReason;
    builder.resultType = resultType;
    builder.resultInfo = Internal.copyOf("resultInfo", resultInfo);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof QRoundAndGameOverMsg)) return false;
    QRoundAndGameOverMsg o = (QRoundAndGameOverMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roundOverTimeMs, o.roundOverTimeMs)
        && Internal.equals(exitUserID, o.exitUserID)
        && Internal.equals(overReason, o.overReason)
        && Internal.equals(resultType, o.resultType)
        && resultInfo.equals(o.resultInfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roundOverTimeMs != null ? roundOverTimeMs.hashCode() : 0);
      result = result * 37 + (exitUserID != null ? exitUserID.hashCode() : 0);
      result = result * 37 + (overReason != null ? overReason.hashCode() : 0);
      result = result * 37 + (resultType != null ? resultType.hashCode() : 0);
      result = result * 37 + resultInfo.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roundOverTimeMs != null) builder.append(", roundOverTimeMs=").append(roundOverTimeMs);
    if (exitUserID != null) builder.append(", exitUserID=").append(exitUserID);
    if (overReason != null) builder.append(", overReason=").append(overReason);
    if (resultType != null) builder.append(", resultType=").append(resultType);
    if (!resultInfo.isEmpty()) builder.append(", resultInfo=").append(resultInfo);
    return builder.replace(0, 2, "QRoundAndGameOverMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return QRoundAndGameOverMsg.ADAPTER.encode(this);
  }

  public static final QRoundAndGameOverMsg parseFrom(byte[] data) throws IOException {
    QRoundAndGameOverMsg c = null;
       c = QRoundAndGameOverMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 本轮次结束的毫秒时间戳
   */
  public Long getRoundOverTimeMs() {
    if(roundOverTimeMs==null){
        return DEFAULT_ROUNDOVERTIMEMS;
    }
    return roundOverTimeMs;
  }

  /**
   * 退出用户的ID
   */
  public Integer getExitUserID() {
    if(exitUserID==null){
        return DEFAULT_EXITUSERID;
    }
    return exitUserID;
  }

  /**
   * 切换轮次原因
   */
  public EQRoundOverReason getOverReason() {
    if(overReason==null){
        return new EQRoundOverReason.Builder().build();
    }
    return overReason;
  }

  /**
   * 演唱结果信息
   */
  public EQRoundResultType getResultType() {
    if(resultType==null){
        return new EQRoundResultType.Builder().build();
    }
    return resultType;
  }

  /**
   * 最终结果信息
   */
  public List<QResultInfo> getResultInfoList() {
    if(resultInfo==null){
        return new java.util.ArrayList<QResultInfo>();
    }
    return resultInfo;
  }

  /**
   * 本轮次结束的毫秒时间戳
   */
  public boolean hasRoundOverTimeMs() {
    return roundOverTimeMs!=null;
  }

  /**
   * 退出用户的ID
   */
  public boolean hasExitUserID() {
    return exitUserID!=null;
  }

  /**
   * 切换轮次原因
   */
  public boolean hasOverReason() {
    return overReason!=null;
  }

  /**
   * 演唱结果信息
   */
  public boolean hasResultType() {
    return resultType!=null;
  }

  /**
   * 最终结果信息
   */
  public boolean hasResultInfoList() {
    return resultInfo!=null;
  }

  public static final class Builder extends Message.Builder<QRoundAndGameOverMsg, Builder> {
    public Long roundOverTimeMs;

    public Integer exitUserID;

    public EQRoundOverReason overReason;

    public EQRoundResultType resultType;

    public List<QResultInfo> resultInfo;

    public Builder() {
      resultInfo = Internal.newMutableList();
    }

    /**
     * 本轮次结束的毫秒时间戳
     */
    public Builder setRoundOverTimeMs(Long roundOverTimeMs) {
      this.roundOverTimeMs = roundOverTimeMs;
      return this;
    }

    /**
     * 退出用户的ID
     */
    public Builder setExitUserID(Integer exitUserID) {
      this.exitUserID = exitUserID;
      return this;
    }

    /**
     * 切换轮次原因
     */
    public Builder setOverReason(EQRoundOverReason overReason) {
      this.overReason = overReason;
      return this;
    }

    /**
     * 演唱结果信息
     */
    public Builder setResultType(EQRoundResultType resultType) {
      this.resultType = resultType;
      return this;
    }

    /**
     * 最终结果信息
     */
    public Builder addAllResultInfo(List<QResultInfo> resultInfo) {
      Internal.checkElementsNotNull(resultInfo);
      this.resultInfo = resultInfo;
      return this;
    }

    @Override
    public QRoundAndGameOverMsg build() {
      return new QRoundAndGameOverMsg(roundOverTimeMs, exitUserID, overReason, resultType, resultInfo, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_QRoundAndGameOverMsg extends ProtoAdapter<QRoundAndGameOverMsg> {
    public ProtoAdapter_QRoundAndGameOverMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, QRoundAndGameOverMsg.class);
    }

    @Override
    public int encodedSize(QRoundAndGameOverMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.roundOverTimeMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.exitUserID)
          + EQRoundOverReason.ADAPTER.encodedSizeWithTag(3, value.overReason)
          + EQRoundResultType.ADAPTER.encodedSizeWithTag(4, value.resultType)
          + QResultInfo.ADAPTER.asRepeated().encodedSizeWithTag(5, value.resultInfo)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, QRoundAndGameOverMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.roundOverTimeMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.exitUserID);
      EQRoundOverReason.ADAPTER.encodeWithTag(writer, 3, value.overReason);
      EQRoundResultType.ADAPTER.encodeWithTag(writer, 4, value.resultType);
      QResultInfo.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.resultInfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public QRoundAndGameOverMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoundOverTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: builder.setExitUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: {
            try {
              builder.setOverReason(EQRoundOverReason.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 4: {
            try {
              builder.setResultType(EQRoundResultType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 5: builder.resultInfo.add(QResultInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public QRoundAndGameOverMsg redact(QRoundAndGameOverMsg value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.resultInfo, QResultInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
