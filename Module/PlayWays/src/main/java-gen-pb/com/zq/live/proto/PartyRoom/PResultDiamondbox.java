// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.POnlineInfo;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PResultDiamondbox extends Message<PResultDiamondbox, PResultDiamondbox.Builder> {
  public static final ProtoAdapter<PResultDiamondbox> ADAPTER = new ProtoAdapter_PResultDiamondbox();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_DIAMONDBOXTAG = "";

  public static final Integer DEFAULT_USERCNT = 0;

  public static final Long DEFAULT_TOTALZSCNT = 0L;

  public static final Long DEFAULT_RESZSCNT = 0L;

  /**
   * 宝箱标识
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String diamondboxTag;

  /**
   * 发送宝箱用户
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.Common.POnlineInfo#ADAPTER"
  )
  private final POnlineInfo user;

  /**
   * 开宝箱用户数
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer userCnt;

  /**
   * 宝箱总钻石数
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  private final Long totalZsCnt;

  /**
   * 剩余钻石数
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  private final Long resZsCnt;

  public PResultDiamondbox(String diamondboxTag, POnlineInfo user, Integer userCnt, Long totalZsCnt,
      Long resZsCnt) {
    this(diamondboxTag, user, userCnt, totalZsCnt, resZsCnt, ByteString.EMPTY);
  }

  public PResultDiamondbox(String diamondboxTag, POnlineInfo user, Integer userCnt, Long totalZsCnt,
      Long resZsCnt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.diamondboxTag = diamondboxTag;
    this.user = user;
    this.userCnt = userCnt;
    this.totalZsCnt = totalZsCnt;
    this.resZsCnt = resZsCnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.diamondboxTag = diamondboxTag;
    builder.user = user;
    builder.userCnt = userCnt;
    builder.totalZsCnt = totalZsCnt;
    builder.resZsCnt = resZsCnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PResultDiamondbox)) return false;
    PResultDiamondbox o = (PResultDiamondbox) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(diamondboxTag, o.diamondboxTag)
        && Internal.equals(user, o.user)
        && Internal.equals(userCnt, o.userCnt)
        && Internal.equals(totalZsCnt, o.totalZsCnt)
        && Internal.equals(resZsCnt, o.resZsCnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (diamondboxTag != null ? diamondboxTag.hashCode() : 0);
      result = result * 37 + (user != null ? user.hashCode() : 0);
      result = result * 37 + (userCnt != null ? userCnt.hashCode() : 0);
      result = result * 37 + (totalZsCnt != null ? totalZsCnt.hashCode() : 0);
      result = result * 37 + (resZsCnt != null ? resZsCnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (diamondboxTag != null) builder.append(", diamondboxTag=").append(diamondboxTag);
    if (user != null) builder.append(", user=").append(user);
    if (userCnt != null) builder.append(", userCnt=").append(userCnt);
    if (totalZsCnt != null) builder.append(", totalZsCnt=").append(totalZsCnt);
    if (resZsCnt != null) builder.append(", resZsCnt=").append(resZsCnt);
    return builder.replace(0, 2, "PResultDiamondbox{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PResultDiamondbox.ADAPTER.encode(this);
  }

  public static final PResultDiamondbox parseFrom(byte[] data) throws IOException {
    PResultDiamondbox c = null;
       c = PResultDiamondbox.ADAPTER.decode(data);
    return c;
  }

  /**
   * 宝箱标识
   */
  public String getDiamondboxTag() {
    if(diamondboxTag==null){
        return DEFAULT_DIAMONDBOXTAG;
    }
    return diamondboxTag;
  }

  /**
   * 发送宝箱用户
   */
  public POnlineInfo getUser() {
    if(user==null){
        return new POnlineInfo.Builder().build();
    }
    return user;
  }

  /**
   * 开宝箱用户数
   */
  public Integer getUserCnt() {
    if(userCnt==null){
        return DEFAULT_USERCNT;
    }
    return userCnt;
  }

  /**
   * 宝箱总钻石数
   */
  public Long getTotalZsCnt() {
    if(totalZsCnt==null){
        return DEFAULT_TOTALZSCNT;
    }
    return totalZsCnt;
  }

  /**
   * 剩余钻石数
   */
  public Long getResZsCnt() {
    if(resZsCnt==null){
        return DEFAULT_RESZSCNT;
    }
    return resZsCnt;
  }

  /**
   * 宝箱标识
   */
  public boolean hasDiamondboxTag() {
    return diamondboxTag!=null;
  }

  /**
   * 发送宝箱用户
   */
  public boolean hasUser() {
    return user!=null;
  }

  /**
   * 开宝箱用户数
   */
  public boolean hasUserCnt() {
    return userCnt!=null;
  }

  /**
   * 宝箱总钻石数
   */
  public boolean hasTotalZsCnt() {
    return totalZsCnt!=null;
  }

  /**
   * 剩余钻石数
   */
  public boolean hasResZsCnt() {
    return resZsCnt!=null;
  }

  public static final class Builder extends Message.Builder<PResultDiamondbox, Builder> {
    private String diamondboxTag;

    private POnlineInfo user;

    private Integer userCnt;

    private Long totalZsCnt;

    private Long resZsCnt;

    public Builder() {
    }

    /**
     * 宝箱标识
     */
    public Builder setDiamondboxTag(String diamondboxTag) {
      this.diamondboxTag = diamondboxTag;
      return this;
    }

    /**
     * 发送宝箱用户
     */
    public Builder setUser(POnlineInfo user) {
      this.user = user;
      return this;
    }

    /**
     * 开宝箱用户数
     */
    public Builder setUserCnt(Integer userCnt) {
      this.userCnt = userCnt;
      return this;
    }

    /**
     * 宝箱总钻石数
     */
    public Builder setTotalZsCnt(Long totalZsCnt) {
      this.totalZsCnt = totalZsCnt;
      return this;
    }

    /**
     * 剩余钻石数
     */
    public Builder setResZsCnt(Long resZsCnt) {
      this.resZsCnt = resZsCnt;
      return this;
    }

    @Override
    public PResultDiamondbox build() {
      return new PResultDiamondbox(diamondboxTag, user, userCnt, totalZsCnt, resZsCnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PResultDiamondbox extends ProtoAdapter<PResultDiamondbox> {
    public ProtoAdapter_PResultDiamondbox() {
      super(FieldEncoding.LENGTH_DELIMITED, PResultDiamondbox.class);
    }

    @Override
    public int encodedSize(PResultDiamondbox value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.diamondboxTag)
          + POnlineInfo.ADAPTER.encodedSizeWithTag(2, value.user)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.userCnt)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.totalZsCnt)
          + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.resZsCnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PResultDiamondbox value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.diamondboxTag);
      POnlineInfo.ADAPTER.encodeWithTag(writer, 2, value.user);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.userCnt);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.totalZsCnt);
      ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.resZsCnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PResultDiamondbox decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setDiamondboxTag(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setUser(POnlineInfo.ADAPTER.decode(reader)); break;
          case 3: builder.setUserCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setTotalZsCnt(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.setResZsCnt(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PResultDiamondbox redact(PResultDiamondbox value) {
      Builder builder = value.newBuilder();
      if (builder.user != null) builder.user = POnlineInfo.ADAPTER.redact(builder.user);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
