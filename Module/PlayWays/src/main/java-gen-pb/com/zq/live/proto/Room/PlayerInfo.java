// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.MusicInfo;
import com.zq.live.proto.Common.ResourceInfo;
import com.zq.live.proto.Common.UserInfo;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class PlayerInfo extends Message<PlayerInfo, PlayerInfo.Builder> {
  public static final ProtoAdapter<PlayerInfo> ADAPTER = new ProtoAdapter_PlayerInfo();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_ISSKRER = false;

  public static final Boolean DEFAULT_ISAIUSER = false;

  /**
   * 玩家信息
   */
  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.Common.UserInfo#ADAPTER"
  )
  private final UserInfo userInfo;

  /**
   * 演唱信息
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.Common.MusicInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<MusicInfo> musicInfo;

  /**
   * 是否为机器人
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean isSkrer;

  /**
   * 资源信息
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.Common.ResourceInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<ResourceInfo> resource;

  /**
   * 是否为ai裁判用户
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean isAIUser;

  public PlayerInfo(UserInfo userInfo, List<MusicInfo> musicInfo, Boolean isSkrer,
      List<ResourceInfo> resource, Boolean isAIUser) {
    this(userInfo, musicInfo, isSkrer, resource, isAIUser, ByteString.EMPTY);
  }

  public PlayerInfo(UserInfo userInfo, List<MusicInfo> musicInfo, Boolean isSkrer,
      List<ResourceInfo> resource, Boolean isAIUser, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userInfo = userInfo;
    this.musicInfo = Internal.immutableCopyOf("musicInfo", musicInfo);
    this.isSkrer = isSkrer;
    this.resource = Internal.immutableCopyOf("resource", resource);
    this.isAIUser = isAIUser;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userInfo = userInfo;
    builder.musicInfo = Internal.copyOf("musicInfo", musicInfo);
    builder.isSkrer = isSkrer;
    builder.resource = Internal.copyOf("resource", resource);
    builder.isAIUser = isAIUser;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PlayerInfo)) return false;
    PlayerInfo o = (PlayerInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userInfo, o.userInfo)
        && musicInfo.equals(o.musicInfo)
        && Internal.equals(isSkrer, o.isSkrer)
        && resource.equals(o.resource)
        && Internal.equals(isAIUser, o.isAIUser);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userInfo != null ? userInfo.hashCode() : 0);
      result = result * 37 + musicInfo.hashCode();
      result = result * 37 + (isSkrer != null ? isSkrer.hashCode() : 0);
      result = result * 37 + resource.hashCode();
      result = result * 37 + (isAIUser != null ? isAIUser.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userInfo != null) builder.append(", userInfo=").append(userInfo);
    if (!musicInfo.isEmpty()) builder.append(", musicInfo=").append(musicInfo);
    if (isSkrer != null) builder.append(", isSkrer=").append(isSkrer);
    if (!resource.isEmpty()) builder.append(", resource=").append(resource);
    if (isAIUser != null) builder.append(", isAIUser=").append(isAIUser);
    return builder.replace(0, 2, "PlayerInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PlayerInfo.ADAPTER.encode(this);
  }

  public static final PlayerInfo parseFrom(byte[] data) throws IOException {
    PlayerInfo c = null;
       c = PlayerInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 玩家信息
   */
  public UserInfo getUserInfo() {
    if(userInfo==null){
        return new UserInfo.Builder().build();
    }
    return userInfo;
  }

  /**
   * 演唱信息
   */
  public List<MusicInfo> getMusicInfoList() {
    if(musicInfo==null){
        return new java.util.ArrayList<MusicInfo>();
    }
    return musicInfo;
  }

  /**
   * 是否为机器人
   */
  public Boolean getIsSkrer() {
    if(isSkrer==null){
        return DEFAULT_ISSKRER;
    }
    return isSkrer;
  }

  /**
   * 资源信息
   */
  public List<ResourceInfo> getResourceList() {
    if(resource==null){
        return new java.util.ArrayList<ResourceInfo>();
    }
    return resource;
  }

  /**
   * 是否为ai裁判用户
   */
  public Boolean getIsAIUser() {
    if(isAIUser==null){
        return DEFAULT_ISAIUSER;
    }
    return isAIUser;
  }

  /**
   * 玩家信息
   */
  public boolean hasUserInfo() {
    return userInfo!=null;
  }

  /**
   * 演唱信息
   */
  public boolean hasMusicInfoList() {
    return musicInfo!=null;
  }

  /**
   * 是否为机器人
   */
  public boolean hasIsSkrer() {
    return isSkrer!=null;
  }

  /**
   * 资源信息
   */
  public boolean hasResourceList() {
    return resource!=null;
  }

  /**
   * 是否为ai裁判用户
   */
  public boolean hasIsAIUser() {
    return isAIUser!=null;
  }

  public static final class Builder extends Message.Builder<PlayerInfo, Builder> {
    private UserInfo userInfo;

    private List<MusicInfo> musicInfo;

    private Boolean isSkrer;

    private List<ResourceInfo> resource;

    private Boolean isAIUser;

    public Builder() {
      musicInfo = Internal.newMutableList();
      resource = Internal.newMutableList();
    }

    /**
     * 玩家信息
     */
    public Builder setUserInfo(UserInfo userInfo) {
      this.userInfo = userInfo;
      return this;
    }

    /**
     * 演唱信息
     */
    public Builder addAllMusicInfo(List<MusicInfo> musicInfo) {
      Internal.checkElementsNotNull(musicInfo);
      this.musicInfo = musicInfo;
      return this;
    }

    /**
     * 是否为机器人
     */
    public Builder setIsSkrer(Boolean isSkrer) {
      this.isSkrer = isSkrer;
      return this;
    }

    /**
     * 资源信息
     */
    public Builder addAllResource(List<ResourceInfo> resource) {
      Internal.checkElementsNotNull(resource);
      this.resource = resource;
      return this;
    }

    /**
     * 是否为ai裁判用户
     */
    public Builder setIsAIUser(Boolean isAIUser) {
      this.isAIUser = isAIUser;
      return this;
    }

    @Override
    public PlayerInfo build() {
      return new PlayerInfo(userInfo, musicInfo, isSkrer, resource, isAIUser, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PlayerInfo extends ProtoAdapter<PlayerInfo> {
    public ProtoAdapter_PlayerInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, PlayerInfo.class);
    }

    @Override
    public int encodedSize(PlayerInfo value) {
      return UserInfo.ADAPTER.encodedSizeWithTag(1, value.userInfo)
          + MusicInfo.ADAPTER.asRepeated().encodedSizeWithTag(2, value.musicInfo)
          + ProtoAdapter.BOOL.encodedSizeWithTag(3, value.isSkrer)
          + ResourceInfo.ADAPTER.asRepeated().encodedSizeWithTag(4, value.resource)
          + ProtoAdapter.BOOL.encodedSizeWithTag(5, value.isAIUser)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PlayerInfo value) throws IOException {
      UserInfo.ADAPTER.encodeWithTag(writer, 1, value.userInfo);
      MusicInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.musicInfo);
      ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.isSkrer);
      ResourceInfo.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.resource);
      ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.isAIUser);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PlayerInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserInfo(UserInfo.ADAPTER.decode(reader)); break;
          case 2: builder.musicInfo.add(MusicInfo.ADAPTER.decode(reader)); break;
          case 3: builder.setIsSkrer(ProtoAdapter.BOOL.decode(reader)); break;
          case 4: builder.resource.add(ResourceInfo.ADAPTER.decode(reader)); break;
          case 5: builder.setIsAIUser(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PlayerInfo redact(PlayerInfo value) {
      Builder builder = value.newBuilder();
      if (builder.userInfo != null) builder.userInfo = UserInfo.ADAPTER.redact(builder.userInfo);
      Internal.redactElements(builder.musicInfo, MusicInfo.ADAPTER);
      Internal.redactElements(builder.resource, ResourceInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
