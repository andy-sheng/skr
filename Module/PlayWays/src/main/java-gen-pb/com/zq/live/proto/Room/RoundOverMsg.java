// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 游戏轮次结束通知消息
 */
public final class RoundOverMsg extends Message<RoundOverMsg, RoundOverMsg.Builder> {
  public static final ProtoAdapter<RoundOverMsg> ADAPTER = new ProtoAdapter_RoundOverMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ROUNDOVERTIMEMS = 0L;

  public static final Integer DEFAULT_EXITUSERID = 0;

  public static final ERoundOverReason DEFAULT_OVERREASON = ERoundOverReason.EROR_UNKNOWN;

  /**
   * 本轮次结束的毫秒时间戳
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  public final Long roundOverTimeMs;

  /**
   * 当前轮次信息
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.Room.RoundInfo#ADAPTER"
  )
  public final RoundInfo currentRound;

  /**
   * 下个轮次信息
   */
  @WireField(
      tag = 3,
      adapter = "com.zq.live.proto.Room.RoundInfo#ADAPTER"
  )
  public final RoundInfo nextRound;

  /**
   * 退出用户的ID
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer exitUserID;

  /**
   * 结束原因
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Room.ERoundOverReason#ADAPTER"
  )
  public final ERoundOverReason overReason;

  public RoundOverMsg(Long roundOverTimeMs, RoundInfo currentRound, RoundInfo nextRound,
      Integer exitUserID, ERoundOverReason overReason) {
    this(roundOverTimeMs, currentRound, nextRound, exitUserID, overReason, ByteString.EMPTY);
  }

  public RoundOverMsg(Long roundOverTimeMs, RoundInfo currentRound, RoundInfo nextRound,
      Integer exitUserID, ERoundOverReason overReason, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roundOverTimeMs = roundOverTimeMs;
    this.currentRound = currentRound;
    this.nextRound = nextRound;
    this.exitUserID = exitUserID;
    this.overReason = overReason;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roundOverTimeMs = roundOverTimeMs;
    builder.currentRound = currentRound;
    builder.nextRound = nextRound;
    builder.exitUserID = exitUserID;
    builder.overReason = overReason;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RoundOverMsg)) return false;
    RoundOverMsg o = (RoundOverMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roundOverTimeMs, o.roundOverTimeMs)
        && Internal.equals(currentRound, o.currentRound)
        && Internal.equals(nextRound, o.nextRound)
        && Internal.equals(exitUserID, o.exitUserID)
        && Internal.equals(overReason, o.overReason);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roundOverTimeMs != null ? roundOverTimeMs.hashCode() : 0);
      result = result * 37 + (currentRound != null ? currentRound.hashCode() : 0);
      result = result * 37 + (nextRound != null ? nextRound.hashCode() : 0);
      result = result * 37 + (exitUserID != null ? exitUserID.hashCode() : 0);
      result = result * 37 + (overReason != null ? overReason.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roundOverTimeMs != null) builder.append(", roundOverTimeMs=").append(roundOverTimeMs);
    if (currentRound != null) builder.append(", currentRound=").append(currentRound);
    if (nextRound != null) builder.append(", nextRound=").append(nextRound);
    if (exitUserID != null) builder.append(", exitUserID=").append(exitUserID);
    if (overReason != null) builder.append(", overReason=").append(overReason);
    return builder.replace(0, 2, "RoundOverMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RoundOverMsg.ADAPTER.encode(this);
  }

  public static final RoundOverMsg parseFrom(byte[] data) throws IOException {
    RoundOverMsg c = null;
       c = RoundOverMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 本轮次结束的毫秒时间戳
   */
  public Long getRoundOverTimeMs() {
    if(roundOverTimeMs==null){
        return DEFAULT_ROUNDOVERTIMEMS;
    }
    return roundOverTimeMs;
  }

  /**
   * 当前轮次信息
   */
  public RoundInfo getCurrentRound() {
    if(currentRound==null){
        return new RoundInfo.Builder().build();
    }
    return currentRound;
  }

  /**
   * 下个轮次信息
   */
  public RoundInfo getNextRound() {
    if(nextRound==null){
        return new RoundInfo.Builder().build();
    }
    return nextRound;
  }

  /**
   * 退出用户的ID
   */
  public Integer getExitUserID() {
    if(exitUserID==null){
        return DEFAULT_EXITUSERID;
    }
    return exitUserID;
  }

  /**
   * 结束原因
   */
  public ERoundOverReason getOverReason() {
    if(overReason==null){
        return new ERoundOverReason.Builder().build();
    }
    return overReason;
  }

  /**
   * 本轮次结束的毫秒时间戳
   */
  public boolean hasRoundOverTimeMs() {
    return roundOverTimeMs!=null;
  }

  /**
   * 当前轮次信息
   */
  public boolean hasCurrentRound() {
    return currentRound!=null;
  }

  /**
   * 下个轮次信息
   */
  public boolean hasNextRound() {
    return nextRound!=null;
  }

  /**
   * 退出用户的ID
   */
  public boolean hasExitUserID() {
    return exitUserID!=null;
  }

  /**
   * 结束原因
   */
  public boolean hasOverReason() {
    return overReason!=null;
  }

  public static final class Builder extends Message.Builder<RoundOverMsg, Builder> {
    public Long roundOverTimeMs;

    public RoundInfo currentRound;

    public RoundInfo nextRound;

    public Integer exitUserID;

    public ERoundOverReason overReason;

    public Builder() {
    }

    /**
     * 本轮次结束的毫秒时间戳
     */
    public Builder setRoundOverTimeMs(Long roundOverTimeMs) {
      this.roundOverTimeMs = roundOverTimeMs;
      return this;
    }

    /**
     * 当前轮次信息
     */
    public Builder setCurrentRound(RoundInfo currentRound) {
      this.currentRound = currentRound;
      return this;
    }

    /**
     * 下个轮次信息
     */
    public Builder setNextRound(RoundInfo nextRound) {
      this.nextRound = nextRound;
      return this;
    }

    /**
     * 退出用户的ID
     */
    public Builder setExitUserID(Integer exitUserID) {
      this.exitUserID = exitUserID;
      return this;
    }

    /**
     * 结束原因
     */
    public Builder setOverReason(ERoundOverReason overReason) {
      this.overReason = overReason;
      return this;
    }

    @Override
    public RoundOverMsg build() {
      return new RoundOverMsg(roundOverTimeMs, currentRound, nextRound, exitUserID, overReason, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RoundOverMsg extends ProtoAdapter<RoundOverMsg> {
    public ProtoAdapter_RoundOverMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, RoundOverMsg.class);
    }

    @Override
    public int encodedSize(RoundOverMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.roundOverTimeMs)
          + RoundInfo.ADAPTER.encodedSizeWithTag(2, value.currentRound)
          + RoundInfo.ADAPTER.encodedSizeWithTag(3, value.nextRound)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.exitUserID)
          + ERoundOverReason.ADAPTER.encodedSizeWithTag(5, value.overReason)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RoundOverMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.roundOverTimeMs);
      RoundInfo.ADAPTER.encodeWithTag(writer, 2, value.currentRound);
      RoundInfo.ADAPTER.encodeWithTag(writer, 3, value.nextRound);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.exitUserID);
      ERoundOverReason.ADAPTER.encodeWithTag(writer, 5, value.overReason);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RoundOverMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoundOverTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: builder.setCurrentRound(RoundInfo.ADAPTER.decode(reader)); break;
          case 3: builder.setNextRound(RoundInfo.ADAPTER.decode(reader)); break;
          case 4: builder.setExitUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: {
            try {
              builder.setOverReason(ERoundOverReason.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RoundOverMsg redact(RoundOverMsg value) {
      Builder builder = value.newBuilder();
      if (builder.currentRound != null) builder.currentRound = RoundInfo.ADAPTER.redact(builder.currentRound);
      if (builder.nextRound != null) builder.nextRound = RoundInfo.ADAPTER.redact(builder.nextRound);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
