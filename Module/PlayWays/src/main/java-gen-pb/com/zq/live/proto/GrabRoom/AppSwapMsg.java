// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.GrabRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class AppSwapMsg extends Message<AppSwapMsg, AppSwapMsg.Builder> {
  public static final ProtoAdapter<AppSwapMsg> ADAPTER = new ProtoAdapter_AppSwapMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_SWAPUSERID = 0;

  public static final Long DEFAULT_SWAPTIMSMS = 0L;

  public static final Boolean DEFAULT_SWAPOUT = false;

  public static final Boolean DEFAULT_SWAPIN = false;

  /**
   * 玩家ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer swapUserID;

  /**
   * 切换时间戳
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long swapTimsMs;

  /**
   * 后台运行
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean swapOut;

  /**
   * 前台运行
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean swapIn;

  public AppSwapMsg(Integer swapUserID, Long swapTimsMs, Boolean swapOut, Boolean swapIn) {
    this(swapUserID, swapTimsMs, swapOut, swapIn, ByteString.EMPTY);
  }

  public AppSwapMsg(Integer swapUserID, Long swapTimsMs, Boolean swapOut, Boolean swapIn,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.swapUserID = swapUserID;
    this.swapTimsMs = swapTimsMs;
    this.swapOut = swapOut;
    this.swapIn = swapIn;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.swapUserID = swapUserID;
    builder.swapTimsMs = swapTimsMs;
    builder.swapOut = swapOut;
    builder.swapIn = swapIn;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AppSwapMsg)) return false;
    AppSwapMsg o = (AppSwapMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(swapUserID, o.swapUserID)
        && Internal.equals(swapTimsMs, o.swapTimsMs)
        && Internal.equals(swapOut, o.swapOut)
        && Internal.equals(swapIn, o.swapIn);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (swapUserID != null ? swapUserID.hashCode() : 0);
      result = result * 37 + (swapTimsMs != null ? swapTimsMs.hashCode() : 0);
      result = result * 37 + (swapOut != null ? swapOut.hashCode() : 0);
      result = result * 37 + (swapIn != null ? swapIn.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (swapUserID != null) builder.append(", swapUserID=").append(swapUserID);
    if (swapTimsMs != null) builder.append(", swapTimsMs=").append(swapTimsMs);
    if (swapOut != null) builder.append(", swapOut=").append(swapOut);
    if (swapIn != null) builder.append(", swapIn=").append(swapIn);
    return builder.replace(0, 2, "AppSwapMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return AppSwapMsg.ADAPTER.encode(this);
  }

  public static final AppSwapMsg parseFrom(byte[] data) throws IOException {
    AppSwapMsg c = null;
       c = AppSwapMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 玩家ID
   */
  public Integer getSwapUserID() {
    if(swapUserID==null){
        return DEFAULT_SWAPUSERID;
    }
    return swapUserID;
  }

  /**
   * 切换时间戳
   */
  public Long getSwapTimsMs() {
    if(swapTimsMs==null){
        return DEFAULT_SWAPTIMSMS;
    }
    return swapTimsMs;
  }

  /**
   * 后台运行
   */
  public Boolean getSwapOut() {
    if(swapOut==null){
        return DEFAULT_SWAPOUT;
    }
    return swapOut;
  }

  /**
   * 前台运行
   */
  public Boolean getSwapIn() {
    if(swapIn==null){
        return DEFAULT_SWAPIN;
    }
    return swapIn;
  }

  /**
   * 玩家ID
   */
  public boolean hasSwapUserID() {
    return swapUserID!=null;
  }

  /**
   * 切换时间戳
   */
  public boolean hasSwapTimsMs() {
    return swapTimsMs!=null;
  }

  /**
   * 后台运行
   */
  public boolean hasSwapOut() {
    return swapOut!=null;
  }

  /**
   * 前台运行
   */
  public boolean hasSwapIn() {
    return swapIn!=null;
  }

  public static final class Builder extends Message.Builder<AppSwapMsg, Builder> {
    private Integer swapUserID;

    private Long swapTimsMs;

    private Boolean swapOut;

    private Boolean swapIn;

    public Builder() {
    }

    /**
     * 玩家ID
     */
    public Builder setSwapUserID(Integer swapUserID) {
      this.swapUserID = swapUserID;
      return this;
    }

    /**
     * 切换时间戳
     */
    public Builder setSwapTimsMs(Long swapTimsMs) {
      this.swapTimsMs = swapTimsMs;
      return this;
    }

    /**
     * 后台运行
     */
    public Builder setSwapOut(Boolean swapOut) {
      this.swapOut = swapOut;
      return this;
    }

    /**
     * 前台运行
     */
    public Builder setSwapIn(Boolean swapIn) {
      this.swapIn = swapIn;
      return this;
    }

    @Override
    public AppSwapMsg build() {
      return new AppSwapMsg(swapUserID, swapTimsMs, swapOut, swapIn, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_AppSwapMsg extends ProtoAdapter<AppSwapMsg> {
    public ProtoAdapter_AppSwapMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, AppSwapMsg.class);
    }

    @Override
    public int encodedSize(AppSwapMsg value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.swapUserID)
          + ProtoAdapter.SINT64.encodedSizeWithTag(2, value.swapTimsMs)
          + ProtoAdapter.BOOL.encodedSizeWithTag(3, value.swapOut)
          + ProtoAdapter.BOOL.encodedSizeWithTag(4, value.swapIn)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AppSwapMsg value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.swapUserID);
      ProtoAdapter.SINT64.encodeWithTag(writer, 2, value.swapTimsMs);
      ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.swapOut);
      ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.swapIn);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AppSwapMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setSwapUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setSwapTimsMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 3: builder.setSwapOut(ProtoAdapter.BOOL.decode(reader)); break;
          case 4: builder.setSwapIn(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AppSwapMsg redact(AppSwapMsg value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
