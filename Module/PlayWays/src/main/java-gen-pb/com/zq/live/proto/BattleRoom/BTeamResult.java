// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: battle_room.proto
package com.zq.live.proto.BattleRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class BTeamResult extends Message<BTeamResult, BTeamResult.Builder> {
  public static final ProtoAdapter<BTeamResult> ADAPTER = new ProtoAdapter_BTeamResult();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_TEAMTAG = "";

  public static final ETeamResult DEFAULT_TEAMRESULT = ETeamResult.ETR_UNKNOWN;

  public static final Integer DEFAULT_HELPTOTALTIMES = 0;

  public static final Integer DEFAULT_HELPPASSTIMES = 0;

  public static final Integer DEFAULT_SINGSUCCESSTIMES = 0;

  public static final Integer DEFAULT_SINGGETSCORE = 0;

  public static final Integer DEFAULT_PEERSCORE = 0;

  public static final Boolean DEFAULT_ISALLESCAPE = false;

  /**
   * 队伍标识
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String teamTag;

  /**
   * 胜负
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.BattleRoom.ETeamResult#ADAPTER"
  )
  private final ETeamResult teamResult;

  /**
   * 帮唱总共次数
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer helpTotalTimes;

  /**
   * 帮唱成功通过次数
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer helpPassTimes;

  /**
   * 演唱成功次数(过关)
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer singSuccessTimes;

  /**
   * 演唱总得分
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer singGetScore;

  /**
   * 默契值
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer peerScore;

  /**
   * 队员得分
   */
  @WireField(
      tag = 8,
      adapter = "com.zq.live.proto.BattleRoom.UserScore#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<UserScore> userScores;

  /**
   * 是否都逃跑
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean isAllEscape;

  public BTeamResult(String teamTag, ETeamResult teamResult, Integer helpTotalTimes,
      Integer helpPassTimes, Integer singSuccessTimes, Integer singGetScore, Integer peerScore,
      List<UserScore> userScores, Boolean isAllEscape) {
    this(teamTag, teamResult, helpTotalTimes, helpPassTimes, singSuccessTimes, singGetScore, peerScore, userScores, isAllEscape, ByteString.EMPTY);
  }

  public BTeamResult(String teamTag, ETeamResult teamResult, Integer helpTotalTimes,
      Integer helpPassTimes, Integer singSuccessTimes, Integer singGetScore, Integer peerScore,
      List<UserScore> userScores, Boolean isAllEscape, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.teamTag = teamTag;
    this.teamResult = teamResult;
    this.helpTotalTimes = helpTotalTimes;
    this.helpPassTimes = helpPassTimes;
    this.singSuccessTimes = singSuccessTimes;
    this.singGetScore = singGetScore;
    this.peerScore = peerScore;
    this.userScores = Internal.immutableCopyOf("userScores", userScores);
    this.isAllEscape = isAllEscape;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.teamTag = teamTag;
    builder.teamResult = teamResult;
    builder.helpTotalTimes = helpTotalTimes;
    builder.helpPassTimes = helpPassTimes;
    builder.singSuccessTimes = singSuccessTimes;
    builder.singGetScore = singGetScore;
    builder.peerScore = peerScore;
    builder.userScores = Internal.copyOf("userScores", userScores);
    builder.isAllEscape = isAllEscape;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BTeamResult)) return false;
    BTeamResult o = (BTeamResult) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(teamTag, o.teamTag)
        && Internal.equals(teamResult, o.teamResult)
        && Internal.equals(helpTotalTimes, o.helpTotalTimes)
        && Internal.equals(helpPassTimes, o.helpPassTimes)
        && Internal.equals(singSuccessTimes, o.singSuccessTimes)
        && Internal.equals(singGetScore, o.singGetScore)
        && Internal.equals(peerScore, o.peerScore)
        && userScores.equals(o.userScores)
        && Internal.equals(isAllEscape, o.isAllEscape);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (teamTag != null ? teamTag.hashCode() : 0);
      result = result * 37 + (teamResult != null ? teamResult.hashCode() : 0);
      result = result * 37 + (helpTotalTimes != null ? helpTotalTimes.hashCode() : 0);
      result = result * 37 + (helpPassTimes != null ? helpPassTimes.hashCode() : 0);
      result = result * 37 + (singSuccessTimes != null ? singSuccessTimes.hashCode() : 0);
      result = result * 37 + (singGetScore != null ? singGetScore.hashCode() : 0);
      result = result * 37 + (peerScore != null ? peerScore.hashCode() : 0);
      result = result * 37 + userScores.hashCode();
      result = result * 37 + (isAllEscape != null ? isAllEscape.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (teamTag != null) builder.append(", teamTag=").append(teamTag);
    if (teamResult != null) builder.append(", teamResult=").append(teamResult);
    if (helpTotalTimes != null) builder.append(", helpTotalTimes=").append(helpTotalTimes);
    if (helpPassTimes != null) builder.append(", helpPassTimes=").append(helpPassTimes);
    if (singSuccessTimes != null) builder.append(", singSuccessTimes=").append(singSuccessTimes);
    if (singGetScore != null) builder.append(", singGetScore=").append(singGetScore);
    if (peerScore != null) builder.append(", peerScore=").append(peerScore);
    if (!userScores.isEmpty()) builder.append(", userScores=").append(userScores);
    if (isAllEscape != null) builder.append(", isAllEscape=").append(isAllEscape);
    return builder.replace(0, 2, "BTeamResult{").append('}').toString();
  }

  public byte[] toByteArray() {
    return BTeamResult.ADAPTER.encode(this);
  }

  public static final BTeamResult parseFrom(byte[] data) throws IOException {
    BTeamResult c = null;
       c = BTeamResult.ADAPTER.decode(data);
    return c;
  }

  /**
   * 队伍标识
   */
  public String getTeamTag() {
    if(teamTag==null){
        return DEFAULT_TEAMTAG;
    }
    return teamTag;
  }

  /**
   * 胜负
   */
  public ETeamResult getTeamResult() {
    if(teamResult==null){
        return new ETeamResult.Builder().build();
    }
    return teamResult;
  }

  /**
   * 帮唱总共次数
   */
  public Integer getHelpTotalTimes() {
    if(helpTotalTimes==null){
        return DEFAULT_HELPTOTALTIMES;
    }
    return helpTotalTimes;
  }

  /**
   * 帮唱成功通过次数
   */
  public Integer getHelpPassTimes() {
    if(helpPassTimes==null){
        return DEFAULT_HELPPASSTIMES;
    }
    return helpPassTimes;
  }

  /**
   * 演唱成功次数(过关)
   */
  public Integer getSingSuccessTimes() {
    if(singSuccessTimes==null){
        return DEFAULT_SINGSUCCESSTIMES;
    }
    return singSuccessTimes;
  }

  /**
   * 演唱总得分
   */
  public Integer getSingGetScore() {
    if(singGetScore==null){
        return DEFAULT_SINGGETSCORE;
    }
    return singGetScore;
  }

  /**
   * 默契值
   */
  public Integer getPeerScore() {
    if(peerScore==null){
        return DEFAULT_PEERSCORE;
    }
    return peerScore;
  }

  /**
   * 队员得分
   */
  public List<UserScore> getUserScoresList() {
    if(userScores==null){
        return new java.util.ArrayList<UserScore>();
    }
    return userScores;
  }

  /**
   * 是否都逃跑
   */
  public Boolean getIsAllEscape() {
    if(isAllEscape==null){
        return DEFAULT_ISALLESCAPE;
    }
    return isAllEscape;
  }

  /**
   * 队伍标识
   */
  public boolean hasTeamTag() {
    return teamTag!=null;
  }

  /**
   * 胜负
   */
  public boolean hasTeamResult() {
    return teamResult!=null;
  }

  /**
   * 帮唱总共次数
   */
  public boolean hasHelpTotalTimes() {
    return helpTotalTimes!=null;
  }

  /**
   * 帮唱成功通过次数
   */
  public boolean hasHelpPassTimes() {
    return helpPassTimes!=null;
  }

  /**
   * 演唱成功次数(过关)
   */
  public boolean hasSingSuccessTimes() {
    return singSuccessTimes!=null;
  }

  /**
   * 演唱总得分
   */
  public boolean hasSingGetScore() {
    return singGetScore!=null;
  }

  /**
   * 默契值
   */
  public boolean hasPeerScore() {
    return peerScore!=null;
  }

  /**
   * 队员得分
   */
  public boolean hasUserScoresList() {
    return userScores!=null;
  }

  /**
   * 是否都逃跑
   */
  public boolean hasIsAllEscape() {
    return isAllEscape!=null;
  }

  public static final class Builder extends Message.Builder<BTeamResult, Builder> {
    private String teamTag;

    private ETeamResult teamResult;

    private Integer helpTotalTimes;

    private Integer helpPassTimes;

    private Integer singSuccessTimes;

    private Integer singGetScore;

    private Integer peerScore;

    private List<UserScore> userScores;

    private Boolean isAllEscape;

    public Builder() {
      userScores = Internal.newMutableList();
    }

    /**
     * 队伍标识
     */
    public Builder setTeamTag(String teamTag) {
      this.teamTag = teamTag;
      return this;
    }

    /**
     * 胜负
     */
    public Builder setTeamResult(ETeamResult teamResult) {
      this.teamResult = teamResult;
      return this;
    }

    /**
     * 帮唱总共次数
     */
    public Builder setHelpTotalTimes(Integer helpTotalTimes) {
      this.helpTotalTimes = helpTotalTimes;
      return this;
    }

    /**
     * 帮唱成功通过次数
     */
    public Builder setHelpPassTimes(Integer helpPassTimes) {
      this.helpPassTimes = helpPassTimes;
      return this;
    }

    /**
     * 演唱成功次数(过关)
     */
    public Builder setSingSuccessTimes(Integer singSuccessTimes) {
      this.singSuccessTimes = singSuccessTimes;
      return this;
    }

    /**
     * 演唱总得分
     */
    public Builder setSingGetScore(Integer singGetScore) {
      this.singGetScore = singGetScore;
      return this;
    }

    /**
     * 默契值
     */
    public Builder setPeerScore(Integer peerScore) {
      this.peerScore = peerScore;
      return this;
    }

    /**
     * 队员得分
     */
    public Builder addAllUserScores(List<UserScore> userScores) {
      Internal.checkElementsNotNull(userScores);
      this.userScores = userScores;
      return this;
    }

    /**
     * 是否都逃跑
     */
    public Builder setIsAllEscape(Boolean isAllEscape) {
      this.isAllEscape = isAllEscape;
      return this;
    }

    @Override
    public BTeamResult build() {
      return new BTeamResult(teamTag, teamResult, helpTotalTimes, helpPassTimes, singSuccessTimes, singGetScore, peerScore, userScores, isAllEscape, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BTeamResult extends ProtoAdapter<BTeamResult> {
    public ProtoAdapter_BTeamResult() {
      super(FieldEncoding.LENGTH_DELIMITED, BTeamResult.class);
    }

    @Override
    public int encodedSize(BTeamResult value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.teamTag)
          + ETeamResult.ADAPTER.encodedSizeWithTag(2, value.teamResult)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.helpTotalTimes)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.helpPassTimes)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.singSuccessTimes)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.singGetScore)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.peerScore)
          + UserScore.ADAPTER.asRepeated().encodedSizeWithTag(8, value.userScores)
          + ProtoAdapter.BOOL.encodedSizeWithTag(9, value.isAllEscape)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BTeamResult value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.teamTag);
      ETeamResult.ADAPTER.encodeWithTag(writer, 2, value.teamResult);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.helpTotalTimes);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.helpPassTimes);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.singSuccessTimes);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.singGetScore);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.peerScore);
      UserScore.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.userScores);
      ProtoAdapter.BOOL.encodeWithTag(writer, 9, value.isAllEscape);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BTeamResult decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTeamTag(ProtoAdapter.STRING.decode(reader)); break;
          case 2: {
            try {
              builder.setTeamResult(ETeamResult.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setHelpTotalTimes(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setHelpPassTimes(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setSingSuccessTimes(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setSingGetScore(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setPeerScore(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.userScores.add(UserScore.ADAPTER.decode(reader)); break;
          case 9: builder.setIsAllEscape(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BTeamResult redact(BTeamResult value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.userScores, UserScore.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
