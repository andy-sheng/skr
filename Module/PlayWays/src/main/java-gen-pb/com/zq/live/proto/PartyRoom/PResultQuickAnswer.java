// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class PResultQuickAnswer extends Message<PResultQuickAnswer, PResultQuickAnswer.Builder> {
  public static final ProtoAdapter<PResultQuickAnswer> ADAPTER = new ProtoAdapter_PResultQuickAnswer();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_QUICKANSWERTAG = "";

  /**
   * 抢答标识
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String quickAnswerTag;

  /**
   * 应答信息
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.PartyRoom.QuickAnswerInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<QuickAnswerInfo> answers;

  public PResultQuickAnswer(String quickAnswerTag, List<QuickAnswerInfo> answers) {
    this(quickAnswerTag, answers, ByteString.EMPTY);
  }

  public PResultQuickAnswer(String quickAnswerTag, List<QuickAnswerInfo> answers,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.quickAnswerTag = quickAnswerTag;
    this.answers = Internal.immutableCopyOf("answers", answers);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.quickAnswerTag = quickAnswerTag;
    builder.answers = Internal.copyOf("answers", answers);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PResultQuickAnswer)) return false;
    PResultQuickAnswer o = (PResultQuickAnswer) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(quickAnswerTag, o.quickAnswerTag)
        && answers.equals(o.answers);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (quickAnswerTag != null ? quickAnswerTag.hashCode() : 0);
      result = result * 37 + answers.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (quickAnswerTag != null) builder.append(", quickAnswerTag=").append(quickAnswerTag);
    if (!answers.isEmpty()) builder.append(", answers=").append(answers);
    return builder.replace(0, 2, "PResultQuickAnswer{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PResultQuickAnswer.ADAPTER.encode(this);
  }

  public static final PResultQuickAnswer parseFrom(byte[] data) throws IOException {
    PResultQuickAnswer c = null;
       c = PResultQuickAnswer.ADAPTER.decode(data);
    return c;
  }

  /**
   * 抢答标识
   */
  public String getQuickAnswerTag() {
    if(quickAnswerTag==null){
        return DEFAULT_QUICKANSWERTAG;
    }
    return quickAnswerTag;
  }

  /**
   * 应答信息
   */
  public List<QuickAnswerInfo> getAnswersList() {
    if(answers==null){
        return new java.util.ArrayList<QuickAnswerInfo>();
    }
    return answers;
  }

  /**
   * 抢答标识
   */
  public boolean hasQuickAnswerTag() {
    return quickAnswerTag!=null;
  }

  /**
   * 应答信息
   */
  public boolean hasAnswersList() {
    return answers!=null;
  }

  public static final class Builder extends Message.Builder<PResultQuickAnswer, Builder> {
    private String quickAnswerTag;

    private List<QuickAnswerInfo> answers;

    public Builder() {
      answers = Internal.newMutableList();
    }

    /**
     * 抢答标识
     */
    public Builder setQuickAnswerTag(String quickAnswerTag) {
      this.quickAnswerTag = quickAnswerTag;
      return this;
    }

    /**
     * 应答信息
     */
    public Builder addAllAnswers(List<QuickAnswerInfo> answers) {
      Internal.checkElementsNotNull(answers);
      this.answers = answers;
      return this;
    }

    @Override
    public PResultQuickAnswer build() {
      return new PResultQuickAnswer(quickAnswerTag, answers, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PResultQuickAnswer extends ProtoAdapter<PResultQuickAnswer> {
    public ProtoAdapter_PResultQuickAnswer() {
      super(FieldEncoding.LENGTH_DELIMITED, PResultQuickAnswer.class);
    }

    @Override
    public int encodedSize(PResultQuickAnswer value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.quickAnswerTag)
          + QuickAnswerInfo.ADAPTER.asRepeated().encodedSizeWithTag(2, value.answers)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PResultQuickAnswer value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.quickAnswerTag);
      QuickAnswerInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.answers);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PResultQuickAnswer decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setQuickAnswerTag(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.answers.add(QuickAnswerInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PResultQuickAnswer redact(PResultQuickAnswer value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.answers, QuickAnswerInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
