// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PQuestionScene extends Message<PQuestionScene, PQuestionScene.Builder> {
  public static final ProtoAdapter<PQuestionScene> ADAPTER = new ProtoAdapter_PQuestionScene();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_HASNEXTQUESTION = false;

  public static final Integer DEFAULT_QUESTIONSEQ = 0;

  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.PartyRoom.PGameQuestion#ADAPTER"
  )
  private final PGameQuestion questionInfo;

  /**
   * 是否存在下一个游戏
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean hasNextquestion;

  /**
   * 题目序号
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer questionSeq;

  public PQuestionScene(PGameQuestion questionInfo, Boolean hasNextquestion, Integer questionSeq) {
    this(questionInfo, hasNextquestion, questionSeq, ByteString.EMPTY);
  }

  public PQuestionScene(PGameQuestion questionInfo, Boolean hasNextquestion, Integer questionSeq,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.questionInfo = questionInfo;
    this.hasNextquestion = hasNextquestion;
    this.questionSeq = questionSeq;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.questionInfo = questionInfo;
    builder.hasNextquestion = hasNextquestion;
    builder.questionSeq = questionSeq;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PQuestionScene)) return false;
    PQuestionScene o = (PQuestionScene) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(questionInfo, o.questionInfo)
        && Internal.equals(hasNextquestion, o.hasNextquestion)
        && Internal.equals(questionSeq, o.questionSeq);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (questionInfo != null ? questionInfo.hashCode() : 0);
      result = result * 37 + (hasNextquestion != null ? hasNextquestion.hashCode() : 0);
      result = result * 37 + (questionSeq != null ? questionSeq.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (questionInfo != null) builder.append(", questionInfo=").append(questionInfo);
    if (hasNextquestion != null) builder.append(", hasNextquestion=").append(hasNextquestion);
    if (questionSeq != null) builder.append(", questionSeq=").append(questionSeq);
    return builder.replace(0, 2, "PQuestionScene{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PQuestionScene.ADAPTER.encode(this);
  }

  public static final PQuestionScene parseFrom(byte[] data) throws IOException {
    PQuestionScene c = null;
       c = PQuestionScene.ADAPTER.decode(data);
    return c;
  }

  public PGameQuestion getQuestionInfo() {
    if(questionInfo==null){
        return new PGameQuestion.Builder().build();
    }
    return questionInfo;
  }

  /**
   * 是否存在下一个游戏
   */
  public Boolean getHasNextquestion() {
    if(hasNextquestion==null){
        return DEFAULT_HASNEXTQUESTION;
    }
    return hasNextquestion;
  }

  /**
   * 题目序号
   */
  public Integer getQuestionSeq() {
    if(questionSeq==null){
        return DEFAULT_QUESTIONSEQ;
    }
    return questionSeq;
  }

  public boolean hasQuestionInfo() {
    return questionInfo!=null;
  }

  /**
   * 是否存在下一个游戏
   */
  public boolean hasHasNextquestion() {
    return hasNextquestion!=null;
  }

  /**
   * 题目序号
   */
  public boolean hasQuestionSeq() {
    return questionSeq!=null;
  }

  public static final class Builder extends Message.Builder<PQuestionScene, Builder> {
    private PGameQuestion questionInfo;

    private Boolean hasNextquestion;

    private Integer questionSeq;

    public Builder() {
    }

    public Builder setQuestionInfo(PGameQuestion questionInfo) {
      this.questionInfo = questionInfo;
      return this;
    }

    /**
     * 是否存在下一个游戏
     */
    public Builder setHasNextquestion(Boolean hasNextquestion) {
      this.hasNextquestion = hasNextquestion;
      return this;
    }

    /**
     * 题目序号
     */
    public Builder setQuestionSeq(Integer questionSeq) {
      this.questionSeq = questionSeq;
      return this;
    }

    @Override
    public PQuestionScene build() {
      return new PQuestionScene(questionInfo, hasNextquestion, questionSeq, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PQuestionScene extends ProtoAdapter<PQuestionScene> {
    public ProtoAdapter_PQuestionScene() {
      super(FieldEncoding.LENGTH_DELIMITED, PQuestionScene.class);
    }

    @Override
    public int encodedSize(PQuestionScene value) {
      return PGameQuestion.ADAPTER.encodedSizeWithTag(1, value.questionInfo)
          + ProtoAdapter.BOOL.encodedSizeWithTag(2, value.hasNextquestion)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.questionSeq)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PQuestionScene value) throws IOException {
      PGameQuestion.ADAPTER.encodeWithTag(writer, 1, value.questionInfo);
      ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.hasNextquestion);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.questionSeq);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PQuestionScene decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setQuestionInfo(PGameQuestion.ADAPTER.decode(reader)); break;
          case 2: builder.setHasNextquestion(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.setQuestionSeq(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PQuestionScene redact(PQuestionScene value) {
      Builder builder = value.newBuilder();
      if (builder.questionInfo != null) builder.questionInfo = PGameQuestion.ADAPTER.redact(builder.questionInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
