// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: battle_room.proto
package com.zq.live.proto.BattleRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class BTeamScore extends Message<BTeamScore, BTeamScore.Builder> {
  public static final ProtoAdapter<BTeamScore> ADAPTER = new ProtoAdapter_BTeamScore();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_TEAMTAG = "";

  public static final Integer DEFAULT_TEAMSCORE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String teamTag;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer teamScore;

  public BTeamScore(String teamTag, Integer teamScore) {
    this(teamTag, teamScore, ByteString.EMPTY);
  }

  public BTeamScore(String teamTag, Integer teamScore, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.teamTag = teamTag;
    this.teamScore = teamScore;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.teamTag = teamTag;
    builder.teamScore = teamScore;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BTeamScore)) return false;
    BTeamScore o = (BTeamScore) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(teamTag, o.teamTag)
        && Internal.equals(teamScore, o.teamScore);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (teamTag != null ? teamTag.hashCode() : 0);
      result = result * 37 + (teamScore != null ? teamScore.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (teamTag != null) builder.append(", teamTag=").append(teamTag);
    if (teamScore != null) builder.append(", teamScore=").append(teamScore);
    return builder.replace(0, 2, "BTeamScore{").append('}').toString();
  }

  public byte[] toByteArray() {
    return BTeamScore.ADAPTER.encode(this);
  }

  public static final BTeamScore parseFrom(byte[] data) throws IOException {
    BTeamScore c = null;
       c = BTeamScore.ADAPTER.decode(data);
    return c;
  }

  public String getTeamTag() {
    if(teamTag==null){
        return DEFAULT_TEAMTAG;
    }
    return teamTag;
  }

  public Integer getTeamScore() {
    if(teamScore==null){
        return DEFAULT_TEAMSCORE;
    }
    return teamScore;
  }

  public boolean hasTeamTag() {
    return teamTag!=null;
  }

  public boolean hasTeamScore() {
    return teamScore!=null;
  }

  public static final class Builder extends Message.Builder<BTeamScore, Builder> {
    private String teamTag;

    private Integer teamScore;

    public Builder() {
    }

    public Builder setTeamTag(String teamTag) {
      this.teamTag = teamTag;
      return this;
    }

    public Builder setTeamScore(Integer teamScore) {
      this.teamScore = teamScore;
      return this;
    }

    @Override
    public BTeamScore build() {
      return new BTeamScore(teamTag, teamScore, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BTeamScore extends ProtoAdapter<BTeamScore> {
    public ProtoAdapter_BTeamScore() {
      super(FieldEncoding.LENGTH_DELIMITED, BTeamScore.class);
    }

    @Override
    public int encodedSize(BTeamScore value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.teamTag)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.teamScore)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BTeamScore value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.teamTag);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.teamScore);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BTeamScore decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTeamTag(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setTeamScore(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BTeamScore redact(BTeamScore value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
