// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: battle_room.proto
package com.zq.live.proto.BattleRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class BCardInfo extends Message<BCardInfo, BCardInfo.Builder> {
  public static final ProtoAdapter<BCardInfo> ADAPTER = new ProtoAdapter_BCardInfo();

  private static final long serialVersionUID = 0L;

  public static final ECardType DEFAULT_CARDTYPE = ECardType.CT_UNKNOWN;

  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.BattleRoom.ECardType#ADAPTER"
  )
  private final ECardType cardType;

  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.BattleRoom.BHelpCard#ADAPTER"
  )
  private final BHelpCard helpCard;

  @WireField(
      tag = 3,
      adapter = "com.zq.live.proto.BattleRoom.BSwitchCard#ADAPTER"
  )
  private final BSwitchCard switchCard;

  public BCardInfo(ECardType cardType, BHelpCard helpCard, BSwitchCard switchCard) {
    this(cardType, helpCard, switchCard, ByteString.EMPTY);
  }

  public BCardInfo(ECardType cardType, BHelpCard helpCard, BSwitchCard switchCard,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.cardType = cardType;
    this.helpCard = helpCard;
    this.switchCard = switchCard;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.cardType = cardType;
    builder.helpCard = helpCard;
    builder.switchCard = switchCard;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BCardInfo)) return false;
    BCardInfo o = (BCardInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(cardType, o.cardType)
        && Internal.equals(helpCard, o.helpCard)
        && Internal.equals(switchCard, o.switchCard);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (cardType != null ? cardType.hashCode() : 0);
      result = result * 37 + (helpCard != null ? helpCard.hashCode() : 0);
      result = result * 37 + (switchCard != null ? switchCard.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (cardType != null) builder.append(", cardType=").append(cardType);
    if (helpCard != null) builder.append(", helpCard=").append(helpCard);
    if (switchCard != null) builder.append(", switchCard=").append(switchCard);
    return builder.replace(0, 2, "BCardInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return BCardInfo.ADAPTER.encode(this);
  }

  public static final BCardInfo parseFrom(byte[] data) throws IOException {
    BCardInfo c = null;
       c = BCardInfo.ADAPTER.decode(data);
    return c;
  }

  public ECardType getCardType() {
    if(cardType==null){
        return new ECardType.Builder().build();
    }
    return cardType;
  }

  public BHelpCard getHelpCard() {
    if(helpCard==null){
        return new BHelpCard.Builder().build();
    }
    return helpCard;
  }

  public BSwitchCard getSwitchCard() {
    if(switchCard==null){
        return new BSwitchCard.Builder().build();
    }
    return switchCard;
  }

  public boolean hasCardType() {
    return cardType!=null;
  }

  public boolean hasHelpCard() {
    return helpCard!=null;
  }

  public boolean hasSwitchCard() {
    return switchCard!=null;
  }

  public static final class Builder extends Message.Builder<BCardInfo, Builder> {
    private ECardType cardType;

    private BHelpCard helpCard;

    private BSwitchCard switchCard;

    public Builder() {
    }

    public Builder setCardType(ECardType cardType) {
      this.cardType = cardType;
      return this;
    }

    public Builder setHelpCard(BHelpCard helpCard) {
      this.helpCard = helpCard;
      return this;
    }

    public Builder setSwitchCard(BSwitchCard switchCard) {
      this.switchCard = switchCard;
      return this;
    }

    @Override
    public BCardInfo build() {
      return new BCardInfo(cardType, helpCard, switchCard, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BCardInfo extends ProtoAdapter<BCardInfo> {
    public ProtoAdapter_BCardInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, BCardInfo.class);
    }

    @Override
    public int encodedSize(BCardInfo value) {
      return ECardType.ADAPTER.encodedSizeWithTag(1, value.cardType)
          + BHelpCard.ADAPTER.encodedSizeWithTag(2, value.helpCard)
          + BSwitchCard.ADAPTER.encodedSizeWithTag(3, value.switchCard)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BCardInfo value) throws IOException {
      ECardType.ADAPTER.encodeWithTag(writer, 1, value.cardType);
      BHelpCard.ADAPTER.encodeWithTag(writer, 2, value.helpCard);
      BSwitchCard.ADAPTER.encodeWithTag(writer, 3, value.switchCard);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BCardInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.setCardType(ECardType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.setHelpCard(BHelpCard.ADAPTER.decode(reader)); break;
          case 3: builder.setSwitchCard(BSwitchCard.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BCardInfo redact(BCardInfo value) {
      Builder builder = value.newBuilder();
      if (builder.helpCard != null) builder.helpCard = BHelpCard.ADAPTER.redact(builder.helpCard);
      if (builder.switchCard != null) builder.switchCard = BSwitchCard.ADAPTER.redact(builder.switchCard);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
