// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CombineRoom.proto
package com.zq.live.proto.CombineRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PickMsg extends Message<PickMsg, PickMsg.Builder> {
  public static final ProtoAdapter<PickMsg> ADAPTER = new ProtoAdapter_PickMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_FROMPICKUSERID = 0;

  public static final Integer DEFAULT_TOPICKUSERID = 0;

  /**
   * pick发出者
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer fromPickUserID;

  /**
   * pick接受者
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer toPickUserID;

  public PickMsg(Integer fromPickUserID, Integer toPickUserID) {
    this(fromPickUserID, toPickUserID, ByteString.EMPTY);
  }

  public PickMsg(Integer fromPickUserID, Integer toPickUserID, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.fromPickUserID = fromPickUserID;
    this.toPickUserID = toPickUserID;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.fromPickUserID = fromPickUserID;
    builder.toPickUserID = toPickUserID;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PickMsg)) return false;
    PickMsg o = (PickMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(fromPickUserID, o.fromPickUserID)
        && Internal.equals(toPickUserID, o.toPickUserID);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (fromPickUserID != null ? fromPickUserID.hashCode() : 0);
      result = result * 37 + (toPickUserID != null ? toPickUserID.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (fromPickUserID != null) builder.append(", fromPickUserID=").append(fromPickUserID);
    if (toPickUserID != null) builder.append(", toPickUserID=").append(toPickUserID);
    return builder.replace(0, 2, "PickMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PickMsg.ADAPTER.encode(this);
  }

  public static final PickMsg parseFrom(byte[] data) throws IOException {
    PickMsg c = null;
       c = PickMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * pick发出者
   */
  public Integer getFromPickUserID() {
    if(fromPickUserID==null){
        return DEFAULT_FROMPICKUSERID;
    }
    return fromPickUserID;
  }

  /**
   * pick接受者
   */
  public Integer getToPickUserID() {
    if(toPickUserID==null){
        return DEFAULT_TOPICKUSERID;
    }
    return toPickUserID;
  }

  /**
   * pick发出者
   */
  public boolean hasFromPickUserID() {
    return fromPickUserID!=null;
  }

  /**
   * pick接受者
   */
  public boolean hasToPickUserID() {
    return toPickUserID!=null;
  }

  public static final class Builder extends Message.Builder<PickMsg, Builder> {
    private Integer fromPickUserID;

    private Integer toPickUserID;

    public Builder() {
    }

    /**
     * pick发出者
     */
    public Builder setFromPickUserID(Integer fromPickUserID) {
      this.fromPickUserID = fromPickUserID;
      return this;
    }

    /**
     * pick接受者
     */
    public Builder setToPickUserID(Integer toPickUserID) {
      this.toPickUserID = toPickUserID;
      return this;
    }

    @Override
    public PickMsg build() {
      return new PickMsg(fromPickUserID, toPickUserID, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PickMsg extends ProtoAdapter<PickMsg> {
    public ProtoAdapter_PickMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, PickMsg.class);
    }

    @Override
    public int encodedSize(PickMsg value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.fromPickUserID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.toPickUserID)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PickMsg value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.fromPickUserID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.toPickUserID);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PickMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setFromPickUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setToPickUserID(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PickMsg redact(PickMsg value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
