// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.GrabRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class MachineScore extends Message<MachineScore, MachineScore.Builder> {
  public static final ProtoAdapter<MachineScore> ADAPTER = new ProtoAdapter_MachineScore();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_ITEMID = 0;

  public static final Integer DEFAULT_SCORE = 0;

  public static final Integer DEFAULT_NO = 0;

  public static final Integer DEFAULT_LINENUM = 0;

  /**
   * 演唱者
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer userID;

  /**
   * 演唱曲目
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer itemID;

  /**
   * 机器分数 (游戏开始后，使用特殊值999向其他端同步歌词行数)
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer score;

  /**
   * 对应截断后的歌词行号
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer no;

  /**
   * 歌词行数 总分为 100*lineNum*Percent
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer lineNum;

  public MachineScore(Integer userID, Integer itemID, Integer score, Integer no, Integer lineNum) {
    this(userID, itemID, score, no, lineNum, ByteString.EMPTY);
  }

  public MachineScore(Integer userID, Integer itemID, Integer score, Integer no, Integer lineNum,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.itemID = itemID;
    this.score = score;
    this.no = no;
    this.lineNum = lineNum;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.itemID = itemID;
    builder.score = score;
    builder.no = no;
    builder.lineNum = lineNum;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MachineScore)) return false;
    MachineScore o = (MachineScore) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(itemID, o.itemID)
        && Internal.equals(score, o.score)
        && Internal.equals(no, o.no)
        && Internal.equals(lineNum, o.lineNum);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (itemID != null ? itemID.hashCode() : 0);
      result = result * 37 + (score != null ? score.hashCode() : 0);
      result = result * 37 + (no != null ? no.hashCode() : 0);
      result = result * 37 + (lineNum != null ? lineNum.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (itemID != null) builder.append(", itemID=").append(itemID);
    if (score != null) builder.append(", score=").append(score);
    if (no != null) builder.append(", no=").append(no);
    if (lineNum != null) builder.append(", lineNum=").append(lineNum);
    return builder.replace(0, 2, "MachineScore{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MachineScore.ADAPTER.encode(this);
  }

  public static final MachineScore parseFrom(byte[] data) throws IOException {
    MachineScore c = null;
       c = MachineScore.ADAPTER.decode(data);
    return c;
  }

  /**
   * 演唱者
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 演唱曲目
   */
  public Integer getItemID() {
    if(itemID==null){
        return DEFAULT_ITEMID;
    }
    return itemID;
  }

  /**
   * 机器分数 (游戏开始后，使用特殊值999向其他端同步歌词行数)
   */
  public Integer getScore() {
    if(score==null){
        return DEFAULT_SCORE;
    }
    return score;
  }

  /**
   * 对应截断后的歌词行号
   */
  public Integer getNo() {
    if(no==null){
        return DEFAULT_NO;
    }
    return no;
  }

  /**
   * 歌词行数 总分为 100*lineNum*Percent
   */
  public Integer getLineNum() {
    if(lineNum==null){
        return DEFAULT_LINENUM;
    }
    return lineNum;
  }

  /**
   * 演唱者
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 演唱曲目
   */
  public boolean hasItemID() {
    return itemID!=null;
  }

  /**
   * 机器分数 (游戏开始后，使用特殊值999向其他端同步歌词行数)
   */
  public boolean hasScore() {
    return score!=null;
  }

  /**
   * 对应截断后的歌词行号
   */
  public boolean hasNo() {
    return no!=null;
  }

  /**
   * 歌词行数 总分为 100*lineNum*Percent
   */
  public boolean hasLineNum() {
    return lineNum!=null;
  }

  public static final class Builder extends Message.Builder<MachineScore, Builder> {
    private Integer userID;

    private Integer itemID;

    private Integer score;

    private Integer no;

    private Integer lineNum;

    public Builder() {
    }

    /**
     * 演唱者
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 演唱曲目
     */
    public Builder setItemID(Integer itemID) {
      this.itemID = itemID;
      return this;
    }

    /**
     * 机器分数 (游戏开始后，使用特殊值999向其他端同步歌词行数)
     */
    public Builder setScore(Integer score) {
      this.score = score;
      return this;
    }

    /**
     * 对应截断后的歌词行号
     */
    public Builder setNo(Integer no) {
      this.no = no;
      return this;
    }

    /**
     * 歌词行数 总分为 100*lineNum*Percent
     */
    public Builder setLineNum(Integer lineNum) {
      this.lineNum = lineNum;
      return this;
    }

    @Override
    public MachineScore build() {
      return new MachineScore(userID, itemID, score, no, lineNum, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MachineScore extends ProtoAdapter<MachineScore> {
    public ProtoAdapter_MachineScore() {
      super(FieldEncoding.LENGTH_DELIMITED, MachineScore.class);
    }

    @Override
    public int encodedSize(MachineScore value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.itemID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.score)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.no)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.lineNum)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MachineScore value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.itemID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.score);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.no);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.lineNum);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MachineScore decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setItemID(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setScore(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setNo(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setLineNum(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MachineScore redact(MachineScore value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
