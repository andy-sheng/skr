// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.GiftInfo;
import com.zq.live.proto.Common.UserInfo;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class GPrensentGiftMsg extends Message<GPrensentGiftMsg, GPrensentGiftMsg.Builder> {
  public static final ProtoAdapter<GPrensentGiftMsg> ADAPTER = new ProtoAdapter_GPrensentGiftMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_COUNT = 0;

  public static final Integer DEFAULT_ROOMID = 0;

  public static final Long DEFAULT_CONTINUEID = 0L;

  public static final Integer DEFAULT_CONTINUECNT = 0;

  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.Common.GiftInfo#ADAPTER"
  )
  private final GiftInfo giftInfo;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer count;

  @WireField(
      tag = 3,
      adapter = "com.zq.live.proto.Common.UserInfo#ADAPTER"
  )
  private final UserInfo sendUserInfo;

  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.Common.UserInfo#ADAPTER"
  )
  private final UserInfo receiveUserInfo;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roomID;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long continueID;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer continueCnt;

  public GPrensentGiftMsg(GiftInfo giftInfo, Integer count, UserInfo sendUserInfo,
      UserInfo receiveUserInfo, Integer roomID, Long continueID, Integer continueCnt) {
    this(giftInfo, count, sendUserInfo, receiveUserInfo, roomID, continueID, continueCnt, ByteString.EMPTY);
  }

  public GPrensentGiftMsg(GiftInfo giftInfo, Integer count, UserInfo sendUserInfo,
      UserInfo receiveUserInfo, Integer roomID, Long continueID, Integer continueCnt,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.giftInfo = giftInfo;
    this.count = count;
    this.sendUserInfo = sendUserInfo;
    this.receiveUserInfo = receiveUserInfo;
    this.roomID = roomID;
    this.continueID = continueID;
    this.continueCnt = continueCnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.giftInfo = giftInfo;
    builder.count = count;
    builder.sendUserInfo = sendUserInfo;
    builder.receiveUserInfo = receiveUserInfo;
    builder.roomID = roomID;
    builder.continueID = continueID;
    builder.continueCnt = continueCnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GPrensentGiftMsg)) return false;
    GPrensentGiftMsg o = (GPrensentGiftMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(giftInfo, o.giftInfo)
        && Internal.equals(count, o.count)
        && Internal.equals(sendUserInfo, o.sendUserInfo)
        && Internal.equals(receiveUserInfo, o.receiveUserInfo)
        && Internal.equals(roomID, o.roomID)
        && Internal.equals(continueID, o.continueID)
        && Internal.equals(continueCnt, o.continueCnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (giftInfo != null ? giftInfo.hashCode() : 0);
      result = result * 37 + (count != null ? count.hashCode() : 0);
      result = result * 37 + (sendUserInfo != null ? sendUserInfo.hashCode() : 0);
      result = result * 37 + (receiveUserInfo != null ? receiveUserInfo.hashCode() : 0);
      result = result * 37 + (roomID != null ? roomID.hashCode() : 0);
      result = result * 37 + (continueID != null ? continueID.hashCode() : 0);
      result = result * 37 + (continueCnt != null ? continueCnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (giftInfo != null) builder.append(", giftInfo=").append(giftInfo);
    if (count != null) builder.append(", count=").append(count);
    if (sendUserInfo != null) builder.append(", sendUserInfo=").append(sendUserInfo);
    if (receiveUserInfo != null) builder.append(", receiveUserInfo=").append(receiveUserInfo);
    if (roomID != null) builder.append(", roomID=").append(roomID);
    if (continueID != null) builder.append(", continueID=").append(continueID);
    if (continueCnt != null) builder.append(", continueCnt=").append(continueCnt);
    return builder.replace(0, 2, "GPrensentGiftMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GPrensentGiftMsg.ADAPTER.encode(this);
  }

  public static final GPrensentGiftMsg parseFrom(byte[] data) throws IOException {
    GPrensentGiftMsg c = null;
       c = GPrensentGiftMsg.ADAPTER.decode(data);
    return c;
  }

  public GiftInfo getGiftInfo() {
    if(giftInfo==null){
        return new GiftInfo.Builder().build();
    }
    return giftInfo;
  }

  public Integer getCount() {
    if(count==null){
        return DEFAULT_COUNT;
    }
    return count;
  }

  public UserInfo getSendUserInfo() {
    if(sendUserInfo==null){
        return new UserInfo.Builder().build();
    }
    return sendUserInfo;
  }

  public UserInfo getReceiveUserInfo() {
    if(receiveUserInfo==null){
        return new UserInfo.Builder().build();
    }
    return receiveUserInfo;
  }

  public Integer getRoomID() {
    if(roomID==null){
        return DEFAULT_ROOMID;
    }
    return roomID;
  }

  public Long getContinueID() {
    if(continueID==null){
        return DEFAULT_CONTINUEID;
    }
    return continueID;
  }

  public Integer getContinueCnt() {
    if(continueCnt==null){
        return DEFAULT_CONTINUECNT;
    }
    return continueCnt;
  }

  public boolean hasGiftInfo() {
    return giftInfo!=null;
  }

  public boolean hasCount() {
    return count!=null;
  }

  public boolean hasSendUserInfo() {
    return sendUserInfo!=null;
  }

  public boolean hasReceiveUserInfo() {
    return receiveUserInfo!=null;
  }

  public boolean hasRoomID() {
    return roomID!=null;
  }

  public boolean hasContinueID() {
    return continueID!=null;
  }

  public boolean hasContinueCnt() {
    return continueCnt!=null;
  }

  public static final class Builder extends Message.Builder<GPrensentGiftMsg, Builder> {
    private GiftInfo giftInfo;

    private Integer count;

    private UserInfo sendUserInfo;

    private UserInfo receiveUserInfo;

    private Integer roomID;

    private Long continueID;

    private Integer continueCnt;

    public Builder() {
    }

    public Builder setGiftInfo(GiftInfo giftInfo) {
      this.giftInfo = giftInfo;
      return this;
    }

    public Builder setCount(Integer count) {
      this.count = count;
      return this;
    }

    public Builder setSendUserInfo(UserInfo sendUserInfo) {
      this.sendUserInfo = sendUserInfo;
      return this;
    }

    public Builder setReceiveUserInfo(UserInfo receiveUserInfo) {
      this.receiveUserInfo = receiveUserInfo;
      return this;
    }

    public Builder setRoomID(Integer roomID) {
      this.roomID = roomID;
      return this;
    }

    public Builder setContinueID(Long continueID) {
      this.continueID = continueID;
      return this;
    }

    public Builder setContinueCnt(Integer continueCnt) {
      this.continueCnt = continueCnt;
      return this;
    }

    @Override
    public GPrensentGiftMsg build() {
      return new GPrensentGiftMsg(giftInfo, count, sendUserInfo, receiveUserInfo, roomID, continueID, continueCnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GPrensentGiftMsg extends ProtoAdapter<GPrensentGiftMsg> {
    public ProtoAdapter_GPrensentGiftMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, GPrensentGiftMsg.class);
    }

    @Override
    public int encodedSize(GPrensentGiftMsg value) {
      return GiftInfo.ADAPTER.encodedSizeWithTag(1, value.giftInfo)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.count)
          + UserInfo.ADAPTER.encodedSizeWithTag(3, value.sendUserInfo)
          + UserInfo.ADAPTER.encodedSizeWithTag(4, value.receiveUserInfo)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.roomID)
          + ProtoAdapter.SINT64.encodedSizeWithTag(6, value.continueID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.continueCnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GPrensentGiftMsg value) throws IOException {
      GiftInfo.ADAPTER.encodeWithTag(writer, 1, value.giftInfo);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.count);
      UserInfo.ADAPTER.encodeWithTag(writer, 3, value.sendUserInfo);
      UserInfo.ADAPTER.encodeWithTag(writer, 4, value.receiveUserInfo);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.roomID);
      ProtoAdapter.SINT64.encodeWithTag(writer, 6, value.continueID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.continueCnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GPrensentGiftMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setGiftInfo(GiftInfo.ADAPTER.decode(reader)); break;
          case 2: builder.setCount(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setSendUserInfo(UserInfo.ADAPTER.decode(reader)); break;
          case 4: builder.setReceiveUserInfo(UserInfo.ADAPTER.decode(reader)); break;
          case 5: builder.setRoomID(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setContinueID(ProtoAdapter.SINT64.decode(reader)); break;
          case 7: builder.setContinueCnt(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GPrensentGiftMsg redact(GPrensentGiftMsg value) {
      Builder builder = value.newBuilder();
      if (builder.giftInfo != null) builder.giftInfo = GiftInfo.ADAPTER.redact(builder.giftInfo);
      if (builder.sendUserInfo != null) builder.sendUserInfo = UserInfo.ADAPTER.redact(builder.sendUserInfo);
      if (builder.receiveUserInfo != null) builder.receiveUserInfo = UserInfo.ADAPTER.redact(builder.receiveUserInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
