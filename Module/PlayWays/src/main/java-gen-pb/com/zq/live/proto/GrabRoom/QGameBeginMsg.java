// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.GrabRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class QGameBeginMsg extends Message<QGameBeginMsg, QGameBeginMsg.Builder> {
  public static final ProtoAdapter<QGameBeginMsg> ADAPTER = new ProtoAdapter_QGameBeginMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ROOMID = 0;

  /**
   * 房间id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roomID;

  /**
   * 当前轮次信息
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.GrabRoom.QRoundInfo#ADAPTER"
  )
  private final QRoundInfo currentRound;

  /**
   * 配置信息
   */
  @WireField(
      tag = 3,
      adapter = "com.zq.live.proto.GrabRoom.QGameConfig#ADAPTER"
  )
  private final QGameConfig config;

  public QGameBeginMsg(Integer roomID, QRoundInfo currentRound, QGameConfig config) {
    this(roomID, currentRound, config, ByteString.EMPTY);
  }

  public QGameBeginMsg(Integer roomID, QRoundInfo currentRound, QGameConfig config,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roomID = roomID;
    this.currentRound = currentRound;
    this.config = config;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roomID = roomID;
    builder.currentRound = currentRound;
    builder.config = config;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof QGameBeginMsg)) return false;
    QGameBeginMsg o = (QGameBeginMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roomID, o.roomID)
        && Internal.equals(currentRound, o.currentRound)
        && Internal.equals(config, o.config);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roomID != null ? roomID.hashCode() : 0);
      result = result * 37 + (currentRound != null ? currentRound.hashCode() : 0);
      result = result * 37 + (config != null ? config.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roomID != null) builder.append(", roomID=").append(roomID);
    if (currentRound != null) builder.append(", currentRound=").append(currentRound);
    if (config != null) builder.append(", config=").append(config);
    return builder.replace(0, 2, "QGameBeginMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return QGameBeginMsg.ADAPTER.encode(this);
  }

  public static final QGameBeginMsg parseFrom(byte[] data) throws IOException {
    QGameBeginMsg c = null;
       c = QGameBeginMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 房间id
   */
  public Integer getRoomID() {
    if(roomID==null){
        return DEFAULT_ROOMID;
    }
    return roomID;
  }

  /**
   * 当前轮次信息
   */
  public QRoundInfo getCurrentRound() {
    if(currentRound==null){
        return new QRoundInfo.Builder().build();
    }
    return currentRound;
  }

  /**
   * 配置信息
   */
  public QGameConfig getConfig() {
    if(config==null){
        return new QGameConfig.Builder().build();
    }
    return config;
  }

  /**
   * 房间id
   */
  public boolean hasRoomID() {
    return roomID!=null;
  }

  /**
   * 当前轮次信息
   */
  public boolean hasCurrentRound() {
    return currentRound!=null;
  }

  /**
   * 配置信息
   */
  public boolean hasConfig() {
    return config!=null;
  }

  public static final class Builder extends Message.Builder<QGameBeginMsg, Builder> {
    private Integer roomID;

    private QRoundInfo currentRound;

    private QGameConfig config;

    public Builder() {
    }

    /**
     * 房间id
     */
    public Builder setRoomID(Integer roomID) {
      this.roomID = roomID;
      return this;
    }

    /**
     * 当前轮次信息
     */
    public Builder setCurrentRound(QRoundInfo currentRound) {
      this.currentRound = currentRound;
      return this;
    }

    /**
     * 配置信息
     */
    public Builder setConfig(QGameConfig config) {
      this.config = config;
      return this;
    }

    @Override
    public QGameBeginMsg build() {
      return new QGameBeginMsg(roomID, currentRound, config, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_QGameBeginMsg extends ProtoAdapter<QGameBeginMsg> {
    public ProtoAdapter_QGameBeginMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, QGameBeginMsg.class);
    }

    @Override
    public int encodedSize(QGameBeginMsg value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.roomID)
          + QRoundInfo.ADAPTER.encodedSizeWithTag(2, value.currentRound)
          + QGameConfig.ADAPTER.encodedSizeWithTag(3, value.config)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, QGameBeginMsg value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.roomID);
      QRoundInfo.ADAPTER.encodeWithTag(writer, 2, value.currentRound);
      QGameConfig.ADAPTER.encodeWithTag(writer, 3, value.config);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public QGameBeginMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoomID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setCurrentRound(QRoundInfo.ADAPTER.decode(reader)); break;
          case 3: builder.setConfig(QGameConfig.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public QGameBeginMsg redact(QGameBeginMsg value) {
      Builder builder = value.newBuilder();
      if (builder.currentRound != null) builder.currentRound = QRoundInfo.ADAPTER.redact(builder.currentRound);
      if (builder.config != null) builder.config = QGameConfig.ADAPTER.redact(builder.config);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
