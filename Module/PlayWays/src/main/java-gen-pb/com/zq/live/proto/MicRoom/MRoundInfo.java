// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: mic_room.proto
package com.zq.live.proto.MicRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.BackgroundShowInfo;
import com.zq.live.proto.Common.MusicInfo;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class MRoundInfo extends Message<MRoundInfo, MRoundInfo.Builder> {
  public static final ProtoAdapter<MRoundInfo> ADAPTER = new ProtoAdapter_MRoundInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_ROUNDSEQ = 0;

  public static final Integer DEFAULT_INTROBEGINMS = 0;

  public static final Integer DEFAULT_INTROENDMS = 0;

  public static final Integer DEFAULT_SINGBEGINMS = 0;

  public static final Integer DEFAULT_SINGENDMS = 0;

  public static final EMRoundStatus DEFAULT_STATUS = EMRoundStatus.MRS_UNKNOWN;

  public static final EMRoundOverReason DEFAULT_OVERREASON = EMRoundOverReason.MROR_UNKNOWN;

  public static final EMWantSingType DEFAULT_WANTSINGTYPE = EMWantSingType.MWST_UNKNOWN;

  /**
   * 抢唱成功的玩家id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer userID;

  /**
   * 主轮次
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roundSeq;

  /**
   * 导唱开始相对时间（相对于startTimeMs时间） p.s.导唱为等待阶段
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer introBeginMs;

  /**
   * 导唱结束相对时间（相对于startTimeMs时间） p.s.导唱为等待阶段
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer introEndMs;

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer singBeginMs;

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer singEndMs;

  /**
   * 轮次状态
   */
  @WireField(
      tag = 8,
      adapter = "com.zq.live.proto.MicRoom.EMRoundStatus#ADAPTER"
  )
  private final EMRoundStatus status;

  /**
   * 切换轮次原因
   */
  @WireField(
      tag = 9,
      adapter = "com.zq.live.proto.MicRoom.EMRoundOverReason#ADAPTER"
  )
  private final EMRoundOverReason overReason;

  /**
   * 本轮次的歌曲信息
   */
  @WireField(
      tag = 10,
      adapter = "com.zq.live.proto.Common.MusicInfo#ADAPTER"
  )
  private final MusicInfo music;

  /**
   * 用户列表
   */
  @WireField(
      tag = 11,
      adapter = "com.zq.live.proto.MicRoom.MOnlineInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<MOnlineInfo> users;

  /**
   * 抢唱方式
   */
  @WireField(
      tag = 12,
      adapter = "com.zq.live.proto.MicRoom.EMWantSingType#ADAPTER"
  )
  private final EMWantSingType wantSingType;

  /**
   * 合唱：内部轮次信息
   */
  @WireField(
      tag = 13,
      adapter = "com.zq.live.proto.MicRoom.MCHOInnerRoundInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<MCHOInnerRoundInfo> CHORoundInfos;

  /**
   * spk：内部轮次信息
   */
  @WireField(
      tag = 14,
      adapter = "com.zq.live.proto.MicRoom.MSPKInnerRoundInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<MSPKInnerRoundInfo> SPKRoundInfos;

  /**
   * 单唱结果
   */
  @WireField(
      tag = 15,
      adapter = "com.zq.live.proto.MicRoom.MCommonRoundResult#ADAPTER"
  )
  private final MCommonRoundResult commonRoundResult;

  /**
   * 背景效果
   */
  @WireField(
      tag = 16,
      adapter = "com.zq.live.proto.Common.BackgroundShowInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<BackgroundShowInfo> showInfos;

  public MRoundInfo(Integer userID, Integer roundSeq, Integer introBeginMs, Integer introEndMs,
      Integer singBeginMs, Integer singEndMs, EMRoundStatus status, EMRoundOverReason overReason,
      MusicInfo music, List<MOnlineInfo> users, EMWantSingType wantSingType,
      List<MCHOInnerRoundInfo> CHORoundInfos, List<MSPKInnerRoundInfo> SPKRoundInfos,
      MCommonRoundResult commonRoundResult, List<BackgroundShowInfo> showInfos) {
    this(userID, roundSeq, introBeginMs, introEndMs, singBeginMs, singEndMs, status, overReason, music, users, wantSingType, CHORoundInfos, SPKRoundInfos, commonRoundResult, showInfos, ByteString.EMPTY);
  }

  public MRoundInfo(Integer userID, Integer roundSeq, Integer introBeginMs, Integer introEndMs,
      Integer singBeginMs, Integer singEndMs, EMRoundStatus status, EMRoundOverReason overReason,
      MusicInfo music, List<MOnlineInfo> users, EMWantSingType wantSingType,
      List<MCHOInnerRoundInfo> CHORoundInfos, List<MSPKInnerRoundInfo> SPKRoundInfos,
      MCommonRoundResult commonRoundResult, List<BackgroundShowInfo> showInfos,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.roundSeq = roundSeq;
    this.introBeginMs = introBeginMs;
    this.introEndMs = introEndMs;
    this.singBeginMs = singBeginMs;
    this.singEndMs = singEndMs;
    this.status = status;
    this.overReason = overReason;
    this.music = music;
    this.users = Internal.immutableCopyOf("users", users);
    this.wantSingType = wantSingType;
    this.CHORoundInfos = Internal.immutableCopyOf("CHORoundInfos", CHORoundInfos);
    this.SPKRoundInfos = Internal.immutableCopyOf("SPKRoundInfos", SPKRoundInfos);
    this.commonRoundResult = commonRoundResult;
    this.showInfos = Internal.immutableCopyOf("showInfos", showInfos);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.roundSeq = roundSeq;
    builder.introBeginMs = introBeginMs;
    builder.introEndMs = introEndMs;
    builder.singBeginMs = singBeginMs;
    builder.singEndMs = singEndMs;
    builder.status = status;
    builder.overReason = overReason;
    builder.music = music;
    builder.users = Internal.copyOf("users", users);
    builder.wantSingType = wantSingType;
    builder.CHORoundInfos = Internal.copyOf("CHORoundInfos", CHORoundInfos);
    builder.SPKRoundInfos = Internal.copyOf("SPKRoundInfos", SPKRoundInfos);
    builder.commonRoundResult = commonRoundResult;
    builder.showInfos = Internal.copyOf("showInfos", showInfos);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MRoundInfo)) return false;
    MRoundInfo o = (MRoundInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(roundSeq, o.roundSeq)
        && Internal.equals(introBeginMs, o.introBeginMs)
        && Internal.equals(introEndMs, o.introEndMs)
        && Internal.equals(singBeginMs, o.singBeginMs)
        && Internal.equals(singEndMs, o.singEndMs)
        && Internal.equals(status, o.status)
        && Internal.equals(overReason, o.overReason)
        && Internal.equals(music, o.music)
        && users.equals(o.users)
        && Internal.equals(wantSingType, o.wantSingType)
        && CHORoundInfos.equals(o.CHORoundInfos)
        && SPKRoundInfos.equals(o.SPKRoundInfos)
        && Internal.equals(commonRoundResult, o.commonRoundResult)
        && showInfos.equals(o.showInfos);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (roundSeq != null ? roundSeq.hashCode() : 0);
      result = result * 37 + (introBeginMs != null ? introBeginMs.hashCode() : 0);
      result = result * 37 + (introEndMs != null ? introEndMs.hashCode() : 0);
      result = result * 37 + (singBeginMs != null ? singBeginMs.hashCode() : 0);
      result = result * 37 + (singEndMs != null ? singEndMs.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (overReason != null ? overReason.hashCode() : 0);
      result = result * 37 + (music != null ? music.hashCode() : 0);
      result = result * 37 + users.hashCode();
      result = result * 37 + (wantSingType != null ? wantSingType.hashCode() : 0);
      result = result * 37 + CHORoundInfos.hashCode();
      result = result * 37 + SPKRoundInfos.hashCode();
      result = result * 37 + (commonRoundResult != null ? commonRoundResult.hashCode() : 0);
      result = result * 37 + showInfos.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (roundSeq != null) builder.append(", roundSeq=").append(roundSeq);
    if (introBeginMs != null) builder.append(", introBeginMs=").append(introBeginMs);
    if (introEndMs != null) builder.append(", introEndMs=").append(introEndMs);
    if (singBeginMs != null) builder.append(", singBeginMs=").append(singBeginMs);
    if (singEndMs != null) builder.append(", singEndMs=").append(singEndMs);
    if (status != null) builder.append(", status=").append(status);
    if (overReason != null) builder.append(", overReason=").append(overReason);
    if (music != null) builder.append(", music=").append(music);
    if (!users.isEmpty()) builder.append(", users=").append(users);
    if (wantSingType != null) builder.append(", wantSingType=").append(wantSingType);
    if (!CHORoundInfos.isEmpty()) builder.append(", CHORoundInfos=").append(CHORoundInfos);
    if (!SPKRoundInfos.isEmpty()) builder.append(", SPKRoundInfos=").append(SPKRoundInfos);
    if (commonRoundResult != null) builder.append(", commonRoundResult=").append(commonRoundResult);
    if (!showInfos.isEmpty()) builder.append(", showInfos=").append(showInfos);
    return builder.replace(0, 2, "MRoundInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MRoundInfo.ADAPTER.encode(this);
  }

  public static final MRoundInfo parseFrom(byte[] data) throws IOException {
    MRoundInfo c = null;
       c = MRoundInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 抢唱成功的玩家id
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 主轮次
   */
  public Integer getRoundSeq() {
    if(roundSeq==null){
        return DEFAULT_ROUNDSEQ;
    }
    return roundSeq;
  }

  /**
   * 导唱开始相对时间（相对于startTimeMs时间） p.s.导唱为等待阶段
   */
  public Integer getIntroBeginMs() {
    if(introBeginMs==null){
        return DEFAULT_INTROBEGINMS;
    }
    return introBeginMs;
  }

  /**
   * 导唱结束相对时间（相对于startTimeMs时间） p.s.导唱为等待阶段
   */
  public Integer getIntroEndMs() {
    if(introEndMs==null){
        return DEFAULT_INTROENDMS;
    }
    return introEndMs;
  }

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  public Integer getSingBeginMs() {
    if(singBeginMs==null){
        return DEFAULT_SINGBEGINMS;
    }
    return singBeginMs;
  }

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  public Integer getSingEndMs() {
    if(singEndMs==null){
        return DEFAULT_SINGENDMS;
    }
    return singEndMs;
  }

  /**
   * 轮次状态
   */
  public EMRoundStatus getStatus() {
    if(status==null){
        return new EMRoundStatus.Builder().build();
    }
    return status;
  }

  /**
   * 切换轮次原因
   */
  public EMRoundOverReason getOverReason() {
    if(overReason==null){
        return new EMRoundOverReason.Builder().build();
    }
    return overReason;
  }

  /**
   * 本轮次的歌曲信息
   */
  public MusicInfo getMusic() {
    if(music==null){
        return new MusicInfo.Builder().build();
    }
    return music;
  }

  /**
   * 用户列表
   */
  public List<MOnlineInfo> getUsersList() {
    if(users==null){
        return new java.util.ArrayList<MOnlineInfo>();
    }
    return users;
  }

  /**
   * 抢唱方式
   */
  public EMWantSingType getWantSingType() {
    if(wantSingType==null){
        return new EMWantSingType.Builder().build();
    }
    return wantSingType;
  }

  /**
   * 合唱：内部轮次信息
   */
  public List<MCHOInnerRoundInfo> getCHORoundInfosList() {
    if(CHORoundInfos==null){
        return new java.util.ArrayList<MCHOInnerRoundInfo>();
    }
    return CHORoundInfos;
  }

  /**
   * spk：内部轮次信息
   */
  public List<MSPKInnerRoundInfo> getSPKRoundInfosList() {
    if(SPKRoundInfos==null){
        return new java.util.ArrayList<MSPKInnerRoundInfo>();
    }
    return SPKRoundInfos;
  }

  /**
   * 单唱结果
   */
  public MCommonRoundResult getCommonRoundResult() {
    if(commonRoundResult==null){
        return new MCommonRoundResult.Builder().build();
    }
    return commonRoundResult;
  }

  /**
   * 背景效果
   */
  public List<BackgroundShowInfo> getShowInfosList() {
    if(showInfos==null){
        return new java.util.ArrayList<BackgroundShowInfo>();
    }
    return showInfos;
  }

  /**
   * 抢唱成功的玩家id
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 主轮次
   */
  public boolean hasRoundSeq() {
    return roundSeq!=null;
  }

  /**
   * 导唱开始相对时间（相对于startTimeMs时间） p.s.导唱为等待阶段
   */
  public boolean hasIntroBeginMs() {
    return introBeginMs!=null;
  }

  /**
   * 导唱结束相对时间（相对于startTimeMs时间） p.s.导唱为等待阶段
   */
  public boolean hasIntroEndMs() {
    return introEndMs!=null;
  }

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  public boolean hasSingBeginMs() {
    return singBeginMs!=null;
  }

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  public boolean hasSingEndMs() {
    return singEndMs!=null;
  }

  /**
   * 轮次状态
   */
  public boolean hasStatus() {
    return status!=null;
  }

  /**
   * 切换轮次原因
   */
  public boolean hasOverReason() {
    return overReason!=null;
  }

  /**
   * 本轮次的歌曲信息
   */
  public boolean hasMusic() {
    return music!=null;
  }

  /**
   * 用户列表
   */
  public boolean hasUsersList() {
    return users!=null;
  }

  /**
   * 抢唱方式
   */
  public boolean hasWantSingType() {
    return wantSingType!=null;
  }

  /**
   * 合唱：内部轮次信息
   */
  public boolean hasCHORoundInfosList() {
    return CHORoundInfos!=null;
  }

  /**
   * spk：内部轮次信息
   */
  public boolean hasSPKRoundInfosList() {
    return SPKRoundInfos!=null;
  }

  /**
   * 单唱结果
   */
  public boolean hasCommonRoundResult() {
    return commonRoundResult!=null;
  }

  /**
   * 背景效果
   */
  public boolean hasShowInfosList() {
    return showInfos!=null;
  }

  public static final class Builder extends Message.Builder<MRoundInfo, Builder> {
    private Integer userID;

    private Integer roundSeq;

    private Integer introBeginMs;

    private Integer introEndMs;

    private Integer singBeginMs;

    private Integer singEndMs;

    private EMRoundStatus status;

    private EMRoundOverReason overReason;

    private MusicInfo music;

    private List<MOnlineInfo> users;

    private EMWantSingType wantSingType;

    private List<MCHOInnerRoundInfo> CHORoundInfos;

    private List<MSPKInnerRoundInfo> SPKRoundInfos;

    private MCommonRoundResult commonRoundResult;

    private List<BackgroundShowInfo> showInfos;

    public Builder() {
      users = Internal.newMutableList();
      CHORoundInfos = Internal.newMutableList();
      SPKRoundInfos = Internal.newMutableList();
      showInfos = Internal.newMutableList();
    }

    /**
     * 抢唱成功的玩家id
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 主轮次
     */
    public Builder setRoundSeq(Integer roundSeq) {
      this.roundSeq = roundSeq;
      return this;
    }

    /**
     * 导唱开始相对时间（相对于startTimeMs时间） p.s.导唱为等待阶段
     */
    public Builder setIntroBeginMs(Integer introBeginMs) {
      this.introBeginMs = introBeginMs;
      return this;
    }

    /**
     * 导唱结束相对时间（相对于startTimeMs时间） p.s.导唱为等待阶段
     */
    public Builder setIntroEndMs(Integer introEndMs) {
      this.introEndMs = introEndMs;
      return this;
    }

    /**
     * 演唱开始相对时间（相对于startTimeMs时间）
     */
    public Builder setSingBeginMs(Integer singBeginMs) {
      this.singBeginMs = singBeginMs;
      return this;
    }

    /**
     * 演唱结束相对时间（相对于startTimeMs时间）
     */
    public Builder setSingEndMs(Integer singEndMs) {
      this.singEndMs = singEndMs;
      return this;
    }

    /**
     * 轮次状态
     */
    public Builder setStatus(EMRoundStatus status) {
      this.status = status;
      return this;
    }

    /**
     * 切换轮次原因
     */
    public Builder setOverReason(EMRoundOverReason overReason) {
      this.overReason = overReason;
      return this;
    }

    /**
     * 本轮次的歌曲信息
     */
    public Builder setMusic(MusicInfo music) {
      this.music = music;
      return this;
    }

    /**
     * 用户列表
     */
    public Builder addAllUsers(List<MOnlineInfo> users) {
      Internal.checkElementsNotNull(users);
      this.users = users;
      return this;
    }

    /**
     * 抢唱方式
     */
    public Builder setWantSingType(EMWantSingType wantSingType) {
      this.wantSingType = wantSingType;
      return this;
    }

    /**
     * 合唱：内部轮次信息
     */
    public Builder addAllCHORoundInfos(List<MCHOInnerRoundInfo> CHORoundInfos) {
      Internal.checkElementsNotNull(CHORoundInfos);
      this.CHORoundInfos = CHORoundInfos;
      return this;
    }

    /**
     * spk：内部轮次信息
     */
    public Builder addAllSPKRoundInfos(List<MSPKInnerRoundInfo> SPKRoundInfos) {
      Internal.checkElementsNotNull(SPKRoundInfos);
      this.SPKRoundInfos = SPKRoundInfos;
      return this;
    }

    /**
     * 单唱结果
     */
    public Builder setCommonRoundResult(MCommonRoundResult commonRoundResult) {
      this.commonRoundResult = commonRoundResult;
      return this;
    }

    /**
     * 背景效果
     */
    public Builder addAllShowInfos(List<BackgroundShowInfo> showInfos) {
      Internal.checkElementsNotNull(showInfos);
      this.showInfos = showInfos;
      return this;
    }

    @Override
    public MRoundInfo build() {
      return new MRoundInfo(userID, roundSeq, introBeginMs, introEndMs, singBeginMs, singEndMs, status, overReason, music, users, wantSingType, CHORoundInfos, SPKRoundInfos, commonRoundResult, showInfos, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MRoundInfo extends ProtoAdapter<MRoundInfo> {
    public ProtoAdapter_MRoundInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, MRoundInfo.class);
    }

    @Override
    public int encodedSize(MRoundInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.roundSeq)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.introBeginMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.introEndMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.singBeginMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.singEndMs)
          + EMRoundStatus.ADAPTER.encodedSizeWithTag(8, value.status)
          + EMRoundOverReason.ADAPTER.encodedSizeWithTag(9, value.overReason)
          + MusicInfo.ADAPTER.encodedSizeWithTag(10, value.music)
          + MOnlineInfo.ADAPTER.asRepeated().encodedSizeWithTag(11, value.users)
          + EMWantSingType.ADAPTER.encodedSizeWithTag(12, value.wantSingType)
          + MCHOInnerRoundInfo.ADAPTER.asRepeated().encodedSizeWithTag(13, value.CHORoundInfos)
          + MSPKInnerRoundInfo.ADAPTER.asRepeated().encodedSizeWithTag(14, value.SPKRoundInfos)
          + MCommonRoundResult.ADAPTER.encodedSizeWithTag(15, value.commonRoundResult)
          + BackgroundShowInfo.ADAPTER.asRepeated().encodedSizeWithTag(16, value.showInfos)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MRoundInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.roundSeq);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.introBeginMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.introEndMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.singBeginMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.singEndMs);
      EMRoundStatus.ADAPTER.encodeWithTag(writer, 8, value.status);
      EMRoundOverReason.ADAPTER.encodeWithTag(writer, 9, value.overReason);
      MusicInfo.ADAPTER.encodeWithTag(writer, 10, value.music);
      MOnlineInfo.ADAPTER.asRepeated().encodeWithTag(writer, 11, value.users);
      EMWantSingType.ADAPTER.encodeWithTag(writer, 12, value.wantSingType);
      MCHOInnerRoundInfo.ADAPTER.asRepeated().encodeWithTag(writer, 13, value.CHORoundInfos);
      MSPKInnerRoundInfo.ADAPTER.asRepeated().encodeWithTag(writer, 14, value.SPKRoundInfos);
      MCommonRoundResult.ADAPTER.encodeWithTag(writer, 15, value.commonRoundResult);
      BackgroundShowInfo.ADAPTER.asRepeated().encodeWithTag(writer, 16, value.showInfos);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MRoundInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setRoundSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setIntroBeginMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setIntroEndMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setSingBeginMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setSingEndMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: {
            try {
              builder.setStatus(EMRoundStatus.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 9: {
            try {
              builder.setOverReason(EMRoundOverReason.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 10: builder.setMusic(MusicInfo.ADAPTER.decode(reader)); break;
          case 11: builder.users.add(MOnlineInfo.ADAPTER.decode(reader)); break;
          case 12: {
            try {
              builder.setWantSingType(EMWantSingType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 13: builder.CHORoundInfos.add(MCHOInnerRoundInfo.ADAPTER.decode(reader)); break;
          case 14: builder.SPKRoundInfos.add(MSPKInnerRoundInfo.ADAPTER.decode(reader)); break;
          case 15: builder.setCommonRoundResult(MCommonRoundResult.ADAPTER.decode(reader)); break;
          case 16: builder.showInfos.add(BackgroundShowInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MRoundInfo redact(MRoundInfo value) {
      Builder builder = value.newBuilder();
      if (builder.music != null) builder.music = MusicInfo.ADAPTER.redact(builder.music);
      Internal.redactElements(builder.users, MOnlineInfo.ADAPTER);
      Internal.redactElements(builder.CHORoundInfos, MCHOInnerRoundInfo.ADAPTER);
      Internal.redactElements(builder.SPKRoundInfos, MSPKInnerRoundInfo.ADAPTER);
      if (builder.commonRoundResult != null) builder.commonRoundResult = MCommonRoundResult.ADAPTER.redact(builder.commonRoundResult);
      Internal.redactElements(builder.showInfos, BackgroundShowInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
