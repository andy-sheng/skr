// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class QGameConfig extends Message<QGameConfig, QGameConfig.Builder> {
  public static final ProtoAdapter<QGameConfig> ADAPTER = new ProtoAdapter_QGameConfig();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_TOTALGAMEROUNDSEQ = 0;

  public static final Integer DEFAULT_ENABLESHOWBLIGHTWAITTIMEMS = 0;

  public static final Integer DEFAULT_ENABLESHOWMLIGHTWAITTIMEMS = 0;

  /**
   * 轮次总数
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer TotalGameRoundSeq;

  /**
   * 爆灯等待时间(毫秒)
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer EnableShowBLightWaitTimeMs;

  /**
   * 灭灯等待时间(毫秒)
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer EnableShowMLightWaitTimeMs;

  public QGameConfig(Integer TotalGameRoundSeq, Integer EnableShowBLightWaitTimeMs,
      Integer EnableShowMLightWaitTimeMs) {
    this(TotalGameRoundSeq, EnableShowBLightWaitTimeMs, EnableShowMLightWaitTimeMs, ByteString.EMPTY);
  }

  public QGameConfig(Integer TotalGameRoundSeq, Integer EnableShowBLightWaitTimeMs,
      Integer EnableShowMLightWaitTimeMs, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.TotalGameRoundSeq = TotalGameRoundSeq;
    this.EnableShowBLightWaitTimeMs = EnableShowBLightWaitTimeMs;
    this.EnableShowMLightWaitTimeMs = EnableShowMLightWaitTimeMs;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.TotalGameRoundSeq = TotalGameRoundSeq;
    builder.EnableShowBLightWaitTimeMs = EnableShowBLightWaitTimeMs;
    builder.EnableShowMLightWaitTimeMs = EnableShowMLightWaitTimeMs;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof QGameConfig)) return false;
    QGameConfig o = (QGameConfig) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(TotalGameRoundSeq, o.TotalGameRoundSeq)
        && Internal.equals(EnableShowBLightWaitTimeMs, o.EnableShowBLightWaitTimeMs)
        && Internal.equals(EnableShowMLightWaitTimeMs, o.EnableShowMLightWaitTimeMs);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (TotalGameRoundSeq != null ? TotalGameRoundSeq.hashCode() : 0);
      result = result * 37 + (EnableShowBLightWaitTimeMs != null ? EnableShowBLightWaitTimeMs.hashCode() : 0);
      result = result * 37 + (EnableShowMLightWaitTimeMs != null ? EnableShowMLightWaitTimeMs.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (TotalGameRoundSeq != null) builder.append(", TotalGameRoundSeq=").append(TotalGameRoundSeq);
    if (EnableShowBLightWaitTimeMs != null) builder.append(", EnableShowBLightWaitTimeMs=").append(EnableShowBLightWaitTimeMs);
    if (EnableShowMLightWaitTimeMs != null) builder.append(", EnableShowMLightWaitTimeMs=").append(EnableShowMLightWaitTimeMs);
    return builder.replace(0, 2, "QGameConfig{").append('}').toString();
  }

  public byte[] toByteArray() {
    return QGameConfig.ADAPTER.encode(this);
  }

  public static final QGameConfig parseFrom(byte[] data) throws IOException {
    QGameConfig c = null;
       c = QGameConfig.ADAPTER.decode(data);
    return c;
  }

  /**
   * 轮次总数
   */
  public Integer getTotalGameRoundSeq() {
    if(TotalGameRoundSeq==null){
        return DEFAULT_TOTALGAMEROUNDSEQ;
    }
    return TotalGameRoundSeq;
  }

  /**
   * 爆灯等待时间(毫秒)
   */
  public Integer getEnableShowBLightWaitTimeMs() {
    if(EnableShowBLightWaitTimeMs==null){
        return DEFAULT_ENABLESHOWBLIGHTWAITTIMEMS;
    }
    return EnableShowBLightWaitTimeMs;
  }

  /**
   * 灭灯等待时间(毫秒)
   */
  public Integer getEnableShowMLightWaitTimeMs() {
    if(EnableShowMLightWaitTimeMs==null){
        return DEFAULT_ENABLESHOWMLIGHTWAITTIMEMS;
    }
    return EnableShowMLightWaitTimeMs;
  }

  /**
   * 轮次总数
   */
  public boolean hasTotalGameRoundSeq() {
    return TotalGameRoundSeq!=null;
  }

  /**
   * 爆灯等待时间(毫秒)
   */
  public boolean hasEnableShowBLightWaitTimeMs() {
    return EnableShowBLightWaitTimeMs!=null;
  }

  /**
   * 灭灯等待时间(毫秒)
   */
  public boolean hasEnableShowMLightWaitTimeMs() {
    return EnableShowMLightWaitTimeMs!=null;
  }

  public static final class Builder extends Message.Builder<QGameConfig, Builder> {
    private Integer TotalGameRoundSeq;

    private Integer EnableShowBLightWaitTimeMs;

    private Integer EnableShowMLightWaitTimeMs;

    public Builder() {
    }

    /**
     * 轮次总数
     */
    public Builder setTotalGameRoundSeq(Integer TotalGameRoundSeq) {
      this.TotalGameRoundSeq = TotalGameRoundSeq;
      return this;
    }

    /**
     * 爆灯等待时间(毫秒)
     */
    public Builder setEnableShowBLightWaitTimeMs(Integer EnableShowBLightWaitTimeMs) {
      this.EnableShowBLightWaitTimeMs = EnableShowBLightWaitTimeMs;
      return this;
    }

    /**
     * 灭灯等待时间(毫秒)
     */
    public Builder setEnableShowMLightWaitTimeMs(Integer EnableShowMLightWaitTimeMs) {
      this.EnableShowMLightWaitTimeMs = EnableShowMLightWaitTimeMs;
      return this;
    }

    @Override
    public QGameConfig build() {
      return new QGameConfig(TotalGameRoundSeq, EnableShowBLightWaitTimeMs, EnableShowMLightWaitTimeMs, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_QGameConfig extends ProtoAdapter<QGameConfig> {
    public ProtoAdapter_QGameConfig() {
      super(FieldEncoding.LENGTH_DELIMITED, QGameConfig.class);
    }

    @Override
    public int encodedSize(QGameConfig value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.TotalGameRoundSeq)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.EnableShowBLightWaitTimeMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.EnableShowMLightWaitTimeMs)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, QGameConfig value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.TotalGameRoundSeq);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.EnableShowBLightWaitTimeMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.EnableShowMLightWaitTimeMs);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public QGameConfig decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTotalGameRoundSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setEnableShowBLightWaitTimeMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setEnableShowMLightWaitTimeMs(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public QGameConfig redact(QGameConfig value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
