// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.GrabRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.UserInfo;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
 * --proto_path=./proto --java_out=./Module/PlayWays/src/main/java-gen-pb/ Room.proto
 * 房间消息：此结构会通过pb编码后，通过聊天室通道到达客户端
 */
public final class RoomMsg extends Message<RoomMsg, RoomMsg.Builder> {
  public static final ProtoAdapter<RoomMsg> ADAPTER = new ProtoAdapter_RoomMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_TIMEMS = 0L;

  public static final ERoomMsgType DEFAULT_MSGTYPE = ERoomMsgType.RM_UNKNOWN;

  public static final Integer DEFAULT_ROOMID = 0;

  public static final Long DEFAULT_NO = 0L;

  public static final EMsgPosType DEFAULT_POSTYPE = EMsgPosType.EPT_UNKNOWN;

  /**
   * 房间消息产生时间，单位毫秒
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long timeMs;

  /**
   * 消息类型
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.GrabRoom.ERoomMsgType#ADAPTER"
  )
  private final ERoomMsgType msgType;

  /**
   * 房间ID
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roomID;

  /**
   * 房间内的消息序号，每个房间有自己的消息序号,不存在则系统生成,一般情况下调用方不必设置
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long no;

  /**
   * 消息显示位置类型
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.GrabRoom.EMsgPosType#ADAPTER"
  )
  private final EMsgPosType posType;

  /**
   * 发送者简要信息
   */
  @WireField(
      tag = 6,
      adapter = "com.zq.live.proto.Common.UserInfo#ADAPTER"
  )
  private final UserInfo sender;

  /**
   * 评论消息 msgType == RM_COMMENT
   */
  @WireField(
      tag = 10,
      adapter = "com.zq.live.proto.GrabRoom.CommentMsg#ADAPTER"
  )
  private final CommentMsg commentMsg;

  /**
   * 特殊表情消息  msgType == RM_SPECIAL_EMOJI
   */
  @WireField(
      tag = 11,
      adapter = "com.zq.live.proto.GrabRoom.SpecialEmojiMsg#ADAPTER"
  )
  private final SpecialEmojiMsg specialEmojiMsg;

  /**
   * 动态表情消息  msgType == RM_DYNAMIC_EMOJI
   */
  @WireField(
      tag = 12,
      adapter = "com.zq.live.proto.GrabRoom.DynamicEmojiMsg#ADAPTER"
  )
  private final DynamicEmojiMsg dynamicemojiMsg;

  /**
   * 语音消息
   */
  @WireField(
      tag = 13,
      adapter = "com.zq.live.proto.GrabRoom.AudioMsg#ADAPTER"
  )
  private final AudioMsg audioMsg;

  /**
   * 加入游戏指令消息 msgType == RM_JOIN_ACTION
   */
  @WireField(
      tag = 100,
      adapter = "com.zq.live.proto.GrabRoom.JoinActionMsg#ADAPTER"
  )
  private final JoinActionMsg joinActionMsg;

  /**
   * 加入游戏通知消息 msgType == RM_JOIN_NOTICE
   */
  @WireField(
      tag = 101,
      adapter = "com.zq.live.proto.GrabRoom.JoinNoticeMsg#ADAPTER"
  )
  private final JoinNoticeMsg joinNoticeMsg;

  /**
   * 准备游戏通知消息 msgType == RM_READY_NOTICE
   */
  @WireField(
      tag = 102,
      adapter = "com.zq.live.proto.GrabRoom.ReadyNoticeMsg#ADAPTER"
  )
  private final ReadyNoticeMsg readyNoticeMsg;

  /**
   * 游戏轮次结束通知消息 msgType == RM_ROUND_OVER
   */
  @WireField(
      tag = 103,
      adapter = "com.zq.live.proto.GrabRoom.RoundOverMsg#ADAPTER"
  )
  private final RoundOverMsg roundOverMsg;

  /**
   * 轮次和游戏结束通知消息 msgType == RM_ROUND_AND_GAME_OVER
   */
  @WireField(
      tag = 104,
      adapter = "com.zq.live.proto.GrabRoom.RoundAndGameOverMsg#ADAPTER"
  )
  private final RoundAndGameOverMsg roundAndGameOverMsg;

  /**
   * app进程后台通知  msgType ==  RM_APP_SWAP
   */
  @WireField(
      tag = 105,
      adapter = "com.zq.live.proto.GrabRoom.AppSwapMsg#ADAPTER"
  )
  private final AppSwapMsg appSwapMsg;

  /**
   * 状态同步消息 msgType == RM_SYNC_STATUS
   */
  @WireField(
      tag = 106,
      adapter = "com.zq.live.proto.GrabRoom.SyncStatusMsg#ADAPTER"
  )
  private final SyncStatusMsg syncStatusMsg;

  /**
   * 再开始游戏前，退出游戏通知  msgType == RM_EXIT_GAME_BEFORE_PLAY
   */
  @WireField(
      tag = 107,
      adapter = "com.zq.live.proto.GrabRoom.ExitGameBeforePlayMsg#ADAPTER"
  )
  private final ExitGameBeforePlayMsg exitGameBeforePlayMsg;

  /**
   * 游戏结束后，退出游戏通知  msgType == RM_EXIT_GAME_AFTER_PLAY
   */
  @WireField(
      tag = 108,
      adapter = "com.zq.live.proto.GrabRoom.ExitGameAfterPlayMsg#ADAPTER"
  )
  private final ExitGameAfterPlayMsg exitGameAfterPlayMsg;

  /**
   * 游戏中，不在Round时，退出游戏通知  msgType == RM_EXIT_GAME_ON_PLAY
   */
  @WireField(
      tag = 109,
      adapter = "com.zq.live.proto.GrabRoom.ExitGameOutRoundMsg#ADAPTER"
  )
  private final ExitGameOutRoundMsg exitGameOutRoundMsg;

  /**
   * 游戏投票结果消息 msgType == RM_VOTE_RESULT
   */
  @WireField(
      tag = 110,
      adapter = "com.zq.live.proto.GrabRoom.VoteResultMsg#ADAPTER"
  )
  private final VoteResultMsg voteResultMsg;

  /**
   * 实时机器评分 msgType == RM_ROUND_MACHINE_SCORE
   */
  @WireField(
      tag = 111,
      adapter = "com.zq.live.proto.GrabRoom.MachineScore#ADAPTER"
  )
  private final MachineScore machineScore;

  /**
   * 一唱到底：想唱消息,即抢唱
   */
  @WireField(
      tag = 112,
      adapter = "com.zq.live.proto.GrabRoom.QWantSingChanceMsg#ADAPTER"
  )
  private final QWantSingChanceMsg qWantSingChanceMsg;

  /**
   * 一唱到底：获得轮次机会,即抢唱成功
   */
  @WireField(
      tag = 113,
      adapter = "com.zq.live.proto.GrabRoom.QGetSingChanceMsg#ADAPTER"
  )
  private final QGetSingChanceMsg qGetSingChanceMsg;

  /**
   * 一唱到底：同步状态
   */
  @WireField(
      tag = 114,
      adapter = "com.zq.live.proto.GrabRoom.QSyncStatusMsg#ADAPTER"
  )
  private final QSyncStatusMsg qSyncStatusMsg;

  /**
   * 一唱到底：轮次结束
   */
  @WireField(
      tag = 115,
      adapter = "com.zq.live.proto.GrabRoom.QRoundOverMsg#ADAPTER"
  )
  private final QRoundOverMsg qRoundOverMsg;

  /**
   * 一唱到底：最后轮次结束，即游戏结束，游戏结果数据
   */
  @WireField(
      tag = 116,
      adapter = "com.zq.live.proto.GrabRoom.QRoundAndGameOverMsg#ADAPTER"
  )
  private final QRoundAndGameOverMsg qRoundAndGameOverMsg;

  /**
   * 一唱到底：使用QMLightMsg代替
   */
  @WireField(
      tag = 117,
      adapter = "com.zq.live.proto.GrabRoom.QNoPassSingMsg#ADAPTER"
  )
  private final QNoPassSingMsg qNoPassSingMsg;

  /**
   * 一唱到底：退出游戏
   */
  @WireField(
      tag = 118,
      adapter = "com.zq.live.proto.GrabRoom.QExitGameMsg#ADAPTER"
  )
  private final QExitGameMsg qExitGameMsg;

  /**
   * 排位赛：爆灯通知
   */
  @WireField(
      tag = 119,
      adapter = "com.zq.live.proto.GrabRoom.PKBLightMsg#ADAPTER"
  )
  private final PKBLightMsg pkBLightMsg;

  /**
   * 排位赛：灭灯通知
   */
  @WireField(
      tag = 120,
      adapter = "com.zq.live.proto.GrabRoom.PKMLightMsg#ADAPTER"
  )
  private final PKMLightMsg pkMLightMsg;

  /**
   * 一唱到底：爆灯通知
   */
  @WireField(
      tag = 121,
      adapter = "com.zq.live.proto.GrabRoom.QBLightMsg#ADAPTER"
  )
  private final QBLightMsg qBLightMsg;

  /**
   * 一唱到底：灭灯通知
   */
  @WireField(
      tag = 122,
      adapter = "com.zq.live.proto.GrabRoom.QMLightMsg#ADAPTER"
  )
  private final QMLightMsg qMLightMsg;

  /**
   * 加入游戏通知消息 msgType == RM_JOIN_NOTICE
   */
  @WireField(
      tag = 123,
      adapter = "com.zq.live.proto.GrabRoom.QJoinNoticeMsg#ADAPTER"
  )
  private final QJoinNoticeMsg qJoinNoticeMsg;

  /**
   * 一唱到底：加入游戏指令消息
   */
  @WireField(
      tag = 124,
      adapter = "com.zq.live.proto.GrabRoom.QJoinActionMsg#ADAPTER"
  )
  private final QJoinActionMsg qJoinActionMsg;

  /**
   * 一唱到底：踢人请求信令消息
   */
  @WireField(
      tag = 125,
      adapter = "com.zq.live.proto.GrabRoom.QKickUserRequestMsg#ADAPTER"
  )
  private final QKickUserRequestMsg qKickUserRequestMsg;

  /**
   * 一唱到底：踢人结果信令消息
   */
  @WireField(
      tag = 126,
      adapter = "com.zq.live.proto.GrabRoom.QKickUserResultMsg#ADAPTER"
  )
  private final QKickUserResultMsg qKickUserResultMsg;

  /**
   * 一唱到底：通知房间用户游戏开始
   */
  @WireField(
      tag = 127,
      adapter = "com.zq.live.proto.GrabRoom.QGameBeginMsg#ADAPTER"
  )
  private final QGameBeginMsg qGameBeginMsg;

  /**
   * 一唱到底：切换专场提示消息
   */
  @WireField(
      tag = 128,
      adapter = "com.zq.live.proto.GrabRoom.QChangeMusicTag#ADAPTER"
  )
  private final QChangeMusicTag qChangeMusicTag;

  /**
   * 一唱到底：金币变动信息
   */
  @WireField(
      tag = 129,
      adapter = "com.zq.live.proto.GrabRoom.QCoinChangeMsg#ADAPTER"
  )
  private final QCoinChangeMsg qCoinChangeMsg;

  /**
   * 一唱到底：合唱模式放弃演唱
   */
  @WireField(
      tag = 131,
      adapter = "com.zq.live.proto.GrabRoom.QCHOGiveUpMsg#ADAPTER"
  )
  private final QCHOGiveUpMsg qCHOGiveUpMsg;

  /**
   * 一唱到底：spk模式内部轮次结束
   */
  @WireField(
      tag = 132,
      adapter = "com.zq.live.proto.GrabRoom.QSPKInnerRoundOverMsg#ADAPTER"
  )
  private final QSPKInnerRoundOverMsg qSPKInnerRoundOverMsg;

  /**
   * 一唱到底：房主修改房间名称
   */
  @WireField(
      tag = 133,
      adapter = "com.zq.live.proto.GrabRoom.QChangeRoomName#ADAPTER"
  )
  private final QChangeRoomName qChangeRoomName;

  /**
   * 送礼物
   */
  @WireField(
      tag = 134,
      adapter = "com.zq.live.proto.GrabRoom.GPrensentGiftMsg#ADAPTER"
  )
  private final GPrensentGiftMsg gPrensentGiftMsg;

  public RoomMsg(Long timeMs, ERoomMsgType msgType, Integer roomID, Long no, EMsgPosType posType,
      UserInfo sender, CommentMsg commentMsg, SpecialEmojiMsg specialEmojiMsg,
      DynamicEmojiMsg dynamicemojiMsg, AudioMsg audioMsg, JoinActionMsg joinActionMsg,
      JoinNoticeMsg joinNoticeMsg, ReadyNoticeMsg readyNoticeMsg, RoundOverMsg roundOverMsg,
      RoundAndGameOverMsg roundAndGameOverMsg, AppSwapMsg appSwapMsg, SyncStatusMsg syncStatusMsg,
      ExitGameBeforePlayMsg exitGameBeforePlayMsg, ExitGameAfterPlayMsg exitGameAfterPlayMsg,
      ExitGameOutRoundMsg exitGameOutRoundMsg, VoteResultMsg voteResultMsg,
      MachineScore machineScore, QWantSingChanceMsg qWantSingChanceMsg,
      QGetSingChanceMsg qGetSingChanceMsg, QSyncStatusMsg qSyncStatusMsg,
      QRoundOverMsg qRoundOverMsg, QRoundAndGameOverMsg qRoundAndGameOverMsg,
      QNoPassSingMsg qNoPassSingMsg, QExitGameMsg qExitGameMsg, PKBLightMsg pkBLightMsg,
      PKMLightMsg pkMLightMsg, QBLightMsg qBLightMsg, QMLightMsg qMLightMsg,
      QJoinNoticeMsg qJoinNoticeMsg, QJoinActionMsg qJoinActionMsg,
      QKickUserRequestMsg qKickUserRequestMsg, QKickUserResultMsg qKickUserResultMsg,
      QGameBeginMsg qGameBeginMsg, QChangeMusicTag qChangeMusicTag, QCoinChangeMsg qCoinChangeMsg,
      QCHOGiveUpMsg qCHOGiveUpMsg, QSPKInnerRoundOverMsg qSPKInnerRoundOverMsg,
      QChangeRoomName qChangeRoomName, GPrensentGiftMsg gPrensentGiftMsg) {
    this(timeMs, msgType, roomID, no, posType, sender, commentMsg, specialEmojiMsg, dynamicemojiMsg, audioMsg, joinActionMsg, joinNoticeMsg, readyNoticeMsg, roundOverMsg, roundAndGameOverMsg, appSwapMsg, syncStatusMsg, exitGameBeforePlayMsg, exitGameAfterPlayMsg, exitGameOutRoundMsg, voteResultMsg, machineScore, qWantSingChanceMsg, qGetSingChanceMsg, qSyncStatusMsg, qRoundOverMsg, qRoundAndGameOverMsg, qNoPassSingMsg, qExitGameMsg, pkBLightMsg, pkMLightMsg, qBLightMsg, qMLightMsg, qJoinNoticeMsg, qJoinActionMsg, qKickUserRequestMsg, qKickUserResultMsg, qGameBeginMsg, qChangeMusicTag, qCoinChangeMsg, qCHOGiveUpMsg, qSPKInnerRoundOverMsg, qChangeRoomName, gPrensentGiftMsg, ByteString.EMPTY);
  }

  public RoomMsg(Long timeMs, ERoomMsgType msgType, Integer roomID, Long no, EMsgPosType posType,
      UserInfo sender, CommentMsg commentMsg, SpecialEmojiMsg specialEmojiMsg,
      DynamicEmojiMsg dynamicemojiMsg, AudioMsg audioMsg, JoinActionMsg joinActionMsg,
      JoinNoticeMsg joinNoticeMsg, ReadyNoticeMsg readyNoticeMsg, RoundOverMsg roundOverMsg,
      RoundAndGameOverMsg roundAndGameOverMsg, AppSwapMsg appSwapMsg, SyncStatusMsg syncStatusMsg,
      ExitGameBeforePlayMsg exitGameBeforePlayMsg, ExitGameAfterPlayMsg exitGameAfterPlayMsg,
      ExitGameOutRoundMsg exitGameOutRoundMsg, VoteResultMsg voteResultMsg,
      MachineScore machineScore, QWantSingChanceMsg qWantSingChanceMsg,
      QGetSingChanceMsg qGetSingChanceMsg, QSyncStatusMsg qSyncStatusMsg,
      QRoundOverMsg qRoundOverMsg, QRoundAndGameOverMsg qRoundAndGameOverMsg,
      QNoPassSingMsg qNoPassSingMsg, QExitGameMsg qExitGameMsg, PKBLightMsg pkBLightMsg,
      PKMLightMsg pkMLightMsg, QBLightMsg qBLightMsg, QMLightMsg qMLightMsg,
      QJoinNoticeMsg qJoinNoticeMsg, QJoinActionMsg qJoinActionMsg,
      QKickUserRequestMsg qKickUserRequestMsg, QKickUserResultMsg qKickUserResultMsg,
      QGameBeginMsg qGameBeginMsg, QChangeMusicTag qChangeMusicTag, QCoinChangeMsg qCoinChangeMsg,
      QCHOGiveUpMsg qCHOGiveUpMsg, QSPKInnerRoundOverMsg qSPKInnerRoundOverMsg,
      QChangeRoomName qChangeRoomName, GPrensentGiftMsg gPrensentGiftMsg,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.timeMs = timeMs;
    this.msgType = msgType;
    this.roomID = roomID;
    this.no = no;
    this.posType = posType;
    this.sender = sender;
    this.commentMsg = commentMsg;
    this.specialEmojiMsg = specialEmojiMsg;
    this.dynamicemojiMsg = dynamicemojiMsg;
    this.audioMsg = audioMsg;
    this.joinActionMsg = joinActionMsg;
    this.joinNoticeMsg = joinNoticeMsg;
    this.readyNoticeMsg = readyNoticeMsg;
    this.roundOverMsg = roundOverMsg;
    this.roundAndGameOverMsg = roundAndGameOverMsg;
    this.appSwapMsg = appSwapMsg;
    this.syncStatusMsg = syncStatusMsg;
    this.exitGameBeforePlayMsg = exitGameBeforePlayMsg;
    this.exitGameAfterPlayMsg = exitGameAfterPlayMsg;
    this.exitGameOutRoundMsg = exitGameOutRoundMsg;
    this.voteResultMsg = voteResultMsg;
    this.machineScore = machineScore;
    this.qWantSingChanceMsg = qWantSingChanceMsg;
    this.qGetSingChanceMsg = qGetSingChanceMsg;
    this.qSyncStatusMsg = qSyncStatusMsg;
    this.qRoundOverMsg = qRoundOverMsg;
    this.qRoundAndGameOverMsg = qRoundAndGameOverMsg;
    this.qNoPassSingMsg = qNoPassSingMsg;
    this.qExitGameMsg = qExitGameMsg;
    this.pkBLightMsg = pkBLightMsg;
    this.pkMLightMsg = pkMLightMsg;
    this.qBLightMsg = qBLightMsg;
    this.qMLightMsg = qMLightMsg;
    this.qJoinNoticeMsg = qJoinNoticeMsg;
    this.qJoinActionMsg = qJoinActionMsg;
    this.qKickUserRequestMsg = qKickUserRequestMsg;
    this.qKickUserResultMsg = qKickUserResultMsg;
    this.qGameBeginMsg = qGameBeginMsg;
    this.qChangeMusicTag = qChangeMusicTag;
    this.qCoinChangeMsg = qCoinChangeMsg;
    this.qCHOGiveUpMsg = qCHOGiveUpMsg;
    this.qSPKInnerRoundOverMsg = qSPKInnerRoundOverMsg;
    this.qChangeRoomName = qChangeRoomName;
    this.gPrensentGiftMsg = gPrensentGiftMsg;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.timeMs = timeMs;
    builder.msgType = msgType;
    builder.roomID = roomID;
    builder.no = no;
    builder.posType = posType;
    builder.sender = sender;
    builder.commentMsg = commentMsg;
    builder.specialEmojiMsg = specialEmojiMsg;
    builder.dynamicemojiMsg = dynamicemojiMsg;
    builder.audioMsg = audioMsg;
    builder.joinActionMsg = joinActionMsg;
    builder.joinNoticeMsg = joinNoticeMsg;
    builder.readyNoticeMsg = readyNoticeMsg;
    builder.roundOverMsg = roundOverMsg;
    builder.roundAndGameOverMsg = roundAndGameOverMsg;
    builder.appSwapMsg = appSwapMsg;
    builder.syncStatusMsg = syncStatusMsg;
    builder.exitGameBeforePlayMsg = exitGameBeforePlayMsg;
    builder.exitGameAfterPlayMsg = exitGameAfterPlayMsg;
    builder.exitGameOutRoundMsg = exitGameOutRoundMsg;
    builder.voteResultMsg = voteResultMsg;
    builder.machineScore = machineScore;
    builder.qWantSingChanceMsg = qWantSingChanceMsg;
    builder.qGetSingChanceMsg = qGetSingChanceMsg;
    builder.qSyncStatusMsg = qSyncStatusMsg;
    builder.qRoundOverMsg = qRoundOverMsg;
    builder.qRoundAndGameOverMsg = qRoundAndGameOverMsg;
    builder.qNoPassSingMsg = qNoPassSingMsg;
    builder.qExitGameMsg = qExitGameMsg;
    builder.pkBLightMsg = pkBLightMsg;
    builder.pkMLightMsg = pkMLightMsg;
    builder.qBLightMsg = qBLightMsg;
    builder.qMLightMsg = qMLightMsg;
    builder.qJoinNoticeMsg = qJoinNoticeMsg;
    builder.qJoinActionMsg = qJoinActionMsg;
    builder.qKickUserRequestMsg = qKickUserRequestMsg;
    builder.qKickUserResultMsg = qKickUserResultMsg;
    builder.qGameBeginMsg = qGameBeginMsg;
    builder.qChangeMusicTag = qChangeMusicTag;
    builder.qCoinChangeMsg = qCoinChangeMsg;
    builder.qCHOGiveUpMsg = qCHOGiveUpMsg;
    builder.qSPKInnerRoundOverMsg = qSPKInnerRoundOverMsg;
    builder.qChangeRoomName = qChangeRoomName;
    builder.gPrensentGiftMsg = gPrensentGiftMsg;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RoomMsg)) return false;
    RoomMsg o = (RoomMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(timeMs, o.timeMs)
        && Internal.equals(msgType, o.msgType)
        && Internal.equals(roomID, o.roomID)
        && Internal.equals(no, o.no)
        && Internal.equals(posType, o.posType)
        && Internal.equals(sender, o.sender)
        && Internal.equals(commentMsg, o.commentMsg)
        && Internal.equals(specialEmojiMsg, o.specialEmojiMsg)
        && Internal.equals(dynamicemojiMsg, o.dynamicemojiMsg)
        && Internal.equals(audioMsg, o.audioMsg)
        && Internal.equals(joinActionMsg, o.joinActionMsg)
        && Internal.equals(joinNoticeMsg, o.joinNoticeMsg)
        && Internal.equals(readyNoticeMsg, o.readyNoticeMsg)
        && Internal.equals(roundOverMsg, o.roundOverMsg)
        && Internal.equals(roundAndGameOverMsg, o.roundAndGameOverMsg)
        && Internal.equals(appSwapMsg, o.appSwapMsg)
        && Internal.equals(syncStatusMsg, o.syncStatusMsg)
        && Internal.equals(exitGameBeforePlayMsg, o.exitGameBeforePlayMsg)
        && Internal.equals(exitGameAfterPlayMsg, o.exitGameAfterPlayMsg)
        && Internal.equals(exitGameOutRoundMsg, o.exitGameOutRoundMsg)
        && Internal.equals(voteResultMsg, o.voteResultMsg)
        && Internal.equals(machineScore, o.machineScore)
        && Internal.equals(qWantSingChanceMsg, o.qWantSingChanceMsg)
        && Internal.equals(qGetSingChanceMsg, o.qGetSingChanceMsg)
        && Internal.equals(qSyncStatusMsg, o.qSyncStatusMsg)
        && Internal.equals(qRoundOverMsg, o.qRoundOverMsg)
        && Internal.equals(qRoundAndGameOverMsg, o.qRoundAndGameOverMsg)
        && Internal.equals(qNoPassSingMsg, o.qNoPassSingMsg)
        && Internal.equals(qExitGameMsg, o.qExitGameMsg)
        && Internal.equals(pkBLightMsg, o.pkBLightMsg)
        && Internal.equals(pkMLightMsg, o.pkMLightMsg)
        && Internal.equals(qBLightMsg, o.qBLightMsg)
        && Internal.equals(qMLightMsg, o.qMLightMsg)
        && Internal.equals(qJoinNoticeMsg, o.qJoinNoticeMsg)
        && Internal.equals(qJoinActionMsg, o.qJoinActionMsg)
        && Internal.equals(qKickUserRequestMsg, o.qKickUserRequestMsg)
        && Internal.equals(qKickUserResultMsg, o.qKickUserResultMsg)
        && Internal.equals(qGameBeginMsg, o.qGameBeginMsg)
        && Internal.equals(qChangeMusicTag, o.qChangeMusicTag)
        && Internal.equals(qCoinChangeMsg, o.qCoinChangeMsg)
        && Internal.equals(qCHOGiveUpMsg, o.qCHOGiveUpMsg)
        && Internal.equals(qSPKInnerRoundOverMsg, o.qSPKInnerRoundOverMsg)
        && Internal.equals(qChangeRoomName, o.qChangeRoomName)
        && Internal.equals(gPrensentGiftMsg, o.gPrensentGiftMsg);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (timeMs != null ? timeMs.hashCode() : 0);
      result = result * 37 + (msgType != null ? msgType.hashCode() : 0);
      result = result * 37 + (roomID != null ? roomID.hashCode() : 0);
      result = result * 37 + (no != null ? no.hashCode() : 0);
      result = result * 37 + (posType != null ? posType.hashCode() : 0);
      result = result * 37 + (sender != null ? sender.hashCode() : 0);
      result = result * 37 + (commentMsg != null ? commentMsg.hashCode() : 0);
      result = result * 37 + (specialEmojiMsg != null ? specialEmojiMsg.hashCode() : 0);
      result = result * 37 + (dynamicemojiMsg != null ? dynamicemojiMsg.hashCode() : 0);
      result = result * 37 + (audioMsg != null ? audioMsg.hashCode() : 0);
      result = result * 37 + (joinActionMsg != null ? joinActionMsg.hashCode() : 0);
      result = result * 37 + (joinNoticeMsg != null ? joinNoticeMsg.hashCode() : 0);
      result = result * 37 + (readyNoticeMsg != null ? readyNoticeMsg.hashCode() : 0);
      result = result * 37 + (roundOverMsg != null ? roundOverMsg.hashCode() : 0);
      result = result * 37 + (roundAndGameOverMsg != null ? roundAndGameOverMsg.hashCode() : 0);
      result = result * 37 + (appSwapMsg != null ? appSwapMsg.hashCode() : 0);
      result = result * 37 + (syncStatusMsg != null ? syncStatusMsg.hashCode() : 0);
      result = result * 37 + (exitGameBeforePlayMsg != null ? exitGameBeforePlayMsg.hashCode() : 0);
      result = result * 37 + (exitGameAfterPlayMsg != null ? exitGameAfterPlayMsg.hashCode() : 0);
      result = result * 37 + (exitGameOutRoundMsg != null ? exitGameOutRoundMsg.hashCode() : 0);
      result = result * 37 + (voteResultMsg != null ? voteResultMsg.hashCode() : 0);
      result = result * 37 + (machineScore != null ? machineScore.hashCode() : 0);
      result = result * 37 + (qWantSingChanceMsg != null ? qWantSingChanceMsg.hashCode() : 0);
      result = result * 37 + (qGetSingChanceMsg != null ? qGetSingChanceMsg.hashCode() : 0);
      result = result * 37 + (qSyncStatusMsg != null ? qSyncStatusMsg.hashCode() : 0);
      result = result * 37 + (qRoundOverMsg != null ? qRoundOverMsg.hashCode() : 0);
      result = result * 37 + (qRoundAndGameOverMsg != null ? qRoundAndGameOverMsg.hashCode() : 0);
      result = result * 37 + (qNoPassSingMsg != null ? qNoPassSingMsg.hashCode() : 0);
      result = result * 37 + (qExitGameMsg != null ? qExitGameMsg.hashCode() : 0);
      result = result * 37 + (pkBLightMsg != null ? pkBLightMsg.hashCode() : 0);
      result = result * 37 + (pkMLightMsg != null ? pkMLightMsg.hashCode() : 0);
      result = result * 37 + (qBLightMsg != null ? qBLightMsg.hashCode() : 0);
      result = result * 37 + (qMLightMsg != null ? qMLightMsg.hashCode() : 0);
      result = result * 37 + (qJoinNoticeMsg != null ? qJoinNoticeMsg.hashCode() : 0);
      result = result * 37 + (qJoinActionMsg != null ? qJoinActionMsg.hashCode() : 0);
      result = result * 37 + (qKickUserRequestMsg != null ? qKickUserRequestMsg.hashCode() : 0);
      result = result * 37 + (qKickUserResultMsg != null ? qKickUserResultMsg.hashCode() : 0);
      result = result * 37 + (qGameBeginMsg != null ? qGameBeginMsg.hashCode() : 0);
      result = result * 37 + (qChangeMusicTag != null ? qChangeMusicTag.hashCode() : 0);
      result = result * 37 + (qCoinChangeMsg != null ? qCoinChangeMsg.hashCode() : 0);
      result = result * 37 + (qCHOGiveUpMsg != null ? qCHOGiveUpMsg.hashCode() : 0);
      result = result * 37 + (qSPKInnerRoundOverMsg != null ? qSPKInnerRoundOverMsg.hashCode() : 0);
      result = result * 37 + (qChangeRoomName != null ? qChangeRoomName.hashCode() : 0);
      result = result * 37 + (gPrensentGiftMsg != null ? gPrensentGiftMsg.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (timeMs != null) builder.append(", timeMs=").append(timeMs);
    if (msgType != null) builder.append(", msgType=").append(msgType);
    if (roomID != null) builder.append(", roomID=").append(roomID);
    if (no != null) builder.append(", no=").append(no);
    if (posType != null) builder.append(", posType=").append(posType);
    if (sender != null) builder.append(", sender=").append(sender);
    if (commentMsg != null) builder.append(", commentMsg=").append(commentMsg);
    if (specialEmojiMsg != null) builder.append(", specialEmojiMsg=").append(specialEmojiMsg);
    if (dynamicemojiMsg != null) builder.append(", dynamicemojiMsg=").append(dynamicemojiMsg);
    if (audioMsg != null) builder.append(", audioMsg=").append(audioMsg);
    if (joinActionMsg != null) builder.append(", joinActionMsg=").append(joinActionMsg);
    if (joinNoticeMsg != null) builder.append(", joinNoticeMsg=").append(joinNoticeMsg);
    if (readyNoticeMsg != null) builder.append(", readyNoticeMsg=").append(readyNoticeMsg);
    if (roundOverMsg != null) builder.append(", roundOverMsg=").append(roundOverMsg);
    if (roundAndGameOverMsg != null) builder.append(", roundAndGameOverMsg=").append(roundAndGameOverMsg);
    if (appSwapMsg != null) builder.append(", appSwapMsg=").append(appSwapMsg);
    if (syncStatusMsg != null) builder.append(", syncStatusMsg=").append(syncStatusMsg);
    if (exitGameBeforePlayMsg != null) builder.append(", exitGameBeforePlayMsg=").append(exitGameBeforePlayMsg);
    if (exitGameAfterPlayMsg != null) builder.append(", exitGameAfterPlayMsg=").append(exitGameAfterPlayMsg);
    if (exitGameOutRoundMsg != null) builder.append(", exitGameOutRoundMsg=").append(exitGameOutRoundMsg);
    if (voteResultMsg != null) builder.append(", voteResultMsg=").append(voteResultMsg);
    if (machineScore != null) builder.append(", machineScore=").append(machineScore);
    if (qWantSingChanceMsg != null) builder.append(", qWantSingChanceMsg=").append(qWantSingChanceMsg);
    if (qGetSingChanceMsg != null) builder.append(", qGetSingChanceMsg=").append(qGetSingChanceMsg);
    if (qSyncStatusMsg != null) builder.append(", qSyncStatusMsg=").append(qSyncStatusMsg);
    if (qRoundOverMsg != null) builder.append(", qRoundOverMsg=").append(qRoundOverMsg);
    if (qRoundAndGameOverMsg != null) builder.append(", qRoundAndGameOverMsg=").append(qRoundAndGameOverMsg);
    if (qNoPassSingMsg != null) builder.append(", qNoPassSingMsg=").append(qNoPassSingMsg);
    if (qExitGameMsg != null) builder.append(", qExitGameMsg=").append(qExitGameMsg);
    if (pkBLightMsg != null) builder.append(", pkBLightMsg=").append(pkBLightMsg);
    if (pkMLightMsg != null) builder.append(", pkMLightMsg=").append(pkMLightMsg);
    if (qBLightMsg != null) builder.append(", qBLightMsg=").append(qBLightMsg);
    if (qMLightMsg != null) builder.append(", qMLightMsg=").append(qMLightMsg);
    if (qJoinNoticeMsg != null) builder.append(", qJoinNoticeMsg=").append(qJoinNoticeMsg);
    if (qJoinActionMsg != null) builder.append(", qJoinActionMsg=").append(qJoinActionMsg);
    if (qKickUserRequestMsg != null) builder.append(", qKickUserRequestMsg=").append(qKickUserRequestMsg);
    if (qKickUserResultMsg != null) builder.append(", qKickUserResultMsg=").append(qKickUserResultMsg);
    if (qGameBeginMsg != null) builder.append(", qGameBeginMsg=").append(qGameBeginMsg);
    if (qChangeMusicTag != null) builder.append(", qChangeMusicTag=").append(qChangeMusicTag);
    if (qCoinChangeMsg != null) builder.append(", qCoinChangeMsg=").append(qCoinChangeMsg);
    if (qCHOGiveUpMsg != null) builder.append(", qCHOGiveUpMsg=").append(qCHOGiveUpMsg);
    if (qSPKInnerRoundOverMsg != null) builder.append(", qSPKInnerRoundOverMsg=").append(qSPKInnerRoundOverMsg);
    if (qChangeRoomName != null) builder.append(", qChangeRoomName=").append(qChangeRoomName);
    if (gPrensentGiftMsg != null) builder.append(", gPrensentGiftMsg=").append(gPrensentGiftMsg);
    return builder.replace(0, 2, "RoomMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RoomMsg.ADAPTER.encode(this);
  }

  public static final RoomMsg parseFrom(byte[] data) throws IOException {
    RoomMsg c = null;
       c = RoomMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 房间消息产生时间，单位毫秒
   */
  public Long getTimeMs() {
    if(timeMs==null){
        return DEFAULT_TIMEMS;
    }
    return timeMs;
  }

  /**
   * 消息类型
   */
  public ERoomMsgType getMsgType() {
    if(msgType==null){
        return new ERoomMsgType.Builder().build();
    }
    return msgType;
  }

  /**
   * 房间ID
   */
  public Integer getRoomID() {
    if(roomID==null){
        return DEFAULT_ROOMID;
    }
    return roomID;
  }

  /**
   * 房间内的消息序号，每个房间有自己的消息序号,不存在则系统生成,一般情况下调用方不必设置
   */
  public Long getNo() {
    if(no==null){
        return DEFAULT_NO;
    }
    return no;
  }

  /**
   * 消息显示位置类型
   */
  public EMsgPosType getPosType() {
    if(posType==null){
        return new EMsgPosType.Builder().build();
    }
    return posType;
  }

  /**
   * 发送者简要信息
   */
  public UserInfo getSender() {
    if(sender==null){
        return new UserInfo.Builder().build();
    }
    return sender;
  }

  /**
   * 评论消息 msgType == RM_COMMENT
   */
  public CommentMsg getCommentMsg() {
    if(commentMsg==null){
        return new CommentMsg.Builder().build();
    }
    return commentMsg;
  }

  /**
   * 特殊表情消息  msgType == RM_SPECIAL_EMOJI
   */
  public SpecialEmojiMsg getSpecialEmojiMsg() {
    if(specialEmojiMsg==null){
        return new SpecialEmojiMsg.Builder().build();
    }
    return specialEmojiMsg;
  }

  /**
   * 动态表情消息  msgType == RM_DYNAMIC_EMOJI
   */
  public DynamicEmojiMsg getDynamicemojiMsg() {
    if(dynamicemojiMsg==null){
        return new DynamicEmojiMsg.Builder().build();
    }
    return dynamicemojiMsg;
  }

  /**
   * 语音消息
   */
  public AudioMsg getAudioMsg() {
    if(audioMsg==null){
        return new AudioMsg.Builder().build();
    }
    return audioMsg;
  }

  /**
   * 加入游戏指令消息 msgType == RM_JOIN_ACTION
   */
  public JoinActionMsg getJoinActionMsg() {
    if(joinActionMsg==null){
        return new JoinActionMsg.Builder().build();
    }
    return joinActionMsg;
  }

  /**
   * 加入游戏通知消息 msgType == RM_JOIN_NOTICE
   */
  public JoinNoticeMsg getJoinNoticeMsg() {
    if(joinNoticeMsg==null){
        return new JoinNoticeMsg.Builder().build();
    }
    return joinNoticeMsg;
  }

  /**
   * 准备游戏通知消息 msgType == RM_READY_NOTICE
   */
  public ReadyNoticeMsg getReadyNoticeMsg() {
    if(readyNoticeMsg==null){
        return new ReadyNoticeMsg.Builder().build();
    }
    return readyNoticeMsg;
  }

  /**
   * 游戏轮次结束通知消息 msgType == RM_ROUND_OVER
   */
  public RoundOverMsg getRoundOverMsg() {
    if(roundOverMsg==null){
        return new RoundOverMsg.Builder().build();
    }
    return roundOverMsg;
  }

  /**
   * 轮次和游戏结束通知消息 msgType == RM_ROUND_AND_GAME_OVER
   */
  public RoundAndGameOverMsg getRoundAndGameOverMsg() {
    if(roundAndGameOverMsg==null){
        return new RoundAndGameOverMsg.Builder().build();
    }
    return roundAndGameOverMsg;
  }

  /**
   * app进程后台通知  msgType ==  RM_APP_SWAP
   */
  public AppSwapMsg getAppSwapMsg() {
    if(appSwapMsg==null){
        return new AppSwapMsg.Builder().build();
    }
    return appSwapMsg;
  }

  /**
   * 状态同步消息 msgType == RM_SYNC_STATUS
   */
  public SyncStatusMsg getSyncStatusMsg() {
    if(syncStatusMsg==null){
        return new SyncStatusMsg.Builder().build();
    }
    return syncStatusMsg;
  }

  /**
   * 再开始游戏前，退出游戏通知  msgType == RM_EXIT_GAME_BEFORE_PLAY
   */
  public ExitGameBeforePlayMsg getExitGameBeforePlayMsg() {
    if(exitGameBeforePlayMsg==null){
        return new ExitGameBeforePlayMsg.Builder().build();
    }
    return exitGameBeforePlayMsg;
  }

  /**
   * 游戏结束后，退出游戏通知  msgType == RM_EXIT_GAME_AFTER_PLAY
   */
  public ExitGameAfterPlayMsg getExitGameAfterPlayMsg() {
    if(exitGameAfterPlayMsg==null){
        return new ExitGameAfterPlayMsg.Builder().build();
    }
    return exitGameAfterPlayMsg;
  }

  /**
   * 游戏中，不在Round时，退出游戏通知  msgType == RM_EXIT_GAME_ON_PLAY
   */
  public ExitGameOutRoundMsg getExitGameOutRoundMsg() {
    if(exitGameOutRoundMsg==null){
        return new ExitGameOutRoundMsg.Builder().build();
    }
    return exitGameOutRoundMsg;
  }

  /**
   * 游戏投票结果消息 msgType == RM_VOTE_RESULT
   */
  public VoteResultMsg getVoteResultMsg() {
    if(voteResultMsg==null){
        return new VoteResultMsg.Builder().build();
    }
    return voteResultMsg;
  }

  /**
   * 实时机器评分 msgType == RM_ROUND_MACHINE_SCORE
   */
  public MachineScore getMachineScore() {
    if(machineScore==null){
        return new MachineScore.Builder().build();
    }
    return machineScore;
  }

  /**
   * 一唱到底：想唱消息,即抢唱
   */
  public QWantSingChanceMsg getQWantSingChanceMsg() {
    if(qWantSingChanceMsg==null){
        return new QWantSingChanceMsg.Builder().build();
    }
    return qWantSingChanceMsg;
  }

  /**
   * 一唱到底：获得轮次机会,即抢唱成功
   */
  public QGetSingChanceMsg getQGetSingChanceMsg() {
    if(qGetSingChanceMsg==null){
        return new QGetSingChanceMsg.Builder().build();
    }
    return qGetSingChanceMsg;
  }

  /**
   * 一唱到底：同步状态
   */
  public QSyncStatusMsg getQSyncStatusMsg() {
    if(qSyncStatusMsg==null){
        return new QSyncStatusMsg.Builder().build();
    }
    return qSyncStatusMsg;
  }

  /**
   * 一唱到底：轮次结束
   */
  public QRoundOverMsg getQRoundOverMsg() {
    if(qRoundOverMsg==null){
        return new QRoundOverMsg.Builder().build();
    }
    return qRoundOverMsg;
  }

  /**
   * 一唱到底：最后轮次结束，即游戏结束，游戏结果数据
   */
  public QRoundAndGameOverMsg getQRoundAndGameOverMsg() {
    if(qRoundAndGameOverMsg==null){
        return new QRoundAndGameOverMsg.Builder().build();
    }
    return qRoundAndGameOverMsg;
  }

  /**
   * 一唱到底：使用QMLightMsg代替
   */
  public QNoPassSingMsg getQNoPassSingMsg() {
    if(qNoPassSingMsg==null){
        return new QNoPassSingMsg.Builder().build();
    }
    return qNoPassSingMsg;
  }

  /**
   * 一唱到底：退出游戏
   */
  public QExitGameMsg getQExitGameMsg() {
    if(qExitGameMsg==null){
        return new QExitGameMsg.Builder().build();
    }
    return qExitGameMsg;
  }

  /**
   * 排位赛：爆灯通知
   */
  public PKBLightMsg getPkBLightMsg() {
    if(pkBLightMsg==null){
        return new PKBLightMsg.Builder().build();
    }
    return pkBLightMsg;
  }

  /**
   * 排位赛：灭灯通知
   */
  public PKMLightMsg getPkMLightMsg() {
    if(pkMLightMsg==null){
        return new PKMLightMsg.Builder().build();
    }
    return pkMLightMsg;
  }

  /**
   * 一唱到底：爆灯通知
   */
  public QBLightMsg getQBLightMsg() {
    if(qBLightMsg==null){
        return new QBLightMsg.Builder().build();
    }
    return qBLightMsg;
  }

  /**
   * 一唱到底：灭灯通知
   */
  public QMLightMsg getQMLightMsg() {
    if(qMLightMsg==null){
        return new QMLightMsg.Builder().build();
    }
    return qMLightMsg;
  }

  /**
   * 加入游戏通知消息 msgType == RM_JOIN_NOTICE
   */
  public QJoinNoticeMsg getQJoinNoticeMsg() {
    if(qJoinNoticeMsg==null){
        return new QJoinNoticeMsg.Builder().build();
    }
    return qJoinNoticeMsg;
  }

  /**
   * 一唱到底：加入游戏指令消息
   */
  public QJoinActionMsg getQJoinActionMsg() {
    if(qJoinActionMsg==null){
        return new QJoinActionMsg.Builder().build();
    }
    return qJoinActionMsg;
  }

  /**
   * 一唱到底：踢人请求信令消息
   */
  public QKickUserRequestMsg getQKickUserRequestMsg() {
    if(qKickUserRequestMsg==null){
        return new QKickUserRequestMsg.Builder().build();
    }
    return qKickUserRequestMsg;
  }

  /**
   * 一唱到底：踢人结果信令消息
   */
  public QKickUserResultMsg getQKickUserResultMsg() {
    if(qKickUserResultMsg==null){
        return new QKickUserResultMsg.Builder().build();
    }
    return qKickUserResultMsg;
  }

  /**
   * 一唱到底：通知房间用户游戏开始
   */
  public QGameBeginMsg getQGameBeginMsg() {
    if(qGameBeginMsg==null){
        return new QGameBeginMsg.Builder().build();
    }
    return qGameBeginMsg;
  }

  /**
   * 一唱到底：切换专场提示消息
   */
  public QChangeMusicTag getQChangeMusicTag() {
    if(qChangeMusicTag==null){
        return new QChangeMusicTag.Builder().build();
    }
    return qChangeMusicTag;
  }

  /**
   * 一唱到底：金币变动信息
   */
  public QCoinChangeMsg getQCoinChangeMsg() {
    if(qCoinChangeMsg==null){
        return new QCoinChangeMsg.Builder().build();
    }
    return qCoinChangeMsg;
  }

  /**
   * 一唱到底：合唱模式放弃演唱
   */
  public QCHOGiveUpMsg getQCHOGiveUpMsg() {
    if(qCHOGiveUpMsg==null){
        return new QCHOGiveUpMsg.Builder().build();
    }
    return qCHOGiveUpMsg;
  }

  /**
   * 一唱到底：spk模式内部轮次结束
   */
  public QSPKInnerRoundOverMsg getQSPKInnerRoundOverMsg() {
    if(qSPKInnerRoundOverMsg==null){
        return new QSPKInnerRoundOverMsg.Builder().build();
    }
    return qSPKInnerRoundOverMsg;
  }

  /**
   * 一唱到底：房主修改房间名称
   */
  public QChangeRoomName getQChangeRoomName() {
    if(qChangeRoomName==null){
        return new QChangeRoomName.Builder().build();
    }
    return qChangeRoomName;
  }

  /**
   * 送礼物
   */
  public GPrensentGiftMsg getGPrensentGiftMsg() {
    if(gPrensentGiftMsg==null){
        return new GPrensentGiftMsg.Builder().build();
    }
    return gPrensentGiftMsg;
  }

  /**
   * 房间消息产生时间，单位毫秒
   */
  public boolean hasTimeMs() {
    return timeMs!=null;
  }

  /**
   * 消息类型
   */
  public boolean hasMsgType() {
    return msgType!=null;
  }

  /**
   * 房间ID
   */
  public boolean hasRoomID() {
    return roomID!=null;
  }

  /**
   * 房间内的消息序号，每个房间有自己的消息序号,不存在则系统生成,一般情况下调用方不必设置
   */
  public boolean hasNo() {
    return no!=null;
  }

  /**
   * 消息显示位置类型
   */
  public boolean hasPosType() {
    return posType!=null;
  }

  /**
   * 发送者简要信息
   */
  public boolean hasSender() {
    return sender!=null;
  }

  /**
   * 评论消息 msgType == RM_COMMENT
   */
  public boolean hasCommentMsg() {
    return commentMsg!=null;
  }

  /**
   * 特殊表情消息  msgType == RM_SPECIAL_EMOJI
   */
  public boolean hasSpecialEmojiMsg() {
    return specialEmojiMsg!=null;
  }

  /**
   * 动态表情消息  msgType == RM_DYNAMIC_EMOJI
   */
  public boolean hasDynamicemojiMsg() {
    return dynamicemojiMsg!=null;
  }

  /**
   * 语音消息
   */
  public boolean hasAudioMsg() {
    return audioMsg!=null;
  }

  /**
   * 加入游戏指令消息 msgType == RM_JOIN_ACTION
   */
  public boolean hasJoinActionMsg() {
    return joinActionMsg!=null;
  }

  /**
   * 加入游戏通知消息 msgType == RM_JOIN_NOTICE
   */
  public boolean hasJoinNoticeMsg() {
    return joinNoticeMsg!=null;
  }

  /**
   * 准备游戏通知消息 msgType == RM_READY_NOTICE
   */
  public boolean hasReadyNoticeMsg() {
    return readyNoticeMsg!=null;
  }

  /**
   * 游戏轮次结束通知消息 msgType == RM_ROUND_OVER
   */
  public boolean hasRoundOverMsg() {
    return roundOverMsg!=null;
  }

  /**
   * 轮次和游戏结束通知消息 msgType == RM_ROUND_AND_GAME_OVER
   */
  public boolean hasRoundAndGameOverMsg() {
    return roundAndGameOverMsg!=null;
  }

  /**
   * app进程后台通知  msgType ==  RM_APP_SWAP
   */
  public boolean hasAppSwapMsg() {
    return appSwapMsg!=null;
  }

  /**
   * 状态同步消息 msgType == RM_SYNC_STATUS
   */
  public boolean hasSyncStatusMsg() {
    return syncStatusMsg!=null;
  }

  /**
   * 再开始游戏前，退出游戏通知  msgType == RM_EXIT_GAME_BEFORE_PLAY
   */
  public boolean hasExitGameBeforePlayMsg() {
    return exitGameBeforePlayMsg!=null;
  }

  /**
   * 游戏结束后，退出游戏通知  msgType == RM_EXIT_GAME_AFTER_PLAY
   */
  public boolean hasExitGameAfterPlayMsg() {
    return exitGameAfterPlayMsg!=null;
  }

  /**
   * 游戏中，不在Round时，退出游戏通知  msgType == RM_EXIT_GAME_ON_PLAY
   */
  public boolean hasExitGameOutRoundMsg() {
    return exitGameOutRoundMsg!=null;
  }

  /**
   * 游戏投票结果消息 msgType == RM_VOTE_RESULT
   */
  public boolean hasVoteResultMsg() {
    return voteResultMsg!=null;
  }

  /**
   * 实时机器评分 msgType == RM_ROUND_MACHINE_SCORE
   */
  public boolean hasMachineScore() {
    return machineScore!=null;
  }

  /**
   * 一唱到底：想唱消息,即抢唱
   */
  public boolean hasQWantSingChanceMsg() {
    return qWantSingChanceMsg!=null;
  }

  /**
   * 一唱到底：获得轮次机会,即抢唱成功
   */
  public boolean hasQGetSingChanceMsg() {
    return qGetSingChanceMsg!=null;
  }

  /**
   * 一唱到底：同步状态
   */
  public boolean hasQSyncStatusMsg() {
    return qSyncStatusMsg!=null;
  }

  /**
   * 一唱到底：轮次结束
   */
  public boolean hasQRoundOverMsg() {
    return qRoundOverMsg!=null;
  }

  /**
   * 一唱到底：最后轮次结束，即游戏结束，游戏结果数据
   */
  public boolean hasQRoundAndGameOverMsg() {
    return qRoundAndGameOverMsg!=null;
  }

  /**
   * 一唱到底：使用QMLightMsg代替
   */
  public boolean hasQNoPassSingMsg() {
    return qNoPassSingMsg!=null;
  }

  /**
   * 一唱到底：退出游戏
   */
  public boolean hasQExitGameMsg() {
    return qExitGameMsg!=null;
  }

  /**
   * 排位赛：爆灯通知
   */
  public boolean hasPkBLightMsg() {
    return pkBLightMsg!=null;
  }

  /**
   * 排位赛：灭灯通知
   */
  public boolean hasPkMLightMsg() {
    return pkMLightMsg!=null;
  }

  /**
   * 一唱到底：爆灯通知
   */
  public boolean hasQBLightMsg() {
    return qBLightMsg!=null;
  }

  /**
   * 一唱到底：灭灯通知
   */
  public boolean hasQMLightMsg() {
    return qMLightMsg!=null;
  }

  /**
   * 加入游戏通知消息 msgType == RM_JOIN_NOTICE
   */
  public boolean hasQJoinNoticeMsg() {
    return qJoinNoticeMsg!=null;
  }

  /**
   * 一唱到底：加入游戏指令消息
   */
  public boolean hasQJoinActionMsg() {
    return qJoinActionMsg!=null;
  }

  /**
   * 一唱到底：踢人请求信令消息
   */
  public boolean hasQKickUserRequestMsg() {
    return qKickUserRequestMsg!=null;
  }

  /**
   * 一唱到底：踢人结果信令消息
   */
  public boolean hasQKickUserResultMsg() {
    return qKickUserResultMsg!=null;
  }

  /**
   * 一唱到底：通知房间用户游戏开始
   */
  public boolean hasQGameBeginMsg() {
    return qGameBeginMsg!=null;
  }

  /**
   * 一唱到底：切换专场提示消息
   */
  public boolean hasQChangeMusicTag() {
    return qChangeMusicTag!=null;
  }

  /**
   * 一唱到底：金币变动信息
   */
  public boolean hasQCoinChangeMsg() {
    return qCoinChangeMsg!=null;
  }

  /**
   * 一唱到底：合唱模式放弃演唱
   */
  public boolean hasQCHOGiveUpMsg() {
    return qCHOGiveUpMsg!=null;
  }

  /**
   * 一唱到底：spk模式内部轮次结束
   */
  public boolean hasQSPKInnerRoundOverMsg() {
    return qSPKInnerRoundOverMsg!=null;
  }

  /**
   * 一唱到底：房主修改房间名称
   */
  public boolean hasQChangeRoomName() {
    return qChangeRoomName!=null;
  }

  /**
   * 送礼物
   */
  public boolean hasGPrensentGiftMsg() {
    return gPrensentGiftMsg!=null;
  }

  public static final class Builder extends Message.Builder<RoomMsg, Builder> {
    private Long timeMs;

    private ERoomMsgType msgType;

    private Integer roomID;

    private Long no;

    private EMsgPosType posType;

    private UserInfo sender;

    private CommentMsg commentMsg;

    private SpecialEmojiMsg specialEmojiMsg;

    private DynamicEmojiMsg dynamicemojiMsg;

    private AudioMsg audioMsg;

    private JoinActionMsg joinActionMsg;

    private JoinNoticeMsg joinNoticeMsg;

    private ReadyNoticeMsg readyNoticeMsg;

    private RoundOverMsg roundOverMsg;

    private RoundAndGameOverMsg roundAndGameOverMsg;

    private AppSwapMsg appSwapMsg;

    private SyncStatusMsg syncStatusMsg;

    private ExitGameBeforePlayMsg exitGameBeforePlayMsg;

    private ExitGameAfterPlayMsg exitGameAfterPlayMsg;

    private ExitGameOutRoundMsg exitGameOutRoundMsg;

    private VoteResultMsg voteResultMsg;

    private MachineScore machineScore;

    private QWantSingChanceMsg qWantSingChanceMsg;

    private QGetSingChanceMsg qGetSingChanceMsg;

    private QSyncStatusMsg qSyncStatusMsg;

    private QRoundOverMsg qRoundOverMsg;

    private QRoundAndGameOverMsg qRoundAndGameOverMsg;

    private QNoPassSingMsg qNoPassSingMsg;

    private QExitGameMsg qExitGameMsg;

    private PKBLightMsg pkBLightMsg;

    private PKMLightMsg pkMLightMsg;

    private QBLightMsg qBLightMsg;

    private QMLightMsg qMLightMsg;

    private QJoinNoticeMsg qJoinNoticeMsg;

    private QJoinActionMsg qJoinActionMsg;

    private QKickUserRequestMsg qKickUserRequestMsg;

    private QKickUserResultMsg qKickUserResultMsg;

    private QGameBeginMsg qGameBeginMsg;

    private QChangeMusicTag qChangeMusicTag;

    private QCoinChangeMsg qCoinChangeMsg;

    private QCHOGiveUpMsg qCHOGiveUpMsg;

    private QSPKInnerRoundOverMsg qSPKInnerRoundOverMsg;

    private QChangeRoomName qChangeRoomName;

    private GPrensentGiftMsg gPrensentGiftMsg;

    public Builder() {
    }

    /**
     * 房间消息产生时间，单位毫秒
     */
    public Builder setTimeMs(Long timeMs) {
      this.timeMs = timeMs;
      return this;
    }

    /**
     * 消息类型
     */
    public Builder setMsgType(ERoomMsgType msgType) {
      this.msgType = msgType;
      return this;
    }

    /**
     * 房间ID
     */
    public Builder setRoomID(Integer roomID) {
      this.roomID = roomID;
      return this;
    }

    /**
     * 房间内的消息序号，每个房间有自己的消息序号,不存在则系统生成,一般情况下调用方不必设置
     */
    public Builder setNo(Long no) {
      this.no = no;
      return this;
    }

    /**
     * 消息显示位置类型
     */
    public Builder setPosType(EMsgPosType posType) {
      this.posType = posType;
      return this;
    }

    /**
     * 发送者简要信息
     */
    public Builder setSender(UserInfo sender) {
      this.sender = sender;
      return this;
    }

    /**
     * 评论消息 msgType == RM_COMMENT
     */
    public Builder setCommentMsg(CommentMsg commentMsg) {
      this.commentMsg = commentMsg;
      return this;
    }

    /**
     * 特殊表情消息  msgType == RM_SPECIAL_EMOJI
     */
    public Builder setSpecialEmojiMsg(SpecialEmojiMsg specialEmojiMsg) {
      this.specialEmojiMsg = specialEmojiMsg;
      return this;
    }

    /**
     * 动态表情消息  msgType == RM_DYNAMIC_EMOJI
     */
    public Builder setDynamicemojiMsg(DynamicEmojiMsg dynamicemojiMsg) {
      this.dynamicemojiMsg = dynamicemojiMsg;
      return this;
    }

    /**
     * 语音消息
     */
    public Builder setAudioMsg(AudioMsg audioMsg) {
      this.audioMsg = audioMsg;
      return this;
    }

    /**
     * 加入游戏指令消息 msgType == RM_JOIN_ACTION
     */
    public Builder setJoinActionMsg(JoinActionMsg joinActionMsg) {
      this.joinActionMsg = joinActionMsg;
      return this;
    }

    /**
     * 加入游戏通知消息 msgType == RM_JOIN_NOTICE
     */
    public Builder setJoinNoticeMsg(JoinNoticeMsg joinNoticeMsg) {
      this.joinNoticeMsg = joinNoticeMsg;
      return this;
    }

    /**
     * 准备游戏通知消息 msgType == RM_READY_NOTICE
     */
    public Builder setReadyNoticeMsg(ReadyNoticeMsg readyNoticeMsg) {
      this.readyNoticeMsg = readyNoticeMsg;
      return this;
    }

    /**
     * 游戏轮次结束通知消息 msgType == RM_ROUND_OVER
     */
    public Builder setRoundOverMsg(RoundOverMsg roundOverMsg) {
      this.roundOverMsg = roundOverMsg;
      return this;
    }

    /**
     * 轮次和游戏结束通知消息 msgType == RM_ROUND_AND_GAME_OVER
     */
    public Builder setRoundAndGameOverMsg(RoundAndGameOverMsg roundAndGameOverMsg) {
      this.roundAndGameOverMsg = roundAndGameOverMsg;
      return this;
    }

    /**
     * app进程后台通知  msgType ==  RM_APP_SWAP
     */
    public Builder setAppSwapMsg(AppSwapMsg appSwapMsg) {
      this.appSwapMsg = appSwapMsg;
      return this;
    }

    /**
     * 状态同步消息 msgType == RM_SYNC_STATUS
     */
    public Builder setSyncStatusMsg(SyncStatusMsg syncStatusMsg) {
      this.syncStatusMsg = syncStatusMsg;
      return this;
    }

    /**
     * 再开始游戏前，退出游戏通知  msgType == RM_EXIT_GAME_BEFORE_PLAY
     */
    public Builder setExitGameBeforePlayMsg(ExitGameBeforePlayMsg exitGameBeforePlayMsg) {
      this.exitGameBeforePlayMsg = exitGameBeforePlayMsg;
      return this;
    }

    /**
     * 游戏结束后，退出游戏通知  msgType == RM_EXIT_GAME_AFTER_PLAY
     */
    public Builder setExitGameAfterPlayMsg(ExitGameAfterPlayMsg exitGameAfterPlayMsg) {
      this.exitGameAfterPlayMsg = exitGameAfterPlayMsg;
      return this;
    }

    /**
     * 游戏中，不在Round时，退出游戏通知  msgType == RM_EXIT_GAME_ON_PLAY
     */
    public Builder setExitGameOutRoundMsg(ExitGameOutRoundMsg exitGameOutRoundMsg) {
      this.exitGameOutRoundMsg = exitGameOutRoundMsg;
      return this;
    }

    /**
     * 游戏投票结果消息 msgType == RM_VOTE_RESULT
     */
    public Builder setVoteResultMsg(VoteResultMsg voteResultMsg) {
      this.voteResultMsg = voteResultMsg;
      return this;
    }

    /**
     * 实时机器评分 msgType == RM_ROUND_MACHINE_SCORE
     */
    public Builder setMachineScore(MachineScore machineScore) {
      this.machineScore = machineScore;
      return this;
    }

    /**
     * 一唱到底：想唱消息,即抢唱
     */
    public Builder setQWantSingChanceMsg(QWantSingChanceMsg qWantSingChanceMsg) {
      this.qWantSingChanceMsg = qWantSingChanceMsg;
      return this;
    }

    /**
     * 一唱到底：获得轮次机会,即抢唱成功
     */
    public Builder setQGetSingChanceMsg(QGetSingChanceMsg qGetSingChanceMsg) {
      this.qGetSingChanceMsg = qGetSingChanceMsg;
      return this;
    }

    /**
     * 一唱到底：同步状态
     */
    public Builder setQSyncStatusMsg(QSyncStatusMsg qSyncStatusMsg) {
      this.qSyncStatusMsg = qSyncStatusMsg;
      return this;
    }

    /**
     * 一唱到底：轮次结束
     */
    public Builder setQRoundOverMsg(QRoundOverMsg qRoundOverMsg) {
      this.qRoundOverMsg = qRoundOverMsg;
      return this;
    }

    /**
     * 一唱到底：最后轮次结束，即游戏结束，游戏结果数据
     */
    public Builder setQRoundAndGameOverMsg(QRoundAndGameOverMsg qRoundAndGameOverMsg) {
      this.qRoundAndGameOverMsg = qRoundAndGameOverMsg;
      return this;
    }

    /**
     * 一唱到底：使用QMLightMsg代替
     */
    public Builder setQNoPassSingMsg(QNoPassSingMsg qNoPassSingMsg) {
      this.qNoPassSingMsg = qNoPassSingMsg;
      return this;
    }

    /**
     * 一唱到底：退出游戏
     */
    public Builder setQExitGameMsg(QExitGameMsg qExitGameMsg) {
      this.qExitGameMsg = qExitGameMsg;
      return this;
    }

    /**
     * 排位赛：爆灯通知
     */
    public Builder setPkBLightMsg(PKBLightMsg pkBLightMsg) {
      this.pkBLightMsg = pkBLightMsg;
      return this;
    }

    /**
     * 排位赛：灭灯通知
     */
    public Builder setPkMLightMsg(PKMLightMsg pkMLightMsg) {
      this.pkMLightMsg = pkMLightMsg;
      return this;
    }

    /**
     * 一唱到底：爆灯通知
     */
    public Builder setQBLightMsg(QBLightMsg qBLightMsg) {
      this.qBLightMsg = qBLightMsg;
      return this;
    }

    /**
     * 一唱到底：灭灯通知
     */
    public Builder setQMLightMsg(QMLightMsg qMLightMsg) {
      this.qMLightMsg = qMLightMsg;
      return this;
    }

    /**
     * 加入游戏通知消息 msgType == RM_JOIN_NOTICE
     */
    public Builder setQJoinNoticeMsg(QJoinNoticeMsg qJoinNoticeMsg) {
      this.qJoinNoticeMsg = qJoinNoticeMsg;
      return this;
    }

    /**
     * 一唱到底：加入游戏指令消息
     */
    public Builder setQJoinActionMsg(QJoinActionMsg qJoinActionMsg) {
      this.qJoinActionMsg = qJoinActionMsg;
      return this;
    }

    /**
     * 一唱到底：踢人请求信令消息
     */
    public Builder setQKickUserRequestMsg(QKickUserRequestMsg qKickUserRequestMsg) {
      this.qKickUserRequestMsg = qKickUserRequestMsg;
      return this;
    }

    /**
     * 一唱到底：踢人结果信令消息
     */
    public Builder setQKickUserResultMsg(QKickUserResultMsg qKickUserResultMsg) {
      this.qKickUserResultMsg = qKickUserResultMsg;
      return this;
    }

    /**
     * 一唱到底：通知房间用户游戏开始
     */
    public Builder setQGameBeginMsg(QGameBeginMsg qGameBeginMsg) {
      this.qGameBeginMsg = qGameBeginMsg;
      return this;
    }

    /**
     * 一唱到底：切换专场提示消息
     */
    public Builder setQChangeMusicTag(QChangeMusicTag qChangeMusicTag) {
      this.qChangeMusicTag = qChangeMusicTag;
      return this;
    }

    /**
     * 一唱到底：金币变动信息
     */
    public Builder setQCoinChangeMsg(QCoinChangeMsg qCoinChangeMsg) {
      this.qCoinChangeMsg = qCoinChangeMsg;
      return this;
    }

    /**
     * 一唱到底：合唱模式放弃演唱
     */
    public Builder setQCHOGiveUpMsg(QCHOGiveUpMsg qCHOGiveUpMsg) {
      this.qCHOGiveUpMsg = qCHOGiveUpMsg;
      return this;
    }

    /**
     * 一唱到底：spk模式内部轮次结束
     */
    public Builder setQSPKInnerRoundOverMsg(QSPKInnerRoundOverMsg qSPKInnerRoundOverMsg) {
      this.qSPKInnerRoundOverMsg = qSPKInnerRoundOverMsg;
      return this;
    }

    /**
     * 一唱到底：房主修改房间名称
     */
    public Builder setQChangeRoomName(QChangeRoomName qChangeRoomName) {
      this.qChangeRoomName = qChangeRoomName;
      return this;
    }

    /**
     * 送礼物
     */
    public Builder setGPrensentGiftMsg(GPrensentGiftMsg gPrensentGiftMsg) {
      this.gPrensentGiftMsg = gPrensentGiftMsg;
      return this;
    }

    @Override
    public RoomMsg build() {
      return new RoomMsg(timeMs, msgType, roomID, no, posType, sender, commentMsg, specialEmojiMsg, dynamicemojiMsg, audioMsg, joinActionMsg, joinNoticeMsg, readyNoticeMsg, roundOverMsg, roundAndGameOverMsg, appSwapMsg, syncStatusMsg, exitGameBeforePlayMsg, exitGameAfterPlayMsg, exitGameOutRoundMsg, voteResultMsg, machineScore, qWantSingChanceMsg, qGetSingChanceMsg, qSyncStatusMsg, qRoundOverMsg, qRoundAndGameOverMsg, qNoPassSingMsg, qExitGameMsg, pkBLightMsg, pkMLightMsg, qBLightMsg, qMLightMsg, qJoinNoticeMsg, qJoinActionMsg, qKickUserRequestMsg, qKickUserResultMsg, qGameBeginMsg, qChangeMusicTag, qCoinChangeMsg, qCHOGiveUpMsg, qSPKInnerRoundOverMsg, qChangeRoomName, gPrensentGiftMsg, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RoomMsg extends ProtoAdapter<RoomMsg> {
    public ProtoAdapter_RoomMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, RoomMsg.class);
    }

    @Override
    public int encodedSize(RoomMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.timeMs)
          + ERoomMsgType.ADAPTER.encodedSizeWithTag(2, value.msgType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.roomID)
          + ProtoAdapter.SINT64.encodedSizeWithTag(4, value.no)
          + EMsgPosType.ADAPTER.encodedSizeWithTag(5, value.posType)
          + UserInfo.ADAPTER.encodedSizeWithTag(6, value.sender)
          + CommentMsg.ADAPTER.encodedSizeWithTag(10, value.commentMsg)
          + SpecialEmojiMsg.ADAPTER.encodedSizeWithTag(11, value.specialEmojiMsg)
          + DynamicEmojiMsg.ADAPTER.encodedSizeWithTag(12, value.dynamicemojiMsg)
          + AudioMsg.ADAPTER.encodedSizeWithTag(13, value.audioMsg)
          + JoinActionMsg.ADAPTER.encodedSizeWithTag(100, value.joinActionMsg)
          + JoinNoticeMsg.ADAPTER.encodedSizeWithTag(101, value.joinNoticeMsg)
          + ReadyNoticeMsg.ADAPTER.encodedSizeWithTag(102, value.readyNoticeMsg)
          + RoundOverMsg.ADAPTER.encodedSizeWithTag(103, value.roundOverMsg)
          + RoundAndGameOverMsg.ADAPTER.encodedSizeWithTag(104, value.roundAndGameOverMsg)
          + AppSwapMsg.ADAPTER.encodedSizeWithTag(105, value.appSwapMsg)
          + SyncStatusMsg.ADAPTER.encodedSizeWithTag(106, value.syncStatusMsg)
          + ExitGameBeforePlayMsg.ADAPTER.encodedSizeWithTag(107, value.exitGameBeforePlayMsg)
          + ExitGameAfterPlayMsg.ADAPTER.encodedSizeWithTag(108, value.exitGameAfterPlayMsg)
          + ExitGameOutRoundMsg.ADAPTER.encodedSizeWithTag(109, value.exitGameOutRoundMsg)
          + VoteResultMsg.ADAPTER.encodedSizeWithTag(110, value.voteResultMsg)
          + MachineScore.ADAPTER.encodedSizeWithTag(111, value.machineScore)
          + QWantSingChanceMsg.ADAPTER.encodedSizeWithTag(112, value.qWantSingChanceMsg)
          + QGetSingChanceMsg.ADAPTER.encodedSizeWithTag(113, value.qGetSingChanceMsg)
          + QSyncStatusMsg.ADAPTER.encodedSizeWithTag(114, value.qSyncStatusMsg)
          + QRoundOverMsg.ADAPTER.encodedSizeWithTag(115, value.qRoundOverMsg)
          + QRoundAndGameOverMsg.ADAPTER.encodedSizeWithTag(116, value.qRoundAndGameOverMsg)
          + QNoPassSingMsg.ADAPTER.encodedSizeWithTag(117, value.qNoPassSingMsg)
          + QExitGameMsg.ADAPTER.encodedSizeWithTag(118, value.qExitGameMsg)
          + PKBLightMsg.ADAPTER.encodedSizeWithTag(119, value.pkBLightMsg)
          + PKMLightMsg.ADAPTER.encodedSizeWithTag(120, value.pkMLightMsg)
          + QBLightMsg.ADAPTER.encodedSizeWithTag(121, value.qBLightMsg)
          + QMLightMsg.ADAPTER.encodedSizeWithTag(122, value.qMLightMsg)
          + QJoinNoticeMsg.ADAPTER.encodedSizeWithTag(123, value.qJoinNoticeMsg)
          + QJoinActionMsg.ADAPTER.encodedSizeWithTag(124, value.qJoinActionMsg)
          + QKickUserRequestMsg.ADAPTER.encodedSizeWithTag(125, value.qKickUserRequestMsg)
          + QKickUserResultMsg.ADAPTER.encodedSizeWithTag(126, value.qKickUserResultMsg)
          + QGameBeginMsg.ADAPTER.encodedSizeWithTag(127, value.qGameBeginMsg)
          + QChangeMusicTag.ADAPTER.encodedSizeWithTag(128, value.qChangeMusicTag)
          + QCoinChangeMsg.ADAPTER.encodedSizeWithTag(129, value.qCoinChangeMsg)
          + QCHOGiveUpMsg.ADAPTER.encodedSizeWithTag(131, value.qCHOGiveUpMsg)
          + QSPKInnerRoundOverMsg.ADAPTER.encodedSizeWithTag(132, value.qSPKInnerRoundOverMsg)
          + QChangeRoomName.ADAPTER.encodedSizeWithTag(133, value.qChangeRoomName)
          + GPrensentGiftMsg.ADAPTER.encodedSizeWithTag(134, value.gPrensentGiftMsg)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RoomMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.timeMs);
      ERoomMsgType.ADAPTER.encodeWithTag(writer, 2, value.msgType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.roomID);
      ProtoAdapter.SINT64.encodeWithTag(writer, 4, value.no);
      EMsgPosType.ADAPTER.encodeWithTag(writer, 5, value.posType);
      UserInfo.ADAPTER.encodeWithTag(writer, 6, value.sender);
      CommentMsg.ADAPTER.encodeWithTag(writer, 10, value.commentMsg);
      SpecialEmojiMsg.ADAPTER.encodeWithTag(writer, 11, value.specialEmojiMsg);
      DynamicEmojiMsg.ADAPTER.encodeWithTag(writer, 12, value.dynamicemojiMsg);
      AudioMsg.ADAPTER.encodeWithTag(writer, 13, value.audioMsg);
      JoinActionMsg.ADAPTER.encodeWithTag(writer, 100, value.joinActionMsg);
      JoinNoticeMsg.ADAPTER.encodeWithTag(writer, 101, value.joinNoticeMsg);
      ReadyNoticeMsg.ADAPTER.encodeWithTag(writer, 102, value.readyNoticeMsg);
      RoundOverMsg.ADAPTER.encodeWithTag(writer, 103, value.roundOverMsg);
      RoundAndGameOverMsg.ADAPTER.encodeWithTag(writer, 104, value.roundAndGameOverMsg);
      AppSwapMsg.ADAPTER.encodeWithTag(writer, 105, value.appSwapMsg);
      SyncStatusMsg.ADAPTER.encodeWithTag(writer, 106, value.syncStatusMsg);
      ExitGameBeforePlayMsg.ADAPTER.encodeWithTag(writer, 107, value.exitGameBeforePlayMsg);
      ExitGameAfterPlayMsg.ADAPTER.encodeWithTag(writer, 108, value.exitGameAfterPlayMsg);
      ExitGameOutRoundMsg.ADAPTER.encodeWithTag(writer, 109, value.exitGameOutRoundMsg);
      VoteResultMsg.ADAPTER.encodeWithTag(writer, 110, value.voteResultMsg);
      MachineScore.ADAPTER.encodeWithTag(writer, 111, value.machineScore);
      QWantSingChanceMsg.ADAPTER.encodeWithTag(writer, 112, value.qWantSingChanceMsg);
      QGetSingChanceMsg.ADAPTER.encodeWithTag(writer, 113, value.qGetSingChanceMsg);
      QSyncStatusMsg.ADAPTER.encodeWithTag(writer, 114, value.qSyncStatusMsg);
      QRoundOverMsg.ADAPTER.encodeWithTag(writer, 115, value.qRoundOverMsg);
      QRoundAndGameOverMsg.ADAPTER.encodeWithTag(writer, 116, value.qRoundAndGameOverMsg);
      QNoPassSingMsg.ADAPTER.encodeWithTag(writer, 117, value.qNoPassSingMsg);
      QExitGameMsg.ADAPTER.encodeWithTag(writer, 118, value.qExitGameMsg);
      PKBLightMsg.ADAPTER.encodeWithTag(writer, 119, value.pkBLightMsg);
      PKMLightMsg.ADAPTER.encodeWithTag(writer, 120, value.pkMLightMsg);
      QBLightMsg.ADAPTER.encodeWithTag(writer, 121, value.qBLightMsg);
      QMLightMsg.ADAPTER.encodeWithTag(writer, 122, value.qMLightMsg);
      QJoinNoticeMsg.ADAPTER.encodeWithTag(writer, 123, value.qJoinNoticeMsg);
      QJoinActionMsg.ADAPTER.encodeWithTag(writer, 124, value.qJoinActionMsg);
      QKickUserRequestMsg.ADAPTER.encodeWithTag(writer, 125, value.qKickUserRequestMsg);
      QKickUserResultMsg.ADAPTER.encodeWithTag(writer, 126, value.qKickUserResultMsg);
      QGameBeginMsg.ADAPTER.encodeWithTag(writer, 127, value.qGameBeginMsg);
      QChangeMusicTag.ADAPTER.encodeWithTag(writer, 128, value.qChangeMusicTag);
      QCoinChangeMsg.ADAPTER.encodeWithTag(writer, 129, value.qCoinChangeMsg);
      QCHOGiveUpMsg.ADAPTER.encodeWithTag(writer, 131, value.qCHOGiveUpMsg);
      QSPKInnerRoundOverMsg.ADAPTER.encodeWithTag(writer, 132, value.qSPKInnerRoundOverMsg);
      QChangeRoomName.ADAPTER.encodeWithTag(writer, 133, value.qChangeRoomName);
      GPrensentGiftMsg.ADAPTER.encodeWithTag(writer, 134, value.gPrensentGiftMsg);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RoomMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: {
            try {
              builder.setMsgType(ERoomMsgType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setRoomID(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setNo(ProtoAdapter.SINT64.decode(reader)); break;
          case 5: {
            try {
              builder.setPosType(EMsgPosType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 6: builder.setSender(UserInfo.ADAPTER.decode(reader)); break;
          case 10: builder.setCommentMsg(CommentMsg.ADAPTER.decode(reader)); break;
          case 11: builder.setSpecialEmojiMsg(SpecialEmojiMsg.ADAPTER.decode(reader)); break;
          case 12: builder.setDynamicemojiMsg(DynamicEmojiMsg.ADAPTER.decode(reader)); break;
          case 13: builder.setAudioMsg(AudioMsg.ADAPTER.decode(reader)); break;
          case 100: builder.setJoinActionMsg(JoinActionMsg.ADAPTER.decode(reader)); break;
          case 101: builder.setJoinNoticeMsg(JoinNoticeMsg.ADAPTER.decode(reader)); break;
          case 102: builder.setReadyNoticeMsg(ReadyNoticeMsg.ADAPTER.decode(reader)); break;
          case 103: builder.setRoundOverMsg(RoundOverMsg.ADAPTER.decode(reader)); break;
          case 104: builder.setRoundAndGameOverMsg(RoundAndGameOverMsg.ADAPTER.decode(reader)); break;
          case 105: builder.setAppSwapMsg(AppSwapMsg.ADAPTER.decode(reader)); break;
          case 106: builder.setSyncStatusMsg(SyncStatusMsg.ADAPTER.decode(reader)); break;
          case 107: builder.setExitGameBeforePlayMsg(ExitGameBeforePlayMsg.ADAPTER.decode(reader)); break;
          case 108: builder.setExitGameAfterPlayMsg(ExitGameAfterPlayMsg.ADAPTER.decode(reader)); break;
          case 109: builder.setExitGameOutRoundMsg(ExitGameOutRoundMsg.ADAPTER.decode(reader)); break;
          case 110: builder.setVoteResultMsg(VoteResultMsg.ADAPTER.decode(reader)); break;
          case 111: builder.setMachineScore(MachineScore.ADAPTER.decode(reader)); break;
          case 112: builder.setQWantSingChanceMsg(QWantSingChanceMsg.ADAPTER.decode(reader)); break;
          case 113: builder.setQGetSingChanceMsg(QGetSingChanceMsg.ADAPTER.decode(reader)); break;
          case 114: builder.setQSyncStatusMsg(QSyncStatusMsg.ADAPTER.decode(reader)); break;
          case 115: builder.setQRoundOverMsg(QRoundOverMsg.ADAPTER.decode(reader)); break;
          case 116: builder.setQRoundAndGameOverMsg(QRoundAndGameOverMsg.ADAPTER.decode(reader)); break;
          case 117: builder.setQNoPassSingMsg(QNoPassSingMsg.ADAPTER.decode(reader)); break;
          case 118: builder.setQExitGameMsg(QExitGameMsg.ADAPTER.decode(reader)); break;
          case 119: builder.setPkBLightMsg(PKBLightMsg.ADAPTER.decode(reader)); break;
          case 120: builder.setPkMLightMsg(PKMLightMsg.ADAPTER.decode(reader)); break;
          case 121: builder.setQBLightMsg(QBLightMsg.ADAPTER.decode(reader)); break;
          case 122: builder.setQMLightMsg(QMLightMsg.ADAPTER.decode(reader)); break;
          case 123: builder.setQJoinNoticeMsg(QJoinNoticeMsg.ADAPTER.decode(reader)); break;
          case 124: builder.setQJoinActionMsg(QJoinActionMsg.ADAPTER.decode(reader)); break;
          case 125: builder.setQKickUserRequestMsg(QKickUserRequestMsg.ADAPTER.decode(reader)); break;
          case 126: builder.setQKickUserResultMsg(QKickUserResultMsg.ADAPTER.decode(reader)); break;
          case 127: builder.setQGameBeginMsg(QGameBeginMsg.ADAPTER.decode(reader)); break;
          case 128: builder.setQChangeMusicTag(QChangeMusicTag.ADAPTER.decode(reader)); break;
          case 129: builder.setQCoinChangeMsg(QCoinChangeMsg.ADAPTER.decode(reader)); break;
          case 131: builder.setQCHOGiveUpMsg(QCHOGiveUpMsg.ADAPTER.decode(reader)); break;
          case 132: builder.setQSPKInnerRoundOverMsg(QSPKInnerRoundOverMsg.ADAPTER.decode(reader)); break;
          case 133: builder.setQChangeRoomName(QChangeRoomName.ADAPTER.decode(reader)); break;
          case 134: builder.setGPrensentGiftMsg(GPrensentGiftMsg.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RoomMsg redact(RoomMsg value) {
      Builder builder = value.newBuilder();
      if (builder.sender != null) builder.sender = UserInfo.ADAPTER.redact(builder.sender);
      if (builder.commentMsg != null) builder.commentMsg = CommentMsg.ADAPTER.redact(builder.commentMsg);
      if (builder.specialEmojiMsg != null) builder.specialEmojiMsg = SpecialEmojiMsg.ADAPTER.redact(builder.specialEmojiMsg);
      if (builder.dynamicemojiMsg != null) builder.dynamicemojiMsg = DynamicEmojiMsg.ADAPTER.redact(builder.dynamicemojiMsg);
      if (builder.audioMsg != null) builder.audioMsg = AudioMsg.ADAPTER.redact(builder.audioMsg);
      if (builder.joinActionMsg != null) builder.joinActionMsg = JoinActionMsg.ADAPTER.redact(builder.joinActionMsg);
      if (builder.joinNoticeMsg != null) builder.joinNoticeMsg = JoinNoticeMsg.ADAPTER.redact(builder.joinNoticeMsg);
      if (builder.readyNoticeMsg != null) builder.readyNoticeMsg = ReadyNoticeMsg.ADAPTER.redact(builder.readyNoticeMsg);
      if (builder.roundOverMsg != null) builder.roundOverMsg = RoundOverMsg.ADAPTER.redact(builder.roundOverMsg);
      if (builder.roundAndGameOverMsg != null) builder.roundAndGameOverMsg = RoundAndGameOverMsg.ADAPTER.redact(builder.roundAndGameOverMsg);
      if (builder.appSwapMsg != null) builder.appSwapMsg = AppSwapMsg.ADAPTER.redact(builder.appSwapMsg);
      if (builder.syncStatusMsg != null) builder.syncStatusMsg = SyncStatusMsg.ADAPTER.redact(builder.syncStatusMsg);
      if (builder.exitGameBeforePlayMsg != null) builder.exitGameBeforePlayMsg = ExitGameBeforePlayMsg.ADAPTER.redact(builder.exitGameBeforePlayMsg);
      if (builder.exitGameAfterPlayMsg != null) builder.exitGameAfterPlayMsg = ExitGameAfterPlayMsg.ADAPTER.redact(builder.exitGameAfterPlayMsg);
      if (builder.exitGameOutRoundMsg != null) builder.exitGameOutRoundMsg = ExitGameOutRoundMsg.ADAPTER.redact(builder.exitGameOutRoundMsg);
      if (builder.voteResultMsg != null) builder.voteResultMsg = VoteResultMsg.ADAPTER.redact(builder.voteResultMsg);
      if (builder.machineScore != null) builder.machineScore = MachineScore.ADAPTER.redact(builder.machineScore);
      if (builder.qWantSingChanceMsg != null) builder.qWantSingChanceMsg = QWantSingChanceMsg.ADAPTER.redact(builder.qWantSingChanceMsg);
      if (builder.qGetSingChanceMsg != null) builder.qGetSingChanceMsg = QGetSingChanceMsg.ADAPTER.redact(builder.qGetSingChanceMsg);
      if (builder.qSyncStatusMsg != null) builder.qSyncStatusMsg = QSyncStatusMsg.ADAPTER.redact(builder.qSyncStatusMsg);
      if (builder.qRoundOverMsg != null) builder.qRoundOverMsg = QRoundOverMsg.ADAPTER.redact(builder.qRoundOverMsg);
      if (builder.qRoundAndGameOverMsg != null) builder.qRoundAndGameOverMsg = QRoundAndGameOverMsg.ADAPTER.redact(builder.qRoundAndGameOverMsg);
      if (builder.qNoPassSingMsg != null) builder.qNoPassSingMsg = QNoPassSingMsg.ADAPTER.redact(builder.qNoPassSingMsg);
      if (builder.qExitGameMsg != null) builder.qExitGameMsg = QExitGameMsg.ADAPTER.redact(builder.qExitGameMsg);
      if (builder.pkBLightMsg != null) builder.pkBLightMsg = PKBLightMsg.ADAPTER.redact(builder.pkBLightMsg);
      if (builder.pkMLightMsg != null) builder.pkMLightMsg = PKMLightMsg.ADAPTER.redact(builder.pkMLightMsg);
      if (builder.qBLightMsg != null) builder.qBLightMsg = QBLightMsg.ADAPTER.redact(builder.qBLightMsg);
      if (builder.qMLightMsg != null) builder.qMLightMsg = QMLightMsg.ADAPTER.redact(builder.qMLightMsg);
      if (builder.qJoinNoticeMsg != null) builder.qJoinNoticeMsg = QJoinNoticeMsg.ADAPTER.redact(builder.qJoinNoticeMsg);
      if (builder.qJoinActionMsg != null) builder.qJoinActionMsg = QJoinActionMsg.ADAPTER.redact(builder.qJoinActionMsg);
      if (builder.qKickUserRequestMsg != null) builder.qKickUserRequestMsg = QKickUserRequestMsg.ADAPTER.redact(builder.qKickUserRequestMsg);
      if (builder.qKickUserResultMsg != null) builder.qKickUserResultMsg = QKickUserResultMsg.ADAPTER.redact(builder.qKickUserResultMsg);
      if (builder.qGameBeginMsg != null) builder.qGameBeginMsg = QGameBeginMsg.ADAPTER.redact(builder.qGameBeginMsg);
      if (builder.qChangeMusicTag != null) builder.qChangeMusicTag = QChangeMusicTag.ADAPTER.redact(builder.qChangeMusicTag);
      if (builder.qCoinChangeMsg != null) builder.qCoinChangeMsg = QCoinChangeMsg.ADAPTER.redact(builder.qCoinChangeMsg);
      if (builder.qCHOGiveUpMsg != null) builder.qCHOGiveUpMsg = QCHOGiveUpMsg.ADAPTER.redact(builder.qCHOGiveUpMsg);
      if (builder.qSPKInnerRoundOverMsg != null) builder.qSPKInnerRoundOverMsg = QSPKInnerRoundOverMsg.ADAPTER.redact(builder.qSPKInnerRoundOverMsg);
      if (builder.qChangeRoomName != null) builder.qChangeRoomName = QChangeRoomName.ADAPTER.redact(builder.qChangeRoomName);
      if (builder.gPrensentGiftMsg != null) builder.gPrensentGiftMsg = GPrensentGiftMsg.ADAPTER.redact(builder.gPrensentGiftMsg);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
