// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class PSyncMsg extends Message<PSyncMsg, PSyncMsg.Builder> {
  public static final ProtoAdapter<PSyncMsg> ADAPTER = new ProtoAdapter_PSyncMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_SYNCSTATUSTIMEMS = 0L;

  public static final Long DEFAULT_PASSEDTIMEMS = 0L;

  public static final Integer DEFAULT_ONLINEUSERCNT = 0;

  public static final Integer DEFAULT_APPLYUSERCNT = 0;

  /**
   * 状态同步时的毫秒时间戳
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long syncStatusTimeMs;

  /**
   * 房间已经经历的毫秒数
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long passedTimeMs;

  /**
   * 在线人数
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer onlineUserCnt;

  /**
   * 申请人数
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer applyUserCnt;

  /**
   * 座位最新信息
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.PartyRoom.SeatInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<SeatInfo> seats;

  /**
   * 当前结束轮次的信息
   */
  @WireField(
      tag = 6,
      adapter = "com.zq.live.proto.PartyRoom.PRoundInfo#ADAPTER"
  )
  private final PRoundInfo currentRound;

  /**
   * 用户列表[主持人、管理员、嘉宾]
   */
  @WireField(
      tag = 7,
      adapter = "com.zq.live.proto.PartyRoom.POnlineInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<POnlineInfo> users;

  public PSyncMsg(Long syncStatusTimeMs, Long passedTimeMs, Integer onlineUserCnt,
      Integer applyUserCnt, List<SeatInfo> seats, PRoundInfo currentRound,
      List<POnlineInfo> users) {
    this(syncStatusTimeMs, passedTimeMs, onlineUserCnt, applyUserCnt, seats, currentRound, users, ByteString.EMPTY);
  }

  public PSyncMsg(Long syncStatusTimeMs, Long passedTimeMs, Integer onlineUserCnt,
      Integer applyUserCnt, List<SeatInfo> seats, PRoundInfo currentRound, List<POnlineInfo> users,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.syncStatusTimeMs = syncStatusTimeMs;
    this.passedTimeMs = passedTimeMs;
    this.onlineUserCnt = onlineUserCnt;
    this.applyUserCnt = applyUserCnt;
    this.seats = Internal.immutableCopyOf("seats", seats);
    this.currentRound = currentRound;
    this.users = Internal.immutableCopyOf("users", users);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.syncStatusTimeMs = syncStatusTimeMs;
    builder.passedTimeMs = passedTimeMs;
    builder.onlineUserCnt = onlineUserCnt;
    builder.applyUserCnt = applyUserCnt;
    builder.seats = Internal.copyOf("seats", seats);
    builder.currentRound = currentRound;
    builder.users = Internal.copyOf("users", users);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PSyncMsg)) return false;
    PSyncMsg o = (PSyncMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(syncStatusTimeMs, o.syncStatusTimeMs)
        && Internal.equals(passedTimeMs, o.passedTimeMs)
        && Internal.equals(onlineUserCnt, o.onlineUserCnt)
        && Internal.equals(applyUserCnt, o.applyUserCnt)
        && seats.equals(o.seats)
        && Internal.equals(currentRound, o.currentRound)
        && users.equals(o.users);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (syncStatusTimeMs != null ? syncStatusTimeMs.hashCode() : 0);
      result = result * 37 + (passedTimeMs != null ? passedTimeMs.hashCode() : 0);
      result = result * 37 + (onlineUserCnt != null ? onlineUserCnt.hashCode() : 0);
      result = result * 37 + (applyUserCnt != null ? applyUserCnt.hashCode() : 0);
      result = result * 37 + seats.hashCode();
      result = result * 37 + (currentRound != null ? currentRound.hashCode() : 0);
      result = result * 37 + users.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (syncStatusTimeMs != null) builder.append(", syncStatusTimeMs=").append(syncStatusTimeMs);
    if (passedTimeMs != null) builder.append(", passedTimeMs=").append(passedTimeMs);
    if (onlineUserCnt != null) builder.append(", onlineUserCnt=").append(onlineUserCnt);
    if (applyUserCnt != null) builder.append(", applyUserCnt=").append(applyUserCnt);
    if (!seats.isEmpty()) builder.append(", seats=").append(seats);
    if (currentRound != null) builder.append(", currentRound=").append(currentRound);
    if (!users.isEmpty()) builder.append(", users=").append(users);
    return builder.replace(0, 2, "PSyncMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PSyncMsg.ADAPTER.encode(this);
  }

  public static final PSyncMsg parseFrom(byte[] data) throws IOException {
    PSyncMsg c = null;
       c = PSyncMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 状态同步时的毫秒时间戳
   */
  public Long getSyncStatusTimeMs() {
    if(syncStatusTimeMs==null){
        return DEFAULT_SYNCSTATUSTIMEMS;
    }
    return syncStatusTimeMs;
  }

  /**
   * 房间已经经历的毫秒数
   */
  public Long getPassedTimeMs() {
    if(passedTimeMs==null){
        return DEFAULT_PASSEDTIMEMS;
    }
    return passedTimeMs;
  }

  /**
   * 在线人数
   */
  public Integer getOnlineUserCnt() {
    if(onlineUserCnt==null){
        return DEFAULT_ONLINEUSERCNT;
    }
    return onlineUserCnt;
  }

  /**
   * 申请人数
   */
  public Integer getApplyUserCnt() {
    if(applyUserCnt==null){
        return DEFAULT_APPLYUSERCNT;
    }
    return applyUserCnt;
  }

  /**
   * 座位最新信息
   */
  public List<SeatInfo> getSeatsList() {
    if(seats==null){
        return new java.util.ArrayList<SeatInfo>();
    }
    return seats;
  }

  /**
   * 当前结束轮次的信息
   */
  public PRoundInfo getCurrentRound() {
    if(currentRound==null){
        return new PRoundInfo.Builder().build();
    }
    return currentRound;
  }

  /**
   * 用户列表[主持人、管理员、嘉宾]
   */
  public List<POnlineInfo> getUsersList() {
    if(users==null){
        return new java.util.ArrayList<POnlineInfo>();
    }
    return users;
  }

  /**
   * 状态同步时的毫秒时间戳
   */
  public boolean hasSyncStatusTimeMs() {
    return syncStatusTimeMs!=null;
  }

  /**
   * 房间已经经历的毫秒数
   */
  public boolean hasPassedTimeMs() {
    return passedTimeMs!=null;
  }

  /**
   * 在线人数
   */
  public boolean hasOnlineUserCnt() {
    return onlineUserCnt!=null;
  }

  /**
   * 申请人数
   */
  public boolean hasApplyUserCnt() {
    return applyUserCnt!=null;
  }

  /**
   * 座位最新信息
   */
  public boolean hasSeatsList() {
    return seats!=null;
  }

  /**
   * 当前结束轮次的信息
   */
  public boolean hasCurrentRound() {
    return currentRound!=null;
  }

  /**
   * 用户列表[主持人、管理员、嘉宾]
   */
  public boolean hasUsersList() {
    return users!=null;
  }

  public static final class Builder extends Message.Builder<PSyncMsg, Builder> {
    private Long syncStatusTimeMs;

    private Long passedTimeMs;

    private Integer onlineUserCnt;

    private Integer applyUserCnt;

    private List<SeatInfo> seats;

    private PRoundInfo currentRound;

    private List<POnlineInfo> users;

    public Builder() {
      seats = Internal.newMutableList();
      users = Internal.newMutableList();
    }

    /**
     * 状态同步时的毫秒时间戳
     */
    public Builder setSyncStatusTimeMs(Long syncStatusTimeMs) {
      this.syncStatusTimeMs = syncStatusTimeMs;
      return this;
    }

    /**
     * 房间已经经历的毫秒数
     */
    public Builder setPassedTimeMs(Long passedTimeMs) {
      this.passedTimeMs = passedTimeMs;
      return this;
    }

    /**
     * 在线人数
     */
    public Builder setOnlineUserCnt(Integer onlineUserCnt) {
      this.onlineUserCnt = onlineUserCnt;
      return this;
    }

    /**
     * 申请人数
     */
    public Builder setApplyUserCnt(Integer applyUserCnt) {
      this.applyUserCnt = applyUserCnt;
      return this;
    }

    /**
     * 座位最新信息
     */
    public Builder addAllSeats(List<SeatInfo> seats) {
      Internal.checkElementsNotNull(seats);
      this.seats = seats;
      return this;
    }

    /**
     * 当前结束轮次的信息
     */
    public Builder setCurrentRound(PRoundInfo currentRound) {
      this.currentRound = currentRound;
      return this;
    }

    /**
     * 用户列表[主持人、管理员、嘉宾]
     */
    public Builder addAllUsers(List<POnlineInfo> users) {
      Internal.checkElementsNotNull(users);
      this.users = users;
      return this;
    }

    @Override
    public PSyncMsg build() {
      return new PSyncMsg(syncStatusTimeMs, passedTimeMs, onlineUserCnt, applyUserCnt, seats, currentRound, users, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PSyncMsg extends ProtoAdapter<PSyncMsg> {
    public ProtoAdapter_PSyncMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, PSyncMsg.class);
    }

    @Override
    public int encodedSize(PSyncMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.syncStatusTimeMs)
          + ProtoAdapter.SINT64.encodedSizeWithTag(2, value.passedTimeMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.onlineUserCnt)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.applyUserCnt)
          + SeatInfo.ADAPTER.asRepeated().encodedSizeWithTag(5, value.seats)
          + PRoundInfo.ADAPTER.encodedSizeWithTag(6, value.currentRound)
          + POnlineInfo.ADAPTER.asRepeated().encodedSizeWithTag(7, value.users)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PSyncMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.syncStatusTimeMs);
      ProtoAdapter.SINT64.encodeWithTag(writer, 2, value.passedTimeMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.onlineUserCnt);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.applyUserCnt);
      SeatInfo.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.seats);
      PRoundInfo.ADAPTER.encodeWithTag(writer, 6, value.currentRound);
      POnlineInfo.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.users);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PSyncMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setSyncStatusTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: builder.setPassedTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 3: builder.setOnlineUserCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setApplyUserCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.seats.add(SeatInfo.ADAPTER.decode(reader)); break;
          case 6: builder.setCurrentRound(PRoundInfo.ADAPTER.decode(reader)); break;
          case 7: builder.users.add(POnlineInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PSyncMsg redact(PSyncMsg value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.seats, SeatInfo.ADAPTER);
      if (builder.currentRound != null) builder.currentRound = PRoundInfo.ADAPTER.redact(builder.currentRound);
      Internal.redactElements(builder.users, POnlineInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
