// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class QKickUserSuccessMsg extends Message<QKickUserSuccessMsg, QKickUserSuccessMsg.Builder> {
  public static final ProtoAdapter<QKickUserSuccessMsg> ADAPTER = new ProtoAdapter_QKickUserSuccessMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_SOURCEUSERID = 0;

  public static final Integer DEFAULT_KICKUSERID = 0;

  public static final String DEFAULT_KICKSUCCESSMSG = "";

  /**
   * 发起者id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer sourceUserID;

  /**
   * 被踢者id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer kickUserID;

  /**
   * 投赞成票用户id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  private final List<Integer> voteUserIDs;

  /**
   * 踢人成功的信息内容
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String kickSuccessMsg;

  public QKickUserSuccessMsg(Integer sourceUserID, Integer kickUserID, List<Integer> voteUserIDs,
      String kickSuccessMsg) {
    this(sourceUserID, kickUserID, voteUserIDs, kickSuccessMsg, ByteString.EMPTY);
  }

  public QKickUserSuccessMsg(Integer sourceUserID, Integer kickUserID, List<Integer> voteUserIDs,
      String kickSuccessMsg, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.sourceUserID = sourceUserID;
    this.kickUserID = kickUserID;
    this.voteUserIDs = Internal.immutableCopyOf("voteUserIDs", voteUserIDs);
    this.kickSuccessMsg = kickSuccessMsg;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.sourceUserID = sourceUserID;
    builder.kickUserID = kickUserID;
    builder.voteUserIDs = Internal.copyOf("voteUserIDs", voteUserIDs);
    builder.kickSuccessMsg = kickSuccessMsg;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof QKickUserSuccessMsg)) return false;
    QKickUserSuccessMsg o = (QKickUserSuccessMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(sourceUserID, o.sourceUserID)
        && Internal.equals(kickUserID, o.kickUserID)
        && voteUserIDs.equals(o.voteUserIDs)
        && Internal.equals(kickSuccessMsg, o.kickSuccessMsg);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (sourceUserID != null ? sourceUserID.hashCode() : 0);
      result = result * 37 + (kickUserID != null ? kickUserID.hashCode() : 0);
      result = result * 37 + voteUserIDs.hashCode();
      result = result * 37 + (kickSuccessMsg != null ? kickSuccessMsg.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (sourceUserID != null) builder.append(", sourceUserID=").append(sourceUserID);
    if (kickUserID != null) builder.append(", kickUserID=").append(kickUserID);
    if (!voteUserIDs.isEmpty()) builder.append(", voteUserIDs=").append(voteUserIDs);
    if (kickSuccessMsg != null) builder.append(", kickSuccessMsg=").append(kickSuccessMsg);
    return builder.replace(0, 2, "QKickUserSuccessMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return QKickUserSuccessMsg.ADAPTER.encode(this);
  }

  public static final QKickUserSuccessMsg parseFrom(byte[] data) throws IOException {
    QKickUserSuccessMsg c = null;
       c = QKickUserSuccessMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 发起者id
   */
  public Integer getSourceUserID() {
    if(sourceUserID==null){
        return DEFAULT_SOURCEUSERID;
    }
    return sourceUserID;
  }

  /**
   * 被踢者id
   */
  public Integer getKickUserID() {
    if(kickUserID==null){
        return DEFAULT_KICKUSERID;
    }
    return kickUserID;
  }

  /**
   * 投赞成票用户id
   */
  public List<Integer> getVoteUserIDsList() {
    if(voteUserIDs==null){
        return new java.util.ArrayList<Integer>();
    }
    return voteUserIDs;
  }

  /**
   * 踢人成功的信息内容
   */
  public String getKickSuccessMsg() {
    if(kickSuccessMsg==null){
        return DEFAULT_KICKSUCCESSMSG;
    }
    return kickSuccessMsg;
  }

  /**
   * 发起者id
   */
  public boolean hasSourceUserID() {
    return sourceUserID!=null;
  }

  /**
   * 被踢者id
   */
  public boolean hasKickUserID() {
    return kickUserID!=null;
  }

  /**
   * 投赞成票用户id
   */
  public boolean hasVoteUserIDsList() {
    return voteUserIDs!=null;
  }

  /**
   * 踢人成功的信息内容
   */
  public boolean hasKickSuccessMsg() {
    return kickSuccessMsg!=null;
  }

  public static final class Builder extends Message.Builder<QKickUserSuccessMsg, Builder> {
    private Integer sourceUserID;

    private Integer kickUserID;

    private List<Integer> voteUserIDs;

    private String kickSuccessMsg;

    public Builder() {
      voteUserIDs = Internal.newMutableList();
    }

    /**
     * 发起者id
     */
    public Builder setSourceUserID(Integer sourceUserID) {
      this.sourceUserID = sourceUserID;
      return this;
    }

    /**
     * 被踢者id
     */
    public Builder setKickUserID(Integer kickUserID) {
      this.kickUserID = kickUserID;
      return this;
    }

    /**
     * 投赞成票用户id
     */
    public Builder addAllVoteUserIDs(List<Integer> voteUserIDs) {
      Internal.checkElementsNotNull(voteUserIDs);
      this.voteUserIDs = voteUserIDs;
      return this;
    }

    /**
     * 踢人成功的信息内容
     */
    public Builder setKickSuccessMsg(String kickSuccessMsg) {
      this.kickSuccessMsg = kickSuccessMsg;
      return this;
    }

    @Override
    public QKickUserSuccessMsg build() {
      return new QKickUserSuccessMsg(sourceUserID, kickUserID, voteUserIDs, kickSuccessMsg, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_QKickUserSuccessMsg extends ProtoAdapter<QKickUserSuccessMsg> {
    public ProtoAdapter_QKickUserSuccessMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, QKickUserSuccessMsg.class);
    }

    @Override
    public int encodedSize(QKickUserSuccessMsg value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.sourceUserID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.kickUserID)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(3, value.voteUserIDs)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.kickSuccessMsg)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, QKickUserSuccessMsg value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.sourceUserID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.kickUserID);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 3, value.voteUserIDs);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.kickSuccessMsg);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public QKickUserSuccessMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setSourceUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setKickUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.voteUserIDs.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setKickSuccessMsg(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public QKickUserSuccessMsg redact(QKickUserSuccessMsg value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
