// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class PResultVote extends Message<PResultVote, PResultVote.Builder> {
  public static final ProtoAdapter<PResultVote> ADAPTER = new ProtoAdapter_PResultVote();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_VOTETAG = "";

  /**
   * 投票标识
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String voteTag;

  /**
   * 投票信息
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.PartyRoom.PVoteInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<PVoteInfo> voteInfos;

  public PResultVote(String voteTag, List<PVoteInfo> voteInfos) {
    this(voteTag, voteInfos, ByteString.EMPTY);
  }

  public PResultVote(String voteTag, List<PVoteInfo> voteInfos, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.voteTag = voteTag;
    this.voteInfos = Internal.immutableCopyOf("voteInfos", voteInfos);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.voteTag = voteTag;
    builder.voteInfos = Internal.copyOf("voteInfos", voteInfos);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PResultVote)) return false;
    PResultVote o = (PResultVote) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(voteTag, o.voteTag)
        && voteInfos.equals(o.voteInfos);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (voteTag != null ? voteTag.hashCode() : 0);
      result = result * 37 + voteInfos.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (voteTag != null) builder.append(", voteTag=").append(voteTag);
    if (!voteInfos.isEmpty()) builder.append(", voteInfos=").append(voteInfos);
    return builder.replace(0, 2, "PResultVote{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PResultVote.ADAPTER.encode(this);
  }

  public static final PResultVote parseFrom(byte[] data) throws IOException {
    PResultVote c = null;
       c = PResultVote.ADAPTER.decode(data);
    return c;
  }

  /**
   * 投票标识
   */
  public String getVoteTag() {
    if(voteTag==null){
        return DEFAULT_VOTETAG;
    }
    return voteTag;
  }

  /**
   * 投票信息
   */
  public List<PVoteInfo> getVoteInfosList() {
    if(voteInfos==null){
        return new java.util.ArrayList<PVoteInfo>();
    }
    return voteInfos;
  }

  /**
   * 投票标识
   */
  public boolean hasVoteTag() {
    return voteTag!=null;
  }

  /**
   * 投票信息
   */
  public boolean hasVoteInfosList() {
    return voteInfos!=null;
  }

  public static final class Builder extends Message.Builder<PResultVote, Builder> {
    private String voteTag;

    private List<PVoteInfo> voteInfos;

    public Builder() {
      voteInfos = Internal.newMutableList();
    }

    /**
     * 投票标识
     */
    public Builder setVoteTag(String voteTag) {
      this.voteTag = voteTag;
      return this;
    }

    /**
     * 投票信息
     */
    public Builder addAllVoteInfos(List<PVoteInfo> voteInfos) {
      Internal.checkElementsNotNull(voteInfos);
      this.voteInfos = voteInfos;
      return this;
    }

    @Override
    public PResultVote build() {
      return new PResultVote(voteTag, voteInfos, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PResultVote extends ProtoAdapter<PResultVote> {
    public ProtoAdapter_PResultVote() {
      super(FieldEncoding.LENGTH_DELIMITED, PResultVote.class);
    }

    @Override
    public int encodedSize(PResultVote value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.voteTag)
          + PVoteInfo.ADAPTER.asRepeated().encodedSizeWithTag(2, value.voteInfos)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PResultVote value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.voteTag);
      PVoteInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.voteInfos);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PResultVote decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setVoteTag(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.voteInfos.add(PVoteInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PResultVote redact(PResultVote value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.voteInfos, PVoteInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
