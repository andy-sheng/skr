// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PGameItemInfo extends Message<PGameItemInfo, PGameItemInfo.Builder> {
  public static final ProtoAdapter<PGameItemInfo> ADAPTER = new ProtoAdapter_PGameItemInfo();

  private static final long serialVersionUID = 0L;

  public static final EPGameType DEFAULT_GAMETYPE = EPGameType.PGT_Unknown;

  /**
   * 游戏规则
   */
  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.PartyRoom.PGameRule#ADAPTER"
  )
  private final PGameRule gameRule;

  /**
   * 游戏类型
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.PartyRoom.EPGameType#ADAPTER"
  )
  private final EPGameType gameType;

  /**
   * 剧本类游戏数据
   */
  @WireField(
      tag = 3,
      adapter = "com.zq.live.proto.PartyRoom.PPlayScene#ADAPTER"
  )
  private final PPlayScene play;

  /**
   * 问答类游戏数据
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.PartyRoom.PQuestionScene#ADAPTER"
  )
  private final PQuestionScene question;

  /**
   * 自由主持类游戏
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.PartyRoom.PFreeScene#ADAPTER"
  )
  private final PFreeScene free;

  /**
   * ktv唱歌类游戏
   */
  @WireField(
      tag = 6,
      adapter = "com.zq.live.proto.PartyRoom.PKTVScene#ADAPTER"
  )
  private final PKTVScene ktv;

  public PGameItemInfo(PGameRule gameRule, EPGameType gameType, PPlayScene play,
      PQuestionScene question, PFreeScene free, PKTVScene ktv) {
    this(gameRule, gameType, play, question, free, ktv, ByteString.EMPTY);
  }

  public PGameItemInfo(PGameRule gameRule, EPGameType gameType, PPlayScene play,
      PQuestionScene question, PFreeScene free, PKTVScene ktv, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.gameRule = gameRule;
    this.gameType = gameType;
    this.play = play;
    this.question = question;
    this.free = free;
    this.ktv = ktv;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.gameRule = gameRule;
    builder.gameType = gameType;
    builder.play = play;
    builder.question = question;
    builder.free = free;
    builder.ktv = ktv;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PGameItemInfo)) return false;
    PGameItemInfo o = (PGameItemInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(gameRule, o.gameRule)
        && Internal.equals(gameType, o.gameType)
        && Internal.equals(play, o.play)
        && Internal.equals(question, o.question)
        && Internal.equals(free, o.free)
        && Internal.equals(ktv, o.ktv);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (gameRule != null ? gameRule.hashCode() : 0);
      result = result * 37 + (gameType != null ? gameType.hashCode() : 0);
      result = result * 37 + (play != null ? play.hashCode() : 0);
      result = result * 37 + (question != null ? question.hashCode() : 0);
      result = result * 37 + (free != null ? free.hashCode() : 0);
      result = result * 37 + (ktv != null ? ktv.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (gameRule != null) builder.append(", gameRule=").append(gameRule);
    if (gameType != null) builder.append(", gameType=").append(gameType);
    if (play != null) builder.append(", play=").append(play);
    if (question != null) builder.append(", question=").append(question);
    if (free != null) builder.append(", free=").append(free);
    if (ktv != null) builder.append(", ktv=").append(ktv);
    return builder.replace(0, 2, "PGameItemInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PGameItemInfo.ADAPTER.encode(this);
  }

  public static final PGameItemInfo parseFrom(byte[] data) throws IOException {
    PGameItemInfo c = null;
       c = PGameItemInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 游戏规则
   */
  public PGameRule getGameRule() {
    if(gameRule==null){
        return new PGameRule.Builder().build();
    }
    return gameRule;
  }

  /**
   * 游戏类型
   */
  public EPGameType getGameType() {
    if(gameType==null){
        return new EPGameType.Builder().build();
    }
    return gameType;
  }

  /**
   * 剧本类游戏数据
   */
  public PPlayScene getPlay() {
    if(play==null){
        return new PPlayScene.Builder().build();
    }
    return play;
  }

  /**
   * 问答类游戏数据
   */
  public PQuestionScene getQuestion() {
    if(question==null){
        return new PQuestionScene.Builder().build();
    }
    return question;
  }

  /**
   * 自由主持类游戏
   */
  public PFreeScene getFree() {
    if(free==null){
        return new PFreeScene.Builder().build();
    }
    return free;
  }

  /**
   * ktv唱歌类游戏
   */
  public PKTVScene getKtv() {
    if(ktv==null){
        return new PKTVScene.Builder().build();
    }
    return ktv;
  }

  /**
   * 游戏规则
   */
  public boolean hasGameRule() {
    return gameRule!=null;
  }

  /**
   * 游戏类型
   */
  public boolean hasGameType() {
    return gameType!=null;
  }

  /**
   * 剧本类游戏数据
   */
  public boolean hasPlay() {
    return play!=null;
  }

  /**
   * 问答类游戏数据
   */
  public boolean hasQuestion() {
    return question!=null;
  }

  /**
   * 自由主持类游戏
   */
  public boolean hasFree() {
    return free!=null;
  }

  /**
   * ktv唱歌类游戏
   */
  public boolean hasKtv() {
    return ktv!=null;
  }

  public static final class Builder extends Message.Builder<PGameItemInfo, Builder> {
    private PGameRule gameRule;

    private EPGameType gameType;

    private PPlayScene play;

    private PQuestionScene question;

    private PFreeScene free;

    private PKTVScene ktv;

    public Builder() {
    }

    /**
     * 游戏规则
     */
    public Builder setGameRule(PGameRule gameRule) {
      this.gameRule = gameRule;
      return this;
    }

    /**
     * 游戏类型
     */
    public Builder setGameType(EPGameType gameType) {
      this.gameType = gameType;
      return this;
    }

    /**
     * 剧本类游戏数据
     */
    public Builder setPlay(PPlayScene play) {
      this.play = play;
      return this;
    }

    /**
     * 问答类游戏数据
     */
    public Builder setQuestion(PQuestionScene question) {
      this.question = question;
      return this;
    }

    /**
     * 自由主持类游戏
     */
    public Builder setFree(PFreeScene free) {
      this.free = free;
      return this;
    }

    /**
     * ktv唱歌类游戏
     */
    public Builder setKtv(PKTVScene ktv) {
      this.ktv = ktv;
      return this;
    }

    @Override
    public PGameItemInfo build() {
      return new PGameItemInfo(gameRule, gameType, play, question, free, ktv, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PGameItemInfo extends ProtoAdapter<PGameItemInfo> {
    public ProtoAdapter_PGameItemInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, PGameItemInfo.class);
    }

    @Override
    public int encodedSize(PGameItemInfo value) {
      return PGameRule.ADAPTER.encodedSizeWithTag(1, value.gameRule)
          + EPGameType.ADAPTER.encodedSizeWithTag(2, value.gameType)
          + PPlayScene.ADAPTER.encodedSizeWithTag(3, value.play)
          + PQuestionScene.ADAPTER.encodedSizeWithTag(4, value.question)
          + PFreeScene.ADAPTER.encodedSizeWithTag(5, value.free)
          + PKTVScene.ADAPTER.encodedSizeWithTag(6, value.ktv)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PGameItemInfo value) throws IOException {
      PGameRule.ADAPTER.encodeWithTag(writer, 1, value.gameRule);
      EPGameType.ADAPTER.encodeWithTag(writer, 2, value.gameType);
      PPlayScene.ADAPTER.encodeWithTag(writer, 3, value.play);
      PQuestionScene.ADAPTER.encodeWithTag(writer, 4, value.question);
      PFreeScene.ADAPTER.encodeWithTag(writer, 5, value.free);
      PKTVScene.ADAPTER.encodeWithTag(writer, 6, value.ktv);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PGameItemInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setGameRule(PGameRule.ADAPTER.decode(reader)); break;
          case 2: {
            try {
              builder.setGameType(EPGameType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setPlay(PPlayScene.ADAPTER.decode(reader)); break;
          case 4: builder.setQuestion(PQuestionScene.ADAPTER.decode(reader)); break;
          case 5: builder.setFree(PFreeScene.ADAPTER.decode(reader)); break;
          case 6: builder.setKtv(PKTVScene.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PGameItemInfo redact(PGameItemInfo value) {
      Builder builder = value.newBuilder();
      if (builder.gameRule != null) builder.gameRule = PGameRule.ADAPTER.redact(builder.gameRule);
      if (builder.play != null) builder.play = PPlayScene.ADAPTER.redact(builder.play);
      if (builder.question != null) builder.question = PQuestionScene.ADAPTER.redact(builder.question);
      if (builder.free != null) builder.free = PFreeScene.ADAPTER.redact(builder.free);
      if (builder.ktv != null) builder.ktv = PKTVScene.ADAPTER.redact(builder.ktv);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
