// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: race_room.proto
package com.zq.live.proto.RaceRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.MusicInfo;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class RaceGameInfo extends Message<RaceGameInfo, RaceGameInfo.Builder> {
  public static final ProtoAdapter<RaceGameInfo> ADAPTER = new ProtoAdapter_RaceGameInfo();

  private static final long serialVersionUID = 0L;

  public static final ERaceGameType DEFAULT_ROUNDGAMETYPE = ERaceGameType.ERGT_UNKNOWN;

  /**
   * 游戏类型
   */
  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.RaceRoom.ERaceGameType#ADAPTER"
  )
  private final ERaceGameType roundGameType;

  /**
   * 普通音乐
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.Common.MusicInfo#ADAPTER"
  )
  private final MusicInfo commonMusic;

  public RaceGameInfo(ERaceGameType roundGameType, MusicInfo commonMusic) {
    this(roundGameType, commonMusic, ByteString.EMPTY);
  }

  public RaceGameInfo(ERaceGameType roundGameType, MusicInfo commonMusic,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roundGameType = roundGameType;
    this.commonMusic = commonMusic;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roundGameType = roundGameType;
    builder.commonMusic = commonMusic;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RaceGameInfo)) return false;
    RaceGameInfo o = (RaceGameInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roundGameType, o.roundGameType)
        && Internal.equals(commonMusic, o.commonMusic);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roundGameType != null ? roundGameType.hashCode() : 0);
      result = result * 37 + (commonMusic != null ? commonMusic.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roundGameType != null) builder.append(", roundGameType=").append(roundGameType);
    if (commonMusic != null) builder.append(", commonMusic=").append(commonMusic);
    return builder.replace(0, 2, "RaceGameInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RaceGameInfo.ADAPTER.encode(this);
  }

  public static final RaceGameInfo parseFrom(byte[] data) throws IOException {
    RaceGameInfo c = null;
       c = RaceGameInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 游戏类型
   */
  public ERaceGameType getRoundGameType() {
    if(roundGameType==null){
        return new ERaceGameType.Builder().build();
    }
    return roundGameType;
  }

  /**
   * 普通音乐
   */
  public MusicInfo getCommonMusic() {
    if(commonMusic==null){
        return new MusicInfo.Builder().build();
    }
    return commonMusic;
  }

  /**
   * 游戏类型
   */
  public boolean hasRoundGameType() {
    return roundGameType!=null;
  }

  /**
   * 普通音乐
   */
  public boolean hasCommonMusic() {
    return commonMusic!=null;
  }

  public static final class Builder extends Message.Builder<RaceGameInfo, Builder> {
    private ERaceGameType roundGameType;

    private MusicInfo commonMusic;

    public Builder() {
    }

    /**
     * 游戏类型
     */
    public Builder setRoundGameType(ERaceGameType roundGameType) {
      this.roundGameType = roundGameType;
      return this;
    }

    /**
     * 普通音乐
     */
    public Builder setCommonMusic(MusicInfo commonMusic) {
      this.commonMusic = commonMusic;
      return this;
    }

    @Override
    public RaceGameInfo build() {
      return new RaceGameInfo(roundGameType, commonMusic, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RaceGameInfo extends ProtoAdapter<RaceGameInfo> {
    public ProtoAdapter_RaceGameInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, RaceGameInfo.class);
    }

    @Override
    public int encodedSize(RaceGameInfo value) {
      return ERaceGameType.ADAPTER.encodedSizeWithTag(1, value.roundGameType)
          + MusicInfo.ADAPTER.encodedSizeWithTag(2, value.commonMusic)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RaceGameInfo value) throws IOException {
      ERaceGameType.ADAPTER.encodeWithTag(writer, 1, value.roundGameType);
      MusicInfo.ADAPTER.encodeWithTag(writer, 2, value.commonMusic);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RaceGameInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.setRoundGameType(ERaceGameType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.setCommonMusic(MusicInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RaceGameInfo redact(RaceGameInfo value) {
      Builder builder = value.newBuilder();
      if (builder.commonMusic != null) builder.commonMusic = MusicInfo.ADAPTER.redact(builder.commonMusic);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
