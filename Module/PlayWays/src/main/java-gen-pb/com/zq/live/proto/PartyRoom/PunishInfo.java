// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PunishInfo extends Message<PunishInfo, PunishInfo.Builder> {
  public static final ProtoAdapter<PunishInfo> ADAPTER = new ProtoAdapter_PunishInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_PUNISHID = 0;

  public static final EPunishType DEFAULT_PUNISHTYPE = EPunishType.EPUT_UNKNOWN;

  public static final String DEFAULT_PUNISHDESC = "";

  /**
   * 惩罚id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer punishID;

  /**
   * 惩罚类型
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.PartyRoom.EPunishType#ADAPTER"
  )
  private final EPunishType punishType;

  /**
   * 惩罚内容描述
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String punishDesc;

  public PunishInfo(Integer punishID, EPunishType punishType, String punishDesc) {
    this(punishID, punishType, punishDesc, ByteString.EMPTY);
  }

  public PunishInfo(Integer punishID, EPunishType punishType, String punishDesc,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.punishID = punishID;
    this.punishType = punishType;
    this.punishDesc = punishDesc;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.punishID = punishID;
    builder.punishType = punishType;
    builder.punishDesc = punishDesc;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PunishInfo)) return false;
    PunishInfo o = (PunishInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(punishID, o.punishID)
        && Internal.equals(punishType, o.punishType)
        && Internal.equals(punishDesc, o.punishDesc);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (punishID != null ? punishID.hashCode() : 0);
      result = result * 37 + (punishType != null ? punishType.hashCode() : 0);
      result = result * 37 + (punishDesc != null ? punishDesc.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (punishID != null) builder.append(", punishID=").append(punishID);
    if (punishType != null) builder.append(", punishType=").append(punishType);
    if (punishDesc != null) builder.append(", punishDesc=").append(punishDesc);
    return builder.replace(0, 2, "PunishInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PunishInfo.ADAPTER.encode(this);
  }

  public static final PunishInfo parseFrom(byte[] data) throws IOException {
    PunishInfo c = null;
       c = PunishInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 惩罚id
   */
  public Integer getPunishID() {
    if(punishID==null){
        return DEFAULT_PUNISHID;
    }
    return punishID;
  }

  /**
   * 惩罚类型
   */
  public EPunishType getPunishType() {
    if(punishType==null){
        return new EPunishType.Builder().build();
    }
    return punishType;
  }

  /**
   * 惩罚内容描述
   */
  public String getPunishDesc() {
    if(punishDesc==null){
        return DEFAULT_PUNISHDESC;
    }
    return punishDesc;
  }

  /**
   * 惩罚id
   */
  public boolean hasPunishID() {
    return punishID!=null;
  }

  /**
   * 惩罚类型
   */
  public boolean hasPunishType() {
    return punishType!=null;
  }

  /**
   * 惩罚内容描述
   */
  public boolean hasPunishDesc() {
    return punishDesc!=null;
  }

  public static final class Builder extends Message.Builder<PunishInfo, Builder> {
    private Integer punishID;

    private EPunishType punishType;

    private String punishDesc;

    public Builder() {
    }

    /**
     * 惩罚id
     */
    public Builder setPunishID(Integer punishID) {
      this.punishID = punishID;
      return this;
    }

    /**
     * 惩罚类型
     */
    public Builder setPunishType(EPunishType punishType) {
      this.punishType = punishType;
      return this;
    }

    /**
     * 惩罚内容描述
     */
    public Builder setPunishDesc(String punishDesc) {
      this.punishDesc = punishDesc;
      return this;
    }

    @Override
    public PunishInfo build() {
      return new PunishInfo(punishID, punishType, punishDesc, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PunishInfo extends ProtoAdapter<PunishInfo> {
    public ProtoAdapter_PunishInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, PunishInfo.class);
    }

    @Override
    public int encodedSize(PunishInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.punishID)
          + EPunishType.ADAPTER.encodedSizeWithTag(2, value.punishType)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.punishDesc)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PunishInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.punishID);
      EPunishType.ADAPTER.encodeWithTag(writer, 2, value.punishType);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.punishDesc);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PunishInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setPunishID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: {
            try {
              builder.setPunishType(EPunishType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setPunishDesc(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PunishInfo redact(PunishInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
