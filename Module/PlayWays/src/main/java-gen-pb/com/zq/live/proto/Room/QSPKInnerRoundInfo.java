// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class QSPKInnerRoundInfo extends Message<QSPKInnerRoundInfo, QSPKInnerRoundInfo.Builder> {
  public static final ProtoAdapter<QSPKInnerRoundInfo> ADAPTER = new ProtoAdapter_QSPKInnerRoundInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_SINGBEGINMS = 0;

  public static final Integer DEFAULT_SINGENDMS = 0;

  public static final EQRoundOverReason DEFAULT_OVERREASON = EQRoundOverReason.ROR_UNKNOWN;

  public static final EQRoundResultType DEFAULT_RESULTTYPE = EQRoundResultType.ROT_UNKNOWN;

  /**
   * 抢唱成功的玩家id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer userID;

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer singBeginMs;

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer singEndMs;

  /**
   * 爆灭灯列表
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.Room.QBLightMsg#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<QBLightMsg> bLightInfos;

  /**
   * 灭灭灯列表
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Room.QMLightMsg#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<QMLightMsg> mLightInfos;

  /**
   * 切换轮次原因
   */
  @WireField(
      tag = 6,
      adapter = "com.zq.live.proto.Room.EQRoundOverReason#ADAPTER"
  )
  private final EQRoundOverReason overReason;

  /**
   * 当EQRoundOverReason == ROR_MULTI_NO_PASS 演唱结果信息
   */
  @WireField(
      tag = 7,
      adapter = "com.zq.live.proto.Room.EQRoundResultType#ADAPTER"
  )
  private final EQRoundResultType resultType;

  public QSPKInnerRoundInfo(Integer userID, Integer singBeginMs, Integer singEndMs,
      List<QBLightMsg> bLightInfos, List<QMLightMsg> mLightInfos, EQRoundOverReason overReason,
      EQRoundResultType resultType) {
    this(userID, singBeginMs, singEndMs, bLightInfos, mLightInfos, overReason, resultType, ByteString.EMPTY);
  }

  public QSPKInnerRoundInfo(Integer userID, Integer singBeginMs, Integer singEndMs,
      List<QBLightMsg> bLightInfos, List<QMLightMsg> mLightInfos, EQRoundOverReason overReason,
      EQRoundResultType resultType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.singBeginMs = singBeginMs;
    this.singEndMs = singEndMs;
    this.bLightInfos = Internal.immutableCopyOf("bLightInfos", bLightInfos);
    this.mLightInfos = Internal.immutableCopyOf("mLightInfos", mLightInfos);
    this.overReason = overReason;
    this.resultType = resultType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.singBeginMs = singBeginMs;
    builder.singEndMs = singEndMs;
    builder.bLightInfos = Internal.copyOf("bLightInfos", bLightInfos);
    builder.mLightInfos = Internal.copyOf("mLightInfos", mLightInfos);
    builder.overReason = overReason;
    builder.resultType = resultType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof QSPKInnerRoundInfo)) return false;
    QSPKInnerRoundInfo o = (QSPKInnerRoundInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(singBeginMs, o.singBeginMs)
        && Internal.equals(singEndMs, o.singEndMs)
        && bLightInfos.equals(o.bLightInfos)
        && mLightInfos.equals(o.mLightInfos)
        && Internal.equals(overReason, o.overReason)
        && Internal.equals(resultType, o.resultType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (singBeginMs != null ? singBeginMs.hashCode() : 0);
      result = result * 37 + (singEndMs != null ? singEndMs.hashCode() : 0);
      result = result * 37 + bLightInfos.hashCode();
      result = result * 37 + mLightInfos.hashCode();
      result = result * 37 + (overReason != null ? overReason.hashCode() : 0);
      result = result * 37 + (resultType != null ? resultType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (singBeginMs != null) builder.append(", singBeginMs=").append(singBeginMs);
    if (singEndMs != null) builder.append(", singEndMs=").append(singEndMs);
    if (!bLightInfos.isEmpty()) builder.append(", bLightInfos=").append(bLightInfos);
    if (!mLightInfos.isEmpty()) builder.append(", mLightInfos=").append(mLightInfos);
    if (overReason != null) builder.append(", overReason=").append(overReason);
    if (resultType != null) builder.append(", resultType=").append(resultType);
    return builder.replace(0, 2, "QSPKInnerRoundInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return QSPKInnerRoundInfo.ADAPTER.encode(this);
  }

  public static final QSPKInnerRoundInfo parseFrom(byte[] data) throws IOException {
    QSPKInnerRoundInfo c = null;
       c = QSPKInnerRoundInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 抢唱成功的玩家id
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  public Integer getSingBeginMs() {
    if(singBeginMs==null){
        return DEFAULT_SINGBEGINMS;
    }
    return singBeginMs;
  }

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  public Integer getSingEndMs() {
    if(singEndMs==null){
        return DEFAULT_SINGENDMS;
    }
    return singEndMs;
  }

  /**
   * 爆灭灯列表
   */
  public List<QBLightMsg> getBLightInfosList() {
    if(bLightInfos==null){
        return new java.util.ArrayList<QBLightMsg>();
    }
    return bLightInfos;
  }

  /**
   * 灭灭灯列表
   */
  public List<QMLightMsg> getMLightInfosList() {
    if(mLightInfos==null){
        return new java.util.ArrayList<QMLightMsg>();
    }
    return mLightInfos;
  }

  /**
   * 切换轮次原因
   */
  public EQRoundOverReason getOverReason() {
    if(overReason==null){
        return new EQRoundOverReason.Builder().build();
    }
    return overReason;
  }

  /**
   * 当EQRoundOverReason == ROR_MULTI_NO_PASS 演唱结果信息
   */
  public EQRoundResultType getResultType() {
    if(resultType==null){
        return new EQRoundResultType.Builder().build();
    }
    return resultType;
  }

  /**
   * 抢唱成功的玩家id
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  public boolean hasSingBeginMs() {
    return singBeginMs!=null;
  }

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  public boolean hasSingEndMs() {
    return singEndMs!=null;
  }

  /**
   * 爆灭灯列表
   */
  public boolean hasBLightInfosList() {
    return bLightInfos!=null;
  }

  /**
   * 灭灭灯列表
   */
  public boolean hasMLightInfosList() {
    return mLightInfos!=null;
  }

  /**
   * 切换轮次原因
   */
  public boolean hasOverReason() {
    return overReason!=null;
  }

  /**
   * 当EQRoundOverReason == ROR_MULTI_NO_PASS 演唱结果信息
   */
  public boolean hasResultType() {
    return resultType!=null;
  }

  public static final class Builder extends Message.Builder<QSPKInnerRoundInfo, Builder> {
    private Integer userID;

    private Integer singBeginMs;

    private Integer singEndMs;

    private List<QBLightMsg> bLightInfos;

    private List<QMLightMsg> mLightInfos;

    private EQRoundOverReason overReason;

    private EQRoundResultType resultType;

    public Builder() {
      bLightInfos = Internal.newMutableList();
      mLightInfos = Internal.newMutableList();
    }

    /**
     * 抢唱成功的玩家id
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 演唱开始相对时间（相对于startTimeMs时间）
     */
    public Builder setSingBeginMs(Integer singBeginMs) {
      this.singBeginMs = singBeginMs;
      return this;
    }

    /**
     * 演唱结束相对时间（相对于startTimeMs时间）
     */
    public Builder setSingEndMs(Integer singEndMs) {
      this.singEndMs = singEndMs;
      return this;
    }

    /**
     * 爆灭灯列表
     */
    public Builder addAllBLightInfos(List<QBLightMsg> bLightInfos) {
      Internal.checkElementsNotNull(bLightInfos);
      this.bLightInfos = bLightInfos;
      return this;
    }

    /**
     * 灭灭灯列表
     */
    public Builder addAllMLightInfos(List<QMLightMsg> mLightInfos) {
      Internal.checkElementsNotNull(mLightInfos);
      this.mLightInfos = mLightInfos;
      return this;
    }

    /**
     * 切换轮次原因
     */
    public Builder setOverReason(EQRoundOverReason overReason) {
      this.overReason = overReason;
      return this;
    }

    /**
     * 当EQRoundOverReason == ROR_MULTI_NO_PASS 演唱结果信息
     */
    public Builder setResultType(EQRoundResultType resultType) {
      this.resultType = resultType;
      return this;
    }

    @Override
    public QSPKInnerRoundInfo build() {
      return new QSPKInnerRoundInfo(userID, singBeginMs, singEndMs, bLightInfos, mLightInfos, overReason, resultType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_QSPKInnerRoundInfo extends ProtoAdapter<QSPKInnerRoundInfo> {
    public ProtoAdapter_QSPKInnerRoundInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, QSPKInnerRoundInfo.class);
    }

    @Override
    public int encodedSize(QSPKInnerRoundInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.singBeginMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.singEndMs)
          + QBLightMsg.ADAPTER.asRepeated().encodedSizeWithTag(4, value.bLightInfos)
          + QMLightMsg.ADAPTER.asRepeated().encodedSizeWithTag(5, value.mLightInfos)
          + EQRoundOverReason.ADAPTER.encodedSizeWithTag(6, value.overReason)
          + EQRoundResultType.ADAPTER.encodedSizeWithTag(7, value.resultType)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, QSPKInnerRoundInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.singBeginMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.singEndMs);
      QBLightMsg.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.bLightInfos);
      QMLightMsg.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.mLightInfos);
      EQRoundOverReason.ADAPTER.encodeWithTag(writer, 6, value.overReason);
      EQRoundResultType.ADAPTER.encodeWithTag(writer, 7, value.resultType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public QSPKInnerRoundInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setSingBeginMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setSingEndMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.bLightInfos.add(QBLightMsg.ADAPTER.decode(reader)); break;
          case 5: builder.mLightInfos.add(QMLightMsg.ADAPTER.decode(reader)); break;
          case 6: {
            try {
              builder.setOverReason(EQRoundOverReason.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 7: {
            try {
              builder.setResultType(EQRoundResultType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public QSPKInnerRoundInfo redact(QSPKInnerRoundInfo value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.bLightInfos, QBLightMsg.ADAPTER);
      Internal.redactElements(builder.mLightInfos, QMLightMsg.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
