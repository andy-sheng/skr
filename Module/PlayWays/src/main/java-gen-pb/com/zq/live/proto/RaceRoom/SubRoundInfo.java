// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: race_room.proto
package com.zq.live.proto.RaceRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class SubRoundInfo extends Message<SubRoundInfo, SubRoundInfo.Builder> {
  public static final ProtoAdapter<SubRoundInfo> ADAPTER = new ProtoAdapter_SubRoundInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_SUBROUNDSEQ = 0;

  public static final Integer DEFAULT_BEGINMS = 0;

  public static final Integer DEFAULT_ENDMS = 0;

  public static final ESubRoundOverReason DEFAULT_OVERREASON = ESubRoundOverReason.ESROR_UNKNOWN;

  public static final ERWantSingType DEFAULT_WANTSINGTYPE = ERWantSingType.ERWST_DEFAULT;

  /**
   * 用户id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer userID;

  /**
   * 子轮次
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer subRoundSeq;

  /**
   * uint32 choiceID                = 3; //选择项
   * 开始相对时间（相对于createTimeMs时间）
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer beginMs;

  /**
   * 结束相对时间（相对于createTimeMs时间）
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer endMs;

  /**
   * 子轮次切换原因
   */
  @WireField(
      tag = 7,
      adapter = "com.zq.live.proto.RaceRoom.ESubRoundOverReason#ADAPTER"
  )
  private final ESubRoundOverReason overReason;

  /**
   * 想唱方式
   */
  @WireField(
      tag = 8,
      adapter = "com.zq.live.proto.RaceRoom.ERWantSingType#ADAPTER"
  )
  private final ERWantSingType wantSingType;

  /**
   * 选择详情
   */
  @WireField(
      tag = 9,
      adapter = "com.zq.live.proto.RaceRoom.RaceGameInfo#ADAPTER"
  )
  private final RaceGameInfo choiceDetail;

  public SubRoundInfo(Integer userID, Integer subRoundSeq, Integer beginMs, Integer endMs,
      ESubRoundOverReason overReason, ERWantSingType wantSingType, RaceGameInfo choiceDetail) {
    this(userID, subRoundSeq, beginMs, endMs, overReason, wantSingType, choiceDetail, ByteString.EMPTY);
  }

  public SubRoundInfo(Integer userID, Integer subRoundSeq, Integer beginMs, Integer endMs,
      ESubRoundOverReason overReason, ERWantSingType wantSingType, RaceGameInfo choiceDetail,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.subRoundSeq = subRoundSeq;
    this.beginMs = beginMs;
    this.endMs = endMs;
    this.overReason = overReason;
    this.wantSingType = wantSingType;
    this.choiceDetail = choiceDetail;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.subRoundSeq = subRoundSeq;
    builder.beginMs = beginMs;
    builder.endMs = endMs;
    builder.overReason = overReason;
    builder.wantSingType = wantSingType;
    builder.choiceDetail = choiceDetail;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SubRoundInfo)) return false;
    SubRoundInfo o = (SubRoundInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(subRoundSeq, o.subRoundSeq)
        && Internal.equals(beginMs, o.beginMs)
        && Internal.equals(endMs, o.endMs)
        && Internal.equals(overReason, o.overReason)
        && Internal.equals(wantSingType, o.wantSingType)
        && Internal.equals(choiceDetail, o.choiceDetail);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (subRoundSeq != null ? subRoundSeq.hashCode() : 0);
      result = result * 37 + (beginMs != null ? beginMs.hashCode() : 0);
      result = result * 37 + (endMs != null ? endMs.hashCode() : 0);
      result = result * 37 + (overReason != null ? overReason.hashCode() : 0);
      result = result * 37 + (wantSingType != null ? wantSingType.hashCode() : 0);
      result = result * 37 + (choiceDetail != null ? choiceDetail.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (subRoundSeq != null) builder.append(", subRoundSeq=").append(subRoundSeq);
    if (beginMs != null) builder.append(", beginMs=").append(beginMs);
    if (endMs != null) builder.append(", endMs=").append(endMs);
    if (overReason != null) builder.append(", overReason=").append(overReason);
    if (wantSingType != null) builder.append(", wantSingType=").append(wantSingType);
    if (choiceDetail != null) builder.append(", choiceDetail=").append(choiceDetail);
    return builder.replace(0, 2, "SubRoundInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return SubRoundInfo.ADAPTER.encode(this);
  }

  public static final SubRoundInfo parseFrom(byte[] data) throws IOException {
    SubRoundInfo c = null;
       c = SubRoundInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 用户id
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 子轮次
   */
  public Integer getSubRoundSeq() {
    if(subRoundSeq==null){
        return DEFAULT_SUBROUNDSEQ;
    }
    return subRoundSeq;
  }

  /**
   * uint32 choiceID                = 3; //选择项
   * 开始相对时间（相对于createTimeMs时间）
   */
  public Integer getBeginMs() {
    if(beginMs==null){
        return DEFAULT_BEGINMS;
    }
    return beginMs;
  }

  /**
   * 结束相对时间（相对于createTimeMs时间）
   */
  public Integer getEndMs() {
    if(endMs==null){
        return DEFAULT_ENDMS;
    }
    return endMs;
  }

  /**
   * 子轮次切换原因
   */
  public ESubRoundOverReason getOverReason() {
    if(overReason==null){
        return new ESubRoundOverReason.Builder().build();
    }
    return overReason;
  }

  /**
   * 想唱方式
   */
  public ERWantSingType getWantSingType() {
    if(wantSingType==null){
        return new ERWantSingType.Builder().build();
    }
    return wantSingType;
  }

  /**
   * 选择详情
   */
  public RaceGameInfo getChoiceDetail() {
    if(choiceDetail==null){
        return new RaceGameInfo.Builder().build();
    }
    return choiceDetail;
  }

  /**
   * 用户id
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 子轮次
   */
  public boolean hasSubRoundSeq() {
    return subRoundSeq!=null;
  }

  /**
   * uint32 choiceID                = 3; //选择项
   * 开始相对时间（相对于createTimeMs时间）
   */
  public boolean hasBeginMs() {
    return beginMs!=null;
  }

  /**
   * 结束相对时间（相对于createTimeMs时间）
   */
  public boolean hasEndMs() {
    return endMs!=null;
  }

  /**
   * 子轮次切换原因
   */
  public boolean hasOverReason() {
    return overReason!=null;
  }

  /**
   * 想唱方式
   */
  public boolean hasWantSingType() {
    return wantSingType!=null;
  }

  /**
   * 选择详情
   */
  public boolean hasChoiceDetail() {
    return choiceDetail!=null;
  }

  public static final class Builder extends Message.Builder<SubRoundInfo, Builder> {
    private Integer userID;

    private Integer subRoundSeq;

    private Integer beginMs;

    private Integer endMs;

    private ESubRoundOverReason overReason;

    private ERWantSingType wantSingType;

    private RaceGameInfo choiceDetail;

    public Builder() {
    }

    /**
     * 用户id
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 子轮次
     */
    public Builder setSubRoundSeq(Integer subRoundSeq) {
      this.subRoundSeq = subRoundSeq;
      return this;
    }

    /**
     * uint32 choiceID                = 3; //选择项
     * 开始相对时间（相对于createTimeMs时间）
     */
    public Builder setBeginMs(Integer beginMs) {
      this.beginMs = beginMs;
      return this;
    }

    /**
     * 结束相对时间（相对于createTimeMs时间）
     */
    public Builder setEndMs(Integer endMs) {
      this.endMs = endMs;
      return this;
    }

    /**
     * 子轮次切换原因
     */
    public Builder setOverReason(ESubRoundOverReason overReason) {
      this.overReason = overReason;
      return this;
    }

    /**
     * 想唱方式
     */
    public Builder setWantSingType(ERWantSingType wantSingType) {
      this.wantSingType = wantSingType;
      return this;
    }

    /**
     * 选择详情
     */
    public Builder setChoiceDetail(RaceGameInfo choiceDetail) {
      this.choiceDetail = choiceDetail;
      return this;
    }

    @Override
    public SubRoundInfo build() {
      return new SubRoundInfo(userID, subRoundSeq, beginMs, endMs, overReason, wantSingType, choiceDetail, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SubRoundInfo extends ProtoAdapter<SubRoundInfo> {
    public ProtoAdapter_SubRoundInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, SubRoundInfo.class);
    }

    @Override
    public int encodedSize(SubRoundInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.subRoundSeq)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.beginMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.endMs)
          + ESubRoundOverReason.ADAPTER.encodedSizeWithTag(7, value.overReason)
          + ERWantSingType.ADAPTER.encodedSizeWithTag(8, value.wantSingType)
          + RaceGameInfo.ADAPTER.encodedSizeWithTag(9, value.choiceDetail)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SubRoundInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.subRoundSeq);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.beginMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.endMs);
      ESubRoundOverReason.ADAPTER.encodeWithTag(writer, 7, value.overReason);
      ERWantSingType.ADAPTER.encodeWithTag(writer, 8, value.wantSingType);
      RaceGameInfo.ADAPTER.encodeWithTag(writer, 9, value.choiceDetail);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SubRoundInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setSubRoundSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setBeginMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setEndMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: {
            try {
              builder.setOverReason(ESubRoundOverReason.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 8: {
            try {
              builder.setWantSingType(ERWantSingType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 9: builder.setChoiceDetail(RaceGameInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SubRoundInfo redact(SubRoundInfo value) {
      Builder builder = value.newBuilder();
      if (builder.choiceDetail != null) builder.choiceDetail = RaceGameInfo.ADAPTER.redact(builder.choiceDetail);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
