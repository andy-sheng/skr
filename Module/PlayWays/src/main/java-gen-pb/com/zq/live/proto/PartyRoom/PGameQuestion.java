// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class PGameQuestion extends Message<PGameQuestion, PGameQuestion.Builder> {
  public static final ProtoAdapter<PGameQuestion> ADAPTER = new ProtoAdapter_PGameQuestion();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_QUESTIONID = 0;

  public static final String DEFAULT_QUESTIONCONTENT = "";

  public static final String DEFAULT_ANSWERCONTENT = "";

  /**
   * 问题标识
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer questionID;

  /**
   * 问题内容
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String questionContent;

  /**
   * 问题图片
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  private final List<String> questionPic;

  /**
   * 问题答案
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String answerContent;

  public PGameQuestion(Integer questionID, String questionContent, List<String> questionPic,
      String answerContent) {
    this(questionID, questionContent, questionPic, answerContent, ByteString.EMPTY);
  }

  public PGameQuestion(Integer questionID, String questionContent, List<String> questionPic,
      String answerContent, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.questionID = questionID;
    this.questionContent = questionContent;
    this.questionPic = Internal.immutableCopyOf("questionPic", questionPic);
    this.answerContent = answerContent;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.questionID = questionID;
    builder.questionContent = questionContent;
    builder.questionPic = Internal.copyOf("questionPic", questionPic);
    builder.answerContent = answerContent;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PGameQuestion)) return false;
    PGameQuestion o = (PGameQuestion) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(questionID, o.questionID)
        && Internal.equals(questionContent, o.questionContent)
        && questionPic.equals(o.questionPic)
        && Internal.equals(answerContent, o.answerContent);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (questionID != null ? questionID.hashCode() : 0);
      result = result * 37 + (questionContent != null ? questionContent.hashCode() : 0);
      result = result * 37 + questionPic.hashCode();
      result = result * 37 + (answerContent != null ? answerContent.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (questionID != null) builder.append(", questionID=").append(questionID);
    if (questionContent != null) builder.append(", questionContent=").append(questionContent);
    if (!questionPic.isEmpty()) builder.append(", questionPic=").append(questionPic);
    if (answerContent != null) builder.append(", answerContent=").append(answerContent);
    return builder.replace(0, 2, "PGameQuestion{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PGameQuestion.ADAPTER.encode(this);
  }

  public static final PGameQuestion parseFrom(byte[] data) throws IOException {
    PGameQuestion c = null;
       c = PGameQuestion.ADAPTER.decode(data);
    return c;
  }

  /**
   * 问题标识
   */
  public Integer getQuestionID() {
    if(questionID==null){
        return DEFAULT_QUESTIONID;
    }
    return questionID;
  }

  /**
   * 问题内容
   */
  public String getQuestionContent() {
    if(questionContent==null){
        return DEFAULT_QUESTIONCONTENT;
    }
    return questionContent;
  }

  /**
   * 问题图片
   */
  public List<String> getQuestionPicList() {
    if(questionPic==null){
        return new java.util.ArrayList<String>();
    }
    return questionPic;
  }

  /**
   * 问题答案
   */
  public String getAnswerContent() {
    if(answerContent==null){
        return DEFAULT_ANSWERCONTENT;
    }
    return answerContent;
  }

  /**
   * 问题标识
   */
  public boolean hasQuestionID() {
    return questionID!=null;
  }

  /**
   * 问题内容
   */
  public boolean hasQuestionContent() {
    return questionContent!=null;
  }

  /**
   * 问题图片
   */
  public boolean hasQuestionPicList() {
    return questionPic!=null;
  }

  /**
   * 问题答案
   */
  public boolean hasAnswerContent() {
    return answerContent!=null;
  }

  public static final class Builder extends Message.Builder<PGameQuestion, Builder> {
    private Integer questionID;

    private String questionContent;

    private List<String> questionPic;

    private String answerContent;

    public Builder() {
      questionPic = Internal.newMutableList();
    }

    /**
     * 问题标识
     */
    public Builder setQuestionID(Integer questionID) {
      this.questionID = questionID;
      return this;
    }

    /**
     * 问题内容
     */
    public Builder setQuestionContent(String questionContent) {
      this.questionContent = questionContent;
      return this;
    }

    /**
     * 问题图片
     */
    public Builder addAllQuestionPic(List<String> questionPic) {
      Internal.checkElementsNotNull(questionPic);
      this.questionPic = questionPic;
      return this;
    }

    /**
     * 问题答案
     */
    public Builder setAnswerContent(String answerContent) {
      this.answerContent = answerContent;
      return this;
    }

    @Override
    public PGameQuestion build() {
      return new PGameQuestion(questionID, questionContent, questionPic, answerContent, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PGameQuestion extends ProtoAdapter<PGameQuestion> {
    public ProtoAdapter_PGameQuestion() {
      super(FieldEncoding.LENGTH_DELIMITED, PGameQuestion.class);
    }

    @Override
    public int encodedSize(PGameQuestion value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.questionID)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.questionContent)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.questionPic)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.answerContent)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PGameQuestion value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.questionID);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.questionContent);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.questionPic);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.answerContent);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PGameQuestion decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setQuestionID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setQuestionContent(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.questionPic.add(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setAnswerContent(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PGameQuestion redact(PGameQuestion value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
