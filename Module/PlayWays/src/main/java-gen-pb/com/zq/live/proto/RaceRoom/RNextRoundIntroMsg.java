// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: race_room.proto
package com.zq.live.proto.RaceRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class RNextRoundIntroMsg extends Message<RNextRoundIntroMsg, RNextRoundIntroMsg.Builder> {
  public static final ProtoAdapter<RNextRoundIntroMsg> ADAPTER = new ProtoAdapter_RNextRoundIntroMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ROUNDSEQ = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roundSeq;

  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.RaceRoom.RaceGameInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<RaceGameInfo> games;

  public RNextRoundIntroMsg(Integer roundSeq, List<RaceGameInfo> games) {
    this(roundSeq, games, ByteString.EMPTY);
  }

  public RNextRoundIntroMsg(Integer roundSeq, List<RaceGameInfo> games, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roundSeq = roundSeq;
    this.games = Internal.immutableCopyOf("games", games);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roundSeq = roundSeq;
    builder.games = Internal.copyOf("games", games);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RNextRoundIntroMsg)) return false;
    RNextRoundIntroMsg o = (RNextRoundIntroMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roundSeq, o.roundSeq)
        && games.equals(o.games);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roundSeq != null ? roundSeq.hashCode() : 0);
      result = result * 37 + games.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roundSeq != null) builder.append(", roundSeq=").append(roundSeq);
    if (!games.isEmpty()) builder.append(", games=").append(games);
    return builder.replace(0, 2, "RNextRoundIntroMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RNextRoundIntroMsg.ADAPTER.encode(this);
  }

  public static final RNextRoundIntroMsg parseFrom(byte[] data) throws IOException {
    RNextRoundIntroMsg c = null;
       c = RNextRoundIntroMsg.ADAPTER.decode(data);
    return c;
  }

  public Integer getRoundSeq() {
    if(roundSeq==null){
        return DEFAULT_ROUNDSEQ;
    }
    return roundSeq;
  }

  public List<RaceGameInfo> getGamesList() {
    if(games==null){
        return new java.util.ArrayList<RaceGameInfo>();
    }
    return games;
  }

  public boolean hasRoundSeq() {
    return roundSeq!=null;
  }

  public boolean hasGamesList() {
    return games!=null;
  }

  public static final class Builder extends Message.Builder<RNextRoundIntroMsg, Builder> {
    private Integer roundSeq;

    private List<RaceGameInfo> games;

    public Builder() {
      games = Internal.newMutableList();
    }

    public Builder setRoundSeq(Integer roundSeq) {
      this.roundSeq = roundSeq;
      return this;
    }

    public Builder addAllGames(List<RaceGameInfo> games) {
      Internal.checkElementsNotNull(games);
      this.games = games;
      return this;
    }

    @Override
    public RNextRoundIntroMsg build() {
      return new RNextRoundIntroMsg(roundSeq, games, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RNextRoundIntroMsg extends ProtoAdapter<RNextRoundIntroMsg> {
    public ProtoAdapter_RNextRoundIntroMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, RNextRoundIntroMsg.class);
    }

    @Override
    public int encodedSize(RNextRoundIntroMsg value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.roundSeq)
          + RaceGameInfo.ADAPTER.asRepeated().encodedSizeWithTag(2, value.games)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RNextRoundIntroMsg value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.roundSeq);
      RaceGameInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.games);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RNextRoundIntroMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoundSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.games.add(RaceGameInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RNextRoundIntroMsg redact(RNextRoundIntroMsg value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.games, RaceGameInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
