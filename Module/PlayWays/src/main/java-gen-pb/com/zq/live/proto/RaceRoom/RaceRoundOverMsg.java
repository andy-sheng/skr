// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: race_room.proto
package com.zq.live.proto.RaceRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class RaceRoundOverMsg extends Message<RaceRoundOverMsg, RaceRoundOverMsg.Builder> {
  public static final ProtoAdapter<RaceRoundOverMsg> ADAPTER = new ProtoAdapter_RaceRoundOverMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ROUNDOVERTIMEMS = 0L;

  public static final ERoundOverType DEFAULT_OVERTYPE = ERoundOverType.EROT_UNKNOWN;

  public static final Integer DEFAULT_NEXTROUNDCHOICEUSERCNT = 0;

  /**
   * 本轮次结束的毫秒时间戳
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long roundOverTimeMs;

  /**
   * 轮次结束类型(如果子轮次结束需解析currentRound，如果主轮次结束需解析nextRound、games)
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.RaceRoom.ERoundOverType#ADAPTER"
  )
  private final ERoundOverType overType;

  /**
   * 当前结束轮次的信息
   */
  @WireField(
      tag = 3,
      adapter = "com.zq.live.proto.RaceRoom.RaceRoundInfo#ADAPTER"
  )
  private final RaceRoundInfo currentRound;

  /**
   * 下个轮次的信息
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.RaceRoom.RaceRoundInfo#ADAPTER"
  )
  private final RaceRoundInfo nextRound;

  /**
   * repeated RaceGameInfo games = 5; //下个轮次竞选游戏的列表
   * repeated RaceGameInfo couldChoiceGames = 6; //可以报名选择的游戏列表
   * 在下个轮次为ongoing状态，可以获取轮次报名人数
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer nextRoundChoiceUserCnt;

  public RaceRoundOverMsg(Long roundOverTimeMs, ERoundOverType overType, RaceRoundInfo currentRound,
      RaceRoundInfo nextRound, Integer nextRoundChoiceUserCnt) {
    this(roundOverTimeMs, overType, currentRound, nextRound, nextRoundChoiceUserCnt, ByteString.EMPTY);
  }

  public RaceRoundOverMsg(Long roundOverTimeMs, ERoundOverType overType, RaceRoundInfo currentRound,
      RaceRoundInfo nextRound, Integer nextRoundChoiceUserCnt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roundOverTimeMs = roundOverTimeMs;
    this.overType = overType;
    this.currentRound = currentRound;
    this.nextRound = nextRound;
    this.nextRoundChoiceUserCnt = nextRoundChoiceUserCnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roundOverTimeMs = roundOverTimeMs;
    builder.overType = overType;
    builder.currentRound = currentRound;
    builder.nextRound = nextRound;
    builder.nextRoundChoiceUserCnt = nextRoundChoiceUserCnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RaceRoundOverMsg)) return false;
    RaceRoundOverMsg o = (RaceRoundOverMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roundOverTimeMs, o.roundOverTimeMs)
        && Internal.equals(overType, o.overType)
        && Internal.equals(currentRound, o.currentRound)
        && Internal.equals(nextRound, o.nextRound)
        && Internal.equals(nextRoundChoiceUserCnt, o.nextRoundChoiceUserCnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roundOverTimeMs != null ? roundOverTimeMs.hashCode() : 0);
      result = result * 37 + (overType != null ? overType.hashCode() : 0);
      result = result * 37 + (currentRound != null ? currentRound.hashCode() : 0);
      result = result * 37 + (nextRound != null ? nextRound.hashCode() : 0);
      result = result * 37 + (nextRoundChoiceUserCnt != null ? nextRoundChoiceUserCnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roundOverTimeMs != null) builder.append(", roundOverTimeMs=").append(roundOverTimeMs);
    if (overType != null) builder.append(", overType=").append(overType);
    if (currentRound != null) builder.append(", currentRound=").append(currentRound);
    if (nextRound != null) builder.append(", nextRound=").append(nextRound);
    if (nextRoundChoiceUserCnt != null) builder.append(", nextRoundChoiceUserCnt=").append(nextRoundChoiceUserCnt);
    return builder.replace(0, 2, "RaceRoundOverMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RaceRoundOverMsg.ADAPTER.encode(this);
  }

  public static final RaceRoundOverMsg parseFrom(byte[] data) throws IOException {
    RaceRoundOverMsg c = null;
       c = RaceRoundOverMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 本轮次结束的毫秒时间戳
   */
  public Long getRoundOverTimeMs() {
    if(roundOverTimeMs==null){
        return DEFAULT_ROUNDOVERTIMEMS;
    }
    return roundOverTimeMs;
  }

  /**
   * 轮次结束类型(如果子轮次结束需解析currentRound，如果主轮次结束需解析nextRound、games)
   */
  public ERoundOverType getOverType() {
    if(overType==null){
        return new ERoundOverType.Builder().build();
    }
    return overType;
  }

  /**
   * 当前结束轮次的信息
   */
  public RaceRoundInfo getCurrentRound() {
    if(currentRound==null){
        return new RaceRoundInfo.Builder().build();
    }
    return currentRound;
  }

  /**
   * 下个轮次的信息
   */
  public RaceRoundInfo getNextRound() {
    if(nextRound==null){
        return new RaceRoundInfo.Builder().build();
    }
    return nextRound;
  }

  /**
   * repeated RaceGameInfo games = 5; //下个轮次竞选游戏的列表
   * repeated RaceGameInfo couldChoiceGames = 6; //可以报名选择的游戏列表
   * 在下个轮次为ongoing状态，可以获取轮次报名人数
   */
  public Integer getNextRoundChoiceUserCnt() {
    if(nextRoundChoiceUserCnt==null){
        return DEFAULT_NEXTROUNDCHOICEUSERCNT;
    }
    return nextRoundChoiceUserCnt;
  }

  /**
   * 本轮次结束的毫秒时间戳
   */
  public boolean hasRoundOverTimeMs() {
    return roundOverTimeMs!=null;
  }

  /**
   * 轮次结束类型(如果子轮次结束需解析currentRound，如果主轮次结束需解析nextRound、games)
   */
  public boolean hasOverType() {
    return overType!=null;
  }

  /**
   * 当前结束轮次的信息
   */
  public boolean hasCurrentRound() {
    return currentRound!=null;
  }

  /**
   * 下个轮次的信息
   */
  public boolean hasNextRound() {
    return nextRound!=null;
  }

  /**
   * repeated RaceGameInfo games = 5; //下个轮次竞选游戏的列表
   * repeated RaceGameInfo couldChoiceGames = 6; //可以报名选择的游戏列表
   * 在下个轮次为ongoing状态，可以获取轮次报名人数
   */
  public boolean hasNextRoundChoiceUserCnt() {
    return nextRoundChoiceUserCnt!=null;
  }

  public static final class Builder extends Message.Builder<RaceRoundOverMsg, Builder> {
    private Long roundOverTimeMs;

    private ERoundOverType overType;

    private RaceRoundInfo currentRound;

    private RaceRoundInfo nextRound;

    private Integer nextRoundChoiceUserCnt;

    public Builder() {
    }

    /**
     * 本轮次结束的毫秒时间戳
     */
    public Builder setRoundOverTimeMs(Long roundOverTimeMs) {
      this.roundOverTimeMs = roundOverTimeMs;
      return this;
    }

    /**
     * 轮次结束类型(如果子轮次结束需解析currentRound，如果主轮次结束需解析nextRound、games)
     */
    public Builder setOverType(ERoundOverType overType) {
      this.overType = overType;
      return this;
    }

    /**
     * 当前结束轮次的信息
     */
    public Builder setCurrentRound(RaceRoundInfo currentRound) {
      this.currentRound = currentRound;
      return this;
    }

    /**
     * 下个轮次的信息
     */
    public Builder setNextRound(RaceRoundInfo nextRound) {
      this.nextRound = nextRound;
      return this;
    }

    /**
     * repeated RaceGameInfo games = 5; //下个轮次竞选游戏的列表
     * repeated RaceGameInfo couldChoiceGames = 6; //可以报名选择的游戏列表
     * 在下个轮次为ongoing状态，可以获取轮次报名人数
     */
    public Builder setNextRoundChoiceUserCnt(Integer nextRoundChoiceUserCnt) {
      this.nextRoundChoiceUserCnt = nextRoundChoiceUserCnt;
      return this;
    }

    @Override
    public RaceRoundOverMsg build() {
      return new RaceRoundOverMsg(roundOverTimeMs, overType, currentRound, nextRound, nextRoundChoiceUserCnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RaceRoundOverMsg extends ProtoAdapter<RaceRoundOverMsg> {
    public ProtoAdapter_RaceRoundOverMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, RaceRoundOverMsg.class);
    }

    @Override
    public int encodedSize(RaceRoundOverMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.roundOverTimeMs)
          + ERoundOverType.ADAPTER.encodedSizeWithTag(2, value.overType)
          + RaceRoundInfo.ADAPTER.encodedSizeWithTag(3, value.currentRound)
          + RaceRoundInfo.ADAPTER.encodedSizeWithTag(4, value.nextRound)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.nextRoundChoiceUserCnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RaceRoundOverMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.roundOverTimeMs);
      ERoundOverType.ADAPTER.encodeWithTag(writer, 2, value.overType);
      RaceRoundInfo.ADAPTER.encodeWithTag(writer, 3, value.currentRound);
      RaceRoundInfo.ADAPTER.encodeWithTag(writer, 4, value.nextRound);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.nextRoundChoiceUserCnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RaceRoundOverMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoundOverTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: {
            try {
              builder.setOverType(ERoundOverType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setCurrentRound(RaceRoundInfo.ADAPTER.decode(reader)); break;
          case 4: builder.setNextRound(RaceRoundInfo.ADAPTER.decode(reader)); break;
          case 7: builder.setNextRoundChoiceUserCnt(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RaceRoundOverMsg redact(RaceRoundOverMsg value) {
      Builder builder = value.newBuilder();
      if (builder.currentRound != null) builder.currentRound = RaceRoundInfo.ADAPTER.redact(builder.currentRound);
      if (builder.nextRound != null) builder.nextRound = RaceRoundInfo.ADAPTER.redact(builder.nextRound);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
