// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PRoundInfo extends Message<PRoundInfo, PRoundInfo.Builder> {
  public static final ProtoAdapter<PRoundInfo> ADAPTER = new ProtoAdapter_PRoundInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ROUNDSEQ = 0;

  public static final Integer DEFAULT_BEGINMS = 0;

  public static final Integer DEFAULT_ENDMS = 0;

  public static final EPRoundStatus DEFAULT_STATUS = EPRoundStatus.PRS_UNKNOWN;

  public static final Boolean DEFAULT_HASNEXTITEM = false;

  /**
   * 轮次序号
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roundSeq;

  /**
   * 开始相对时间（相对于createdTimeMs时间）
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer beginMs;

  /**
   * 结束相对时间（相对于createdTimeMs时间）
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer endMs;

  /**
   * 轮次状态
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.PartyRoom.EPRoundStatus#ADAPTER"
  )
  private final EPRoundStatus status;

  /**
   * 游戏信息
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.PartyRoom.PGameItemInfo#ADAPTER"
  )
  private final PGameItemInfo itemInfo;

  /**
   * 是否存在下一个游戏
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean hasNextItem;

  public PRoundInfo(Integer roundSeq, Integer beginMs, Integer endMs, EPRoundStatus status,
      PGameItemInfo itemInfo, Boolean hasNextItem) {
    this(roundSeq, beginMs, endMs, status, itemInfo, hasNextItem, ByteString.EMPTY);
  }

  public PRoundInfo(Integer roundSeq, Integer beginMs, Integer endMs, EPRoundStatus status,
      PGameItemInfo itemInfo, Boolean hasNextItem, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roundSeq = roundSeq;
    this.beginMs = beginMs;
    this.endMs = endMs;
    this.status = status;
    this.itemInfo = itemInfo;
    this.hasNextItem = hasNextItem;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roundSeq = roundSeq;
    builder.beginMs = beginMs;
    builder.endMs = endMs;
    builder.status = status;
    builder.itemInfo = itemInfo;
    builder.hasNextItem = hasNextItem;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PRoundInfo)) return false;
    PRoundInfo o = (PRoundInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roundSeq, o.roundSeq)
        && Internal.equals(beginMs, o.beginMs)
        && Internal.equals(endMs, o.endMs)
        && Internal.equals(status, o.status)
        && Internal.equals(itemInfo, o.itemInfo)
        && Internal.equals(hasNextItem, o.hasNextItem);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roundSeq != null ? roundSeq.hashCode() : 0);
      result = result * 37 + (beginMs != null ? beginMs.hashCode() : 0);
      result = result * 37 + (endMs != null ? endMs.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (itemInfo != null ? itemInfo.hashCode() : 0);
      result = result * 37 + (hasNextItem != null ? hasNextItem.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roundSeq != null) builder.append(", roundSeq=").append(roundSeq);
    if (beginMs != null) builder.append(", beginMs=").append(beginMs);
    if (endMs != null) builder.append(", endMs=").append(endMs);
    if (status != null) builder.append(", status=").append(status);
    if (itemInfo != null) builder.append(", itemInfo=").append(itemInfo);
    if (hasNextItem != null) builder.append(", hasNextItem=").append(hasNextItem);
    return builder.replace(0, 2, "PRoundInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PRoundInfo.ADAPTER.encode(this);
  }

  public static final PRoundInfo parseFrom(byte[] data) throws IOException {
    PRoundInfo c = null;
       c = PRoundInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 轮次序号
   */
  public Integer getRoundSeq() {
    if(roundSeq==null){
        return DEFAULT_ROUNDSEQ;
    }
    return roundSeq;
  }

  /**
   * 开始相对时间（相对于createdTimeMs时间）
   */
  public Integer getBeginMs() {
    if(beginMs==null){
        return DEFAULT_BEGINMS;
    }
    return beginMs;
  }

  /**
   * 结束相对时间（相对于createdTimeMs时间）
   */
  public Integer getEndMs() {
    if(endMs==null){
        return DEFAULT_ENDMS;
    }
    return endMs;
  }

  /**
   * 轮次状态
   */
  public EPRoundStatus getStatus() {
    if(status==null){
        return new EPRoundStatus.Builder().build();
    }
    return status;
  }

  /**
   * 游戏信息
   */
  public PGameItemInfo getItemInfo() {
    if(itemInfo==null){
        return new PGameItemInfo.Builder().build();
    }
    return itemInfo;
  }

  /**
   * 是否存在下一个游戏
   */
  public Boolean getHasNextItem() {
    if(hasNextItem==null){
        return DEFAULT_HASNEXTITEM;
    }
    return hasNextItem;
  }

  /**
   * 轮次序号
   */
  public boolean hasRoundSeq() {
    return roundSeq!=null;
  }

  /**
   * 开始相对时间（相对于createdTimeMs时间）
   */
  public boolean hasBeginMs() {
    return beginMs!=null;
  }

  /**
   * 结束相对时间（相对于createdTimeMs时间）
   */
  public boolean hasEndMs() {
    return endMs!=null;
  }

  /**
   * 轮次状态
   */
  public boolean hasStatus() {
    return status!=null;
  }

  /**
   * 游戏信息
   */
  public boolean hasItemInfo() {
    return itemInfo!=null;
  }

  /**
   * 是否存在下一个游戏
   */
  public boolean hasHasNextItem() {
    return hasNextItem!=null;
  }

  public static final class Builder extends Message.Builder<PRoundInfo, Builder> {
    private Integer roundSeq;

    private Integer beginMs;

    private Integer endMs;

    private EPRoundStatus status;

    private PGameItemInfo itemInfo;

    private Boolean hasNextItem;

    public Builder() {
    }

    /**
     * 轮次序号
     */
    public Builder setRoundSeq(Integer roundSeq) {
      this.roundSeq = roundSeq;
      return this;
    }

    /**
     * 开始相对时间（相对于createdTimeMs时间）
     */
    public Builder setBeginMs(Integer beginMs) {
      this.beginMs = beginMs;
      return this;
    }

    /**
     * 结束相对时间（相对于createdTimeMs时间）
     */
    public Builder setEndMs(Integer endMs) {
      this.endMs = endMs;
      return this;
    }

    /**
     * 轮次状态
     */
    public Builder setStatus(EPRoundStatus status) {
      this.status = status;
      return this;
    }

    /**
     * 游戏信息
     */
    public Builder setItemInfo(PGameItemInfo itemInfo) {
      this.itemInfo = itemInfo;
      return this;
    }

    /**
     * 是否存在下一个游戏
     */
    public Builder setHasNextItem(Boolean hasNextItem) {
      this.hasNextItem = hasNextItem;
      return this;
    }

    @Override
    public PRoundInfo build() {
      return new PRoundInfo(roundSeq, beginMs, endMs, status, itemInfo, hasNextItem, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PRoundInfo extends ProtoAdapter<PRoundInfo> {
    public ProtoAdapter_PRoundInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, PRoundInfo.class);
    }

    @Override
    public int encodedSize(PRoundInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.roundSeq)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.beginMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.endMs)
          + EPRoundStatus.ADAPTER.encodedSizeWithTag(4, value.status)
          + PGameItemInfo.ADAPTER.encodedSizeWithTag(5, value.itemInfo)
          + ProtoAdapter.BOOL.encodedSizeWithTag(6, value.hasNextItem)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PRoundInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.roundSeq);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.beginMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.endMs);
      EPRoundStatus.ADAPTER.encodeWithTag(writer, 4, value.status);
      PGameItemInfo.ADAPTER.encodeWithTag(writer, 5, value.itemInfo);
      ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.hasNextItem);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PRoundInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoundSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setBeginMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setEndMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: {
            try {
              builder.setStatus(EPRoundStatus.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 5: builder.setItemInfo(PGameItemInfo.ADAPTER.decode(reader)); break;
          case 6: builder.setHasNextItem(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PRoundInfo redact(PRoundInfo value) {
      Builder builder = value.newBuilder();
      if (builder.itemInfo != null) builder.itemInfo = PGameItemInfo.ADAPTER.redact(builder.itemInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
