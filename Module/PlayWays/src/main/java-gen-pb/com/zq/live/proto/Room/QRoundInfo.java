// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class QRoundInfo extends Message<QRoundInfo, QRoundInfo.Builder> {
  public static final ProtoAdapter<QRoundInfo> ADAPTER = new ProtoAdapter_QRoundInfo();

  private static final long serialVersionUID = 0L;

  public static final EQRoundStatus DEFAULT_STATUS = EQRoundStatus.QRS_UNKNOWN;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_ROUNDSEQ = 0;

  public static final Integer DEFAULT_INTROBEGINMS = 0;

  public static final Integer DEFAULT_INTROENDMS = 0;

  public static final Integer DEFAULT_SINGBEGINMS = 0;

  public static final Integer DEFAULT_SINGENDMS = 0;

  /**
   * 轮次状态
   */
  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.Room.EQRoundStatus#ADAPTER"
  )
  public final EQRoundStatus status;

  /**
   * 玩家id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer userID;

  /**
   * 轮次顺序
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer roundSeq;

  /**
   * 导唱开始相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer introBeginMs;

  /**
   * 导唱结束相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer introEndMs;

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer singBeginMs;

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer singEndMs;

  public QRoundInfo(EQRoundStatus status, Integer userID, Integer roundSeq, Integer introBeginMs,
      Integer introEndMs, Integer singBeginMs, Integer singEndMs) {
    this(status, userID, roundSeq, introBeginMs, introEndMs, singBeginMs, singEndMs, ByteString.EMPTY);
  }

  public QRoundInfo(EQRoundStatus status, Integer userID, Integer roundSeq, Integer introBeginMs,
      Integer introEndMs, Integer singBeginMs, Integer singEndMs, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.status = status;
    this.userID = userID;
    this.roundSeq = roundSeq;
    this.introBeginMs = introBeginMs;
    this.introEndMs = introEndMs;
    this.singBeginMs = singBeginMs;
    this.singEndMs = singEndMs;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.status = status;
    builder.userID = userID;
    builder.roundSeq = roundSeq;
    builder.introBeginMs = introBeginMs;
    builder.introEndMs = introEndMs;
    builder.singBeginMs = singBeginMs;
    builder.singEndMs = singEndMs;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof QRoundInfo)) return false;
    QRoundInfo o = (QRoundInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(status, o.status)
        && Internal.equals(userID, o.userID)
        && Internal.equals(roundSeq, o.roundSeq)
        && Internal.equals(introBeginMs, o.introBeginMs)
        && Internal.equals(introEndMs, o.introEndMs)
        && Internal.equals(singBeginMs, o.singBeginMs)
        && Internal.equals(singEndMs, o.singEndMs);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (roundSeq != null ? roundSeq.hashCode() : 0);
      result = result * 37 + (introBeginMs != null ? introBeginMs.hashCode() : 0);
      result = result * 37 + (introEndMs != null ? introEndMs.hashCode() : 0);
      result = result * 37 + (singBeginMs != null ? singBeginMs.hashCode() : 0);
      result = result * 37 + (singEndMs != null ? singEndMs.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (status != null) builder.append(", status=").append(status);
    if (userID != null) builder.append(", userID=").append(userID);
    if (roundSeq != null) builder.append(", roundSeq=").append(roundSeq);
    if (introBeginMs != null) builder.append(", introBeginMs=").append(introBeginMs);
    if (introEndMs != null) builder.append(", introEndMs=").append(introEndMs);
    if (singBeginMs != null) builder.append(", singBeginMs=").append(singBeginMs);
    if (singEndMs != null) builder.append(", singEndMs=").append(singEndMs);
    return builder.replace(0, 2, "QRoundInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return QRoundInfo.ADAPTER.encode(this);
  }

  public static final QRoundInfo parseFrom(byte[] data) throws IOException {
    QRoundInfo c = null;
       c = QRoundInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 轮次状态
   */
  public EQRoundStatus getStatus() {
    if(status==null){
        return new EQRoundStatus.Builder().build();
    }
    return status;
  }

  /**
   * 玩家id
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 轮次顺序
   */
  public Integer getRoundSeq() {
    if(roundSeq==null){
        return DEFAULT_ROUNDSEQ;
    }
    return roundSeq;
  }

  /**
   * 导唱开始相对时间（相对于startTimeMs时间）
   */
  public Integer getIntroBeginMs() {
    if(introBeginMs==null){
        return DEFAULT_INTROBEGINMS;
    }
    return introBeginMs;
  }

  /**
   * 导唱结束相对时间（相对于startTimeMs时间）
   */
  public Integer getIntroEndMs() {
    if(introEndMs==null){
        return DEFAULT_INTROENDMS;
    }
    return introEndMs;
  }

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  public Integer getSingBeginMs() {
    if(singBeginMs==null){
        return DEFAULT_SINGBEGINMS;
    }
    return singBeginMs;
  }

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  public Integer getSingEndMs() {
    if(singEndMs==null){
        return DEFAULT_SINGENDMS;
    }
    return singEndMs;
  }

  /**
   * 轮次状态
   */
  public boolean hasStatus() {
    return status!=null;
  }

  /**
   * 玩家id
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 轮次顺序
   */
  public boolean hasRoundSeq() {
    return roundSeq!=null;
  }

  /**
   * 导唱开始相对时间（相对于startTimeMs时间）
   */
  public boolean hasIntroBeginMs() {
    return introBeginMs!=null;
  }

  /**
   * 导唱结束相对时间（相对于startTimeMs时间）
   */
  public boolean hasIntroEndMs() {
    return introEndMs!=null;
  }

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  public boolean hasSingBeginMs() {
    return singBeginMs!=null;
  }

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  public boolean hasSingEndMs() {
    return singEndMs!=null;
  }

  public static final class Builder extends Message.Builder<QRoundInfo, Builder> {
    public EQRoundStatus status;

    public Integer userID;

    public Integer roundSeq;

    public Integer introBeginMs;

    public Integer introEndMs;

    public Integer singBeginMs;

    public Integer singEndMs;

    public Builder() {
    }

    /**
     * 轮次状态
     */
    public Builder setStatus(EQRoundStatus status) {
      this.status = status;
      return this;
    }

    /**
     * 玩家id
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 轮次顺序
     */
    public Builder setRoundSeq(Integer roundSeq) {
      this.roundSeq = roundSeq;
      return this;
    }

    /**
     * 导唱开始相对时间（相对于startTimeMs时间）
     */
    public Builder setIntroBeginMs(Integer introBeginMs) {
      this.introBeginMs = introBeginMs;
      return this;
    }

    /**
     * 导唱结束相对时间（相对于startTimeMs时间）
     */
    public Builder setIntroEndMs(Integer introEndMs) {
      this.introEndMs = introEndMs;
      return this;
    }

    /**
     * 演唱开始相对时间（相对于startTimeMs时间）
     */
    public Builder setSingBeginMs(Integer singBeginMs) {
      this.singBeginMs = singBeginMs;
      return this;
    }

    /**
     * 演唱结束相对时间（相对于startTimeMs时间）
     */
    public Builder setSingEndMs(Integer singEndMs) {
      this.singEndMs = singEndMs;
      return this;
    }

    @Override
    public QRoundInfo build() {
      return new QRoundInfo(status, userID, roundSeq, introBeginMs, introEndMs, singBeginMs, singEndMs, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_QRoundInfo extends ProtoAdapter<QRoundInfo> {
    public ProtoAdapter_QRoundInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, QRoundInfo.class);
    }

    @Override
    public int encodedSize(QRoundInfo value) {
      return EQRoundStatus.ADAPTER.encodedSizeWithTag(1, value.status)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.roundSeq)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.introBeginMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.introEndMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.singBeginMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.singEndMs)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, QRoundInfo value) throws IOException {
      EQRoundStatus.ADAPTER.encodeWithTag(writer, 1, value.status);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.roundSeq);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.introBeginMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.introEndMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.singBeginMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.singEndMs);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public QRoundInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.setStatus(EQRoundStatus.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setRoundSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setIntroBeginMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setIntroEndMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setSingBeginMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setSingEndMs(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public QRoundInfo redact(QRoundInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
