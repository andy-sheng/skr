// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class QRoundInfo extends Message<QRoundInfo, QRoundInfo.Builder> {
  public static final ProtoAdapter<QRoundInfo> ADAPTER = new ProtoAdapter_QRoundInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_GETSINGMS = 0;

  public static final Integer DEFAULT_PLAYBOOKID = 0;

  public static final Integer DEFAULT_ROUNDSEQ = 0;

  public static final Integer DEFAULT_INTROBEGINMS = 0;

  public static final Integer DEFAULT_INTROENDMS = 0;

  public static final Integer DEFAULT_SINGBEGINMS = 0;

  public static final Integer DEFAULT_SINGENDMS = 0;

  public static final EQRoundStatus DEFAULT_STATUS = EQRoundStatus.QRS_UNKNOWN;

  public static final EQRoundOverReason DEFAULT_OVERREASON = EQRoundOverReason.ROR_UNKNOWN;

  public static final EQRoundResultType DEFAULT_RESULTTYPE = EQRoundResultType.ROT_UNKNOWN;

  /**
   * 抢唱成功的玩家id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer userID;

  /**
   * 抢唱成功的时间戳
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer getSingMs;

  /**
   * 曲库id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer playbookID;

  /**
   * 轮次顺序
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer roundSeq;

  /**
   * 导唱开始相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer introBeginMs;

  /**
   * 导唱结束相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer introEndMs;

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer singBeginMs;

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer singEndMs;

  /**
   * 轮次状态
   */
  @WireField(
      tag = 9,
      adapter = "com.zq.live.proto.Room.EQRoundStatus#ADAPTER"
  )
  public final EQRoundStatus status;

  /**
   * 抢唱列表
   */
  @WireField(
      tag = 10,
      adapter = "com.zq.live.proto.Room.WantSingInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<WantSingInfo> wantSingInfos;

  /**
   * 灭灯列表
   */
  @WireField(
      tag = 11,
      adapter = "com.zq.live.proto.Room.NoPassSingInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<NoPassSingInfo> noPassSingInfos;

  /**
   * 切换轮次原因
   */
  @WireField(
      tag = 12,
      adapter = "com.zq.live.proto.Room.EQRoundOverReason#ADAPTER"
  )
  public final EQRoundOverReason overReason;

  /**
   * 当EQRoundOverReason == ROR_MULTI_NO_PASS 演唱结果信息
   */
  @WireField(
      tag = 13,
      adapter = "com.zq.live.proto.Room.EQRoundResultType#ADAPTER"
  )
  public final EQRoundResultType resultType;

  public QRoundInfo(Integer userID, Integer getSingMs, Integer playbookID, Integer roundSeq,
      Integer introBeginMs, Integer introEndMs, Integer singBeginMs, Integer singEndMs,
      EQRoundStatus status, List<WantSingInfo> wantSingInfos, List<NoPassSingInfo> noPassSingInfos,
      EQRoundOverReason overReason, EQRoundResultType resultType) {
    this(userID, getSingMs, playbookID, roundSeq, introBeginMs, introEndMs, singBeginMs, singEndMs, status, wantSingInfos, noPassSingInfos, overReason, resultType, ByteString.EMPTY);
  }

  public QRoundInfo(Integer userID, Integer getSingMs, Integer playbookID, Integer roundSeq,
      Integer introBeginMs, Integer introEndMs, Integer singBeginMs, Integer singEndMs,
      EQRoundStatus status, List<WantSingInfo> wantSingInfos, List<NoPassSingInfo> noPassSingInfos,
      EQRoundOverReason overReason, EQRoundResultType resultType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.getSingMs = getSingMs;
    this.playbookID = playbookID;
    this.roundSeq = roundSeq;
    this.introBeginMs = introBeginMs;
    this.introEndMs = introEndMs;
    this.singBeginMs = singBeginMs;
    this.singEndMs = singEndMs;
    this.status = status;
    this.wantSingInfos = Internal.immutableCopyOf("wantSingInfos", wantSingInfos);
    this.noPassSingInfos = Internal.immutableCopyOf("noPassSingInfos", noPassSingInfos);
    this.overReason = overReason;
    this.resultType = resultType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.getSingMs = getSingMs;
    builder.playbookID = playbookID;
    builder.roundSeq = roundSeq;
    builder.introBeginMs = introBeginMs;
    builder.introEndMs = introEndMs;
    builder.singBeginMs = singBeginMs;
    builder.singEndMs = singEndMs;
    builder.status = status;
    builder.wantSingInfos = Internal.copyOf("wantSingInfos", wantSingInfos);
    builder.noPassSingInfos = Internal.copyOf("noPassSingInfos", noPassSingInfos);
    builder.overReason = overReason;
    builder.resultType = resultType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof QRoundInfo)) return false;
    QRoundInfo o = (QRoundInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(getSingMs, o.getSingMs)
        && Internal.equals(playbookID, o.playbookID)
        && Internal.equals(roundSeq, o.roundSeq)
        && Internal.equals(introBeginMs, o.introBeginMs)
        && Internal.equals(introEndMs, o.introEndMs)
        && Internal.equals(singBeginMs, o.singBeginMs)
        && Internal.equals(singEndMs, o.singEndMs)
        && Internal.equals(status, o.status)
        && wantSingInfos.equals(o.wantSingInfos)
        && noPassSingInfos.equals(o.noPassSingInfos)
        && Internal.equals(overReason, o.overReason)
        && Internal.equals(resultType, o.resultType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (getSingMs != null ? getSingMs.hashCode() : 0);
      result = result * 37 + (playbookID != null ? playbookID.hashCode() : 0);
      result = result * 37 + (roundSeq != null ? roundSeq.hashCode() : 0);
      result = result * 37 + (introBeginMs != null ? introBeginMs.hashCode() : 0);
      result = result * 37 + (introEndMs != null ? introEndMs.hashCode() : 0);
      result = result * 37 + (singBeginMs != null ? singBeginMs.hashCode() : 0);
      result = result * 37 + (singEndMs != null ? singEndMs.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + wantSingInfos.hashCode();
      result = result * 37 + noPassSingInfos.hashCode();
      result = result * 37 + (overReason != null ? overReason.hashCode() : 0);
      result = result * 37 + (resultType != null ? resultType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (getSingMs != null) builder.append(", getSingMs=").append(getSingMs);
    if (playbookID != null) builder.append(", playbookID=").append(playbookID);
    if (roundSeq != null) builder.append(", roundSeq=").append(roundSeq);
    if (introBeginMs != null) builder.append(", introBeginMs=").append(introBeginMs);
    if (introEndMs != null) builder.append(", introEndMs=").append(introEndMs);
    if (singBeginMs != null) builder.append(", singBeginMs=").append(singBeginMs);
    if (singEndMs != null) builder.append(", singEndMs=").append(singEndMs);
    if (status != null) builder.append(", status=").append(status);
    if (!wantSingInfos.isEmpty()) builder.append(", wantSingInfos=").append(wantSingInfos);
    if (!noPassSingInfos.isEmpty()) builder.append(", noPassSingInfos=").append(noPassSingInfos);
    if (overReason != null) builder.append(", overReason=").append(overReason);
    if (resultType != null) builder.append(", resultType=").append(resultType);
    return builder.replace(0, 2, "QRoundInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return QRoundInfo.ADAPTER.encode(this);
  }

  public static final QRoundInfo parseFrom(byte[] data) throws IOException {
    QRoundInfo c = null;
       c = QRoundInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 抢唱成功的玩家id
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 抢唱成功的时间戳
   */
  public Integer getGetSingMs() {
    if(getSingMs==null){
        return DEFAULT_GETSINGMS;
    }
    return getSingMs;
  }

  /**
   * 曲库id
   */
  public Integer getPlaybookID() {
    if(playbookID==null){
        return DEFAULT_PLAYBOOKID;
    }
    return playbookID;
  }

  /**
   * 轮次顺序
   */
  public Integer getRoundSeq() {
    if(roundSeq==null){
        return DEFAULT_ROUNDSEQ;
    }
    return roundSeq;
  }

  /**
   * 导唱开始相对时间（相对于startTimeMs时间）
   */
  public Integer getIntroBeginMs() {
    if(introBeginMs==null){
        return DEFAULT_INTROBEGINMS;
    }
    return introBeginMs;
  }

  /**
   * 导唱结束相对时间（相对于startTimeMs时间）
   */
  public Integer getIntroEndMs() {
    if(introEndMs==null){
        return DEFAULT_INTROENDMS;
    }
    return introEndMs;
  }

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  public Integer getSingBeginMs() {
    if(singBeginMs==null){
        return DEFAULT_SINGBEGINMS;
    }
    return singBeginMs;
  }

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  public Integer getSingEndMs() {
    if(singEndMs==null){
        return DEFAULT_SINGENDMS;
    }
    return singEndMs;
  }

  /**
   * 轮次状态
   */
  public EQRoundStatus getStatus() {
    if(status==null){
        return new EQRoundStatus.Builder().build();
    }
    return status;
  }

  /**
   * 抢唱列表
   */
  public List<WantSingInfo> getWantSingInfosList() {
    if(wantSingInfos==null){
        return new java.util.ArrayList<WantSingInfo>();
    }
    return wantSingInfos;
  }

  /**
   * 灭灯列表
   */
  public List<NoPassSingInfo> getNoPassSingInfosList() {
    if(noPassSingInfos==null){
        return new java.util.ArrayList<NoPassSingInfo>();
    }
    return noPassSingInfos;
  }

  /**
   * 切换轮次原因
   */
  public EQRoundOverReason getOverReason() {
    if(overReason==null){
        return new EQRoundOverReason.Builder().build();
    }
    return overReason;
  }

  /**
   * 当EQRoundOverReason == ROR_MULTI_NO_PASS 演唱结果信息
   */
  public EQRoundResultType getResultType() {
    if(resultType==null){
        return new EQRoundResultType.Builder().build();
    }
    return resultType;
  }

  /**
   * 抢唱成功的玩家id
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 抢唱成功的时间戳
   */
  public boolean hasGetSingMs() {
    return getSingMs!=null;
  }

  /**
   * 曲库id
   */
  public boolean hasPlaybookID() {
    return playbookID!=null;
  }

  /**
   * 轮次顺序
   */
  public boolean hasRoundSeq() {
    return roundSeq!=null;
  }

  /**
   * 导唱开始相对时间（相对于startTimeMs时间）
   */
  public boolean hasIntroBeginMs() {
    return introBeginMs!=null;
  }

  /**
   * 导唱结束相对时间（相对于startTimeMs时间）
   */
  public boolean hasIntroEndMs() {
    return introEndMs!=null;
  }

  /**
   * 演唱开始相对时间（相对于startTimeMs时间）
   */
  public boolean hasSingBeginMs() {
    return singBeginMs!=null;
  }

  /**
   * 演唱结束相对时间（相对于startTimeMs时间）
   */
  public boolean hasSingEndMs() {
    return singEndMs!=null;
  }

  /**
   * 轮次状态
   */
  public boolean hasStatus() {
    return status!=null;
  }

  /**
   * 抢唱列表
   */
  public boolean hasWantSingInfosList() {
    return wantSingInfos!=null;
  }

  /**
   * 灭灯列表
   */
  public boolean hasNoPassSingInfosList() {
    return noPassSingInfos!=null;
  }

  /**
   * 切换轮次原因
   */
  public boolean hasOverReason() {
    return overReason!=null;
  }

  /**
   * 当EQRoundOverReason == ROR_MULTI_NO_PASS 演唱结果信息
   */
  public boolean hasResultType() {
    return resultType!=null;
  }

  public static final class Builder extends Message.Builder<QRoundInfo, Builder> {
    public Integer userID;

    public Integer getSingMs;

    public Integer playbookID;

    public Integer roundSeq;

    public Integer introBeginMs;

    public Integer introEndMs;

    public Integer singBeginMs;

    public Integer singEndMs;

    public EQRoundStatus status;

    public List<WantSingInfo> wantSingInfos;

    public List<NoPassSingInfo> noPassSingInfos;

    public EQRoundOverReason overReason;

    public EQRoundResultType resultType;

    public Builder() {
      wantSingInfos = Internal.newMutableList();
      noPassSingInfos = Internal.newMutableList();
    }

    /**
     * 抢唱成功的玩家id
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 抢唱成功的时间戳
     */
    public Builder setGetSingMs(Integer getSingMs) {
      this.getSingMs = getSingMs;
      return this;
    }

    /**
     * 曲库id
     */
    public Builder setPlaybookID(Integer playbookID) {
      this.playbookID = playbookID;
      return this;
    }

    /**
     * 轮次顺序
     */
    public Builder setRoundSeq(Integer roundSeq) {
      this.roundSeq = roundSeq;
      return this;
    }

    /**
     * 导唱开始相对时间（相对于startTimeMs时间）
     */
    public Builder setIntroBeginMs(Integer introBeginMs) {
      this.introBeginMs = introBeginMs;
      return this;
    }

    /**
     * 导唱结束相对时间（相对于startTimeMs时间）
     */
    public Builder setIntroEndMs(Integer introEndMs) {
      this.introEndMs = introEndMs;
      return this;
    }

    /**
     * 演唱开始相对时间（相对于startTimeMs时间）
     */
    public Builder setSingBeginMs(Integer singBeginMs) {
      this.singBeginMs = singBeginMs;
      return this;
    }

    /**
     * 演唱结束相对时间（相对于startTimeMs时间）
     */
    public Builder setSingEndMs(Integer singEndMs) {
      this.singEndMs = singEndMs;
      return this;
    }

    /**
     * 轮次状态
     */
    public Builder setStatus(EQRoundStatus status) {
      this.status = status;
      return this;
    }

    /**
     * 抢唱列表
     */
    public Builder addAllWantSingInfos(List<WantSingInfo> wantSingInfos) {
      Internal.checkElementsNotNull(wantSingInfos);
      this.wantSingInfos = wantSingInfos;
      return this;
    }

    /**
     * 灭灯列表
     */
    public Builder addAllNoPassSingInfos(List<NoPassSingInfo> noPassSingInfos) {
      Internal.checkElementsNotNull(noPassSingInfos);
      this.noPassSingInfos = noPassSingInfos;
      return this;
    }

    /**
     * 切换轮次原因
     */
    public Builder setOverReason(EQRoundOverReason overReason) {
      this.overReason = overReason;
      return this;
    }

    /**
     * 当EQRoundOverReason == ROR_MULTI_NO_PASS 演唱结果信息
     */
    public Builder setResultType(EQRoundResultType resultType) {
      this.resultType = resultType;
      return this;
    }

    @Override
    public QRoundInfo build() {
      return new QRoundInfo(userID, getSingMs, playbookID, roundSeq, introBeginMs, introEndMs, singBeginMs, singEndMs, status, wantSingInfos, noPassSingInfos, overReason, resultType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_QRoundInfo extends ProtoAdapter<QRoundInfo> {
    public ProtoAdapter_QRoundInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, QRoundInfo.class);
    }

    @Override
    public int encodedSize(QRoundInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.getSingMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.playbookID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.roundSeq)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.introBeginMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.introEndMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.singBeginMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.singEndMs)
          + EQRoundStatus.ADAPTER.encodedSizeWithTag(9, value.status)
          + WantSingInfo.ADAPTER.asRepeated().encodedSizeWithTag(10, value.wantSingInfos)
          + NoPassSingInfo.ADAPTER.asRepeated().encodedSizeWithTag(11, value.noPassSingInfos)
          + EQRoundOverReason.ADAPTER.encodedSizeWithTag(12, value.overReason)
          + EQRoundResultType.ADAPTER.encodedSizeWithTag(13, value.resultType)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, QRoundInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.getSingMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.playbookID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.roundSeq);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.introBeginMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.introEndMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.singBeginMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.singEndMs);
      EQRoundStatus.ADAPTER.encodeWithTag(writer, 9, value.status);
      WantSingInfo.ADAPTER.asRepeated().encodeWithTag(writer, 10, value.wantSingInfos);
      NoPassSingInfo.ADAPTER.asRepeated().encodeWithTag(writer, 11, value.noPassSingInfos);
      EQRoundOverReason.ADAPTER.encodeWithTag(writer, 12, value.overReason);
      EQRoundResultType.ADAPTER.encodeWithTag(writer, 13, value.resultType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public QRoundInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setGetSingMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setPlaybookID(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setRoundSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setIntroBeginMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setIntroEndMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setSingBeginMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.setSingEndMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: {
            try {
              builder.setStatus(EQRoundStatus.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 10: builder.wantSingInfos.add(WantSingInfo.ADAPTER.decode(reader)); break;
          case 11: builder.noPassSingInfos.add(NoPassSingInfo.ADAPTER.decode(reader)); break;
          case 12: {
            try {
              builder.setOverReason(EQRoundOverReason.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 13: {
            try {
              builder.setResultType(EQRoundResultType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public QRoundInfo redact(QRoundInfo value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.wantSingInfos, WantSingInfo.ADAPTER);
      Internal.redactElements(builder.noPassSingInfos, NoPassSingInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
