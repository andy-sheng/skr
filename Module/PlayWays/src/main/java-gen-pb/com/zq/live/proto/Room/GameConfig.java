// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class GameConfig extends Message<GameConfig, GameConfig.Builder> {
  public static final ProtoAdapter<GameConfig> ADAPTER = new ProtoAdapter_GameConfig();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_PKMAXSHOWBLIGHTTIMES = 0;

  public static final Integer DEFAULT_PKMAXSHOWMLIGHTTIMES = 0;

  public static final Integer DEFAULT_PKENABLESHOWBLIGHTWAITTIMEMS = 0;

  public static final Integer DEFAULT_PKENABLESHOWMLIGHTWAITTIMEMS = 0;

  public static final Float DEFAULT_PKFULLENERGYPERCENTAGE = 0.0f;

  public static final Float DEFAULT_PKBLIGHTENERGYPERCENTAGE = 0.0f;

  public static final Float DEFAULT_PKMLIGHTENERGYPERCENTAGE = 0.0f;

  /**
   * 最大爆灯次数
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer PKMaxShowBLightTimes;

  /**
   * 最大灭灯次数
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer PKMaxShowMLightTimes;

  /**
   * 爆灯等待时间(毫秒)
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer PKEnableShowBLightWaitTimeMs;

  /**
   * 灭灯等待时间(毫秒)
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer PKEnableShowMLightWaitTimeMs;

  /**
   * 反馈分提示语
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.Room.PKScoreTipMsg#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PKScoreTipMsg> pkScoreTipMsg;

  /**
   * 满能量比例
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float PKFullEnergyPercentage;

  /**
   * 爆灯加能量比例
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float PKBLightEnergyPercentage;

  /**
   * 灭灯减能量比例
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float PKMLightEnergyPercentage;

  public GameConfig(Integer PKMaxShowBLightTimes, Integer PKMaxShowMLightTimes,
      Integer PKEnableShowBLightWaitTimeMs, Integer PKEnableShowMLightWaitTimeMs,
      List<PKScoreTipMsg> pkScoreTipMsg, Float PKFullEnergyPercentage,
      Float PKBLightEnergyPercentage, Float PKMLightEnergyPercentage) {
    this(PKMaxShowBLightTimes, PKMaxShowMLightTimes, PKEnableShowBLightWaitTimeMs, PKEnableShowMLightWaitTimeMs, pkScoreTipMsg, PKFullEnergyPercentage, PKBLightEnergyPercentage, PKMLightEnergyPercentage, ByteString.EMPTY);
  }

  public GameConfig(Integer PKMaxShowBLightTimes, Integer PKMaxShowMLightTimes,
      Integer PKEnableShowBLightWaitTimeMs, Integer PKEnableShowMLightWaitTimeMs,
      List<PKScoreTipMsg> pkScoreTipMsg, Float PKFullEnergyPercentage,
      Float PKBLightEnergyPercentage, Float PKMLightEnergyPercentage, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.PKMaxShowBLightTimes = PKMaxShowBLightTimes;
    this.PKMaxShowMLightTimes = PKMaxShowMLightTimes;
    this.PKEnableShowBLightWaitTimeMs = PKEnableShowBLightWaitTimeMs;
    this.PKEnableShowMLightWaitTimeMs = PKEnableShowMLightWaitTimeMs;
    this.pkScoreTipMsg = Internal.immutableCopyOf("pkScoreTipMsg", pkScoreTipMsg);
    this.PKFullEnergyPercentage = PKFullEnergyPercentage;
    this.PKBLightEnergyPercentage = PKBLightEnergyPercentage;
    this.PKMLightEnergyPercentage = PKMLightEnergyPercentage;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.PKMaxShowBLightTimes = PKMaxShowBLightTimes;
    builder.PKMaxShowMLightTimes = PKMaxShowMLightTimes;
    builder.PKEnableShowBLightWaitTimeMs = PKEnableShowBLightWaitTimeMs;
    builder.PKEnableShowMLightWaitTimeMs = PKEnableShowMLightWaitTimeMs;
    builder.pkScoreTipMsg = Internal.copyOf("pkScoreTipMsg", pkScoreTipMsg);
    builder.PKFullEnergyPercentage = PKFullEnergyPercentage;
    builder.PKBLightEnergyPercentage = PKBLightEnergyPercentage;
    builder.PKMLightEnergyPercentage = PKMLightEnergyPercentage;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GameConfig)) return false;
    GameConfig o = (GameConfig) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(PKMaxShowBLightTimes, o.PKMaxShowBLightTimes)
        && Internal.equals(PKMaxShowMLightTimes, o.PKMaxShowMLightTimes)
        && Internal.equals(PKEnableShowBLightWaitTimeMs, o.PKEnableShowBLightWaitTimeMs)
        && Internal.equals(PKEnableShowMLightWaitTimeMs, o.PKEnableShowMLightWaitTimeMs)
        && pkScoreTipMsg.equals(o.pkScoreTipMsg)
        && Internal.equals(PKFullEnergyPercentage, o.PKFullEnergyPercentage)
        && Internal.equals(PKBLightEnergyPercentage, o.PKBLightEnergyPercentage)
        && Internal.equals(PKMLightEnergyPercentage, o.PKMLightEnergyPercentage);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (PKMaxShowBLightTimes != null ? PKMaxShowBLightTimes.hashCode() : 0);
      result = result * 37 + (PKMaxShowMLightTimes != null ? PKMaxShowMLightTimes.hashCode() : 0);
      result = result * 37 + (PKEnableShowBLightWaitTimeMs != null ? PKEnableShowBLightWaitTimeMs.hashCode() : 0);
      result = result * 37 + (PKEnableShowMLightWaitTimeMs != null ? PKEnableShowMLightWaitTimeMs.hashCode() : 0);
      result = result * 37 + pkScoreTipMsg.hashCode();
      result = result * 37 + (PKFullEnergyPercentage != null ? PKFullEnergyPercentage.hashCode() : 0);
      result = result * 37 + (PKBLightEnergyPercentage != null ? PKBLightEnergyPercentage.hashCode() : 0);
      result = result * 37 + (PKMLightEnergyPercentage != null ? PKMLightEnergyPercentage.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (PKMaxShowBLightTimes != null) builder.append(", PKMaxShowBLightTimes=").append(PKMaxShowBLightTimes);
    if (PKMaxShowMLightTimes != null) builder.append(", PKMaxShowMLightTimes=").append(PKMaxShowMLightTimes);
    if (PKEnableShowBLightWaitTimeMs != null) builder.append(", PKEnableShowBLightWaitTimeMs=").append(PKEnableShowBLightWaitTimeMs);
    if (PKEnableShowMLightWaitTimeMs != null) builder.append(", PKEnableShowMLightWaitTimeMs=").append(PKEnableShowMLightWaitTimeMs);
    if (!pkScoreTipMsg.isEmpty()) builder.append(", pkScoreTipMsg=").append(pkScoreTipMsg);
    if (PKFullEnergyPercentage != null) builder.append(", PKFullEnergyPercentage=").append(PKFullEnergyPercentage);
    if (PKBLightEnergyPercentage != null) builder.append(", PKBLightEnergyPercentage=").append(PKBLightEnergyPercentage);
    if (PKMLightEnergyPercentage != null) builder.append(", PKMLightEnergyPercentage=").append(PKMLightEnergyPercentage);
    return builder.replace(0, 2, "GameConfig{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GameConfig.ADAPTER.encode(this);
  }

  public static final GameConfig parseFrom(byte[] data) throws IOException {
    GameConfig c = null;
       c = GameConfig.ADAPTER.decode(data);
    return c;
  }

  /**
   * 最大爆灯次数
   */
  public Integer getPKMaxShowBLightTimes() {
    if(PKMaxShowBLightTimes==null){
        return DEFAULT_PKMAXSHOWBLIGHTTIMES;
    }
    return PKMaxShowBLightTimes;
  }

  /**
   * 最大灭灯次数
   */
  public Integer getPKMaxShowMLightTimes() {
    if(PKMaxShowMLightTimes==null){
        return DEFAULT_PKMAXSHOWMLIGHTTIMES;
    }
    return PKMaxShowMLightTimes;
  }

  /**
   * 爆灯等待时间(毫秒)
   */
  public Integer getPKEnableShowBLightWaitTimeMs() {
    if(PKEnableShowBLightWaitTimeMs==null){
        return DEFAULT_PKENABLESHOWBLIGHTWAITTIMEMS;
    }
    return PKEnableShowBLightWaitTimeMs;
  }

  /**
   * 灭灯等待时间(毫秒)
   */
  public Integer getPKEnableShowMLightWaitTimeMs() {
    if(PKEnableShowMLightWaitTimeMs==null){
        return DEFAULT_PKENABLESHOWMLIGHTWAITTIMEMS;
    }
    return PKEnableShowMLightWaitTimeMs;
  }

  /**
   * 反馈分提示语
   */
  public List<PKScoreTipMsg> getPkScoreTipMsgList() {
    if(pkScoreTipMsg==null){
        return new java.util.ArrayList<PKScoreTipMsg>();
    }
    return pkScoreTipMsg;
  }

  /**
   * 满能量比例
   */
  public Float getPKFullEnergyPercentage() {
    if(PKFullEnergyPercentage==null){
        return DEFAULT_PKFULLENERGYPERCENTAGE;
    }
    return PKFullEnergyPercentage;
  }

  /**
   * 爆灯加能量比例
   */
  public Float getPKBLightEnergyPercentage() {
    if(PKBLightEnergyPercentage==null){
        return DEFAULT_PKBLIGHTENERGYPERCENTAGE;
    }
    return PKBLightEnergyPercentage;
  }

  /**
   * 灭灯减能量比例
   */
  public Float getPKMLightEnergyPercentage() {
    if(PKMLightEnergyPercentage==null){
        return DEFAULT_PKMLIGHTENERGYPERCENTAGE;
    }
    return PKMLightEnergyPercentage;
  }

  /**
   * 最大爆灯次数
   */
  public boolean hasPKMaxShowBLightTimes() {
    return PKMaxShowBLightTimes!=null;
  }

  /**
   * 最大灭灯次数
   */
  public boolean hasPKMaxShowMLightTimes() {
    return PKMaxShowMLightTimes!=null;
  }

  /**
   * 爆灯等待时间(毫秒)
   */
  public boolean hasPKEnableShowBLightWaitTimeMs() {
    return PKEnableShowBLightWaitTimeMs!=null;
  }

  /**
   * 灭灯等待时间(毫秒)
   */
  public boolean hasPKEnableShowMLightWaitTimeMs() {
    return PKEnableShowMLightWaitTimeMs!=null;
  }

  /**
   * 反馈分提示语
   */
  public boolean hasPkScoreTipMsgList() {
    return pkScoreTipMsg!=null;
  }

  /**
   * 满能量比例
   */
  public boolean hasPKFullEnergyPercentage() {
    return PKFullEnergyPercentage!=null;
  }

  /**
   * 爆灯加能量比例
   */
  public boolean hasPKBLightEnergyPercentage() {
    return PKBLightEnergyPercentage!=null;
  }

  /**
   * 灭灯减能量比例
   */
  public boolean hasPKMLightEnergyPercentage() {
    return PKMLightEnergyPercentage!=null;
  }

  public static final class Builder extends Message.Builder<GameConfig, Builder> {
    public Integer PKMaxShowBLightTimes;

    public Integer PKMaxShowMLightTimes;

    public Integer PKEnableShowBLightWaitTimeMs;

    public Integer PKEnableShowMLightWaitTimeMs;

    public List<PKScoreTipMsg> pkScoreTipMsg;

    public Float PKFullEnergyPercentage;

    public Float PKBLightEnergyPercentage;

    public Float PKMLightEnergyPercentage;

    public Builder() {
      pkScoreTipMsg = Internal.newMutableList();
    }

    /**
     * 最大爆灯次数
     */
    public Builder setPKMaxShowBLightTimes(Integer PKMaxShowBLightTimes) {
      this.PKMaxShowBLightTimes = PKMaxShowBLightTimes;
      return this;
    }

    /**
     * 最大灭灯次数
     */
    public Builder setPKMaxShowMLightTimes(Integer PKMaxShowMLightTimes) {
      this.PKMaxShowMLightTimes = PKMaxShowMLightTimes;
      return this;
    }

    /**
     * 爆灯等待时间(毫秒)
     */
    public Builder setPKEnableShowBLightWaitTimeMs(Integer PKEnableShowBLightWaitTimeMs) {
      this.PKEnableShowBLightWaitTimeMs = PKEnableShowBLightWaitTimeMs;
      return this;
    }

    /**
     * 灭灯等待时间(毫秒)
     */
    public Builder setPKEnableShowMLightWaitTimeMs(Integer PKEnableShowMLightWaitTimeMs) {
      this.PKEnableShowMLightWaitTimeMs = PKEnableShowMLightWaitTimeMs;
      return this;
    }

    /**
     * 反馈分提示语
     */
    public Builder addAllPkScoreTipMsg(List<PKScoreTipMsg> pkScoreTipMsg) {
      Internal.checkElementsNotNull(pkScoreTipMsg);
      this.pkScoreTipMsg = pkScoreTipMsg;
      return this;
    }

    /**
     * 满能量比例
     */
    public Builder setPKFullEnergyPercentage(Float PKFullEnergyPercentage) {
      this.PKFullEnergyPercentage = PKFullEnergyPercentage;
      return this;
    }

    /**
     * 爆灯加能量比例
     */
    public Builder setPKBLightEnergyPercentage(Float PKBLightEnergyPercentage) {
      this.PKBLightEnergyPercentage = PKBLightEnergyPercentage;
      return this;
    }

    /**
     * 灭灯减能量比例
     */
    public Builder setPKMLightEnergyPercentage(Float PKMLightEnergyPercentage) {
      this.PKMLightEnergyPercentage = PKMLightEnergyPercentage;
      return this;
    }

    @Override
    public GameConfig build() {
      return new GameConfig(PKMaxShowBLightTimes, PKMaxShowMLightTimes, PKEnableShowBLightWaitTimeMs, PKEnableShowMLightWaitTimeMs, pkScoreTipMsg, PKFullEnergyPercentage, PKBLightEnergyPercentage, PKMLightEnergyPercentage, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GameConfig extends ProtoAdapter<GameConfig> {
    public ProtoAdapter_GameConfig() {
      super(FieldEncoding.LENGTH_DELIMITED, GameConfig.class);
    }

    @Override
    public int encodedSize(GameConfig value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.PKMaxShowBLightTimes)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.PKMaxShowMLightTimes)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.PKEnableShowBLightWaitTimeMs)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.PKEnableShowMLightWaitTimeMs)
          + PKScoreTipMsg.ADAPTER.asRepeated().encodedSizeWithTag(5, value.pkScoreTipMsg)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(6, value.PKFullEnergyPercentage)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(7, value.PKBLightEnergyPercentage)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(8, value.PKMLightEnergyPercentage)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GameConfig value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.PKMaxShowBLightTimes);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.PKMaxShowMLightTimes);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.PKEnableShowBLightWaitTimeMs);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.PKEnableShowMLightWaitTimeMs);
      PKScoreTipMsg.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.pkScoreTipMsg);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 6, value.PKFullEnergyPercentage);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 7, value.PKBLightEnergyPercentage);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 8, value.PKMLightEnergyPercentage);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GameConfig decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setPKMaxShowBLightTimes(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setPKMaxShowMLightTimes(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setPKEnableShowBLightWaitTimeMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setPKEnableShowMLightWaitTimeMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.pkScoreTipMsg.add(PKScoreTipMsg.ADAPTER.decode(reader)); break;
          case 6: builder.setPKFullEnergyPercentage(ProtoAdapter.FLOAT.decode(reader)); break;
          case 7: builder.setPKBLightEnergyPercentage(ProtoAdapter.FLOAT.decode(reader)); break;
          case 8: builder.setPKMLightEnergyPercentage(ProtoAdapter.FLOAT.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GameConfig redact(GameConfig value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.pkScoreTipMsg, PKScoreTipMsg.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
