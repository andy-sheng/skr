// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CombineRoom.proto
package com.zq.live.proto.CombineRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
 * --proto_path=./proto --java_out=./Module/PlayWays/src/main/java-gen-pb/ CombineRoom.proto
 * 联合[双人]房信令消息
 */
public final class CombineRoomMsg extends Message<CombineRoomMsg, CombineRoomMsg.Builder> {
  public static final ProtoAdapter<CombineRoomMsg> ADAPTER = new ProtoAdapter_CombineRoomMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_TIMEMS = 0L;

  public static final ECombineRoomMsgType DEFAULT_MSGTYPE = ECombineRoomMsgType.DRM_UNKNOWN;

  public static final Integer DEFAULT_ROOMID = 0;

  /**
   * 房间消息产生时间，单位毫秒
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long timeMs;

  /**
   * 消息类型
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.CombineRoom.ECombineRoomMsgType#ADAPTER"
  )
  private final ECombineRoomMsgType msgType;

  /**
   * 房间ID
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roomID;

  @WireField(
      tag = 10,
      adapter = "com.zq.live.proto.CombineRoom.PickMsg#ADAPTER"
  )
  private final PickMsg pickMsg;

  /**
   * 结束双人房
   */
  @WireField(
      tag = 11,
      adapter = "com.zq.live.proto.CombineRoom.EndCombineRoomMsg#ADAPTER"
  )
  private final EndCombineRoomMsg endCombineRoomMsg;

  /**
   * 解锁用户信息
   */
  @WireField(
      tag = 12,
      adapter = "com.zq.live.proto.CombineRoom.UnlockUserInfoMsg#ADAPTER"
  )
  private final UnlockUserInfoMsg unlockUserInfoMsg;

  /**
   * 加载歌曲信息
   */
  @WireField(
      tag = 13,
      adapter = "com.zq.live.proto.CombineRoom.LoadMusicInfoMsg#ADAPTER"
  )
  private final LoadMusicInfoMsg loadMusicInfoMsg;

  /**
   * 同步状态
   */
  @WireField(
      tag = 14,
      adapter = "com.zq.live.proto.CombineRoom.CombineRoomSyncStatusMsg#ADAPTER"
  )
  private final CombineRoomSyncStatusMsg syncStatusMsg;

  /**
   * 添加歌曲信息
   */
  @WireField(
      tag = 15,
      adapter = "com.zq.live.proto.CombineRoom.AddMusicInfoMsg#ADAPTER"
  )
  private final AddMusicInfoMsg addMuicInfoMsg;

  /**
   * 删除歌曲信息
   */
  @WireField(
      tag = 16,
      adapter = "com.zq.live.proto.CombineRoom.DelMusicInfoMsg#ADAPTER"
  )
  private final DelMusicInfoMsg delMuicInfoMsg;

  /**
   * 发起切换场景
   */
  @WireField(
      tag = 17,
      adapter = "com.zq.live.proto.CombineRoom.ReqChangeSceneMsg#ADAPTER"
  )
  private final ReqChangeSceneMsg reqChangeSceneMsg;

  /**
   * 同意切换场景
   */
  @WireField(
      tag = 18,
      adapter = "com.zq.live.proto.CombineRoom.AgreeChangeSceneMsg#ADAPTER"
  )
  private final AgreeChangeSceneMsg agreeChangeSceneMsg;

  /**
   * 选定游戏
   */
  @WireField(
      tag = 19,
      adapter = "com.zq.live.proto.CombineRoom.ChoiceGameItemMsg#ADAPTER"
  )
  private final ChoiceGameItemMsg choiceGameItemMsg;

  /**
   * 开始游戏
   */
  @WireField(
      tag = 20,
      adapter = "com.zq.live.proto.CombineRoom.StartGameMsg#ADAPTER"
  )
  private final StartGameMsg startGameMsg;

  /**
   * 换游戏面板
   */
  @WireField(
      tag = 21,
      adapter = "com.zq.live.proto.CombineRoom.ChangeGamePanelMsg#ADAPTER"
  )
  private final ChangeGamePanelMsg changeGamePanelMsg;

  /**
   * 结束游戏
   */
  @WireField(
      tag = 22,
      adapter = "com.zq.live.proto.CombineRoom.EndGameMsg#ADAPTER"
  )
  private final EndGameMsg endGameMsg;

  /**
   * 同步状
   */
  @WireField(
      tag = 23,
      adapter = "com.zq.live.proto.CombineRoom.CombineRoomSyncStatusV2Msg#ADAPTER"
  )
  private final CombineRoomSyncStatusV2Msg syncStatusV2Msg;

  public CombineRoomMsg(Long timeMs, ECombineRoomMsgType msgType, Integer roomID, PickMsg pickMsg,
      EndCombineRoomMsg endCombineRoomMsg, UnlockUserInfoMsg unlockUserInfoMsg,
      LoadMusicInfoMsg loadMusicInfoMsg, CombineRoomSyncStatusMsg syncStatusMsg,
      AddMusicInfoMsg addMuicInfoMsg, DelMusicInfoMsg delMuicInfoMsg,
      ReqChangeSceneMsg reqChangeSceneMsg, AgreeChangeSceneMsg agreeChangeSceneMsg,
      ChoiceGameItemMsg choiceGameItemMsg, StartGameMsg startGameMsg,
      ChangeGamePanelMsg changeGamePanelMsg, EndGameMsg endGameMsg,
      CombineRoomSyncStatusV2Msg syncStatusV2Msg) {
    this(timeMs, msgType, roomID, pickMsg, endCombineRoomMsg, unlockUserInfoMsg, loadMusicInfoMsg, syncStatusMsg, addMuicInfoMsg, delMuicInfoMsg, reqChangeSceneMsg, agreeChangeSceneMsg, choiceGameItemMsg, startGameMsg, changeGamePanelMsg, endGameMsg, syncStatusV2Msg, ByteString.EMPTY);
  }

  public CombineRoomMsg(Long timeMs, ECombineRoomMsgType msgType, Integer roomID, PickMsg pickMsg,
      EndCombineRoomMsg endCombineRoomMsg, UnlockUserInfoMsg unlockUserInfoMsg,
      LoadMusicInfoMsg loadMusicInfoMsg, CombineRoomSyncStatusMsg syncStatusMsg,
      AddMusicInfoMsg addMuicInfoMsg, DelMusicInfoMsg delMuicInfoMsg,
      ReqChangeSceneMsg reqChangeSceneMsg, AgreeChangeSceneMsg agreeChangeSceneMsg,
      ChoiceGameItemMsg choiceGameItemMsg, StartGameMsg startGameMsg,
      ChangeGamePanelMsg changeGamePanelMsg, EndGameMsg endGameMsg,
      CombineRoomSyncStatusV2Msg syncStatusV2Msg, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.timeMs = timeMs;
    this.msgType = msgType;
    this.roomID = roomID;
    this.pickMsg = pickMsg;
    this.endCombineRoomMsg = endCombineRoomMsg;
    this.unlockUserInfoMsg = unlockUserInfoMsg;
    this.loadMusicInfoMsg = loadMusicInfoMsg;
    this.syncStatusMsg = syncStatusMsg;
    this.addMuicInfoMsg = addMuicInfoMsg;
    this.delMuicInfoMsg = delMuicInfoMsg;
    this.reqChangeSceneMsg = reqChangeSceneMsg;
    this.agreeChangeSceneMsg = agreeChangeSceneMsg;
    this.choiceGameItemMsg = choiceGameItemMsg;
    this.startGameMsg = startGameMsg;
    this.changeGamePanelMsg = changeGamePanelMsg;
    this.endGameMsg = endGameMsg;
    this.syncStatusV2Msg = syncStatusV2Msg;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.timeMs = timeMs;
    builder.msgType = msgType;
    builder.roomID = roomID;
    builder.pickMsg = pickMsg;
    builder.endCombineRoomMsg = endCombineRoomMsg;
    builder.unlockUserInfoMsg = unlockUserInfoMsg;
    builder.loadMusicInfoMsg = loadMusicInfoMsg;
    builder.syncStatusMsg = syncStatusMsg;
    builder.addMuicInfoMsg = addMuicInfoMsg;
    builder.delMuicInfoMsg = delMuicInfoMsg;
    builder.reqChangeSceneMsg = reqChangeSceneMsg;
    builder.agreeChangeSceneMsg = agreeChangeSceneMsg;
    builder.choiceGameItemMsg = choiceGameItemMsg;
    builder.startGameMsg = startGameMsg;
    builder.changeGamePanelMsg = changeGamePanelMsg;
    builder.endGameMsg = endGameMsg;
    builder.syncStatusV2Msg = syncStatusV2Msg;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CombineRoomMsg)) return false;
    CombineRoomMsg o = (CombineRoomMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(timeMs, o.timeMs)
        && Internal.equals(msgType, o.msgType)
        && Internal.equals(roomID, o.roomID)
        && Internal.equals(pickMsg, o.pickMsg)
        && Internal.equals(endCombineRoomMsg, o.endCombineRoomMsg)
        && Internal.equals(unlockUserInfoMsg, o.unlockUserInfoMsg)
        && Internal.equals(loadMusicInfoMsg, o.loadMusicInfoMsg)
        && Internal.equals(syncStatusMsg, o.syncStatusMsg)
        && Internal.equals(addMuicInfoMsg, o.addMuicInfoMsg)
        && Internal.equals(delMuicInfoMsg, o.delMuicInfoMsg)
        && Internal.equals(reqChangeSceneMsg, o.reqChangeSceneMsg)
        && Internal.equals(agreeChangeSceneMsg, o.agreeChangeSceneMsg)
        && Internal.equals(choiceGameItemMsg, o.choiceGameItemMsg)
        && Internal.equals(startGameMsg, o.startGameMsg)
        && Internal.equals(changeGamePanelMsg, o.changeGamePanelMsg)
        && Internal.equals(endGameMsg, o.endGameMsg)
        && Internal.equals(syncStatusV2Msg, o.syncStatusV2Msg);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (timeMs != null ? timeMs.hashCode() : 0);
      result = result * 37 + (msgType != null ? msgType.hashCode() : 0);
      result = result * 37 + (roomID != null ? roomID.hashCode() : 0);
      result = result * 37 + (pickMsg != null ? pickMsg.hashCode() : 0);
      result = result * 37 + (endCombineRoomMsg != null ? endCombineRoomMsg.hashCode() : 0);
      result = result * 37 + (unlockUserInfoMsg != null ? unlockUserInfoMsg.hashCode() : 0);
      result = result * 37 + (loadMusicInfoMsg != null ? loadMusicInfoMsg.hashCode() : 0);
      result = result * 37 + (syncStatusMsg != null ? syncStatusMsg.hashCode() : 0);
      result = result * 37 + (addMuicInfoMsg != null ? addMuicInfoMsg.hashCode() : 0);
      result = result * 37 + (delMuicInfoMsg != null ? delMuicInfoMsg.hashCode() : 0);
      result = result * 37 + (reqChangeSceneMsg != null ? reqChangeSceneMsg.hashCode() : 0);
      result = result * 37 + (agreeChangeSceneMsg != null ? agreeChangeSceneMsg.hashCode() : 0);
      result = result * 37 + (choiceGameItemMsg != null ? choiceGameItemMsg.hashCode() : 0);
      result = result * 37 + (startGameMsg != null ? startGameMsg.hashCode() : 0);
      result = result * 37 + (changeGamePanelMsg != null ? changeGamePanelMsg.hashCode() : 0);
      result = result * 37 + (endGameMsg != null ? endGameMsg.hashCode() : 0);
      result = result * 37 + (syncStatusV2Msg != null ? syncStatusV2Msg.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (timeMs != null) builder.append(", timeMs=").append(timeMs);
    if (msgType != null) builder.append(", msgType=").append(msgType);
    if (roomID != null) builder.append(", roomID=").append(roomID);
    if (pickMsg != null) builder.append(", pickMsg=").append(pickMsg);
    if (endCombineRoomMsg != null) builder.append(", endCombineRoomMsg=").append(endCombineRoomMsg);
    if (unlockUserInfoMsg != null) builder.append(", unlockUserInfoMsg=").append(unlockUserInfoMsg);
    if (loadMusicInfoMsg != null) builder.append(", loadMusicInfoMsg=").append(loadMusicInfoMsg);
    if (syncStatusMsg != null) builder.append(", syncStatusMsg=").append(syncStatusMsg);
    if (addMuicInfoMsg != null) builder.append(", addMuicInfoMsg=").append(addMuicInfoMsg);
    if (delMuicInfoMsg != null) builder.append(", delMuicInfoMsg=").append(delMuicInfoMsg);
    if (reqChangeSceneMsg != null) builder.append(", reqChangeSceneMsg=").append(reqChangeSceneMsg);
    if (agreeChangeSceneMsg != null) builder.append(", agreeChangeSceneMsg=").append(agreeChangeSceneMsg);
    if (choiceGameItemMsg != null) builder.append(", choiceGameItemMsg=").append(choiceGameItemMsg);
    if (startGameMsg != null) builder.append(", startGameMsg=").append(startGameMsg);
    if (changeGamePanelMsg != null) builder.append(", changeGamePanelMsg=").append(changeGamePanelMsg);
    if (endGameMsg != null) builder.append(", endGameMsg=").append(endGameMsg);
    if (syncStatusV2Msg != null) builder.append(", syncStatusV2Msg=").append(syncStatusV2Msg);
    return builder.replace(0, 2, "CombineRoomMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return CombineRoomMsg.ADAPTER.encode(this);
  }

  public static final CombineRoomMsg parseFrom(byte[] data) throws IOException {
    CombineRoomMsg c = null;
       c = CombineRoomMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 房间消息产生时间，单位毫秒
   */
  public Long getTimeMs() {
    if(timeMs==null){
        return DEFAULT_TIMEMS;
    }
    return timeMs;
  }

  /**
   * 消息类型
   */
  public ECombineRoomMsgType getMsgType() {
    if(msgType==null){
        return new ECombineRoomMsgType.Builder().build();
    }
    return msgType;
  }

  /**
   * 房间ID
   */
  public Integer getRoomID() {
    if(roomID==null){
        return DEFAULT_ROOMID;
    }
    return roomID;
  }

  public PickMsg getPickMsg() {
    if(pickMsg==null){
        return new PickMsg.Builder().build();
    }
    return pickMsg;
  }

  /**
   * 结束双人房
   */
  public EndCombineRoomMsg getEndCombineRoomMsg() {
    if(endCombineRoomMsg==null){
        return new EndCombineRoomMsg.Builder().build();
    }
    return endCombineRoomMsg;
  }

  /**
   * 解锁用户信息
   */
  public UnlockUserInfoMsg getUnlockUserInfoMsg() {
    if(unlockUserInfoMsg==null){
        return new UnlockUserInfoMsg.Builder().build();
    }
    return unlockUserInfoMsg;
  }

  /**
   * 加载歌曲信息
   */
  public LoadMusicInfoMsg getLoadMusicInfoMsg() {
    if(loadMusicInfoMsg==null){
        return new LoadMusicInfoMsg.Builder().build();
    }
    return loadMusicInfoMsg;
  }

  /**
   * 同步状态
   */
  public CombineRoomSyncStatusMsg getSyncStatusMsg() {
    if(syncStatusMsg==null){
        return new CombineRoomSyncStatusMsg.Builder().build();
    }
    return syncStatusMsg;
  }

  /**
   * 添加歌曲信息
   */
  public AddMusicInfoMsg getAddMuicInfoMsg() {
    if(addMuicInfoMsg==null){
        return new AddMusicInfoMsg.Builder().build();
    }
    return addMuicInfoMsg;
  }

  /**
   * 删除歌曲信息
   */
  public DelMusicInfoMsg getDelMuicInfoMsg() {
    if(delMuicInfoMsg==null){
        return new DelMusicInfoMsg.Builder().build();
    }
    return delMuicInfoMsg;
  }

  /**
   * 发起切换场景
   */
  public ReqChangeSceneMsg getReqChangeSceneMsg() {
    if(reqChangeSceneMsg==null){
        return new ReqChangeSceneMsg.Builder().build();
    }
    return reqChangeSceneMsg;
  }

  /**
   * 同意切换场景
   */
  public AgreeChangeSceneMsg getAgreeChangeSceneMsg() {
    if(agreeChangeSceneMsg==null){
        return new AgreeChangeSceneMsg.Builder().build();
    }
    return agreeChangeSceneMsg;
  }

  /**
   * 选定游戏
   */
  public ChoiceGameItemMsg getChoiceGameItemMsg() {
    if(choiceGameItemMsg==null){
        return new ChoiceGameItemMsg.Builder().build();
    }
    return choiceGameItemMsg;
  }

  /**
   * 开始游戏
   */
  public StartGameMsg getStartGameMsg() {
    if(startGameMsg==null){
        return new StartGameMsg.Builder().build();
    }
    return startGameMsg;
  }

  /**
   * 换游戏面板
   */
  public ChangeGamePanelMsg getChangeGamePanelMsg() {
    if(changeGamePanelMsg==null){
        return new ChangeGamePanelMsg.Builder().build();
    }
    return changeGamePanelMsg;
  }

  /**
   * 结束游戏
   */
  public EndGameMsg getEndGameMsg() {
    if(endGameMsg==null){
        return new EndGameMsg.Builder().build();
    }
    return endGameMsg;
  }

  /**
   * 同步状
   */
  public CombineRoomSyncStatusV2Msg getSyncStatusV2Msg() {
    if(syncStatusV2Msg==null){
        return new CombineRoomSyncStatusV2Msg.Builder().build();
    }
    return syncStatusV2Msg;
  }

  /**
   * 房间消息产生时间，单位毫秒
   */
  public boolean hasTimeMs() {
    return timeMs!=null;
  }

  /**
   * 消息类型
   */
  public boolean hasMsgType() {
    return msgType!=null;
  }

  /**
   * 房间ID
   */
  public boolean hasRoomID() {
    return roomID!=null;
  }

  public boolean hasPickMsg() {
    return pickMsg!=null;
  }

  /**
   * 结束双人房
   */
  public boolean hasEndCombineRoomMsg() {
    return endCombineRoomMsg!=null;
  }

  /**
   * 解锁用户信息
   */
  public boolean hasUnlockUserInfoMsg() {
    return unlockUserInfoMsg!=null;
  }

  /**
   * 加载歌曲信息
   */
  public boolean hasLoadMusicInfoMsg() {
    return loadMusicInfoMsg!=null;
  }

  /**
   * 同步状态
   */
  public boolean hasSyncStatusMsg() {
    return syncStatusMsg!=null;
  }

  /**
   * 添加歌曲信息
   */
  public boolean hasAddMuicInfoMsg() {
    return addMuicInfoMsg!=null;
  }

  /**
   * 删除歌曲信息
   */
  public boolean hasDelMuicInfoMsg() {
    return delMuicInfoMsg!=null;
  }

  /**
   * 发起切换场景
   */
  public boolean hasReqChangeSceneMsg() {
    return reqChangeSceneMsg!=null;
  }

  /**
   * 同意切换场景
   */
  public boolean hasAgreeChangeSceneMsg() {
    return agreeChangeSceneMsg!=null;
  }

  /**
   * 选定游戏
   */
  public boolean hasChoiceGameItemMsg() {
    return choiceGameItemMsg!=null;
  }

  /**
   * 开始游戏
   */
  public boolean hasStartGameMsg() {
    return startGameMsg!=null;
  }

  /**
   * 换游戏面板
   */
  public boolean hasChangeGamePanelMsg() {
    return changeGamePanelMsg!=null;
  }

  /**
   * 结束游戏
   */
  public boolean hasEndGameMsg() {
    return endGameMsg!=null;
  }

  /**
   * 同步状
   */
  public boolean hasSyncStatusV2Msg() {
    return syncStatusV2Msg!=null;
  }

  public static final class Builder extends Message.Builder<CombineRoomMsg, Builder> {
    private Long timeMs;

    private ECombineRoomMsgType msgType;

    private Integer roomID;

    private PickMsg pickMsg;

    private EndCombineRoomMsg endCombineRoomMsg;

    private UnlockUserInfoMsg unlockUserInfoMsg;

    private LoadMusicInfoMsg loadMusicInfoMsg;

    private CombineRoomSyncStatusMsg syncStatusMsg;

    private AddMusicInfoMsg addMuicInfoMsg;

    private DelMusicInfoMsg delMuicInfoMsg;

    private ReqChangeSceneMsg reqChangeSceneMsg;

    private AgreeChangeSceneMsg agreeChangeSceneMsg;

    private ChoiceGameItemMsg choiceGameItemMsg;

    private StartGameMsg startGameMsg;

    private ChangeGamePanelMsg changeGamePanelMsg;

    private EndGameMsg endGameMsg;

    private CombineRoomSyncStatusV2Msg syncStatusV2Msg;

    public Builder() {
    }

    /**
     * 房间消息产生时间，单位毫秒
     */
    public Builder setTimeMs(Long timeMs) {
      this.timeMs = timeMs;
      return this;
    }

    /**
     * 消息类型
     */
    public Builder setMsgType(ECombineRoomMsgType msgType) {
      this.msgType = msgType;
      return this;
    }

    /**
     * 房间ID
     */
    public Builder setRoomID(Integer roomID) {
      this.roomID = roomID;
      return this;
    }

    public Builder setPickMsg(PickMsg pickMsg) {
      this.pickMsg = pickMsg;
      return this;
    }

    /**
     * 结束双人房
     */
    public Builder setEndCombineRoomMsg(EndCombineRoomMsg endCombineRoomMsg) {
      this.endCombineRoomMsg = endCombineRoomMsg;
      return this;
    }

    /**
     * 解锁用户信息
     */
    public Builder setUnlockUserInfoMsg(UnlockUserInfoMsg unlockUserInfoMsg) {
      this.unlockUserInfoMsg = unlockUserInfoMsg;
      return this;
    }

    /**
     * 加载歌曲信息
     */
    public Builder setLoadMusicInfoMsg(LoadMusicInfoMsg loadMusicInfoMsg) {
      this.loadMusicInfoMsg = loadMusicInfoMsg;
      return this;
    }

    /**
     * 同步状态
     */
    public Builder setSyncStatusMsg(CombineRoomSyncStatusMsg syncStatusMsg) {
      this.syncStatusMsg = syncStatusMsg;
      return this;
    }

    /**
     * 添加歌曲信息
     */
    public Builder setAddMuicInfoMsg(AddMusicInfoMsg addMuicInfoMsg) {
      this.addMuicInfoMsg = addMuicInfoMsg;
      return this;
    }

    /**
     * 删除歌曲信息
     */
    public Builder setDelMuicInfoMsg(DelMusicInfoMsg delMuicInfoMsg) {
      this.delMuicInfoMsg = delMuicInfoMsg;
      return this;
    }

    /**
     * 发起切换场景
     */
    public Builder setReqChangeSceneMsg(ReqChangeSceneMsg reqChangeSceneMsg) {
      this.reqChangeSceneMsg = reqChangeSceneMsg;
      return this;
    }

    /**
     * 同意切换场景
     */
    public Builder setAgreeChangeSceneMsg(AgreeChangeSceneMsg agreeChangeSceneMsg) {
      this.agreeChangeSceneMsg = agreeChangeSceneMsg;
      return this;
    }

    /**
     * 选定游戏
     */
    public Builder setChoiceGameItemMsg(ChoiceGameItemMsg choiceGameItemMsg) {
      this.choiceGameItemMsg = choiceGameItemMsg;
      return this;
    }

    /**
     * 开始游戏
     */
    public Builder setStartGameMsg(StartGameMsg startGameMsg) {
      this.startGameMsg = startGameMsg;
      return this;
    }

    /**
     * 换游戏面板
     */
    public Builder setChangeGamePanelMsg(ChangeGamePanelMsg changeGamePanelMsg) {
      this.changeGamePanelMsg = changeGamePanelMsg;
      return this;
    }

    /**
     * 结束游戏
     */
    public Builder setEndGameMsg(EndGameMsg endGameMsg) {
      this.endGameMsg = endGameMsg;
      return this;
    }

    /**
     * 同步状
     */
    public Builder setSyncStatusV2Msg(CombineRoomSyncStatusV2Msg syncStatusV2Msg) {
      this.syncStatusV2Msg = syncStatusV2Msg;
      return this;
    }

    @Override
    public CombineRoomMsg build() {
      return new CombineRoomMsg(timeMs, msgType, roomID, pickMsg, endCombineRoomMsg, unlockUserInfoMsg, loadMusicInfoMsg, syncStatusMsg, addMuicInfoMsg, delMuicInfoMsg, reqChangeSceneMsg, agreeChangeSceneMsg, choiceGameItemMsg, startGameMsg, changeGamePanelMsg, endGameMsg, syncStatusV2Msg, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CombineRoomMsg extends ProtoAdapter<CombineRoomMsg> {
    public ProtoAdapter_CombineRoomMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, CombineRoomMsg.class);
    }

    @Override
    public int encodedSize(CombineRoomMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.timeMs)
          + ECombineRoomMsgType.ADAPTER.encodedSizeWithTag(2, value.msgType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.roomID)
          + PickMsg.ADAPTER.encodedSizeWithTag(10, value.pickMsg)
          + EndCombineRoomMsg.ADAPTER.encodedSizeWithTag(11, value.endCombineRoomMsg)
          + UnlockUserInfoMsg.ADAPTER.encodedSizeWithTag(12, value.unlockUserInfoMsg)
          + LoadMusicInfoMsg.ADAPTER.encodedSizeWithTag(13, value.loadMusicInfoMsg)
          + CombineRoomSyncStatusMsg.ADAPTER.encodedSizeWithTag(14, value.syncStatusMsg)
          + AddMusicInfoMsg.ADAPTER.encodedSizeWithTag(15, value.addMuicInfoMsg)
          + DelMusicInfoMsg.ADAPTER.encodedSizeWithTag(16, value.delMuicInfoMsg)
          + ReqChangeSceneMsg.ADAPTER.encodedSizeWithTag(17, value.reqChangeSceneMsg)
          + AgreeChangeSceneMsg.ADAPTER.encodedSizeWithTag(18, value.agreeChangeSceneMsg)
          + ChoiceGameItemMsg.ADAPTER.encodedSizeWithTag(19, value.choiceGameItemMsg)
          + StartGameMsg.ADAPTER.encodedSizeWithTag(20, value.startGameMsg)
          + ChangeGamePanelMsg.ADAPTER.encodedSizeWithTag(21, value.changeGamePanelMsg)
          + EndGameMsg.ADAPTER.encodedSizeWithTag(22, value.endGameMsg)
          + CombineRoomSyncStatusV2Msg.ADAPTER.encodedSizeWithTag(23, value.syncStatusV2Msg)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CombineRoomMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.timeMs);
      ECombineRoomMsgType.ADAPTER.encodeWithTag(writer, 2, value.msgType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.roomID);
      PickMsg.ADAPTER.encodeWithTag(writer, 10, value.pickMsg);
      EndCombineRoomMsg.ADAPTER.encodeWithTag(writer, 11, value.endCombineRoomMsg);
      UnlockUserInfoMsg.ADAPTER.encodeWithTag(writer, 12, value.unlockUserInfoMsg);
      LoadMusicInfoMsg.ADAPTER.encodeWithTag(writer, 13, value.loadMusicInfoMsg);
      CombineRoomSyncStatusMsg.ADAPTER.encodeWithTag(writer, 14, value.syncStatusMsg);
      AddMusicInfoMsg.ADAPTER.encodeWithTag(writer, 15, value.addMuicInfoMsg);
      DelMusicInfoMsg.ADAPTER.encodeWithTag(writer, 16, value.delMuicInfoMsg);
      ReqChangeSceneMsg.ADAPTER.encodeWithTag(writer, 17, value.reqChangeSceneMsg);
      AgreeChangeSceneMsg.ADAPTER.encodeWithTag(writer, 18, value.agreeChangeSceneMsg);
      ChoiceGameItemMsg.ADAPTER.encodeWithTag(writer, 19, value.choiceGameItemMsg);
      StartGameMsg.ADAPTER.encodeWithTag(writer, 20, value.startGameMsg);
      ChangeGamePanelMsg.ADAPTER.encodeWithTag(writer, 21, value.changeGamePanelMsg);
      EndGameMsg.ADAPTER.encodeWithTag(writer, 22, value.endGameMsg);
      CombineRoomSyncStatusV2Msg.ADAPTER.encodeWithTag(writer, 23, value.syncStatusV2Msg);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CombineRoomMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: {
            try {
              builder.setMsgType(ECombineRoomMsgType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setRoomID(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.setPickMsg(PickMsg.ADAPTER.decode(reader)); break;
          case 11: builder.setEndCombineRoomMsg(EndCombineRoomMsg.ADAPTER.decode(reader)); break;
          case 12: builder.setUnlockUserInfoMsg(UnlockUserInfoMsg.ADAPTER.decode(reader)); break;
          case 13: builder.setLoadMusicInfoMsg(LoadMusicInfoMsg.ADAPTER.decode(reader)); break;
          case 14: builder.setSyncStatusMsg(CombineRoomSyncStatusMsg.ADAPTER.decode(reader)); break;
          case 15: builder.setAddMuicInfoMsg(AddMusicInfoMsg.ADAPTER.decode(reader)); break;
          case 16: builder.setDelMuicInfoMsg(DelMusicInfoMsg.ADAPTER.decode(reader)); break;
          case 17: builder.setReqChangeSceneMsg(ReqChangeSceneMsg.ADAPTER.decode(reader)); break;
          case 18: builder.setAgreeChangeSceneMsg(AgreeChangeSceneMsg.ADAPTER.decode(reader)); break;
          case 19: builder.setChoiceGameItemMsg(ChoiceGameItemMsg.ADAPTER.decode(reader)); break;
          case 20: builder.setStartGameMsg(StartGameMsg.ADAPTER.decode(reader)); break;
          case 21: builder.setChangeGamePanelMsg(ChangeGamePanelMsg.ADAPTER.decode(reader)); break;
          case 22: builder.setEndGameMsg(EndGameMsg.ADAPTER.decode(reader)); break;
          case 23: builder.setSyncStatusV2Msg(CombineRoomSyncStatusV2Msg.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CombineRoomMsg redact(CombineRoomMsg value) {
      Builder builder = value.newBuilder();
      if (builder.pickMsg != null) builder.pickMsg = PickMsg.ADAPTER.redact(builder.pickMsg);
      if (builder.endCombineRoomMsg != null) builder.endCombineRoomMsg = EndCombineRoomMsg.ADAPTER.redact(builder.endCombineRoomMsg);
      if (builder.unlockUserInfoMsg != null) builder.unlockUserInfoMsg = UnlockUserInfoMsg.ADAPTER.redact(builder.unlockUserInfoMsg);
      if (builder.loadMusicInfoMsg != null) builder.loadMusicInfoMsg = LoadMusicInfoMsg.ADAPTER.redact(builder.loadMusicInfoMsg);
      if (builder.syncStatusMsg != null) builder.syncStatusMsg = CombineRoomSyncStatusMsg.ADAPTER.redact(builder.syncStatusMsg);
      if (builder.addMuicInfoMsg != null) builder.addMuicInfoMsg = AddMusicInfoMsg.ADAPTER.redact(builder.addMuicInfoMsg);
      if (builder.delMuicInfoMsg != null) builder.delMuicInfoMsg = DelMusicInfoMsg.ADAPTER.redact(builder.delMuicInfoMsg);
      if (builder.reqChangeSceneMsg != null) builder.reqChangeSceneMsg = ReqChangeSceneMsg.ADAPTER.redact(builder.reqChangeSceneMsg);
      if (builder.agreeChangeSceneMsg != null) builder.agreeChangeSceneMsg = AgreeChangeSceneMsg.ADAPTER.redact(builder.agreeChangeSceneMsg);
      if (builder.choiceGameItemMsg != null) builder.choiceGameItemMsg = ChoiceGameItemMsg.ADAPTER.redact(builder.choiceGameItemMsg);
      if (builder.startGameMsg != null) builder.startGameMsg = StartGameMsg.ADAPTER.redact(builder.startGameMsg);
      if (builder.changeGamePanelMsg != null) builder.changeGamePanelMsg = ChangeGamePanelMsg.ADAPTER.redact(builder.changeGamePanelMsg);
      if (builder.endGameMsg != null) builder.endGameMsg = EndGameMsg.ADAPTER.redact(builder.endGameMsg);
      if (builder.syncStatusV2Msg != null) builder.syncStatusV2Msg = CombineRoomSyncStatusV2Msg.ADAPTER.redact(builder.syncStatusV2Msg);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
