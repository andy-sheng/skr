// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.zq.live.proto.GrabRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 特殊表情消息
 */
public final class SpecialEmojiMsg extends Message<SpecialEmojiMsg, SpecialEmojiMsg.Builder> {
  public static final ProtoAdapter<SpecialEmojiMsg> ADAPTER = new ProtoAdapter_SpecialEmojiMsg();

  private static final long serialVersionUID = 0L;

  public static final SpecialEmojiMsgType DEFAULT_EMOJITYPE = SpecialEmojiMsgType.SP_EMOJI_TYPE_UNKNOWN;

  public static final Integer DEFAULT_COUNT = 0;

  public static final String DEFAULT_EMOJIACTION = "";

  public static final Long DEFAULT_CONTINUEID = 0L;

  /**
   * 表情
   */
  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.GrabRoom.SpecialEmojiMsgType#ADAPTER"
  )
  private final SpecialEmojiMsgType emojiType;

  /**
   * 数量
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer count;

  /**
   * 动作
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  private final String emojiAction;

  /**
   * 用来标记属于哪一组连送，一般设置为 X1 的时间戳
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  private final Long continueId;

  public SpecialEmojiMsg(SpecialEmojiMsgType emojiType, Integer count, String emojiAction,
      Long continueId) {
    this(emojiType, count, emojiAction, continueId, ByteString.EMPTY);
  }

  public SpecialEmojiMsg(SpecialEmojiMsgType emojiType, Integer count, String emojiAction,
      Long continueId, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.emojiType = emojiType;
    this.count = count;
    this.emojiAction = emojiAction;
    this.continueId = continueId;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.emojiType = emojiType;
    builder.count = count;
    builder.emojiAction = emojiAction;
    builder.continueId = continueId;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SpecialEmojiMsg)) return false;
    SpecialEmojiMsg o = (SpecialEmojiMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(emojiType, o.emojiType)
        && Internal.equals(count, o.count)
        && Internal.equals(emojiAction, o.emojiAction)
        && Internal.equals(continueId, o.continueId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (emojiType != null ? emojiType.hashCode() : 0);
      result = result * 37 + (count != null ? count.hashCode() : 0);
      result = result * 37 + (emojiAction != null ? emojiAction.hashCode() : 0);
      result = result * 37 + (continueId != null ? continueId.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (emojiType != null) builder.append(", emojiType=").append(emojiType);
    if (count != null) builder.append(", count=").append(count);
    if (emojiAction != null) builder.append(", emojiAction=").append(emojiAction);
    if (continueId != null) builder.append(", continueId=").append(continueId);
    return builder.replace(0, 2, "SpecialEmojiMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return SpecialEmojiMsg.ADAPTER.encode(this);
  }

  public static final SpecialEmojiMsg parseFrom(byte[] data) throws IOException {
    SpecialEmojiMsg c = null;
       c = SpecialEmojiMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 表情
   */
  public SpecialEmojiMsgType getEmojiType() {
    if(emojiType==null){
        return new SpecialEmojiMsgType.Builder().build();
    }
    return emojiType;
  }

  /**
   * 数量
   */
  public Integer getCount() {
    if(count==null){
        return DEFAULT_COUNT;
    }
    return count;
  }

  /**
   * 动作
   */
  public String getEmojiAction() {
    if(emojiAction==null){
        return DEFAULT_EMOJIACTION;
    }
    return emojiAction;
  }

  /**
   * 用来标记属于哪一组连送，一般设置为 X1 的时间戳
   */
  public Long getContinueId() {
    if(continueId==null){
        return DEFAULT_CONTINUEID;
    }
    return continueId;
  }

  /**
   * 表情
   */
  public boolean hasEmojiType() {
    return emojiType!=null;
  }

  /**
   * 数量
   */
  public boolean hasCount() {
    return count!=null;
  }

  /**
   * 动作
   */
  public boolean hasEmojiAction() {
    return emojiAction!=null;
  }

  /**
   * 用来标记属于哪一组连送，一般设置为 X1 的时间戳
   */
  public boolean hasContinueId() {
    return continueId!=null;
  }

  public static final class Builder extends Message.Builder<SpecialEmojiMsg, Builder> {
    private SpecialEmojiMsgType emojiType;

    private Integer count;

    private String emojiAction;

    private Long continueId;

    public Builder() {
    }

    /**
     * 表情
     */
    public Builder setEmojiType(SpecialEmojiMsgType emojiType) {
      this.emojiType = emojiType;
      return this;
    }

    /**
     * 数量
     */
    public Builder setCount(Integer count) {
      this.count = count;
      return this;
    }

    /**
     * 动作
     */
    public Builder setEmojiAction(String emojiAction) {
      this.emojiAction = emojiAction;
      return this;
    }

    /**
     * 用来标记属于哪一组连送，一般设置为 X1 的时间戳
     */
    public Builder setContinueId(Long continueId) {
      this.continueId = continueId;
      return this;
    }

    @Override
    public SpecialEmojiMsg build() {
      return new SpecialEmojiMsg(emojiType, count, emojiAction, continueId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SpecialEmojiMsg extends ProtoAdapter<SpecialEmojiMsg> {
    public ProtoAdapter_SpecialEmojiMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, SpecialEmojiMsg.class);
    }

    @Override
    public int encodedSize(SpecialEmojiMsg value) {
      return SpecialEmojiMsgType.ADAPTER.encodedSizeWithTag(1, value.emojiType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.count)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.emojiAction)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.continueId)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SpecialEmojiMsg value) throws IOException {
      SpecialEmojiMsgType.ADAPTER.encodeWithTag(writer, 1, value.emojiType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.count);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.emojiAction);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.continueId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SpecialEmojiMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.setEmojiType(SpecialEmojiMsgType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.setCount(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setEmojiAction(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setContinueId(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SpecialEmojiMsg redact(SpecialEmojiMsg value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
