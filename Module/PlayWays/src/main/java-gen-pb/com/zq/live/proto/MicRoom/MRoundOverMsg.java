// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: mic_room.proto
package com.zq.live.proto.MicRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class MRoundOverMsg extends Message<MRoundOverMsg, MRoundOverMsg.Builder> {
  public static final ProtoAdapter<MRoundOverMsg> ADAPTER = new ProtoAdapter_MRoundOverMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ROUNDOVERTIMEMS = 0L;

  public static final EMRoundOverType DEFAULT_OVERTYPE = EMRoundOverType.EMROT_UNKNOWN;

  /**
   * 本轮次结束的毫秒时间戳
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long roundOverTimeMs;

  /**
   * 轮次结束类型(如果子轮次结束需解析currentRound，如果主轮次结束需解析nextRound)
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.MicRoom.EMRoundOverType#ADAPTER"
  )
  private final EMRoundOverType overType;

  /**
   * 当前结束轮次的信息
   */
  @WireField(
      tag = 3,
      adapter = "com.zq.live.proto.MicRoom.MRoundInfo#ADAPTER"
  )
  private final MRoundInfo currentRound;

  /**
   * 下个轮次的信息
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.MicRoom.MRoundInfo#ADAPTER"
  )
  private final MRoundInfo nextRound;

  public MRoundOverMsg(Long roundOverTimeMs, EMRoundOverType overType, MRoundInfo currentRound,
      MRoundInfo nextRound) {
    this(roundOverTimeMs, overType, currentRound, nextRound, ByteString.EMPTY);
  }

  public MRoundOverMsg(Long roundOverTimeMs, EMRoundOverType overType, MRoundInfo currentRound,
      MRoundInfo nextRound, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roundOverTimeMs = roundOverTimeMs;
    this.overType = overType;
    this.currentRound = currentRound;
    this.nextRound = nextRound;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roundOverTimeMs = roundOverTimeMs;
    builder.overType = overType;
    builder.currentRound = currentRound;
    builder.nextRound = nextRound;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MRoundOverMsg)) return false;
    MRoundOverMsg o = (MRoundOverMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roundOverTimeMs, o.roundOverTimeMs)
        && Internal.equals(overType, o.overType)
        && Internal.equals(currentRound, o.currentRound)
        && Internal.equals(nextRound, o.nextRound);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roundOverTimeMs != null ? roundOverTimeMs.hashCode() : 0);
      result = result * 37 + (overType != null ? overType.hashCode() : 0);
      result = result * 37 + (currentRound != null ? currentRound.hashCode() : 0);
      result = result * 37 + (nextRound != null ? nextRound.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roundOverTimeMs != null) builder.append(", roundOverTimeMs=").append(roundOverTimeMs);
    if (overType != null) builder.append(", overType=").append(overType);
    if (currentRound != null) builder.append(", currentRound=").append(currentRound);
    if (nextRound != null) builder.append(", nextRound=").append(nextRound);
    return builder.replace(0, 2, "MRoundOverMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MRoundOverMsg.ADAPTER.encode(this);
  }

  public static final MRoundOverMsg parseFrom(byte[] data) throws IOException {
    MRoundOverMsg c = null;
       c = MRoundOverMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 本轮次结束的毫秒时间戳
   */
  public Long getRoundOverTimeMs() {
    if(roundOverTimeMs==null){
        return DEFAULT_ROUNDOVERTIMEMS;
    }
    return roundOverTimeMs;
  }

  /**
   * 轮次结束类型(如果子轮次结束需解析currentRound，如果主轮次结束需解析nextRound)
   */
  public EMRoundOverType getOverType() {
    if(overType==null){
        return new EMRoundOverType.Builder().build();
    }
    return overType;
  }

  /**
   * 当前结束轮次的信息
   */
  public MRoundInfo getCurrentRound() {
    if(currentRound==null){
        return new MRoundInfo.Builder().build();
    }
    return currentRound;
  }

  /**
   * 下个轮次的信息
   */
  public MRoundInfo getNextRound() {
    if(nextRound==null){
        return new MRoundInfo.Builder().build();
    }
    return nextRound;
  }

  /**
   * 本轮次结束的毫秒时间戳
   */
  public boolean hasRoundOverTimeMs() {
    return roundOverTimeMs!=null;
  }

  /**
   * 轮次结束类型(如果子轮次结束需解析currentRound，如果主轮次结束需解析nextRound)
   */
  public boolean hasOverType() {
    return overType!=null;
  }

  /**
   * 当前结束轮次的信息
   */
  public boolean hasCurrentRound() {
    return currentRound!=null;
  }

  /**
   * 下个轮次的信息
   */
  public boolean hasNextRound() {
    return nextRound!=null;
  }

  public static final class Builder extends Message.Builder<MRoundOverMsg, Builder> {
    private Long roundOverTimeMs;

    private EMRoundOverType overType;

    private MRoundInfo currentRound;

    private MRoundInfo nextRound;

    public Builder() {
    }

    /**
     * 本轮次结束的毫秒时间戳
     */
    public Builder setRoundOverTimeMs(Long roundOverTimeMs) {
      this.roundOverTimeMs = roundOverTimeMs;
      return this;
    }

    /**
     * 轮次结束类型(如果子轮次结束需解析currentRound，如果主轮次结束需解析nextRound)
     */
    public Builder setOverType(EMRoundOverType overType) {
      this.overType = overType;
      return this;
    }

    /**
     * 当前结束轮次的信息
     */
    public Builder setCurrentRound(MRoundInfo currentRound) {
      this.currentRound = currentRound;
      return this;
    }

    /**
     * 下个轮次的信息
     */
    public Builder setNextRound(MRoundInfo nextRound) {
      this.nextRound = nextRound;
      return this;
    }

    @Override
    public MRoundOverMsg build() {
      return new MRoundOverMsg(roundOverTimeMs, overType, currentRound, nextRound, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MRoundOverMsg extends ProtoAdapter<MRoundOverMsg> {
    public ProtoAdapter_MRoundOverMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, MRoundOverMsg.class);
    }

    @Override
    public int encodedSize(MRoundOverMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.roundOverTimeMs)
          + EMRoundOverType.ADAPTER.encodedSizeWithTag(2, value.overType)
          + MRoundInfo.ADAPTER.encodedSizeWithTag(3, value.currentRound)
          + MRoundInfo.ADAPTER.encodedSizeWithTag(4, value.nextRound)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MRoundOverMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.roundOverTimeMs);
      EMRoundOverType.ADAPTER.encodeWithTag(writer, 2, value.overType);
      MRoundInfo.ADAPTER.encodeWithTag(writer, 3, value.currentRound);
      MRoundInfo.ADAPTER.encodeWithTag(writer, 4, value.nextRound);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MRoundOverMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoundOverTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: {
            try {
              builder.setOverType(EMRoundOverType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setCurrentRound(MRoundInfo.ADAPTER.decode(reader)); break;
          case 4: builder.setNextRound(MRoundInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MRoundOverMsg redact(MRoundOverMsg value) {
      Builder builder = value.newBuilder();
      if (builder.currentRound != null) builder.currentRound = MRoundInfo.ADAPTER.redact(builder.currentRound);
      if (builder.nextRound != null) builder.nextRound = MRoundInfo.ADAPTER.redact(builder.nextRound);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
