// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: race_room.proto
package com.zq.live.proto.RaceRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class RoundScoreInfo extends Message<RoundScoreInfo, RoundScoreInfo.Builder> {
  public static final ProtoAdapter<RoundScoreInfo> ADAPTER = new ProtoAdapter_RoundScoreInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_BLIGHTCNT = 0;

  public static final Boolean DEFAULT_ISESCAPE = false;

  public static final ERaceWinType DEFAULT_WINTYPE = ERaceWinType.RWT_UNKNOWN;

  /**
   * 爆灯数(投票数)
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer bLightCnt;

  /**
   * 是否逃跑
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean isEscape;

  /**
   * 胜负平等等
   */
  @WireField(
      tag = 3,
      adapter = "com.zq.live.proto.RaceRoom.ERaceWinType#ADAPTER"
  )
  private final ERaceWinType winType;

  public RoundScoreInfo(Integer bLightCnt, Boolean isEscape, ERaceWinType winType) {
    this(bLightCnt, isEscape, winType, ByteString.EMPTY);
  }

  public RoundScoreInfo(Integer bLightCnt, Boolean isEscape, ERaceWinType winType,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.bLightCnt = bLightCnt;
    this.isEscape = isEscape;
    this.winType = winType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.bLightCnt = bLightCnt;
    builder.isEscape = isEscape;
    builder.winType = winType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RoundScoreInfo)) return false;
    RoundScoreInfo o = (RoundScoreInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(bLightCnt, o.bLightCnt)
        && Internal.equals(isEscape, o.isEscape)
        && Internal.equals(winType, o.winType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (bLightCnt != null ? bLightCnt.hashCode() : 0);
      result = result * 37 + (isEscape != null ? isEscape.hashCode() : 0);
      result = result * 37 + (winType != null ? winType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (bLightCnt != null) builder.append(", bLightCnt=").append(bLightCnt);
    if (isEscape != null) builder.append(", isEscape=").append(isEscape);
    if (winType != null) builder.append(", winType=").append(winType);
    return builder.replace(0, 2, "RoundScoreInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RoundScoreInfo.ADAPTER.encode(this);
  }

  public static final RoundScoreInfo parseFrom(byte[] data) throws IOException {
    RoundScoreInfo c = null;
       c = RoundScoreInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 爆灯数(投票数)
   */
  public Integer getBLightCnt() {
    if(bLightCnt==null){
        return DEFAULT_BLIGHTCNT;
    }
    return bLightCnt;
  }

  /**
   * 是否逃跑
   */
  public Boolean getIsEscape() {
    if(isEscape==null){
        return DEFAULT_ISESCAPE;
    }
    return isEscape;
  }

  /**
   * 胜负平等等
   */
  public ERaceWinType getWinType() {
    if(winType==null){
        return new ERaceWinType.Builder().build();
    }
    return winType;
  }

  /**
   * 爆灯数(投票数)
   */
  public boolean hasBLightCnt() {
    return bLightCnt!=null;
  }

  /**
   * 是否逃跑
   */
  public boolean hasIsEscape() {
    return isEscape!=null;
  }

  /**
   * 胜负平等等
   */
  public boolean hasWinType() {
    return winType!=null;
  }

  public static final class Builder extends Message.Builder<RoundScoreInfo, Builder> {
    private Integer bLightCnt;

    private Boolean isEscape;

    private ERaceWinType winType;

    public Builder() {
    }

    /**
     * 爆灯数(投票数)
     */
    public Builder setBLightCnt(Integer bLightCnt) {
      this.bLightCnt = bLightCnt;
      return this;
    }

    /**
     * 是否逃跑
     */
    public Builder setIsEscape(Boolean isEscape) {
      this.isEscape = isEscape;
      return this;
    }

    /**
     * 胜负平等等
     */
    public Builder setWinType(ERaceWinType winType) {
      this.winType = winType;
      return this;
    }

    @Override
    public RoundScoreInfo build() {
      return new RoundScoreInfo(bLightCnt, isEscape, winType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RoundScoreInfo extends ProtoAdapter<RoundScoreInfo> {
    public ProtoAdapter_RoundScoreInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, RoundScoreInfo.class);
    }

    @Override
    public int encodedSize(RoundScoreInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.bLightCnt)
          + ProtoAdapter.BOOL.encodedSizeWithTag(2, value.isEscape)
          + ERaceWinType.ADAPTER.encodedSizeWithTag(3, value.winType)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RoundScoreInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.bLightCnt);
      ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.isEscape);
      ERaceWinType.ADAPTER.encodeWithTag(writer, 3, value.winType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RoundScoreInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setBLightCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setIsEscape(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: {
            try {
              builder.setWinType(ERaceWinType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RoundScoreInfo redact(RoundScoreInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
