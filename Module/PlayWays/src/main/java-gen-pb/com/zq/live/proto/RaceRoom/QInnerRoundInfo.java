// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: race_room.proto
package com.zq.live.proto.RaceRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * message RaceCommonMusic
 * {
 *    uint32 itemID           = 1; //音乐条目标识
 *    string itemName         = 2; //音乐条目名称
 *    string cover            = 3; //音乐条目封页图片
 *    string owner            = 4; //音乐条目所属（歌手）
 *    string lyric            = 5; //音乐条目对应歌词
 *    string ori              = 6; //原唱:origin
 *    string acc              = 7; //伴奏:accompany
 *    string midi             = 8; //音乐条目对应midi文件
 *    string zip              = 9; //资源压缩文件
 *    string rankBgm          = 10; //匹配玩法的伴奏
 *    uint32 beginMs          = 11; //beginTimeMs,匹配玩法的伴奏开始毫秒
 *    uint32 endMs            = 12; //endTimeMs,匹配玩法的伴奏结束毫秒
 *    string standIntro       = 13; //standIntro,擂台赛的导唱
 *    uint32 standIntroBeginT = 14; //standIntroBeginT,擂台赛导唱的开始毫秒
 *    uint32 standIntroEndT   = 15; //standIntroEndT,擂台赛导唱的结束毫秒
 *    uint32 totalMs          = 16; //totalTimeMs,匹配玩法伴奏总时长
 *    uint32 rankLrcBeginT    = 17; //rankLrcBeginT,匹配玩法第一句歌词开始时间,毫秒
 *    uint32 standLrcBeginT   = 18; //standLrcBeginT,擂台赛第一句歌词的开始毫秒
 *    uint32 standLrcEndT     = 19; //standLrcEndT,擂台赛歌词的结束毫秒
 *    bool isBlank            = 20; //isBlank,是否擂台赛的白板item
 *    string standLrc         = 21; //standLrc,擂台赛歌词URL
 *    string rankUserVoice    = 22; //rankUserVoice,匹配进入游戏前的背景音乐
 *    uint32 rankLrcEndT      = 23; //rankLrcEndT,匹配玩法最后一句歌词的结束时间,毫秒
 *    uint32 task             = 24; //任务等级，若为0，表示非任务歌曲
 *    uint32 standTotalMs     = 25; //擂台赛伴奏模式的时长
 * }
 */
public final class QInnerRoundInfo extends Message<QInnerRoundInfo, QInnerRoundInfo.Builder> {
  public static final ProtoAdapter<QInnerRoundInfo> ADAPTER = new ProtoAdapter_QInnerRoundInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final ERaceRoundOverReason DEFAULT_OVERREASON = ERaceRoundOverReason.ERROR_UNKNOWN;

  /**
   * 抢唱成功的玩家id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer userID;

  /**
   * 切换轮次原因
   */
  @WireField(
      tag = 6,
      adapter = "com.zq.live.proto.RaceRoom.ERaceRoundOverReason#ADAPTER"
  )
  private final ERaceRoundOverReason overReason;

  public QInnerRoundInfo(Integer userID, ERaceRoundOverReason overReason) {
    this(userID, overReason, ByteString.EMPTY);
  }

  public QInnerRoundInfo(Integer userID, ERaceRoundOverReason overReason,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.overReason = overReason;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.overReason = overReason;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof QInnerRoundInfo)) return false;
    QInnerRoundInfo o = (QInnerRoundInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(overReason, o.overReason);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (overReason != null ? overReason.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (overReason != null) builder.append(", overReason=").append(overReason);
    return builder.replace(0, 2, "QInnerRoundInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return QInnerRoundInfo.ADAPTER.encode(this);
  }

  public static final QInnerRoundInfo parseFrom(byte[] data) throws IOException {
    QInnerRoundInfo c = null;
       c = QInnerRoundInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 抢唱成功的玩家id
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 切换轮次原因
   */
  public ERaceRoundOverReason getOverReason() {
    if(overReason==null){
        return new ERaceRoundOverReason.Builder().build();
    }
    return overReason;
  }

  /**
   * 抢唱成功的玩家id
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 切换轮次原因
   */
  public boolean hasOverReason() {
    return overReason!=null;
  }

  public static final class Builder extends Message.Builder<QInnerRoundInfo, Builder> {
    private Integer userID;

    private ERaceRoundOverReason overReason;

    public Builder() {
    }

    /**
     * 抢唱成功的玩家id
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 切换轮次原因
     */
    public Builder setOverReason(ERaceRoundOverReason overReason) {
      this.overReason = overReason;
      return this;
    }

    @Override
    public QInnerRoundInfo build() {
      return new QInnerRoundInfo(userID, overReason, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_QInnerRoundInfo extends ProtoAdapter<QInnerRoundInfo> {
    public ProtoAdapter_QInnerRoundInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, QInnerRoundInfo.class);
    }

    @Override
    public int encodedSize(QInnerRoundInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ERaceRoundOverReason.ADAPTER.encodedSizeWithTag(6, value.overReason)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, QInnerRoundInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ERaceRoundOverReason.ADAPTER.encodeWithTag(writer, 6, value.overReason);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public QInnerRoundInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: {
            try {
              builder.setOverReason(ERaceRoundOverReason.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public QInnerRoundInfo redact(QInnerRoundInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
