// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: race_room.proto
package com.zq.live.proto.RaceRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class RGetSingDelay extends Message<RGetSingDelay, RGetSingDelay.Builder> {
  public static final ProtoAdapter<RGetSingDelay> ADAPTER = new ProtoAdapter_RGetSingDelay();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ROUNDNUM = 0;

  public static final Integer DEFAULT_DELAYTIMEMS = 0;

  /**
   * 轮次数
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roundNum;

  /**
   * 延迟时间（毫秒）
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer delayTimeMs;

  public RGetSingDelay(Integer roundNum, Integer delayTimeMs) {
    this(roundNum, delayTimeMs, ByteString.EMPTY);
  }

  public RGetSingDelay(Integer roundNum, Integer delayTimeMs, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roundNum = roundNum;
    this.delayTimeMs = delayTimeMs;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roundNum = roundNum;
    builder.delayTimeMs = delayTimeMs;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RGetSingDelay)) return false;
    RGetSingDelay o = (RGetSingDelay) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(roundNum, o.roundNum)
        && Internal.equals(delayTimeMs, o.delayTimeMs);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (roundNum != null ? roundNum.hashCode() : 0);
      result = result * 37 + (delayTimeMs != null ? delayTimeMs.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (roundNum != null) builder.append(", roundNum=").append(roundNum);
    if (delayTimeMs != null) builder.append(", delayTimeMs=").append(delayTimeMs);
    return builder.replace(0, 2, "RGetSingDelay{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RGetSingDelay.ADAPTER.encode(this);
  }

  public static final RGetSingDelay parseFrom(byte[] data) throws IOException {
    RGetSingDelay c = null;
       c = RGetSingDelay.ADAPTER.decode(data);
    return c;
  }

  /**
   * 轮次数
   */
  public Integer getRoundNum() {
    if(roundNum==null){
        return DEFAULT_ROUNDNUM;
    }
    return roundNum;
  }

  /**
   * 延迟时间（毫秒）
   */
  public Integer getDelayTimeMs() {
    if(delayTimeMs==null){
        return DEFAULT_DELAYTIMEMS;
    }
    return delayTimeMs;
  }

  /**
   * 轮次数
   */
  public boolean hasRoundNum() {
    return roundNum!=null;
  }

  /**
   * 延迟时间（毫秒）
   */
  public boolean hasDelayTimeMs() {
    return delayTimeMs!=null;
  }

  public static final class Builder extends Message.Builder<RGetSingDelay, Builder> {
    private Integer roundNum;

    private Integer delayTimeMs;

    public Builder() {
    }

    /**
     * 轮次数
     */
    public Builder setRoundNum(Integer roundNum) {
      this.roundNum = roundNum;
      return this;
    }

    /**
     * 延迟时间（毫秒）
     */
    public Builder setDelayTimeMs(Integer delayTimeMs) {
      this.delayTimeMs = delayTimeMs;
      return this;
    }

    @Override
    public RGetSingDelay build() {
      return new RGetSingDelay(roundNum, delayTimeMs, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RGetSingDelay extends ProtoAdapter<RGetSingDelay> {
    public ProtoAdapter_RGetSingDelay() {
      super(FieldEncoding.LENGTH_DELIMITED, RGetSingDelay.class);
    }

    @Override
    public int encodedSize(RGetSingDelay value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.roundNum)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.delayTimeMs)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RGetSingDelay value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.roundNum);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.delayTimeMs);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RGetSingDelay decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRoundNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setDelayTimeMs(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RGetSingDelay redact(RGetSingDelay value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
