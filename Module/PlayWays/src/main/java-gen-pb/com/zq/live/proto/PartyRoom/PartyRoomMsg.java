// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
 * --proto_path=./proto --java_out=./Module/PlayWays/src/main/java-gen-pb/ party_room.proto
 * 接唱房信令消息
 */
public final class PartyRoomMsg extends Message<PartyRoomMsg, PartyRoomMsg.Builder> {
  public static final ProtoAdapter<PartyRoomMsg> ADAPTER = new ProtoAdapter_PartyRoomMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_TIMEMS = 0L;

  public static final EPartyRoomMsgType DEFAULT_MSGTYPE = EPartyRoomMsgType.PRT_UNKNOWN;

  public static final Integer DEFAULT_ROOMID = 0;

  /**
   * 房间消息产生时间，单位毫秒
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long timeMs;

  /**
   * 消息类型
   */
  @WireField(
      tag = 2,
      adapter = "com.zq.live.proto.PartyRoom.EPartyRoomMsgType#ADAPTER"
  )
  private final EPartyRoomMsgType msgType;

  /**
   * 房间ID
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer roomID;

  /**
   * 加入游戏通知消息
   */
  @WireField(
      tag = 10,
      adapter = "com.zq.live.proto.PartyRoom.PJoinNoticeMsg#ADAPTER"
  )
  private final PJoinNoticeMsg pJoinNoticeMsg;

  /**
   * 修改公告
   */
  @WireField(
      tag = 11,
      adapter = "com.zq.live.proto.PartyRoom.PFixRoomNoticeMsg#ADAPTER"
  )
  private final PFixRoomNoticeMsg pFixRoomNoticeMsg;

  /**
   * 设置管理员
   */
  @WireField(
      tag = 12,
      adapter = "com.zq.live.proto.PartyRoom.PSetRoomAdminMsg#ADAPTER"
  )
  private final PSetRoomAdminMsg pSetRoomAdminMsg;

  /**
   * 全员禁麦、全员解除禁麦
   */
  @WireField(
      tag = 13,
      adapter = "com.zq.live.proto.PartyRoom.PSetAllMemberMicMsg#ADAPTER"
  )
  private final PSetAllMemberMicMsg pSetAllMemberMicMsg;

  /**
   * 用户开闭麦
   */
  @WireField(
      tag = 14,
      adapter = "com.zq.live.proto.PartyRoom.PSetUserMicMsg#ADAPTER"
  )
  private final PSetUserMicMsg pSetUserMicMsg;

  /**
   * 设置席位状态：关闭席位、打开席位
   */
  @WireField(
      tag = 15,
      adapter = "com.zq.live.proto.PartyRoom.PSetSeatStatusMsg#ADAPTER"
  )
  private final PSetSeatStatusMsg pSetSeatStatusMsg;

  /**
   * 申请嘉宾
   */
  @WireField(
      tag = 16,
      adapter = "com.zq.live.proto.PartyRoom.PApplyForGuest#ADAPTER"
  )
  private final PApplyForGuest pApplyForGuest;

  /**
   * 获得席位:上麦
   */
  @WireField(
      tag = 17,
      adapter = "com.zq.live.proto.PartyRoom.PGetSeatMsg#ADAPTER"
  )
  private final PGetSeatMsg pGetSeatMsg;

  /**
   * 还回席位:下麦
   */
  @WireField(
      tag = 18,
      adapter = "com.zq.live.proto.PartyRoom.PBackSeatMsg#ADAPTER"
  )
  private final PBackSeatMsg pBackSeatMsg;

  /**
   * 邀请用户
   */
  @WireField(
      tag = 19,
      adapter = "com.zq.live.proto.PartyRoom.PInviteUserMsg#ADAPTER"
  )
  private final PInviteUserMsg pInviteUserMsg;

  /**
   * 换座位
   */
  @WireField(
      tag = 20,
      adapter = "com.zq.live.proto.PartyRoom.PChangeSeatMsg#ADAPTER"
  )
  private final PChangeSeatMsg pChangeSeatMsg;

  /**
   * 踢人
   */
  @WireField(
      tag = 21,
      adapter = "com.zq.live.proto.PartyRoom.PKickoutUserMsg#ADAPTER"
  )
  private final PKickoutUserMsg pKickoutUserMsg;

  /**
   * 加载下个轮次
   */
  @WireField(
      tag = 22,
      adapter = "com.zq.live.proto.PartyRoom.PNextRoundMsg#ADAPTER"
  )
  private final PNextRoundMsg pNextRoundMsg;

  /**
   * 用户退出房间
   */
  @WireField(
      tag = 23,
      adapter = "com.zq.live.proto.PartyRoom.PExitGameMsg#ADAPTER"
  )
  private final PExitGameMsg pPExitGameMsg;

  /**
   * 同步状态
   */
  @WireField(
      tag = 24,
      adapter = "com.zq.live.proto.PartyRoom.PSyncMsg#ADAPTER"
  )
  private final PSyncMsg pSyncMsg;

  /**
   * 发送表情
   */
  @WireField(
      tag = 25,
      adapter = "com.zq.live.proto.PartyRoom.PDynamicEmojiMsg#ADAPTER"
  )
  private final PDynamicEmojiMsg pDynamicEmojiMsg;

  /**
   * 游戏结束
   */
  @WireField(
      tag = 26,
      adapter = "com.zq.live.proto.PartyRoom.PGameOverMsg#ADAPTER"
  )
  private final PGameOverMsg pGameOverMsg;

  /**
   * 修改房间主题
   */
  @WireField(
      tag = 27,
      adapter = "com.zq.live.proto.PartyRoom.PChangeRoomTopicMsg#ADAPTER"
  )
  private final PChangeRoomTopicMsg pChangeRoomTopicMsg;

  /**
   * 修改房间进入权限
   */
  @WireField(
      tag = 28,
      adapter = "com.zq.live.proto.PartyRoom.PChangeRoomEnterPermissionMsg#ADAPTER"
  )
  private final PChangeRoomEnterPermissionMsg pChangeRoomEnterPermissionMsg;

  /**
   * 更新人气值
   */
  @WireField(
      tag = 29,
      adapter = "com.zq.live.proto.PartyRoom.PUpdatePopularityMsg#ADAPTER"
  )
  private final PUpdatePopularityMsg pUpdatePopularityMsg;

  /**
   * 家族派对房游戏停止
   */
  @WireField(
      tag = 30,
      adapter = "com.zq.live.proto.PartyRoom.PClubGameStopMsg#ADAPTER"
  )
  private final PClubGameStopMsg pClubGameStopMsg;

  /**
   * 家族派对房游戏新增主持人
   */
  @WireField(
      tag = 31,
      adapter = "com.zq.live.proto.PartyRoom.PClubBecomeHostMsg#ADAPTER"
  )
  private final PClubBecomeHostMsg pClubBecomeHostMsg;

  /**
   * 家族派对房游戏移交主持人
   */
  @WireField(
      tag = 32,
      adapter = "com.zq.live.proto.PartyRoom.PClubChangeHostMsg#ADAPTER"
  )
  private final PClubChangeHostMsg pClubChangeHostMsg;

  /**
   * 邀请成为嘉宾
   */
  @WireField(
      tag = 33,
      adapter = "com.zq.live.proto.PartyRoom.PInviteBeGuestMsg#ADAPTER"
  )
  private final PInviteBeGuestMsg pInviteBeGuestMsg;

  /**
   * 邀请的响应
   */
  @WireField(
      tag = 34,
      adapter = "com.zq.live.proto.PartyRoom.PRspInviteBeGuestMsg#ADAPTER"
  )
  private final PRspInviteBeGuestMsg pRspInviteBeGuestMsg;

  /**
   * ktv暂停or开始信令
   */
  @WireField(
      tag = 35,
      adapter = "com.zq.live.proto.PartyRoom.PKTVStopMsg#ADAPTER"
  )
  private final PKTVStopMsg pKTVStopMsg;

  /**
   * 主持人下发抢答
   */
  @WireField(
      tag = 36,
      adapter = "com.zq.live.proto.PartyRoom.PBeginQuickAnswer#ADAPTER"
  )
  private final PBeginQuickAnswer pBeginQuickAnswer;

  /**
   * 嘉宾响应获得抢答
   */
  @WireField(
      tag = 37,
      adapter = "com.zq.live.proto.PartyRoom.PResponseQuickAnswer#ADAPTER"
  )
  private final PResponseQuickAnswer pResponseQuickAnswer;

  /**
   * 抢答结果
   */
  @WireField(
      tag = 38,
      adapter = "com.zq.live.proto.PartyRoom.PResultQuickAnswer#ADAPTER"
  )
  private final PResultQuickAnswer pResultQuickAnswer;

  /**
   * 主持人下发投票
   */
  @WireField(
      tag = 39,
      adapter = "com.zq.live.proto.PartyRoom.PBeginVote#ADAPTER"
  )
  private final PBeginVote pBeginVote;

  /**
   * 投票响应数
   */
  @WireField(
      tag = 40,
      adapter = "com.zq.live.proto.PartyRoom.PResponseVote#ADAPTER"
  )
  private final PResponseVote pResponseVote;

  /**
   * 投票结果
   */
  @WireField(
      tag = 41,
      adapter = "com.zq.live.proto.PartyRoom.PResultVote#ADAPTER"
  )
  private final PResultVote pResultVote;

  /**
   * 房间警告消息
   */
  @WireField(
      tag = 42,
      adapter = "com.zq.live.proto.PartyRoom.PRoomWarningMsg#ADAPTER"
  )
  private final PRoomWarningMsg pRoomWarningMsg;

  /**
   * 房间封禁消息
   */
  @WireField(
      tag = 43,
      adapter = "com.zq.live.proto.PartyRoom.PRoomLockedMsg#ADAPTER"
  )
  private final PRoomLockedMsg pRoomLockedMsg;

  /**
   * 主持人下发惩罚
   */
  @WireField(
      tag = 44,
      adapter = "com.zq.live.proto.PartyRoom.PBeginPunish#ADAPTER"
  )
  private final PBeginPunish pBeginPunish;

  /**
   * 改变上麦方式
   */
  @WireField(
      tag = 45,
      adapter = "com.zq.live.proto.PartyRoom.PChangeGetSeatMode#ADAPTER"
  )
  private final PChangeGetSeatMode pChangeGetSeatMode;

  public PartyRoomMsg(Long timeMs, EPartyRoomMsgType msgType, Integer roomID,
      PJoinNoticeMsg pJoinNoticeMsg, PFixRoomNoticeMsg pFixRoomNoticeMsg,
      PSetRoomAdminMsg pSetRoomAdminMsg, PSetAllMemberMicMsg pSetAllMemberMicMsg,
      PSetUserMicMsg pSetUserMicMsg, PSetSeatStatusMsg pSetSeatStatusMsg,
      PApplyForGuest pApplyForGuest, PGetSeatMsg pGetSeatMsg, PBackSeatMsg pBackSeatMsg,
      PInviteUserMsg pInviteUserMsg, PChangeSeatMsg pChangeSeatMsg, PKickoutUserMsg pKickoutUserMsg,
      PNextRoundMsg pNextRoundMsg, PExitGameMsg pPExitGameMsg, PSyncMsg pSyncMsg,
      PDynamicEmojiMsg pDynamicEmojiMsg, PGameOverMsg pGameOverMsg,
      PChangeRoomTopicMsg pChangeRoomTopicMsg,
      PChangeRoomEnterPermissionMsg pChangeRoomEnterPermissionMsg,
      PUpdatePopularityMsg pUpdatePopularityMsg, PClubGameStopMsg pClubGameStopMsg,
      PClubBecomeHostMsg pClubBecomeHostMsg, PClubChangeHostMsg pClubChangeHostMsg,
      PInviteBeGuestMsg pInviteBeGuestMsg, PRspInviteBeGuestMsg pRspInviteBeGuestMsg,
      PKTVStopMsg pKTVStopMsg, PBeginQuickAnswer pBeginQuickAnswer,
      PResponseQuickAnswer pResponseQuickAnswer, PResultQuickAnswer pResultQuickAnswer,
      PBeginVote pBeginVote, PResponseVote pResponseVote, PResultVote pResultVote,
      PRoomWarningMsg pRoomWarningMsg, PRoomLockedMsg pRoomLockedMsg, PBeginPunish pBeginPunish,
      PChangeGetSeatMode pChangeGetSeatMode) {
    this(timeMs, msgType, roomID, pJoinNoticeMsg, pFixRoomNoticeMsg, pSetRoomAdminMsg, pSetAllMemberMicMsg, pSetUserMicMsg, pSetSeatStatusMsg, pApplyForGuest, pGetSeatMsg, pBackSeatMsg, pInviteUserMsg, pChangeSeatMsg, pKickoutUserMsg, pNextRoundMsg, pPExitGameMsg, pSyncMsg, pDynamicEmojiMsg, pGameOverMsg, pChangeRoomTopicMsg, pChangeRoomEnterPermissionMsg, pUpdatePopularityMsg, pClubGameStopMsg, pClubBecomeHostMsg, pClubChangeHostMsg, pInviteBeGuestMsg, pRspInviteBeGuestMsg, pKTVStopMsg, pBeginQuickAnswer, pResponseQuickAnswer, pResultQuickAnswer, pBeginVote, pResponseVote, pResultVote, pRoomWarningMsg, pRoomLockedMsg, pBeginPunish, pChangeGetSeatMode, ByteString.EMPTY);
  }

  public PartyRoomMsg(Long timeMs, EPartyRoomMsgType msgType, Integer roomID,
      PJoinNoticeMsg pJoinNoticeMsg, PFixRoomNoticeMsg pFixRoomNoticeMsg,
      PSetRoomAdminMsg pSetRoomAdminMsg, PSetAllMemberMicMsg pSetAllMemberMicMsg,
      PSetUserMicMsg pSetUserMicMsg, PSetSeatStatusMsg pSetSeatStatusMsg,
      PApplyForGuest pApplyForGuest, PGetSeatMsg pGetSeatMsg, PBackSeatMsg pBackSeatMsg,
      PInviteUserMsg pInviteUserMsg, PChangeSeatMsg pChangeSeatMsg, PKickoutUserMsg pKickoutUserMsg,
      PNextRoundMsg pNextRoundMsg, PExitGameMsg pPExitGameMsg, PSyncMsg pSyncMsg,
      PDynamicEmojiMsg pDynamicEmojiMsg, PGameOverMsg pGameOverMsg,
      PChangeRoomTopicMsg pChangeRoomTopicMsg,
      PChangeRoomEnterPermissionMsg pChangeRoomEnterPermissionMsg,
      PUpdatePopularityMsg pUpdatePopularityMsg, PClubGameStopMsg pClubGameStopMsg,
      PClubBecomeHostMsg pClubBecomeHostMsg, PClubChangeHostMsg pClubChangeHostMsg,
      PInviteBeGuestMsg pInviteBeGuestMsg, PRspInviteBeGuestMsg pRspInviteBeGuestMsg,
      PKTVStopMsg pKTVStopMsg, PBeginQuickAnswer pBeginQuickAnswer,
      PResponseQuickAnswer pResponseQuickAnswer, PResultQuickAnswer pResultQuickAnswer,
      PBeginVote pBeginVote, PResponseVote pResponseVote, PResultVote pResultVote,
      PRoomWarningMsg pRoomWarningMsg, PRoomLockedMsg pRoomLockedMsg, PBeginPunish pBeginPunish,
      PChangeGetSeatMode pChangeGetSeatMode, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.timeMs = timeMs;
    this.msgType = msgType;
    this.roomID = roomID;
    this.pJoinNoticeMsg = pJoinNoticeMsg;
    this.pFixRoomNoticeMsg = pFixRoomNoticeMsg;
    this.pSetRoomAdminMsg = pSetRoomAdminMsg;
    this.pSetAllMemberMicMsg = pSetAllMemberMicMsg;
    this.pSetUserMicMsg = pSetUserMicMsg;
    this.pSetSeatStatusMsg = pSetSeatStatusMsg;
    this.pApplyForGuest = pApplyForGuest;
    this.pGetSeatMsg = pGetSeatMsg;
    this.pBackSeatMsg = pBackSeatMsg;
    this.pInviteUserMsg = pInviteUserMsg;
    this.pChangeSeatMsg = pChangeSeatMsg;
    this.pKickoutUserMsg = pKickoutUserMsg;
    this.pNextRoundMsg = pNextRoundMsg;
    this.pPExitGameMsg = pPExitGameMsg;
    this.pSyncMsg = pSyncMsg;
    this.pDynamicEmojiMsg = pDynamicEmojiMsg;
    this.pGameOverMsg = pGameOverMsg;
    this.pChangeRoomTopicMsg = pChangeRoomTopicMsg;
    this.pChangeRoomEnterPermissionMsg = pChangeRoomEnterPermissionMsg;
    this.pUpdatePopularityMsg = pUpdatePopularityMsg;
    this.pClubGameStopMsg = pClubGameStopMsg;
    this.pClubBecomeHostMsg = pClubBecomeHostMsg;
    this.pClubChangeHostMsg = pClubChangeHostMsg;
    this.pInviteBeGuestMsg = pInviteBeGuestMsg;
    this.pRspInviteBeGuestMsg = pRspInviteBeGuestMsg;
    this.pKTVStopMsg = pKTVStopMsg;
    this.pBeginQuickAnswer = pBeginQuickAnswer;
    this.pResponseQuickAnswer = pResponseQuickAnswer;
    this.pResultQuickAnswer = pResultQuickAnswer;
    this.pBeginVote = pBeginVote;
    this.pResponseVote = pResponseVote;
    this.pResultVote = pResultVote;
    this.pRoomWarningMsg = pRoomWarningMsg;
    this.pRoomLockedMsg = pRoomLockedMsg;
    this.pBeginPunish = pBeginPunish;
    this.pChangeGetSeatMode = pChangeGetSeatMode;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.timeMs = timeMs;
    builder.msgType = msgType;
    builder.roomID = roomID;
    builder.pJoinNoticeMsg = pJoinNoticeMsg;
    builder.pFixRoomNoticeMsg = pFixRoomNoticeMsg;
    builder.pSetRoomAdminMsg = pSetRoomAdminMsg;
    builder.pSetAllMemberMicMsg = pSetAllMemberMicMsg;
    builder.pSetUserMicMsg = pSetUserMicMsg;
    builder.pSetSeatStatusMsg = pSetSeatStatusMsg;
    builder.pApplyForGuest = pApplyForGuest;
    builder.pGetSeatMsg = pGetSeatMsg;
    builder.pBackSeatMsg = pBackSeatMsg;
    builder.pInviteUserMsg = pInviteUserMsg;
    builder.pChangeSeatMsg = pChangeSeatMsg;
    builder.pKickoutUserMsg = pKickoutUserMsg;
    builder.pNextRoundMsg = pNextRoundMsg;
    builder.pPExitGameMsg = pPExitGameMsg;
    builder.pSyncMsg = pSyncMsg;
    builder.pDynamicEmojiMsg = pDynamicEmojiMsg;
    builder.pGameOverMsg = pGameOverMsg;
    builder.pChangeRoomTopicMsg = pChangeRoomTopicMsg;
    builder.pChangeRoomEnterPermissionMsg = pChangeRoomEnterPermissionMsg;
    builder.pUpdatePopularityMsg = pUpdatePopularityMsg;
    builder.pClubGameStopMsg = pClubGameStopMsg;
    builder.pClubBecomeHostMsg = pClubBecomeHostMsg;
    builder.pClubChangeHostMsg = pClubChangeHostMsg;
    builder.pInviteBeGuestMsg = pInviteBeGuestMsg;
    builder.pRspInviteBeGuestMsg = pRspInviteBeGuestMsg;
    builder.pKTVStopMsg = pKTVStopMsg;
    builder.pBeginQuickAnswer = pBeginQuickAnswer;
    builder.pResponseQuickAnswer = pResponseQuickAnswer;
    builder.pResultQuickAnswer = pResultQuickAnswer;
    builder.pBeginVote = pBeginVote;
    builder.pResponseVote = pResponseVote;
    builder.pResultVote = pResultVote;
    builder.pRoomWarningMsg = pRoomWarningMsg;
    builder.pRoomLockedMsg = pRoomLockedMsg;
    builder.pBeginPunish = pBeginPunish;
    builder.pChangeGetSeatMode = pChangeGetSeatMode;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PartyRoomMsg)) return false;
    PartyRoomMsg o = (PartyRoomMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(timeMs, o.timeMs)
        && Internal.equals(msgType, o.msgType)
        && Internal.equals(roomID, o.roomID)
        && Internal.equals(pJoinNoticeMsg, o.pJoinNoticeMsg)
        && Internal.equals(pFixRoomNoticeMsg, o.pFixRoomNoticeMsg)
        && Internal.equals(pSetRoomAdminMsg, o.pSetRoomAdminMsg)
        && Internal.equals(pSetAllMemberMicMsg, o.pSetAllMemberMicMsg)
        && Internal.equals(pSetUserMicMsg, o.pSetUserMicMsg)
        && Internal.equals(pSetSeatStatusMsg, o.pSetSeatStatusMsg)
        && Internal.equals(pApplyForGuest, o.pApplyForGuest)
        && Internal.equals(pGetSeatMsg, o.pGetSeatMsg)
        && Internal.equals(pBackSeatMsg, o.pBackSeatMsg)
        && Internal.equals(pInviteUserMsg, o.pInviteUserMsg)
        && Internal.equals(pChangeSeatMsg, o.pChangeSeatMsg)
        && Internal.equals(pKickoutUserMsg, o.pKickoutUserMsg)
        && Internal.equals(pNextRoundMsg, o.pNextRoundMsg)
        && Internal.equals(pPExitGameMsg, o.pPExitGameMsg)
        && Internal.equals(pSyncMsg, o.pSyncMsg)
        && Internal.equals(pDynamicEmojiMsg, o.pDynamicEmojiMsg)
        && Internal.equals(pGameOverMsg, o.pGameOverMsg)
        && Internal.equals(pChangeRoomTopicMsg, o.pChangeRoomTopicMsg)
        && Internal.equals(pChangeRoomEnterPermissionMsg, o.pChangeRoomEnterPermissionMsg)
        && Internal.equals(pUpdatePopularityMsg, o.pUpdatePopularityMsg)
        && Internal.equals(pClubGameStopMsg, o.pClubGameStopMsg)
        && Internal.equals(pClubBecomeHostMsg, o.pClubBecomeHostMsg)
        && Internal.equals(pClubChangeHostMsg, o.pClubChangeHostMsg)
        && Internal.equals(pInviteBeGuestMsg, o.pInviteBeGuestMsg)
        && Internal.equals(pRspInviteBeGuestMsg, o.pRspInviteBeGuestMsg)
        && Internal.equals(pKTVStopMsg, o.pKTVStopMsg)
        && Internal.equals(pBeginQuickAnswer, o.pBeginQuickAnswer)
        && Internal.equals(pResponseQuickAnswer, o.pResponseQuickAnswer)
        && Internal.equals(pResultQuickAnswer, o.pResultQuickAnswer)
        && Internal.equals(pBeginVote, o.pBeginVote)
        && Internal.equals(pResponseVote, o.pResponseVote)
        && Internal.equals(pResultVote, o.pResultVote)
        && Internal.equals(pRoomWarningMsg, o.pRoomWarningMsg)
        && Internal.equals(pRoomLockedMsg, o.pRoomLockedMsg)
        && Internal.equals(pBeginPunish, o.pBeginPunish)
        && Internal.equals(pChangeGetSeatMode, o.pChangeGetSeatMode);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (timeMs != null ? timeMs.hashCode() : 0);
      result = result * 37 + (msgType != null ? msgType.hashCode() : 0);
      result = result * 37 + (roomID != null ? roomID.hashCode() : 0);
      result = result * 37 + (pJoinNoticeMsg != null ? pJoinNoticeMsg.hashCode() : 0);
      result = result * 37 + (pFixRoomNoticeMsg != null ? pFixRoomNoticeMsg.hashCode() : 0);
      result = result * 37 + (pSetRoomAdminMsg != null ? pSetRoomAdminMsg.hashCode() : 0);
      result = result * 37 + (pSetAllMemberMicMsg != null ? pSetAllMemberMicMsg.hashCode() : 0);
      result = result * 37 + (pSetUserMicMsg != null ? pSetUserMicMsg.hashCode() : 0);
      result = result * 37 + (pSetSeatStatusMsg != null ? pSetSeatStatusMsg.hashCode() : 0);
      result = result * 37 + (pApplyForGuest != null ? pApplyForGuest.hashCode() : 0);
      result = result * 37 + (pGetSeatMsg != null ? pGetSeatMsg.hashCode() : 0);
      result = result * 37 + (pBackSeatMsg != null ? pBackSeatMsg.hashCode() : 0);
      result = result * 37 + (pInviteUserMsg != null ? pInviteUserMsg.hashCode() : 0);
      result = result * 37 + (pChangeSeatMsg != null ? pChangeSeatMsg.hashCode() : 0);
      result = result * 37 + (pKickoutUserMsg != null ? pKickoutUserMsg.hashCode() : 0);
      result = result * 37 + (pNextRoundMsg != null ? pNextRoundMsg.hashCode() : 0);
      result = result * 37 + (pPExitGameMsg != null ? pPExitGameMsg.hashCode() : 0);
      result = result * 37 + (pSyncMsg != null ? pSyncMsg.hashCode() : 0);
      result = result * 37 + (pDynamicEmojiMsg != null ? pDynamicEmojiMsg.hashCode() : 0);
      result = result * 37 + (pGameOverMsg != null ? pGameOverMsg.hashCode() : 0);
      result = result * 37 + (pChangeRoomTopicMsg != null ? pChangeRoomTopicMsg.hashCode() : 0);
      result = result * 37 + (pChangeRoomEnterPermissionMsg != null ? pChangeRoomEnterPermissionMsg.hashCode() : 0);
      result = result * 37 + (pUpdatePopularityMsg != null ? pUpdatePopularityMsg.hashCode() : 0);
      result = result * 37 + (pClubGameStopMsg != null ? pClubGameStopMsg.hashCode() : 0);
      result = result * 37 + (pClubBecomeHostMsg != null ? pClubBecomeHostMsg.hashCode() : 0);
      result = result * 37 + (pClubChangeHostMsg != null ? pClubChangeHostMsg.hashCode() : 0);
      result = result * 37 + (pInviteBeGuestMsg != null ? pInviteBeGuestMsg.hashCode() : 0);
      result = result * 37 + (pRspInviteBeGuestMsg != null ? pRspInviteBeGuestMsg.hashCode() : 0);
      result = result * 37 + (pKTVStopMsg != null ? pKTVStopMsg.hashCode() : 0);
      result = result * 37 + (pBeginQuickAnswer != null ? pBeginQuickAnswer.hashCode() : 0);
      result = result * 37 + (pResponseQuickAnswer != null ? pResponseQuickAnswer.hashCode() : 0);
      result = result * 37 + (pResultQuickAnswer != null ? pResultQuickAnswer.hashCode() : 0);
      result = result * 37 + (pBeginVote != null ? pBeginVote.hashCode() : 0);
      result = result * 37 + (pResponseVote != null ? pResponseVote.hashCode() : 0);
      result = result * 37 + (pResultVote != null ? pResultVote.hashCode() : 0);
      result = result * 37 + (pRoomWarningMsg != null ? pRoomWarningMsg.hashCode() : 0);
      result = result * 37 + (pRoomLockedMsg != null ? pRoomLockedMsg.hashCode() : 0);
      result = result * 37 + (pBeginPunish != null ? pBeginPunish.hashCode() : 0);
      result = result * 37 + (pChangeGetSeatMode != null ? pChangeGetSeatMode.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (timeMs != null) builder.append(", timeMs=").append(timeMs);
    if (msgType != null) builder.append(", msgType=").append(msgType);
    if (roomID != null) builder.append(", roomID=").append(roomID);
    if (pJoinNoticeMsg != null) builder.append(", pJoinNoticeMsg=").append(pJoinNoticeMsg);
    if (pFixRoomNoticeMsg != null) builder.append(", pFixRoomNoticeMsg=").append(pFixRoomNoticeMsg);
    if (pSetRoomAdminMsg != null) builder.append(", pSetRoomAdminMsg=").append(pSetRoomAdminMsg);
    if (pSetAllMemberMicMsg != null) builder.append(", pSetAllMemberMicMsg=").append(pSetAllMemberMicMsg);
    if (pSetUserMicMsg != null) builder.append(", pSetUserMicMsg=").append(pSetUserMicMsg);
    if (pSetSeatStatusMsg != null) builder.append(", pSetSeatStatusMsg=").append(pSetSeatStatusMsg);
    if (pApplyForGuest != null) builder.append(", pApplyForGuest=").append(pApplyForGuest);
    if (pGetSeatMsg != null) builder.append(", pGetSeatMsg=").append(pGetSeatMsg);
    if (pBackSeatMsg != null) builder.append(", pBackSeatMsg=").append(pBackSeatMsg);
    if (pInviteUserMsg != null) builder.append(", pInviteUserMsg=").append(pInviteUserMsg);
    if (pChangeSeatMsg != null) builder.append(", pChangeSeatMsg=").append(pChangeSeatMsg);
    if (pKickoutUserMsg != null) builder.append(", pKickoutUserMsg=").append(pKickoutUserMsg);
    if (pNextRoundMsg != null) builder.append(", pNextRoundMsg=").append(pNextRoundMsg);
    if (pPExitGameMsg != null) builder.append(", pPExitGameMsg=").append(pPExitGameMsg);
    if (pSyncMsg != null) builder.append(", pSyncMsg=").append(pSyncMsg);
    if (pDynamicEmojiMsg != null) builder.append(", pDynamicEmojiMsg=").append(pDynamicEmojiMsg);
    if (pGameOverMsg != null) builder.append(", pGameOverMsg=").append(pGameOverMsg);
    if (pChangeRoomTopicMsg != null) builder.append(", pChangeRoomTopicMsg=").append(pChangeRoomTopicMsg);
    if (pChangeRoomEnterPermissionMsg != null) builder.append(", pChangeRoomEnterPermissionMsg=").append(pChangeRoomEnterPermissionMsg);
    if (pUpdatePopularityMsg != null) builder.append(", pUpdatePopularityMsg=").append(pUpdatePopularityMsg);
    if (pClubGameStopMsg != null) builder.append(", pClubGameStopMsg=").append(pClubGameStopMsg);
    if (pClubBecomeHostMsg != null) builder.append(", pClubBecomeHostMsg=").append(pClubBecomeHostMsg);
    if (pClubChangeHostMsg != null) builder.append(", pClubChangeHostMsg=").append(pClubChangeHostMsg);
    if (pInviteBeGuestMsg != null) builder.append(", pInviteBeGuestMsg=").append(pInviteBeGuestMsg);
    if (pRspInviteBeGuestMsg != null) builder.append(", pRspInviteBeGuestMsg=").append(pRspInviteBeGuestMsg);
    if (pKTVStopMsg != null) builder.append(", pKTVStopMsg=").append(pKTVStopMsg);
    if (pBeginQuickAnswer != null) builder.append(", pBeginQuickAnswer=").append(pBeginQuickAnswer);
    if (pResponseQuickAnswer != null) builder.append(", pResponseQuickAnswer=").append(pResponseQuickAnswer);
    if (pResultQuickAnswer != null) builder.append(", pResultQuickAnswer=").append(pResultQuickAnswer);
    if (pBeginVote != null) builder.append(", pBeginVote=").append(pBeginVote);
    if (pResponseVote != null) builder.append(", pResponseVote=").append(pResponseVote);
    if (pResultVote != null) builder.append(", pResultVote=").append(pResultVote);
    if (pRoomWarningMsg != null) builder.append(", pRoomWarningMsg=").append(pRoomWarningMsg);
    if (pRoomLockedMsg != null) builder.append(", pRoomLockedMsg=").append(pRoomLockedMsg);
    if (pBeginPunish != null) builder.append(", pBeginPunish=").append(pBeginPunish);
    if (pChangeGetSeatMode != null) builder.append(", pChangeGetSeatMode=").append(pChangeGetSeatMode);
    return builder.replace(0, 2, "PartyRoomMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PartyRoomMsg.ADAPTER.encode(this);
  }

  public static final PartyRoomMsg parseFrom(byte[] data) throws IOException {
    PartyRoomMsg c = null;
       c = PartyRoomMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 房间消息产生时间，单位毫秒
   */
  public Long getTimeMs() {
    if(timeMs==null){
        return DEFAULT_TIMEMS;
    }
    return timeMs;
  }

  /**
   * 消息类型
   */
  public EPartyRoomMsgType getMsgType() {
    if(msgType==null){
        return new EPartyRoomMsgType.Builder().build();
    }
    return msgType;
  }

  /**
   * 房间ID
   */
  public Integer getRoomID() {
    if(roomID==null){
        return DEFAULT_ROOMID;
    }
    return roomID;
  }

  /**
   * 加入游戏通知消息
   */
  public PJoinNoticeMsg getPJoinNoticeMsg() {
    if(pJoinNoticeMsg==null){
        return new PJoinNoticeMsg.Builder().build();
    }
    return pJoinNoticeMsg;
  }

  /**
   * 修改公告
   */
  public PFixRoomNoticeMsg getPFixRoomNoticeMsg() {
    if(pFixRoomNoticeMsg==null){
        return new PFixRoomNoticeMsg.Builder().build();
    }
    return pFixRoomNoticeMsg;
  }

  /**
   * 设置管理员
   */
  public PSetRoomAdminMsg getPSetRoomAdminMsg() {
    if(pSetRoomAdminMsg==null){
        return new PSetRoomAdminMsg.Builder().build();
    }
    return pSetRoomAdminMsg;
  }

  /**
   * 全员禁麦、全员解除禁麦
   */
  public PSetAllMemberMicMsg getPSetAllMemberMicMsg() {
    if(pSetAllMemberMicMsg==null){
        return new PSetAllMemberMicMsg.Builder().build();
    }
    return pSetAllMemberMicMsg;
  }

  /**
   * 用户开闭麦
   */
  public PSetUserMicMsg getPSetUserMicMsg() {
    if(pSetUserMicMsg==null){
        return new PSetUserMicMsg.Builder().build();
    }
    return pSetUserMicMsg;
  }

  /**
   * 设置席位状态：关闭席位、打开席位
   */
  public PSetSeatStatusMsg getPSetSeatStatusMsg() {
    if(pSetSeatStatusMsg==null){
        return new PSetSeatStatusMsg.Builder().build();
    }
    return pSetSeatStatusMsg;
  }

  /**
   * 申请嘉宾
   */
  public PApplyForGuest getPApplyForGuest() {
    if(pApplyForGuest==null){
        return new PApplyForGuest.Builder().build();
    }
    return pApplyForGuest;
  }

  /**
   * 获得席位:上麦
   */
  public PGetSeatMsg getPGetSeatMsg() {
    if(pGetSeatMsg==null){
        return new PGetSeatMsg.Builder().build();
    }
    return pGetSeatMsg;
  }

  /**
   * 还回席位:下麦
   */
  public PBackSeatMsg getPBackSeatMsg() {
    if(pBackSeatMsg==null){
        return new PBackSeatMsg.Builder().build();
    }
    return pBackSeatMsg;
  }

  /**
   * 邀请用户
   */
  public PInviteUserMsg getPInviteUserMsg() {
    if(pInviteUserMsg==null){
        return new PInviteUserMsg.Builder().build();
    }
    return pInviteUserMsg;
  }

  /**
   * 换座位
   */
  public PChangeSeatMsg getPChangeSeatMsg() {
    if(pChangeSeatMsg==null){
        return new PChangeSeatMsg.Builder().build();
    }
    return pChangeSeatMsg;
  }

  /**
   * 踢人
   */
  public PKickoutUserMsg getPKickoutUserMsg() {
    if(pKickoutUserMsg==null){
        return new PKickoutUserMsg.Builder().build();
    }
    return pKickoutUserMsg;
  }

  /**
   * 加载下个轮次
   */
  public PNextRoundMsg getPNextRoundMsg() {
    if(pNextRoundMsg==null){
        return new PNextRoundMsg.Builder().build();
    }
    return pNextRoundMsg;
  }

  /**
   * 用户退出房间
   */
  public PExitGameMsg getPPExitGameMsg() {
    if(pPExitGameMsg==null){
        return new PExitGameMsg.Builder().build();
    }
    return pPExitGameMsg;
  }

  /**
   * 同步状态
   */
  public PSyncMsg getPSyncMsg() {
    if(pSyncMsg==null){
        return new PSyncMsg.Builder().build();
    }
    return pSyncMsg;
  }

  /**
   * 发送表情
   */
  public PDynamicEmojiMsg getPDynamicEmojiMsg() {
    if(pDynamicEmojiMsg==null){
        return new PDynamicEmojiMsg.Builder().build();
    }
    return pDynamicEmojiMsg;
  }

  /**
   * 游戏结束
   */
  public PGameOverMsg getPGameOverMsg() {
    if(pGameOverMsg==null){
        return new PGameOverMsg.Builder().build();
    }
    return pGameOverMsg;
  }

  /**
   * 修改房间主题
   */
  public PChangeRoomTopicMsg getPChangeRoomTopicMsg() {
    if(pChangeRoomTopicMsg==null){
        return new PChangeRoomTopicMsg.Builder().build();
    }
    return pChangeRoomTopicMsg;
  }

  /**
   * 修改房间进入权限
   */
  public PChangeRoomEnterPermissionMsg getPChangeRoomEnterPermissionMsg() {
    if(pChangeRoomEnterPermissionMsg==null){
        return new PChangeRoomEnterPermissionMsg.Builder().build();
    }
    return pChangeRoomEnterPermissionMsg;
  }

  /**
   * 更新人气值
   */
  public PUpdatePopularityMsg getPUpdatePopularityMsg() {
    if(pUpdatePopularityMsg==null){
        return new PUpdatePopularityMsg.Builder().build();
    }
    return pUpdatePopularityMsg;
  }

  /**
   * 家族派对房游戏停止
   */
  public PClubGameStopMsg getPClubGameStopMsg() {
    if(pClubGameStopMsg==null){
        return new PClubGameStopMsg.Builder().build();
    }
    return pClubGameStopMsg;
  }

  /**
   * 家族派对房游戏新增主持人
   */
  public PClubBecomeHostMsg getPClubBecomeHostMsg() {
    if(pClubBecomeHostMsg==null){
        return new PClubBecomeHostMsg.Builder().build();
    }
    return pClubBecomeHostMsg;
  }

  /**
   * 家族派对房游戏移交主持人
   */
  public PClubChangeHostMsg getPClubChangeHostMsg() {
    if(pClubChangeHostMsg==null){
        return new PClubChangeHostMsg.Builder().build();
    }
    return pClubChangeHostMsg;
  }

  /**
   * 邀请成为嘉宾
   */
  public PInviteBeGuestMsg getPInviteBeGuestMsg() {
    if(pInviteBeGuestMsg==null){
        return new PInviteBeGuestMsg.Builder().build();
    }
    return pInviteBeGuestMsg;
  }

  /**
   * 邀请的响应
   */
  public PRspInviteBeGuestMsg getPRspInviteBeGuestMsg() {
    if(pRspInviteBeGuestMsg==null){
        return new PRspInviteBeGuestMsg.Builder().build();
    }
    return pRspInviteBeGuestMsg;
  }

  /**
   * ktv暂停or开始信令
   */
  public PKTVStopMsg getPKTVStopMsg() {
    if(pKTVStopMsg==null){
        return new PKTVStopMsg.Builder().build();
    }
    return pKTVStopMsg;
  }

  /**
   * 主持人下发抢答
   */
  public PBeginQuickAnswer getPBeginQuickAnswer() {
    if(pBeginQuickAnswer==null){
        return new PBeginQuickAnswer.Builder().build();
    }
    return pBeginQuickAnswer;
  }

  /**
   * 嘉宾响应获得抢答
   */
  public PResponseQuickAnswer getPResponseQuickAnswer() {
    if(pResponseQuickAnswer==null){
        return new PResponseQuickAnswer.Builder().build();
    }
    return pResponseQuickAnswer;
  }

  /**
   * 抢答结果
   */
  public PResultQuickAnswer getPResultQuickAnswer() {
    if(pResultQuickAnswer==null){
        return new PResultQuickAnswer.Builder().build();
    }
    return pResultQuickAnswer;
  }

  /**
   * 主持人下发投票
   */
  public PBeginVote getPBeginVote() {
    if(pBeginVote==null){
        return new PBeginVote.Builder().build();
    }
    return pBeginVote;
  }

  /**
   * 投票响应数
   */
  public PResponseVote getPResponseVote() {
    if(pResponseVote==null){
        return new PResponseVote.Builder().build();
    }
    return pResponseVote;
  }

  /**
   * 投票结果
   */
  public PResultVote getPResultVote() {
    if(pResultVote==null){
        return new PResultVote.Builder().build();
    }
    return pResultVote;
  }

  /**
   * 房间警告消息
   */
  public PRoomWarningMsg getPRoomWarningMsg() {
    if(pRoomWarningMsg==null){
        return new PRoomWarningMsg.Builder().build();
    }
    return pRoomWarningMsg;
  }

  /**
   * 房间封禁消息
   */
  public PRoomLockedMsg getPRoomLockedMsg() {
    if(pRoomLockedMsg==null){
        return new PRoomLockedMsg.Builder().build();
    }
    return pRoomLockedMsg;
  }

  /**
   * 主持人下发惩罚
   */
  public PBeginPunish getPBeginPunish() {
    if(pBeginPunish==null){
        return new PBeginPunish.Builder().build();
    }
    return pBeginPunish;
  }

  /**
   * 改变上麦方式
   */
  public PChangeGetSeatMode getPChangeGetSeatMode() {
    if(pChangeGetSeatMode==null){
        return new PChangeGetSeatMode.Builder().build();
    }
    return pChangeGetSeatMode;
  }

  /**
   * 房间消息产生时间，单位毫秒
   */
  public boolean hasTimeMs() {
    return timeMs!=null;
  }

  /**
   * 消息类型
   */
  public boolean hasMsgType() {
    return msgType!=null;
  }

  /**
   * 房间ID
   */
  public boolean hasRoomID() {
    return roomID!=null;
  }

  /**
   * 加入游戏通知消息
   */
  public boolean hasPJoinNoticeMsg() {
    return pJoinNoticeMsg!=null;
  }

  /**
   * 修改公告
   */
  public boolean hasPFixRoomNoticeMsg() {
    return pFixRoomNoticeMsg!=null;
  }

  /**
   * 设置管理员
   */
  public boolean hasPSetRoomAdminMsg() {
    return pSetRoomAdminMsg!=null;
  }

  /**
   * 全员禁麦、全员解除禁麦
   */
  public boolean hasPSetAllMemberMicMsg() {
    return pSetAllMemberMicMsg!=null;
  }

  /**
   * 用户开闭麦
   */
  public boolean hasPSetUserMicMsg() {
    return pSetUserMicMsg!=null;
  }

  /**
   * 设置席位状态：关闭席位、打开席位
   */
  public boolean hasPSetSeatStatusMsg() {
    return pSetSeatStatusMsg!=null;
  }

  /**
   * 申请嘉宾
   */
  public boolean hasPApplyForGuest() {
    return pApplyForGuest!=null;
  }

  /**
   * 获得席位:上麦
   */
  public boolean hasPGetSeatMsg() {
    return pGetSeatMsg!=null;
  }

  /**
   * 还回席位:下麦
   */
  public boolean hasPBackSeatMsg() {
    return pBackSeatMsg!=null;
  }

  /**
   * 邀请用户
   */
  public boolean hasPInviteUserMsg() {
    return pInviteUserMsg!=null;
  }

  /**
   * 换座位
   */
  public boolean hasPChangeSeatMsg() {
    return pChangeSeatMsg!=null;
  }

  /**
   * 踢人
   */
  public boolean hasPKickoutUserMsg() {
    return pKickoutUserMsg!=null;
  }

  /**
   * 加载下个轮次
   */
  public boolean hasPNextRoundMsg() {
    return pNextRoundMsg!=null;
  }

  /**
   * 用户退出房间
   */
  public boolean hasPPExitGameMsg() {
    return pPExitGameMsg!=null;
  }

  /**
   * 同步状态
   */
  public boolean hasPSyncMsg() {
    return pSyncMsg!=null;
  }

  /**
   * 发送表情
   */
  public boolean hasPDynamicEmojiMsg() {
    return pDynamicEmojiMsg!=null;
  }

  /**
   * 游戏结束
   */
  public boolean hasPGameOverMsg() {
    return pGameOverMsg!=null;
  }

  /**
   * 修改房间主题
   */
  public boolean hasPChangeRoomTopicMsg() {
    return pChangeRoomTopicMsg!=null;
  }

  /**
   * 修改房间进入权限
   */
  public boolean hasPChangeRoomEnterPermissionMsg() {
    return pChangeRoomEnterPermissionMsg!=null;
  }

  /**
   * 更新人气值
   */
  public boolean hasPUpdatePopularityMsg() {
    return pUpdatePopularityMsg!=null;
  }

  /**
   * 家族派对房游戏停止
   */
  public boolean hasPClubGameStopMsg() {
    return pClubGameStopMsg!=null;
  }

  /**
   * 家族派对房游戏新增主持人
   */
  public boolean hasPClubBecomeHostMsg() {
    return pClubBecomeHostMsg!=null;
  }

  /**
   * 家族派对房游戏移交主持人
   */
  public boolean hasPClubChangeHostMsg() {
    return pClubChangeHostMsg!=null;
  }

  /**
   * 邀请成为嘉宾
   */
  public boolean hasPInviteBeGuestMsg() {
    return pInviteBeGuestMsg!=null;
  }

  /**
   * 邀请的响应
   */
  public boolean hasPRspInviteBeGuestMsg() {
    return pRspInviteBeGuestMsg!=null;
  }

  /**
   * ktv暂停or开始信令
   */
  public boolean hasPKTVStopMsg() {
    return pKTVStopMsg!=null;
  }

  /**
   * 主持人下发抢答
   */
  public boolean hasPBeginQuickAnswer() {
    return pBeginQuickAnswer!=null;
  }

  /**
   * 嘉宾响应获得抢答
   */
  public boolean hasPResponseQuickAnswer() {
    return pResponseQuickAnswer!=null;
  }

  /**
   * 抢答结果
   */
  public boolean hasPResultQuickAnswer() {
    return pResultQuickAnswer!=null;
  }

  /**
   * 主持人下发投票
   */
  public boolean hasPBeginVote() {
    return pBeginVote!=null;
  }

  /**
   * 投票响应数
   */
  public boolean hasPResponseVote() {
    return pResponseVote!=null;
  }

  /**
   * 投票结果
   */
  public boolean hasPResultVote() {
    return pResultVote!=null;
  }

  /**
   * 房间警告消息
   */
  public boolean hasPRoomWarningMsg() {
    return pRoomWarningMsg!=null;
  }

  /**
   * 房间封禁消息
   */
  public boolean hasPRoomLockedMsg() {
    return pRoomLockedMsg!=null;
  }

  /**
   * 主持人下发惩罚
   */
  public boolean hasPBeginPunish() {
    return pBeginPunish!=null;
  }

  /**
   * 改变上麦方式
   */
  public boolean hasPChangeGetSeatMode() {
    return pChangeGetSeatMode!=null;
  }

  public static final class Builder extends Message.Builder<PartyRoomMsg, Builder> {
    private Long timeMs;

    private EPartyRoomMsgType msgType;

    private Integer roomID;

    private PJoinNoticeMsg pJoinNoticeMsg;

    private PFixRoomNoticeMsg pFixRoomNoticeMsg;

    private PSetRoomAdminMsg pSetRoomAdminMsg;

    private PSetAllMemberMicMsg pSetAllMemberMicMsg;

    private PSetUserMicMsg pSetUserMicMsg;

    private PSetSeatStatusMsg pSetSeatStatusMsg;

    private PApplyForGuest pApplyForGuest;

    private PGetSeatMsg pGetSeatMsg;

    private PBackSeatMsg pBackSeatMsg;

    private PInviteUserMsg pInviteUserMsg;

    private PChangeSeatMsg pChangeSeatMsg;

    private PKickoutUserMsg pKickoutUserMsg;

    private PNextRoundMsg pNextRoundMsg;

    private PExitGameMsg pPExitGameMsg;

    private PSyncMsg pSyncMsg;

    private PDynamicEmojiMsg pDynamicEmojiMsg;

    private PGameOverMsg pGameOverMsg;

    private PChangeRoomTopicMsg pChangeRoomTopicMsg;

    private PChangeRoomEnterPermissionMsg pChangeRoomEnterPermissionMsg;

    private PUpdatePopularityMsg pUpdatePopularityMsg;

    private PClubGameStopMsg pClubGameStopMsg;

    private PClubBecomeHostMsg pClubBecomeHostMsg;

    private PClubChangeHostMsg pClubChangeHostMsg;

    private PInviteBeGuestMsg pInviteBeGuestMsg;

    private PRspInviteBeGuestMsg pRspInviteBeGuestMsg;

    private PKTVStopMsg pKTVStopMsg;

    private PBeginQuickAnswer pBeginQuickAnswer;

    private PResponseQuickAnswer pResponseQuickAnswer;

    private PResultQuickAnswer pResultQuickAnswer;

    private PBeginVote pBeginVote;

    private PResponseVote pResponseVote;

    private PResultVote pResultVote;

    private PRoomWarningMsg pRoomWarningMsg;

    private PRoomLockedMsg pRoomLockedMsg;

    private PBeginPunish pBeginPunish;

    private PChangeGetSeatMode pChangeGetSeatMode;

    public Builder() {
    }

    /**
     * 房间消息产生时间，单位毫秒
     */
    public Builder setTimeMs(Long timeMs) {
      this.timeMs = timeMs;
      return this;
    }

    /**
     * 消息类型
     */
    public Builder setMsgType(EPartyRoomMsgType msgType) {
      this.msgType = msgType;
      return this;
    }

    /**
     * 房间ID
     */
    public Builder setRoomID(Integer roomID) {
      this.roomID = roomID;
      return this;
    }

    /**
     * 加入游戏通知消息
     */
    public Builder setPJoinNoticeMsg(PJoinNoticeMsg pJoinNoticeMsg) {
      this.pJoinNoticeMsg = pJoinNoticeMsg;
      return this;
    }

    /**
     * 修改公告
     */
    public Builder setPFixRoomNoticeMsg(PFixRoomNoticeMsg pFixRoomNoticeMsg) {
      this.pFixRoomNoticeMsg = pFixRoomNoticeMsg;
      return this;
    }

    /**
     * 设置管理员
     */
    public Builder setPSetRoomAdminMsg(PSetRoomAdminMsg pSetRoomAdminMsg) {
      this.pSetRoomAdminMsg = pSetRoomAdminMsg;
      return this;
    }

    /**
     * 全员禁麦、全员解除禁麦
     */
    public Builder setPSetAllMemberMicMsg(PSetAllMemberMicMsg pSetAllMemberMicMsg) {
      this.pSetAllMemberMicMsg = pSetAllMemberMicMsg;
      return this;
    }

    /**
     * 用户开闭麦
     */
    public Builder setPSetUserMicMsg(PSetUserMicMsg pSetUserMicMsg) {
      this.pSetUserMicMsg = pSetUserMicMsg;
      return this;
    }

    /**
     * 设置席位状态：关闭席位、打开席位
     */
    public Builder setPSetSeatStatusMsg(PSetSeatStatusMsg pSetSeatStatusMsg) {
      this.pSetSeatStatusMsg = pSetSeatStatusMsg;
      return this;
    }

    /**
     * 申请嘉宾
     */
    public Builder setPApplyForGuest(PApplyForGuest pApplyForGuest) {
      this.pApplyForGuest = pApplyForGuest;
      return this;
    }

    /**
     * 获得席位:上麦
     */
    public Builder setPGetSeatMsg(PGetSeatMsg pGetSeatMsg) {
      this.pGetSeatMsg = pGetSeatMsg;
      return this;
    }

    /**
     * 还回席位:下麦
     */
    public Builder setPBackSeatMsg(PBackSeatMsg pBackSeatMsg) {
      this.pBackSeatMsg = pBackSeatMsg;
      return this;
    }

    /**
     * 邀请用户
     */
    public Builder setPInviteUserMsg(PInviteUserMsg pInviteUserMsg) {
      this.pInviteUserMsg = pInviteUserMsg;
      return this;
    }

    /**
     * 换座位
     */
    public Builder setPChangeSeatMsg(PChangeSeatMsg pChangeSeatMsg) {
      this.pChangeSeatMsg = pChangeSeatMsg;
      return this;
    }

    /**
     * 踢人
     */
    public Builder setPKickoutUserMsg(PKickoutUserMsg pKickoutUserMsg) {
      this.pKickoutUserMsg = pKickoutUserMsg;
      return this;
    }

    /**
     * 加载下个轮次
     */
    public Builder setPNextRoundMsg(PNextRoundMsg pNextRoundMsg) {
      this.pNextRoundMsg = pNextRoundMsg;
      return this;
    }

    /**
     * 用户退出房间
     */
    public Builder setPPExitGameMsg(PExitGameMsg pPExitGameMsg) {
      this.pPExitGameMsg = pPExitGameMsg;
      return this;
    }

    /**
     * 同步状态
     */
    public Builder setPSyncMsg(PSyncMsg pSyncMsg) {
      this.pSyncMsg = pSyncMsg;
      return this;
    }

    /**
     * 发送表情
     */
    public Builder setPDynamicEmojiMsg(PDynamicEmojiMsg pDynamicEmojiMsg) {
      this.pDynamicEmojiMsg = pDynamicEmojiMsg;
      return this;
    }

    /**
     * 游戏结束
     */
    public Builder setPGameOverMsg(PGameOverMsg pGameOverMsg) {
      this.pGameOverMsg = pGameOverMsg;
      return this;
    }

    /**
     * 修改房间主题
     */
    public Builder setPChangeRoomTopicMsg(PChangeRoomTopicMsg pChangeRoomTopicMsg) {
      this.pChangeRoomTopicMsg = pChangeRoomTopicMsg;
      return this;
    }

    /**
     * 修改房间进入权限
     */
    public Builder setPChangeRoomEnterPermissionMsg(
        PChangeRoomEnterPermissionMsg pChangeRoomEnterPermissionMsg) {
      this.pChangeRoomEnterPermissionMsg = pChangeRoomEnterPermissionMsg;
      return this;
    }

    /**
     * 更新人气值
     */
    public Builder setPUpdatePopularityMsg(PUpdatePopularityMsg pUpdatePopularityMsg) {
      this.pUpdatePopularityMsg = pUpdatePopularityMsg;
      return this;
    }

    /**
     * 家族派对房游戏停止
     */
    public Builder setPClubGameStopMsg(PClubGameStopMsg pClubGameStopMsg) {
      this.pClubGameStopMsg = pClubGameStopMsg;
      return this;
    }

    /**
     * 家族派对房游戏新增主持人
     */
    public Builder setPClubBecomeHostMsg(PClubBecomeHostMsg pClubBecomeHostMsg) {
      this.pClubBecomeHostMsg = pClubBecomeHostMsg;
      return this;
    }

    /**
     * 家族派对房游戏移交主持人
     */
    public Builder setPClubChangeHostMsg(PClubChangeHostMsg pClubChangeHostMsg) {
      this.pClubChangeHostMsg = pClubChangeHostMsg;
      return this;
    }

    /**
     * 邀请成为嘉宾
     */
    public Builder setPInviteBeGuestMsg(PInviteBeGuestMsg pInviteBeGuestMsg) {
      this.pInviteBeGuestMsg = pInviteBeGuestMsg;
      return this;
    }

    /**
     * 邀请的响应
     */
    public Builder setPRspInviteBeGuestMsg(PRspInviteBeGuestMsg pRspInviteBeGuestMsg) {
      this.pRspInviteBeGuestMsg = pRspInviteBeGuestMsg;
      return this;
    }

    /**
     * ktv暂停or开始信令
     */
    public Builder setPKTVStopMsg(PKTVStopMsg pKTVStopMsg) {
      this.pKTVStopMsg = pKTVStopMsg;
      return this;
    }

    /**
     * 主持人下发抢答
     */
    public Builder setPBeginQuickAnswer(PBeginQuickAnswer pBeginQuickAnswer) {
      this.pBeginQuickAnswer = pBeginQuickAnswer;
      return this;
    }

    /**
     * 嘉宾响应获得抢答
     */
    public Builder setPResponseQuickAnswer(PResponseQuickAnswer pResponseQuickAnswer) {
      this.pResponseQuickAnswer = pResponseQuickAnswer;
      return this;
    }

    /**
     * 抢答结果
     */
    public Builder setPResultQuickAnswer(PResultQuickAnswer pResultQuickAnswer) {
      this.pResultQuickAnswer = pResultQuickAnswer;
      return this;
    }

    /**
     * 主持人下发投票
     */
    public Builder setPBeginVote(PBeginVote pBeginVote) {
      this.pBeginVote = pBeginVote;
      return this;
    }

    /**
     * 投票响应数
     */
    public Builder setPResponseVote(PResponseVote pResponseVote) {
      this.pResponseVote = pResponseVote;
      return this;
    }

    /**
     * 投票结果
     */
    public Builder setPResultVote(PResultVote pResultVote) {
      this.pResultVote = pResultVote;
      return this;
    }

    /**
     * 房间警告消息
     */
    public Builder setPRoomWarningMsg(PRoomWarningMsg pRoomWarningMsg) {
      this.pRoomWarningMsg = pRoomWarningMsg;
      return this;
    }

    /**
     * 房间封禁消息
     */
    public Builder setPRoomLockedMsg(PRoomLockedMsg pRoomLockedMsg) {
      this.pRoomLockedMsg = pRoomLockedMsg;
      return this;
    }

    /**
     * 主持人下发惩罚
     */
    public Builder setPBeginPunish(PBeginPunish pBeginPunish) {
      this.pBeginPunish = pBeginPunish;
      return this;
    }

    /**
     * 改变上麦方式
     */
    public Builder setPChangeGetSeatMode(PChangeGetSeatMode pChangeGetSeatMode) {
      this.pChangeGetSeatMode = pChangeGetSeatMode;
      return this;
    }

    @Override
    public PartyRoomMsg build() {
      return new PartyRoomMsg(timeMs, msgType, roomID, pJoinNoticeMsg, pFixRoomNoticeMsg, pSetRoomAdminMsg, pSetAllMemberMicMsg, pSetUserMicMsg, pSetSeatStatusMsg, pApplyForGuest, pGetSeatMsg, pBackSeatMsg, pInviteUserMsg, pChangeSeatMsg, pKickoutUserMsg, pNextRoundMsg, pPExitGameMsg, pSyncMsg, pDynamicEmojiMsg, pGameOverMsg, pChangeRoomTopicMsg, pChangeRoomEnterPermissionMsg, pUpdatePopularityMsg, pClubGameStopMsg, pClubBecomeHostMsg, pClubChangeHostMsg, pInviteBeGuestMsg, pRspInviteBeGuestMsg, pKTVStopMsg, pBeginQuickAnswer, pResponseQuickAnswer, pResultQuickAnswer, pBeginVote, pResponseVote, pResultVote, pRoomWarningMsg, pRoomLockedMsg, pBeginPunish, pChangeGetSeatMode, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PartyRoomMsg extends ProtoAdapter<PartyRoomMsg> {
    public ProtoAdapter_PartyRoomMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, PartyRoomMsg.class);
    }

    @Override
    public int encodedSize(PartyRoomMsg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.timeMs)
          + EPartyRoomMsgType.ADAPTER.encodedSizeWithTag(2, value.msgType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.roomID)
          + PJoinNoticeMsg.ADAPTER.encodedSizeWithTag(10, value.pJoinNoticeMsg)
          + PFixRoomNoticeMsg.ADAPTER.encodedSizeWithTag(11, value.pFixRoomNoticeMsg)
          + PSetRoomAdminMsg.ADAPTER.encodedSizeWithTag(12, value.pSetRoomAdminMsg)
          + PSetAllMemberMicMsg.ADAPTER.encodedSizeWithTag(13, value.pSetAllMemberMicMsg)
          + PSetUserMicMsg.ADAPTER.encodedSizeWithTag(14, value.pSetUserMicMsg)
          + PSetSeatStatusMsg.ADAPTER.encodedSizeWithTag(15, value.pSetSeatStatusMsg)
          + PApplyForGuest.ADAPTER.encodedSizeWithTag(16, value.pApplyForGuest)
          + PGetSeatMsg.ADAPTER.encodedSizeWithTag(17, value.pGetSeatMsg)
          + PBackSeatMsg.ADAPTER.encodedSizeWithTag(18, value.pBackSeatMsg)
          + PInviteUserMsg.ADAPTER.encodedSizeWithTag(19, value.pInviteUserMsg)
          + PChangeSeatMsg.ADAPTER.encodedSizeWithTag(20, value.pChangeSeatMsg)
          + PKickoutUserMsg.ADAPTER.encodedSizeWithTag(21, value.pKickoutUserMsg)
          + PNextRoundMsg.ADAPTER.encodedSizeWithTag(22, value.pNextRoundMsg)
          + PExitGameMsg.ADAPTER.encodedSizeWithTag(23, value.pPExitGameMsg)
          + PSyncMsg.ADAPTER.encodedSizeWithTag(24, value.pSyncMsg)
          + PDynamicEmojiMsg.ADAPTER.encodedSizeWithTag(25, value.pDynamicEmojiMsg)
          + PGameOverMsg.ADAPTER.encodedSizeWithTag(26, value.pGameOverMsg)
          + PChangeRoomTopicMsg.ADAPTER.encodedSizeWithTag(27, value.pChangeRoomTopicMsg)
          + PChangeRoomEnterPermissionMsg.ADAPTER.encodedSizeWithTag(28, value.pChangeRoomEnterPermissionMsg)
          + PUpdatePopularityMsg.ADAPTER.encodedSizeWithTag(29, value.pUpdatePopularityMsg)
          + PClubGameStopMsg.ADAPTER.encodedSizeWithTag(30, value.pClubGameStopMsg)
          + PClubBecomeHostMsg.ADAPTER.encodedSizeWithTag(31, value.pClubBecomeHostMsg)
          + PClubChangeHostMsg.ADAPTER.encodedSizeWithTag(32, value.pClubChangeHostMsg)
          + PInviteBeGuestMsg.ADAPTER.encodedSizeWithTag(33, value.pInviteBeGuestMsg)
          + PRspInviteBeGuestMsg.ADAPTER.encodedSizeWithTag(34, value.pRspInviteBeGuestMsg)
          + PKTVStopMsg.ADAPTER.encodedSizeWithTag(35, value.pKTVStopMsg)
          + PBeginQuickAnswer.ADAPTER.encodedSizeWithTag(36, value.pBeginQuickAnswer)
          + PResponseQuickAnswer.ADAPTER.encodedSizeWithTag(37, value.pResponseQuickAnswer)
          + PResultQuickAnswer.ADAPTER.encodedSizeWithTag(38, value.pResultQuickAnswer)
          + PBeginVote.ADAPTER.encodedSizeWithTag(39, value.pBeginVote)
          + PResponseVote.ADAPTER.encodedSizeWithTag(40, value.pResponseVote)
          + PResultVote.ADAPTER.encodedSizeWithTag(41, value.pResultVote)
          + PRoomWarningMsg.ADAPTER.encodedSizeWithTag(42, value.pRoomWarningMsg)
          + PRoomLockedMsg.ADAPTER.encodedSizeWithTag(43, value.pRoomLockedMsg)
          + PBeginPunish.ADAPTER.encodedSizeWithTag(44, value.pBeginPunish)
          + PChangeGetSeatMode.ADAPTER.encodedSizeWithTag(45, value.pChangeGetSeatMode)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PartyRoomMsg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.timeMs);
      EPartyRoomMsgType.ADAPTER.encodeWithTag(writer, 2, value.msgType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.roomID);
      PJoinNoticeMsg.ADAPTER.encodeWithTag(writer, 10, value.pJoinNoticeMsg);
      PFixRoomNoticeMsg.ADAPTER.encodeWithTag(writer, 11, value.pFixRoomNoticeMsg);
      PSetRoomAdminMsg.ADAPTER.encodeWithTag(writer, 12, value.pSetRoomAdminMsg);
      PSetAllMemberMicMsg.ADAPTER.encodeWithTag(writer, 13, value.pSetAllMemberMicMsg);
      PSetUserMicMsg.ADAPTER.encodeWithTag(writer, 14, value.pSetUserMicMsg);
      PSetSeatStatusMsg.ADAPTER.encodeWithTag(writer, 15, value.pSetSeatStatusMsg);
      PApplyForGuest.ADAPTER.encodeWithTag(writer, 16, value.pApplyForGuest);
      PGetSeatMsg.ADAPTER.encodeWithTag(writer, 17, value.pGetSeatMsg);
      PBackSeatMsg.ADAPTER.encodeWithTag(writer, 18, value.pBackSeatMsg);
      PInviteUserMsg.ADAPTER.encodeWithTag(writer, 19, value.pInviteUserMsg);
      PChangeSeatMsg.ADAPTER.encodeWithTag(writer, 20, value.pChangeSeatMsg);
      PKickoutUserMsg.ADAPTER.encodeWithTag(writer, 21, value.pKickoutUserMsg);
      PNextRoundMsg.ADAPTER.encodeWithTag(writer, 22, value.pNextRoundMsg);
      PExitGameMsg.ADAPTER.encodeWithTag(writer, 23, value.pPExitGameMsg);
      PSyncMsg.ADAPTER.encodeWithTag(writer, 24, value.pSyncMsg);
      PDynamicEmojiMsg.ADAPTER.encodeWithTag(writer, 25, value.pDynamicEmojiMsg);
      PGameOverMsg.ADAPTER.encodeWithTag(writer, 26, value.pGameOverMsg);
      PChangeRoomTopicMsg.ADAPTER.encodeWithTag(writer, 27, value.pChangeRoomTopicMsg);
      PChangeRoomEnterPermissionMsg.ADAPTER.encodeWithTag(writer, 28, value.pChangeRoomEnterPermissionMsg);
      PUpdatePopularityMsg.ADAPTER.encodeWithTag(writer, 29, value.pUpdatePopularityMsg);
      PClubGameStopMsg.ADAPTER.encodeWithTag(writer, 30, value.pClubGameStopMsg);
      PClubBecomeHostMsg.ADAPTER.encodeWithTag(writer, 31, value.pClubBecomeHostMsg);
      PClubChangeHostMsg.ADAPTER.encodeWithTag(writer, 32, value.pClubChangeHostMsg);
      PInviteBeGuestMsg.ADAPTER.encodeWithTag(writer, 33, value.pInviteBeGuestMsg);
      PRspInviteBeGuestMsg.ADAPTER.encodeWithTag(writer, 34, value.pRspInviteBeGuestMsg);
      PKTVStopMsg.ADAPTER.encodeWithTag(writer, 35, value.pKTVStopMsg);
      PBeginQuickAnswer.ADAPTER.encodeWithTag(writer, 36, value.pBeginQuickAnswer);
      PResponseQuickAnswer.ADAPTER.encodeWithTag(writer, 37, value.pResponseQuickAnswer);
      PResultQuickAnswer.ADAPTER.encodeWithTag(writer, 38, value.pResultQuickAnswer);
      PBeginVote.ADAPTER.encodeWithTag(writer, 39, value.pBeginVote);
      PResponseVote.ADAPTER.encodeWithTag(writer, 40, value.pResponseVote);
      PResultVote.ADAPTER.encodeWithTag(writer, 41, value.pResultVote);
      PRoomWarningMsg.ADAPTER.encodeWithTag(writer, 42, value.pRoomWarningMsg);
      PRoomLockedMsg.ADAPTER.encodeWithTag(writer, 43, value.pRoomLockedMsg);
      PBeginPunish.ADAPTER.encodeWithTag(writer, 44, value.pBeginPunish);
      PChangeGetSeatMode.ADAPTER.encodeWithTag(writer, 45, value.pChangeGetSeatMode);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PartyRoomMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: {
            try {
              builder.setMsgType(EPartyRoomMsgType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.setRoomID(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.setPJoinNoticeMsg(PJoinNoticeMsg.ADAPTER.decode(reader)); break;
          case 11: builder.setPFixRoomNoticeMsg(PFixRoomNoticeMsg.ADAPTER.decode(reader)); break;
          case 12: builder.setPSetRoomAdminMsg(PSetRoomAdminMsg.ADAPTER.decode(reader)); break;
          case 13: builder.setPSetAllMemberMicMsg(PSetAllMemberMicMsg.ADAPTER.decode(reader)); break;
          case 14: builder.setPSetUserMicMsg(PSetUserMicMsg.ADAPTER.decode(reader)); break;
          case 15: builder.setPSetSeatStatusMsg(PSetSeatStatusMsg.ADAPTER.decode(reader)); break;
          case 16: builder.setPApplyForGuest(PApplyForGuest.ADAPTER.decode(reader)); break;
          case 17: builder.setPGetSeatMsg(PGetSeatMsg.ADAPTER.decode(reader)); break;
          case 18: builder.setPBackSeatMsg(PBackSeatMsg.ADAPTER.decode(reader)); break;
          case 19: builder.setPInviteUserMsg(PInviteUserMsg.ADAPTER.decode(reader)); break;
          case 20: builder.setPChangeSeatMsg(PChangeSeatMsg.ADAPTER.decode(reader)); break;
          case 21: builder.setPKickoutUserMsg(PKickoutUserMsg.ADAPTER.decode(reader)); break;
          case 22: builder.setPNextRoundMsg(PNextRoundMsg.ADAPTER.decode(reader)); break;
          case 23: builder.setPPExitGameMsg(PExitGameMsg.ADAPTER.decode(reader)); break;
          case 24: builder.setPSyncMsg(PSyncMsg.ADAPTER.decode(reader)); break;
          case 25: builder.setPDynamicEmojiMsg(PDynamicEmojiMsg.ADAPTER.decode(reader)); break;
          case 26: builder.setPGameOverMsg(PGameOverMsg.ADAPTER.decode(reader)); break;
          case 27: builder.setPChangeRoomTopicMsg(PChangeRoomTopicMsg.ADAPTER.decode(reader)); break;
          case 28: builder.setPChangeRoomEnterPermissionMsg(PChangeRoomEnterPermissionMsg.ADAPTER.decode(reader)); break;
          case 29: builder.setPUpdatePopularityMsg(PUpdatePopularityMsg.ADAPTER.decode(reader)); break;
          case 30: builder.setPClubGameStopMsg(PClubGameStopMsg.ADAPTER.decode(reader)); break;
          case 31: builder.setPClubBecomeHostMsg(PClubBecomeHostMsg.ADAPTER.decode(reader)); break;
          case 32: builder.setPClubChangeHostMsg(PClubChangeHostMsg.ADAPTER.decode(reader)); break;
          case 33: builder.setPInviteBeGuestMsg(PInviteBeGuestMsg.ADAPTER.decode(reader)); break;
          case 34: builder.setPRspInviteBeGuestMsg(PRspInviteBeGuestMsg.ADAPTER.decode(reader)); break;
          case 35: builder.setPKTVStopMsg(PKTVStopMsg.ADAPTER.decode(reader)); break;
          case 36: builder.setPBeginQuickAnswer(PBeginQuickAnswer.ADAPTER.decode(reader)); break;
          case 37: builder.setPResponseQuickAnswer(PResponseQuickAnswer.ADAPTER.decode(reader)); break;
          case 38: builder.setPResultQuickAnswer(PResultQuickAnswer.ADAPTER.decode(reader)); break;
          case 39: builder.setPBeginVote(PBeginVote.ADAPTER.decode(reader)); break;
          case 40: builder.setPResponseVote(PResponseVote.ADAPTER.decode(reader)); break;
          case 41: builder.setPResultVote(PResultVote.ADAPTER.decode(reader)); break;
          case 42: builder.setPRoomWarningMsg(PRoomWarningMsg.ADAPTER.decode(reader)); break;
          case 43: builder.setPRoomLockedMsg(PRoomLockedMsg.ADAPTER.decode(reader)); break;
          case 44: builder.setPBeginPunish(PBeginPunish.ADAPTER.decode(reader)); break;
          case 45: builder.setPChangeGetSeatMode(PChangeGetSeatMode.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PartyRoomMsg redact(PartyRoomMsg value) {
      Builder builder = value.newBuilder();
      if (builder.pJoinNoticeMsg != null) builder.pJoinNoticeMsg = PJoinNoticeMsg.ADAPTER.redact(builder.pJoinNoticeMsg);
      if (builder.pFixRoomNoticeMsg != null) builder.pFixRoomNoticeMsg = PFixRoomNoticeMsg.ADAPTER.redact(builder.pFixRoomNoticeMsg);
      if (builder.pSetRoomAdminMsg != null) builder.pSetRoomAdminMsg = PSetRoomAdminMsg.ADAPTER.redact(builder.pSetRoomAdminMsg);
      if (builder.pSetAllMemberMicMsg != null) builder.pSetAllMemberMicMsg = PSetAllMemberMicMsg.ADAPTER.redact(builder.pSetAllMemberMicMsg);
      if (builder.pSetUserMicMsg != null) builder.pSetUserMicMsg = PSetUserMicMsg.ADAPTER.redact(builder.pSetUserMicMsg);
      if (builder.pSetSeatStatusMsg != null) builder.pSetSeatStatusMsg = PSetSeatStatusMsg.ADAPTER.redact(builder.pSetSeatStatusMsg);
      if (builder.pApplyForGuest != null) builder.pApplyForGuest = PApplyForGuest.ADAPTER.redact(builder.pApplyForGuest);
      if (builder.pGetSeatMsg != null) builder.pGetSeatMsg = PGetSeatMsg.ADAPTER.redact(builder.pGetSeatMsg);
      if (builder.pBackSeatMsg != null) builder.pBackSeatMsg = PBackSeatMsg.ADAPTER.redact(builder.pBackSeatMsg);
      if (builder.pInviteUserMsg != null) builder.pInviteUserMsg = PInviteUserMsg.ADAPTER.redact(builder.pInviteUserMsg);
      if (builder.pChangeSeatMsg != null) builder.pChangeSeatMsg = PChangeSeatMsg.ADAPTER.redact(builder.pChangeSeatMsg);
      if (builder.pKickoutUserMsg != null) builder.pKickoutUserMsg = PKickoutUserMsg.ADAPTER.redact(builder.pKickoutUserMsg);
      if (builder.pNextRoundMsg != null) builder.pNextRoundMsg = PNextRoundMsg.ADAPTER.redact(builder.pNextRoundMsg);
      if (builder.pPExitGameMsg != null) builder.pPExitGameMsg = PExitGameMsg.ADAPTER.redact(builder.pPExitGameMsg);
      if (builder.pSyncMsg != null) builder.pSyncMsg = PSyncMsg.ADAPTER.redact(builder.pSyncMsg);
      if (builder.pDynamicEmojiMsg != null) builder.pDynamicEmojiMsg = PDynamicEmojiMsg.ADAPTER.redact(builder.pDynamicEmojiMsg);
      if (builder.pGameOverMsg != null) builder.pGameOverMsg = PGameOverMsg.ADAPTER.redact(builder.pGameOverMsg);
      if (builder.pChangeRoomTopicMsg != null) builder.pChangeRoomTopicMsg = PChangeRoomTopicMsg.ADAPTER.redact(builder.pChangeRoomTopicMsg);
      if (builder.pChangeRoomEnterPermissionMsg != null) builder.pChangeRoomEnterPermissionMsg = PChangeRoomEnterPermissionMsg.ADAPTER.redact(builder.pChangeRoomEnterPermissionMsg);
      if (builder.pUpdatePopularityMsg != null) builder.pUpdatePopularityMsg = PUpdatePopularityMsg.ADAPTER.redact(builder.pUpdatePopularityMsg);
      if (builder.pClubGameStopMsg != null) builder.pClubGameStopMsg = PClubGameStopMsg.ADAPTER.redact(builder.pClubGameStopMsg);
      if (builder.pClubBecomeHostMsg != null) builder.pClubBecomeHostMsg = PClubBecomeHostMsg.ADAPTER.redact(builder.pClubBecomeHostMsg);
      if (builder.pClubChangeHostMsg != null) builder.pClubChangeHostMsg = PClubChangeHostMsg.ADAPTER.redact(builder.pClubChangeHostMsg);
      if (builder.pInviteBeGuestMsg != null) builder.pInviteBeGuestMsg = PInviteBeGuestMsg.ADAPTER.redact(builder.pInviteBeGuestMsg);
      if (builder.pRspInviteBeGuestMsg != null) builder.pRspInviteBeGuestMsg = PRspInviteBeGuestMsg.ADAPTER.redact(builder.pRspInviteBeGuestMsg);
      if (builder.pKTVStopMsg != null) builder.pKTVStopMsg = PKTVStopMsg.ADAPTER.redact(builder.pKTVStopMsg);
      if (builder.pBeginQuickAnswer != null) builder.pBeginQuickAnswer = PBeginQuickAnswer.ADAPTER.redact(builder.pBeginQuickAnswer);
      if (builder.pResponseQuickAnswer != null) builder.pResponseQuickAnswer = PResponseQuickAnswer.ADAPTER.redact(builder.pResponseQuickAnswer);
      if (builder.pResultQuickAnswer != null) builder.pResultQuickAnswer = PResultQuickAnswer.ADAPTER.redact(builder.pResultQuickAnswer);
      if (builder.pBeginVote != null) builder.pBeginVote = PBeginVote.ADAPTER.redact(builder.pBeginVote);
      if (builder.pResponseVote != null) builder.pResponseVote = PResponseVote.ADAPTER.redact(builder.pResponseVote);
      if (builder.pResultVote != null) builder.pResultVote = PResultVote.ADAPTER.redact(builder.pResultVote);
      if (builder.pRoomWarningMsg != null) builder.pRoomWarningMsg = PRoomWarningMsg.ADAPTER.redact(builder.pRoomWarningMsg);
      if (builder.pRoomLockedMsg != null) builder.pRoomLockedMsg = PRoomLockedMsg.ADAPTER.redact(builder.pRoomLockedMsg);
      if (builder.pBeginPunish != null) builder.pBeginPunish = PBeginPunish.ADAPTER.redact(builder.pBeginPunish);
      if (builder.pChangeGetSeatMode != null) builder.pChangeGetSeatMode = PChangeGetSeatMode.ADAPTER.redact(builder.pChangeGetSeatMode);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
