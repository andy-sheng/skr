// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: party_room.proto
package com.zq.live.proto.PartyRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.zq.live.proto.Common.EKTVStatus;
import com.zq.live.proto.Common.MusicInfo;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PKTVScene extends Message<PKTVScene, PKTVScene.Builder> {
  public static final ProtoAdapter<PKTVScene> ADAPTER = new ProtoAdapter_PKTVScene();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_HASNEXTMUSIC = false;

  public static final Integer DEFAULT_MUSICCNT = 0;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_SINGTIMEMS = 0;

  public static final EKTVStatus DEFAULT_STATUS = EKTVStatus.EKS_GOING;

  /**
   * 表演曲目
   */
  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.Common.MusicInfo#ADAPTER"
  )
  private final MusicInfo music;

  /**
   * 是否有下首曲目
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean hasNextMusic;

  /**
   * 曲目数量
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer musicCnt;

  /**
   * 演唱者id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer userID;

  /**
   * 演唱时长
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer singTimeMs;

  /**
   * ktv状态
   */
  @WireField(
      tag = 6,
      adapter = "com.zq.live.proto.Common.EKTVStatus#ADAPTER"
  )
  private final EKTVStatus status;

  public PKTVScene(MusicInfo music, Boolean hasNextMusic, Integer musicCnt, Integer userID,
      Integer singTimeMs, EKTVStatus status) {
    this(music, hasNextMusic, musicCnt, userID, singTimeMs, status, ByteString.EMPTY);
  }

  public PKTVScene(MusicInfo music, Boolean hasNextMusic, Integer musicCnt, Integer userID,
      Integer singTimeMs, EKTVStatus status, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.music = music;
    this.hasNextMusic = hasNextMusic;
    this.musicCnt = musicCnt;
    this.userID = userID;
    this.singTimeMs = singTimeMs;
    this.status = status;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.music = music;
    builder.hasNextMusic = hasNextMusic;
    builder.musicCnt = musicCnt;
    builder.userID = userID;
    builder.singTimeMs = singTimeMs;
    builder.status = status;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PKTVScene)) return false;
    PKTVScene o = (PKTVScene) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(music, o.music)
        && Internal.equals(hasNextMusic, o.hasNextMusic)
        && Internal.equals(musicCnt, o.musicCnt)
        && Internal.equals(userID, o.userID)
        && Internal.equals(singTimeMs, o.singTimeMs)
        && Internal.equals(status, o.status);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (music != null ? music.hashCode() : 0);
      result = result * 37 + (hasNextMusic != null ? hasNextMusic.hashCode() : 0);
      result = result * 37 + (musicCnt != null ? musicCnt.hashCode() : 0);
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (singTimeMs != null ? singTimeMs.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (music != null) builder.append(", music=").append(music);
    if (hasNextMusic != null) builder.append(", hasNextMusic=").append(hasNextMusic);
    if (musicCnt != null) builder.append(", musicCnt=").append(musicCnt);
    if (userID != null) builder.append(", userID=").append(userID);
    if (singTimeMs != null) builder.append(", singTimeMs=").append(singTimeMs);
    if (status != null) builder.append(", status=").append(status);
    return builder.replace(0, 2, "PKTVScene{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PKTVScene.ADAPTER.encode(this);
  }

  public static final PKTVScene parseFrom(byte[] data) throws IOException {
    PKTVScene c = null;
       c = PKTVScene.ADAPTER.decode(data);
    return c;
  }

  /**
   * 表演曲目
   */
  public MusicInfo getMusic() {
    if(music==null){
        return new MusicInfo.Builder().build();
    }
    return music;
  }

  /**
   * 是否有下首曲目
   */
  public Boolean getHasNextMusic() {
    if(hasNextMusic==null){
        return DEFAULT_HASNEXTMUSIC;
    }
    return hasNextMusic;
  }

  /**
   * 曲目数量
   */
  public Integer getMusicCnt() {
    if(musicCnt==null){
        return DEFAULT_MUSICCNT;
    }
    return musicCnt;
  }

  /**
   * 演唱者id
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 演唱时长
   */
  public Integer getSingTimeMs() {
    if(singTimeMs==null){
        return DEFAULT_SINGTIMEMS;
    }
    return singTimeMs;
  }

  /**
   * ktv状态
   */
  public EKTVStatus getStatus() {
    if(status==null){
        return new EKTVStatus.Builder().build();
    }
    return status;
  }

  /**
   * 表演曲目
   */
  public boolean hasMusic() {
    return music!=null;
  }

  /**
   * 是否有下首曲目
   */
  public boolean hasHasNextMusic() {
    return hasNextMusic!=null;
  }

  /**
   * 曲目数量
   */
  public boolean hasMusicCnt() {
    return musicCnt!=null;
  }

  /**
   * 演唱者id
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 演唱时长
   */
  public boolean hasSingTimeMs() {
    return singTimeMs!=null;
  }

  /**
   * ktv状态
   */
  public boolean hasStatus() {
    return status!=null;
  }

  public static final class Builder extends Message.Builder<PKTVScene, Builder> {
    private MusicInfo music;

    private Boolean hasNextMusic;

    private Integer musicCnt;

    private Integer userID;

    private Integer singTimeMs;

    private EKTVStatus status;

    public Builder() {
    }

    /**
     * 表演曲目
     */
    public Builder setMusic(MusicInfo music) {
      this.music = music;
      return this;
    }

    /**
     * 是否有下首曲目
     */
    public Builder setHasNextMusic(Boolean hasNextMusic) {
      this.hasNextMusic = hasNextMusic;
      return this;
    }

    /**
     * 曲目数量
     */
    public Builder setMusicCnt(Integer musicCnt) {
      this.musicCnt = musicCnt;
      return this;
    }

    /**
     * 演唱者id
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 演唱时长
     */
    public Builder setSingTimeMs(Integer singTimeMs) {
      this.singTimeMs = singTimeMs;
      return this;
    }

    /**
     * ktv状态
     */
    public Builder setStatus(EKTVStatus status) {
      this.status = status;
      return this;
    }

    @Override
    public PKTVScene build() {
      return new PKTVScene(music, hasNextMusic, musicCnt, userID, singTimeMs, status, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PKTVScene extends ProtoAdapter<PKTVScene> {
    public ProtoAdapter_PKTVScene() {
      super(FieldEncoding.LENGTH_DELIMITED, PKTVScene.class);
    }

    @Override
    public int encodedSize(PKTVScene value) {
      return MusicInfo.ADAPTER.encodedSizeWithTag(1, value.music)
          + ProtoAdapter.BOOL.encodedSizeWithTag(2, value.hasNextMusic)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.musicCnt)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.singTimeMs)
          + EKTVStatus.ADAPTER.encodedSizeWithTag(6, value.status)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PKTVScene value) throws IOException {
      MusicInfo.ADAPTER.encodeWithTag(writer, 1, value.music);
      ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.hasNextMusic);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.musicCnt);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.singTimeMs);
      EKTVStatus.ADAPTER.encodeWithTag(writer, 6, value.status);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PKTVScene decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setMusic(MusicInfo.ADAPTER.decode(reader)); break;
          case 2: builder.setHasNextMusic(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.setMusicCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setSingTimeMs(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: {
            try {
              builder.setStatus(EKTVStatus.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PKTVScene redact(PKTVScene value) {
      Builder builder = value.newBuilder();
      if (builder.music != null) builder.music = MusicInfo.ADAPTER.redact(builder.music);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
