// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CombineRoom.proto
package com.component.live.proto.CombineRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class AddMusicInfoMsg extends Message<AddMusicInfoMsg, AddMusicInfoMsg.Builder> {
  public static final ProtoAdapter<AddMusicInfoMsg> ADAPTER = new ProtoAdapter_AddMusicInfoMsg();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_NEEDLOAD = false;

  /**
   * 添加的歌曲
   */
  @WireField(
      tag = 1,
      adapter = "com.zq.live.proto.CombineRoom.CombineRoomMusic#ADAPTER"
  )
  private final CombineRoomMusic music;

  /**
   * 是否需要加载
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean needLoad;

  public AddMusicInfoMsg(CombineRoomMusic music, Boolean needLoad) {
    this(music, needLoad, ByteString.EMPTY);
  }

  public AddMusicInfoMsg(CombineRoomMusic music, Boolean needLoad, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.music = music;
    this.needLoad = needLoad;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.music = music;
    builder.needLoad = needLoad;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AddMusicInfoMsg)) return false;
    AddMusicInfoMsg o = (AddMusicInfoMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(music, o.music)
        && Internal.equals(needLoad, o.needLoad);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (music != null ? music.hashCode() : 0);
      result = result * 37 + (needLoad != null ? needLoad.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (music != null) builder.append(", music=").append(music);
    if (needLoad != null) builder.append(", needLoad=").append(needLoad);
    return builder.replace(0, 2, "AddMusicInfoMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return AddMusicInfoMsg.ADAPTER.encode(this);
  }

  public static final AddMusicInfoMsg parseFrom(byte[] data) throws IOException {
    AddMusicInfoMsg c = null;
       c = AddMusicInfoMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 添加的歌曲
   */
  public CombineRoomMusic getMusic() {
    if(music==null){
        return new CombineRoomMusic.Builder().build();
    }
    return music;
  }

  /**
   * 是否需要加载
   */
  public Boolean getNeedLoad() {
    if(needLoad==null){
        return DEFAULT_NEEDLOAD;
    }
    return needLoad;
  }

  /**
   * 添加的歌曲
   */
  public boolean hasMusic() {
    return music!=null;
  }

  /**
   * 是否需要加载
   */
  public boolean hasNeedLoad() {
    return needLoad!=null;
  }

  public static final class Builder extends Message.Builder<AddMusicInfoMsg, Builder> {
    private CombineRoomMusic music;

    private Boolean needLoad;

    public Builder() {
    }

    /**
     * 添加的歌曲
     */
    public Builder setMusic(CombineRoomMusic music) {
      this.music = music;
      return this;
    }

    /**
     * 是否需要加载
     */
    public Builder setNeedLoad(Boolean needLoad) {
      this.needLoad = needLoad;
      return this;
    }

    @Override
    public AddMusicInfoMsg build() {
      return new AddMusicInfoMsg(music, needLoad, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_AddMusicInfoMsg extends ProtoAdapter<AddMusicInfoMsg> {
    public ProtoAdapter_AddMusicInfoMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, AddMusicInfoMsg.class);
    }

    @Override
    public int encodedSize(AddMusicInfoMsg value) {
      return CombineRoomMusic.ADAPTER.encodedSizeWithTag(1, value.music)
          + ProtoAdapter.BOOL.encodedSizeWithTag(2, value.needLoad)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AddMusicInfoMsg value) throws IOException {
      CombineRoomMusic.ADAPTER.encodeWithTag(writer, 1, value.music);
      ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.needLoad);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AddMusicInfoMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setMusic(CombineRoomMusic.ADAPTER.decode(reader)); break;
          case 2: builder.setNeedLoad(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AddMusicInfoMsg redact(AddMusicInfoMsg value) {
      Builder builder = value.newBuilder();
      if (builder.music != null) builder.music = CombineRoomMusic.ADAPTER.redact(builder.music);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
