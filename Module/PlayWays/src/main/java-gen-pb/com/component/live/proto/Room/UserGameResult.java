// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Room.proto
package com.component.live.proto.Room;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 本局综合评分信息
 */
public final class UserGameResult extends Message<UserGameResult, UserGameResult.Builder> {
  public static final ProtoAdapter<UserGameResult> ADAPTER = new ProtoAdapter_UserGameResult();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_USERID = 0;

  public static final Integer DEFAULT_ITEMID = 0;

  public static final Integer DEFAULT_RANK = 0;

  public static final Float DEFAULT_TOTALSCORE = 0.0f;

  public static final EWinType DEFAULT_WINTYPE = EWinType.InvalidEWinType;

  public static final Boolean DEFAULT_ISESCAPE = false;

  public static final Integer DEFAULT_SSS = 0;

  /**
   * 用户标识
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer userID;

  /**
   * 演唱曲目ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer itemID;

  /**
   * 排名
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  private final Integer rank;

  /**
   * 观众评分
   */
  @WireField(
      tag = 4,
      adapter = "com.zq.live.proto.Room.AudienceScore#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<AudienceScore> audienceScores;

  /**
   * 综合评分
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  private final Float totalScore;

  /**
   * 胜负平等等
   */
  @WireField(
      tag = 6,
      adapter = "com.zq.live.proto.Room.EWinType#ADAPTER"
  )
  private final EWinType winType;

  /**
   * 是否逃跑
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean isEscape;

  /**
   * 战斗评价, sss or ss or s or a...
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  private final Integer sss;

  public UserGameResult(Integer userID, Integer itemID, Integer rank,
      List<AudienceScore> audienceScores, Float totalScore, EWinType winType, Boolean isEscape,
      Integer sss) {
    this(userID, itemID, rank, audienceScores, totalScore, winType, isEscape, sss, ByteString.EMPTY);
  }

  public UserGameResult(Integer userID, Integer itemID, Integer rank,
      List<AudienceScore> audienceScores, Float totalScore, EWinType winType, Boolean isEscape,
      Integer sss, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userID = userID;
    this.itemID = itemID;
    this.rank = rank;
    this.audienceScores = Internal.immutableCopyOf("audienceScores", audienceScores);
    this.totalScore = totalScore;
    this.winType = winType;
    this.isEscape = isEscape;
    this.sss = sss;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userID = userID;
    builder.itemID = itemID;
    builder.rank = rank;
    builder.audienceScores = Internal.copyOf("audienceScores", audienceScores);
    builder.totalScore = totalScore;
    builder.winType = winType;
    builder.isEscape = isEscape;
    builder.sss = sss;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UserGameResult)) return false;
    UserGameResult o = (UserGameResult) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userID, o.userID)
        && Internal.equals(itemID, o.itemID)
        && Internal.equals(rank, o.rank)
        && audienceScores.equals(o.audienceScores)
        && Internal.equals(totalScore, o.totalScore)
        && Internal.equals(winType, o.winType)
        && Internal.equals(isEscape, o.isEscape)
        && Internal.equals(sss, o.sss);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userID != null ? userID.hashCode() : 0);
      result = result * 37 + (itemID != null ? itemID.hashCode() : 0);
      result = result * 37 + (rank != null ? rank.hashCode() : 0);
      result = result * 37 + audienceScores.hashCode();
      result = result * 37 + (totalScore != null ? totalScore.hashCode() : 0);
      result = result * 37 + (winType != null ? winType.hashCode() : 0);
      result = result * 37 + (isEscape != null ? isEscape.hashCode() : 0);
      result = result * 37 + (sss != null ? sss.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userID != null) builder.append(", userID=").append(userID);
    if (itemID != null) builder.append(", itemID=").append(itemID);
    if (rank != null) builder.append(", rank=").append(rank);
    if (!audienceScores.isEmpty()) builder.append(", audienceScores=").append(audienceScores);
    if (totalScore != null) builder.append(", totalScore=").append(totalScore);
    if (winType != null) builder.append(", winType=").append(winType);
    if (isEscape != null) builder.append(", isEscape=").append(isEscape);
    if (sss != null) builder.append(", sss=").append(sss);
    return builder.replace(0, 2, "UserGameResult{").append('}').toString();
  }

  public byte[] toByteArray() {
    return UserGameResult.ADAPTER.encode(this);
  }

  public static final UserGameResult parseFrom(byte[] data) throws IOException {
    UserGameResult c = null;
       c = UserGameResult.ADAPTER.decode(data);
    return c;
  }

  /**
   * 用户标识
   */
  public Integer getUserID() {
    if(userID==null){
        return DEFAULT_USERID;
    }
    return userID;
  }

  /**
   * 演唱曲目ID
   */
  public Integer getItemID() {
    if(itemID==null){
        return DEFAULT_ITEMID;
    }
    return itemID;
  }

  /**
   * 排名
   */
  public Integer getRank() {
    if(rank==null){
        return DEFAULT_RANK;
    }
    return rank;
  }

  /**
   * 观众评分
   */
  public List<AudienceScore> getAudienceScoresList() {
    if(audienceScores==null){
        return new java.util.ArrayList<AudienceScore>();
    }
    return audienceScores;
  }

  /**
   * 综合评分
   */
  public Float getTotalScore() {
    if(totalScore==null){
        return DEFAULT_TOTALSCORE;
    }
    return totalScore;
  }

  /**
   * 胜负平等等
   */
  public EWinType getWinType() {
    if(winType==null){
        return new EWinType.Builder().build();
    }
    return winType;
  }

  /**
   * 是否逃跑
   */
  public Boolean getIsEscape() {
    if(isEscape==null){
        return DEFAULT_ISESCAPE;
    }
    return isEscape;
  }

  /**
   * 战斗评价, sss or ss or s or a...
   */
  public Integer getSss() {
    if(sss==null){
        return DEFAULT_SSS;
    }
    return sss;
  }

  /**
   * 用户标识
   */
  public boolean hasUserID() {
    return userID!=null;
  }

  /**
   * 演唱曲目ID
   */
  public boolean hasItemID() {
    return itemID!=null;
  }

  /**
   * 排名
   */
  public boolean hasRank() {
    return rank!=null;
  }

  /**
   * 观众评分
   */
  public boolean hasAudienceScoresList() {
    return audienceScores!=null;
  }

  /**
   * 综合评分
   */
  public boolean hasTotalScore() {
    return totalScore!=null;
  }

  /**
   * 胜负平等等
   */
  public boolean hasWinType() {
    return winType!=null;
  }

  /**
   * 是否逃跑
   */
  public boolean hasIsEscape() {
    return isEscape!=null;
  }

  /**
   * 战斗评价, sss or ss or s or a...
   */
  public boolean hasSss() {
    return sss!=null;
  }

  public static final class Builder extends Message.Builder<UserGameResult, Builder> {
    private Integer userID;

    private Integer itemID;

    private Integer rank;

    private List<AudienceScore> audienceScores;

    private Float totalScore;

    private EWinType winType;

    private Boolean isEscape;

    private Integer sss;

    public Builder() {
      audienceScores = Internal.newMutableList();
    }

    /**
     * 用户标识
     */
    public Builder setUserID(Integer userID) {
      this.userID = userID;
      return this;
    }

    /**
     * 演唱曲目ID
     */
    public Builder setItemID(Integer itemID) {
      this.itemID = itemID;
      return this;
    }

    /**
     * 排名
     */
    public Builder setRank(Integer rank) {
      this.rank = rank;
      return this;
    }

    /**
     * 观众评分
     */
    public Builder addAllAudienceScores(List<AudienceScore> audienceScores) {
      Internal.checkElementsNotNull(audienceScores);
      this.audienceScores = audienceScores;
      return this;
    }

    /**
     * 综合评分
     */
    public Builder setTotalScore(Float totalScore) {
      this.totalScore = totalScore;
      return this;
    }

    /**
     * 胜负平等等
     */
    public Builder setWinType(EWinType winType) {
      this.winType = winType;
      return this;
    }

    /**
     * 是否逃跑
     */
    public Builder setIsEscape(Boolean isEscape) {
      this.isEscape = isEscape;
      return this;
    }

    /**
     * 战斗评价, sss or ss or s or a...
     */
    public Builder setSss(Integer sss) {
      this.sss = sss;
      return this;
    }

    @Override
    public UserGameResult build() {
      return new UserGameResult(userID, itemID, rank, audienceScores, totalScore, winType, isEscape, sss, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UserGameResult extends ProtoAdapter<UserGameResult> {
    public ProtoAdapter_UserGameResult() {
      super(FieldEncoding.LENGTH_DELIMITED, UserGameResult.class);
    }

    @Override
    public int encodedSize(UserGameResult value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.userID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.itemID)
          + ProtoAdapter.SINT32.encodedSizeWithTag(3, value.rank)
          + AudienceScore.ADAPTER.asRepeated().encodedSizeWithTag(4, value.audienceScores)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(5, value.totalScore)
          + EWinType.ADAPTER.encodedSizeWithTag(6, value.winType)
          + ProtoAdapter.BOOL.encodedSizeWithTag(7, value.isEscape)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.sss)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UserGameResult value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.userID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.itemID);
      ProtoAdapter.SINT32.encodeWithTag(writer, 3, value.rank);
      AudienceScore.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.audienceScores);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 5, value.totalScore);
      EWinType.ADAPTER.encodeWithTag(writer, 6, value.winType);
      ProtoAdapter.BOOL.encodeWithTag(writer, 7, value.isEscape);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.sss);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UserGameResult decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setItemID(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setRank(ProtoAdapter.SINT32.decode(reader)); break;
          case 4: builder.audienceScores.add(AudienceScore.ADAPTER.decode(reader)); break;
          case 5: builder.setTotalScore(ProtoAdapter.FLOAT.decode(reader)); break;
          case 6: {
            try {
              builder.setWinType(EWinType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 7: builder.setIsEscape(ProtoAdapter.BOOL.decode(reader)); break;
          case 8: builder.setSss(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UserGameResult redact(UserGameResult value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.audienceScores, AudienceScore.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
