// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CombineRoom.proto
package com.component.live.proto.CombineRoom;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.component.live.proto.Common.ESceneType;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class CombineRoomSyncStatusV2Msg extends Message<CombineRoomSyncStatusV2Msg, CombineRoomSyncStatusV2Msg.Builder> {
  public static final ProtoAdapter<CombineRoomSyncStatusV2Msg> ADAPTER = new ProtoAdapter_CombineRoomSyncStatusV2Msg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_SYNCSTATUSTIMEMS = 0L;

  public static final Long DEFAULT_PASSEDTIMEMS = 0L;

  public static final Boolean DEFAULT_ENABLENOLIMITDURATION = false;

  public static final ECombineStatus DEFAULT_STATUS = ECombineStatus.CS_UnPlay;

  public static final ESceneType DEFAULT_CURSCENE = ESceneType.ST_Unknown;

  /**
   * 状态同步时的毫秒时间戳
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long syncStatusTimeMs;

  /**
   * 房间已经经历的毫秒数
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  private final Long passedTimeMs;

  /**
   * 用户锁定信息
   */
  @WireField(
      tag = 3,
      adapter = "com.zq.live.proto.CombineRoom.UserLockInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  private final List<UserLockInfo> userLockInfo;

  /**
   * 开启没有限制的持续时间
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  private final Boolean enableNoLimitDuration;

  /**
   * 房间状态
   */
  @WireField(
      tag = 5,
      adapter = "com.zq.live.proto.CombineRoom.ECombineStatus#ADAPTER"
  )
  private final ECombineStatus status;

  /**
   * 当前场景
   */
  @WireField(
      tag = 6,
      adapter = "com.zq.live.proto.Common.ESceneType#ADAPTER"
  )
  private final ESceneType curScene;

  /**
   * 游戏场景信息
   */
  @WireField(
      tag = 7,
      adapter = "com.zq.live.proto.CombineRoom.SceneGameSyncStatusMsg#ADAPTER"
  )
  private final SceneGameSyncStatusMsg sceneGameSyncStatusMsg;

  /**
   * 嗨唱场景信息
   */
  @WireField(
      tag = 8,
      adapter = "com.zq.live.proto.CombineRoom.SceneSingSyncStatusMsg#ADAPTER"
  )
  private final SceneSingSyncStatusMsg sceneSingSyncStatusMsg;

  /**
   * 聊天场景信息
   */
  @WireField(
      tag = 9,
      adapter = "com.zq.live.proto.CombineRoom.SceneChatSyncStatusMsg#ADAPTER"
  )
  private final SceneChatSyncStatusMsg sceneChatSyncStatusMsg;

  public CombineRoomSyncStatusV2Msg(Long syncStatusTimeMs, Long passedTimeMs,
      List<UserLockInfo> userLockInfo, Boolean enableNoLimitDuration, ECombineStatus status,
      ESceneType curScene, SceneGameSyncStatusMsg sceneGameSyncStatusMsg,
      SceneSingSyncStatusMsg sceneSingSyncStatusMsg,
      SceneChatSyncStatusMsg sceneChatSyncStatusMsg) {
    this(syncStatusTimeMs, passedTimeMs, userLockInfo, enableNoLimitDuration, status, curScene, sceneGameSyncStatusMsg, sceneSingSyncStatusMsg, sceneChatSyncStatusMsg, ByteString.EMPTY);
  }

  public CombineRoomSyncStatusV2Msg(Long syncStatusTimeMs, Long passedTimeMs,
      List<UserLockInfo> userLockInfo, Boolean enableNoLimitDuration, ECombineStatus status,
      ESceneType curScene, SceneGameSyncStatusMsg sceneGameSyncStatusMsg,
      SceneSingSyncStatusMsg sceneSingSyncStatusMsg, SceneChatSyncStatusMsg sceneChatSyncStatusMsg,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.syncStatusTimeMs = syncStatusTimeMs;
    this.passedTimeMs = passedTimeMs;
    this.userLockInfo = Internal.immutableCopyOf("userLockInfo", userLockInfo);
    this.enableNoLimitDuration = enableNoLimitDuration;
    this.status = status;
    this.curScene = curScene;
    this.sceneGameSyncStatusMsg = sceneGameSyncStatusMsg;
    this.sceneSingSyncStatusMsg = sceneSingSyncStatusMsg;
    this.sceneChatSyncStatusMsg = sceneChatSyncStatusMsg;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.syncStatusTimeMs = syncStatusTimeMs;
    builder.passedTimeMs = passedTimeMs;
    builder.userLockInfo = Internal.copyOf("userLockInfo", userLockInfo);
    builder.enableNoLimitDuration = enableNoLimitDuration;
    builder.status = status;
    builder.curScene = curScene;
    builder.sceneGameSyncStatusMsg = sceneGameSyncStatusMsg;
    builder.sceneSingSyncStatusMsg = sceneSingSyncStatusMsg;
    builder.sceneChatSyncStatusMsg = sceneChatSyncStatusMsg;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CombineRoomSyncStatusV2Msg)) return false;
    CombineRoomSyncStatusV2Msg o = (CombineRoomSyncStatusV2Msg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(syncStatusTimeMs, o.syncStatusTimeMs)
        && Internal.equals(passedTimeMs, o.passedTimeMs)
        && userLockInfo.equals(o.userLockInfo)
        && Internal.equals(enableNoLimitDuration, o.enableNoLimitDuration)
        && Internal.equals(status, o.status)
        && Internal.equals(curScene, o.curScene)
        && Internal.equals(sceneGameSyncStatusMsg, o.sceneGameSyncStatusMsg)
        && Internal.equals(sceneSingSyncStatusMsg, o.sceneSingSyncStatusMsg)
        && Internal.equals(sceneChatSyncStatusMsg, o.sceneChatSyncStatusMsg);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (syncStatusTimeMs != null ? syncStatusTimeMs.hashCode() : 0);
      result = result * 37 + (passedTimeMs != null ? passedTimeMs.hashCode() : 0);
      result = result * 37 + userLockInfo.hashCode();
      result = result * 37 + (enableNoLimitDuration != null ? enableNoLimitDuration.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (curScene != null ? curScene.hashCode() : 0);
      result = result * 37 + (sceneGameSyncStatusMsg != null ? sceneGameSyncStatusMsg.hashCode() : 0);
      result = result * 37 + (sceneSingSyncStatusMsg != null ? sceneSingSyncStatusMsg.hashCode() : 0);
      result = result * 37 + (sceneChatSyncStatusMsg != null ? sceneChatSyncStatusMsg.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (syncStatusTimeMs != null) builder.append(", syncStatusTimeMs=").append(syncStatusTimeMs);
    if (passedTimeMs != null) builder.append(", passedTimeMs=").append(passedTimeMs);
    if (!userLockInfo.isEmpty()) builder.append(", userLockInfo=").append(userLockInfo);
    if (enableNoLimitDuration != null) builder.append(", enableNoLimitDuration=").append(enableNoLimitDuration);
    if (status != null) builder.append(", status=").append(status);
    if (curScene != null) builder.append(", curScene=").append(curScene);
    if (sceneGameSyncStatusMsg != null) builder.append(", sceneGameSyncStatusMsg=").append(sceneGameSyncStatusMsg);
    if (sceneSingSyncStatusMsg != null) builder.append(", sceneSingSyncStatusMsg=").append(sceneSingSyncStatusMsg);
    if (sceneChatSyncStatusMsg != null) builder.append(", sceneChatSyncStatusMsg=").append(sceneChatSyncStatusMsg);
    return builder.replace(0, 2, "CombineRoomSyncStatusV2Msg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return CombineRoomSyncStatusV2Msg.ADAPTER.encode(this);
  }

  public static final CombineRoomSyncStatusV2Msg parseFrom(byte[] data) throws IOException {
    CombineRoomSyncStatusV2Msg c = null;
       c = CombineRoomSyncStatusV2Msg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 状态同步时的毫秒时间戳
   */
  public Long getSyncStatusTimeMs() {
    if(syncStatusTimeMs==null){
        return DEFAULT_SYNCSTATUSTIMEMS;
    }
    return syncStatusTimeMs;
  }

  /**
   * 房间已经经历的毫秒数
   */
  public Long getPassedTimeMs() {
    if(passedTimeMs==null){
        return DEFAULT_PASSEDTIMEMS;
    }
    return passedTimeMs;
  }

  /**
   * 用户锁定信息
   */
  public List<UserLockInfo> getUserLockInfoList() {
    if(userLockInfo==null){
        return new java.util.ArrayList<UserLockInfo>();
    }
    return userLockInfo;
  }

  /**
   * 开启没有限制的持续时间
   */
  public Boolean getEnableNoLimitDuration() {
    if(enableNoLimitDuration==null){
        return DEFAULT_ENABLENOLIMITDURATION;
    }
    return enableNoLimitDuration;
  }

  /**
   * 房间状态
   */
  public ECombineStatus getStatus() {
    if(status==null){
        return new ECombineStatus.Builder().build();
    }
    return status;
  }

  /**
   * 当前场景
   */
  public ESceneType getCurScene() {
    if(curScene==null){
        return new ESceneType.Builder().build();
    }
    return curScene;
  }

  /**
   * 游戏场景信息
   */
  public SceneGameSyncStatusMsg getSceneGameSyncStatusMsg() {
    if(sceneGameSyncStatusMsg==null){
        return new SceneGameSyncStatusMsg.Builder().build();
    }
    return sceneGameSyncStatusMsg;
  }

  /**
   * 嗨唱场景信息
   */
  public SceneSingSyncStatusMsg getSceneSingSyncStatusMsg() {
    if(sceneSingSyncStatusMsg==null){
        return new SceneSingSyncStatusMsg.Builder().build();
    }
    return sceneSingSyncStatusMsg;
  }

  /**
   * 聊天场景信息
   */
  public SceneChatSyncStatusMsg getSceneChatSyncStatusMsg() {
    if(sceneChatSyncStatusMsg==null){
        return new SceneChatSyncStatusMsg.Builder().build();
    }
    return sceneChatSyncStatusMsg;
  }

  /**
   * 状态同步时的毫秒时间戳
   */
  public boolean hasSyncStatusTimeMs() {
    return syncStatusTimeMs!=null;
  }

  /**
   * 房间已经经历的毫秒数
   */
  public boolean hasPassedTimeMs() {
    return passedTimeMs!=null;
  }

  /**
   * 用户锁定信息
   */
  public boolean hasUserLockInfoList() {
    return userLockInfo!=null;
  }

  /**
   * 开启没有限制的持续时间
   */
  public boolean hasEnableNoLimitDuration() {
    return enableNoLimitDuration!=null;
  }

  /**
   * 房间状态
   */
  public boolean hasStatus() {
    return status!=null;
  }

  /**
   * 当前场景
   */
  public boolean hasCurScene() {
    return curScene!=null;
  }

  /**
   * 游戏场景信息
   */
  public boolean hasSceneGameSyncStatusMsg() {
    return sceneGameSyncStatusMsg!=null;
  }

  /**
   * 嗨唱场景信息
   */
  public boolean hasSceneSingSyncStatusMsg() {
    return sceneSingSyncStatusMsg!=null;
  }

  /**
   * 聊天场景信息
   */
  public boolean hasSceneChatSyncStatusMsg() {
    return sceneChatSyncStatusMsg!=null;
  }

  public static final class Builder extends Message.Builder<CombineRoomSyncStatusV2Msg, Builder> {
    private Long syncStatusTimeMs;

    private Long passedTimeMs;

    private List<UserLockInfo> userLockInfo;

    private Boolean enableNoLimitDuration;

    private ECombineStatus status;

    private ESceneType curScene;

    private SceneGameSyncStatusMsg sceneGameSyncStatusMsg;

    private SceneSingSyncStatusMsg sceneSingSyncStatusMsg;

    private SceneChatSyncStatusMsg sceneChatSyncStatusMsg;

    public Builder() {
      userLockInfo = Internal.newMutableList();
    }

    /**
     * 状态同步时的毫秒时间戳
     */
    public Builder setSyncStatusTimeMs(Long syncStatusTimeMs) {
      this.syncStatusTimeMs = syncStatusTimeMs;
      return this;
    }

    /**
     * 房间已经经历的毫秒数
     */
    public Builder setPassedTimeMs(Long passedTimeMs) {
      this.passedTimeMs = passedTimeMs;
      return this;
    }

    /**
     * 用户锁定信息
     */
    public Builder addAllUserLockInfo(List<UserLockInfo> userLockInfo) {
      Internal.checkElementsNotNull(userLockInfo);
      this.userLockInfo = userLockInfo;
      return this;
    }

    /**
     * 开启没有限制的持续时间
     */
    public Builder setEnableNoLimitDuration(Boolean enableNoLimitDuration) {
      this.enableNoLimitDuration = enableNoLimitDuration;
      return this;
    }

    /**
     * 房间状态
     */
    public Builder setStatus(ECombineStatus status) {
      this.status = status;
      return this;
    }

    /**
     * 当前场景
     */
    public Builder setCurScene(ESceneType curScene) {
      this.curScene = curScene;
      return this;
    }

    /**
     * 游戏场景信息
     */
    public Builder setSceneGameSyncStatusMsg(SceneGameSyncStatusMsg sceneGameSyncStatusMsg) {
      this.sceneGameSyncStatusMsg = sceneGameSyncStatusMsg;
      return this;
    }

    /**
     * 嗨唱场景信息
     */
    public Builder setSceneSingSyncStatusMsg(SceneSingSyncStatusMsg sceneSingSyncStatusMsg) {
      this.sceneSingSyncStatusMsg = sceneSingSyncStatusMsg;
      return this;
    }

    /**
     * 聊天场景信息
     */
    public Builder setSceneChatSyncStatusMsg(SceneChatSyncStatusMsg sceneChatSyncStatusMsg) {
      this.sceneChatSyncStatusMsg = sceneChatSyncStatusMsg;
      return this;
    }

    @Override
    public CombineRoomSyncStatusV2Msg build() {
      return new CombineRoomSyncStatusV2Msg(syncStatusTimeMs, passedTimeMs, userLockInfo, enableNoLimitDuration, status, curScene, sceneGameSyncStatusMsg, sceneSingSyncStatusMsg, sceneChatSyncStatusMsg, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CombineRoomSyncStatusV2Msg extends ProtoAdapter<CombineRoomSyncStatusV2Msg> {
    public ProtoAdapter_CombineRoomSyncStatusV2Msg() {
      super(FieldEncoding.LENGTH_DELIMITED, CombineRoomSyncStatusV2Msg.class);
    }

    @Override
    public int encodedSize(CombineRoomSyncStatusV2Msg value) {
      return ProtoAdapter.SINT64.encodedSizeWithTag(1, value.syncStatusTimeMs)
          + ProtoAdapter.SINT64.encodedSizeWithTag(2, value.passedTimeMs)
          + UserLockInfo.ADAPTER.asRepeated().encodedSizeWithTag(3, value.userLockInfo)
          + ProtoAdapter.BOOL.encodedSizeWithTag(4, value.enableNoLimitDuration)
          + ECombineStatus.ADAPTER.encodedSizeWithTag(5, value.status)
          + ESceneType.ADAPTER.encodedSizeWithTag(6, value.curScene)
          + SceneGameSyncStatusMsg.ADAPTER.encodedSizeWithTag(7, value.sceneGameSyncStatusMsg)
          + SceneSingSyncStatusMsg.ADAPTER.encodedSizeWithTag(8, value.sceneSingSyncStatusMsg)
          + SceneChatSyncStatusMsg.ADAPTER.encodedSizeWithTag(9, value.sceneChatSyncStatusMsg)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CombineRoomSyncStatusV2Msg value) throws IOException {
      ProtoAdapter.SINT64.encodeWithTag(writer, 1, value.syncStatusTimeMs);
      ProtoAdapter.SINT64.encodeWithTag(writer, 2, value.passedTimeMs);
      UserLockInfo.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.userLockInfo);
      ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.enableNoLimitDuration);
      ECombineStatus.ADAPTER.encodeWithTag(writer, 5, value.status);
      ESceneType.ADAPTER.encodeWithTag(writer, 6, value.curScene);
      SceneGameSyncStatusMsg.ADAPTER.encodeWithTag(writer, 7, value.sceneGameSyncStatusMsg);
      SceneSingSyncStatusMsg.ADAPTER.encodeWithTag(writer, 8, value.sceneSingSyncStatusMsg);
      SceneChatSyncStatusMsg.ADAPTER.encodeWithTag(writer, 9, value.sceneChatSyncStatusMsg);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CombineRoomSyncStatusV2Msg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setSyncStatusTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 2: builder.setPassedTimeMs(ProtoAdapter.SINT64.decode(reader)); break;
          case 3: builder.userLockInfo.add(UserLockInfo.ADAPTER.decode(reader)); break;
          case 4: builder.setEnableNoLimitDuration(ProtoAdapter.BOOL.decode(reader)); break;
          case 5: {
            try {
              builder.setStatus(ECombineStatus.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 6: {
            try {
              builder.setCurScene(ESceneType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 7: builder.setSceneGameSyncStatusMsg(SceneGameSyncStatusMsg.ADAPTER.decode(reader)); break;
          case 8: builder.setSceneSingSyncStatusMsg(SceneSingSyncStatusMsg.ADAPTER.decode(reader)); break;
          case 9: builder.setSceneChatSyncStatusMsg(SceneChatSyncStatusMsg.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CombineRoomSyncStatusV2Msg redact(CombineRoomSyncStatusV2Msg value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.userLockInfo, UserLockInfo.ADAPTER);
      if (builder.sceneGameSyncStatusMsg != null) builder.sceneGameSyncStatusMsg = SceneGameSyncStatusMsg.ADAPTER.redact(builder.sceneGameSyncStatusMsg);
      if (builder.sceneSingSyncStatusMsg != null) builder.sceneSingSyncStatusMsg = SceneSingSyncStatusMsg.ADAPTER.redact(builder.sceneSingSyncStatusMsg);
      if (builder.sceneChatSyncStatusMsg != null) builder.sceneChatSyncStatusMsg = SceneChatSyncStatusMsg.ADAPTER.redact(builder.sceneChatSyncStatusMsg);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
