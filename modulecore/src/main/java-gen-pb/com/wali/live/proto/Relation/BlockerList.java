// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Relation.proto
package com.wali.live.proto.Relation;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class BlockerList extends Message<BlockerList, BlockerList.Builder> {
  public static final ProtoAdapter<BlockerList> ADAPTER = new ProtoAdapter_BlockerList();

  private static final long serialVersionUID = 0L;

  /**
   * 黑名单列表
   */
  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.Relation.Blocker#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Blocker> blockers;

  public BlockerList(List<Blocker> blockers) {
    this(blockers, ByteString.EMPTY);
  }

  public BlockerList(List<Blocker> blockers, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.blockers = Internal.immutableCopyOf("blockers", blockers);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.blockers = Internal.copyOf("blockers", blockers);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BlockerList)) return false;
    BlockerList o = (BlockerList) other;
    return unknownFields().equals(o.unknownFields())
        && blockers.equals(o.blockers);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + blockers.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!blockers.isEmpty()) builder.append(", blockers=").append(blockers);
    return builder.replace(0, 2, "BlockerList{").append('}').toString();
  }

  public byte[] toByteArray() {
    return BlockerList.ADAPTER.encode(this);
  }

  public static final BlockerList parseFrom(byte[] data) throws IOException {
    BlockerList c = null;
       c = BlockerList.ADAPTER.decode(data);
    return c;
  }

  /**
   * 黑名单列表
   */
  public List<Blocker> getBlockersList() {
    if(blockers==null){
        return new java.util.ArrayList<Blocker>();
    }
    return blockers;
  }

  /**
   * 黑名单列表
   */
  public boolean hasBlockersList() {
    return blockers!=null;
  }

  public static final class Builder extends Message.Builder<BlockerList, Builder> {
    public List<Blocker> blockers;

    public Builder() {
      blockers = Internal.newMutableList();
    }

    /**
     * 黑名单列表
     */
    public Builder addAllBlockers(List<Blocker> blockers) {
      Internal.checkElementsNotNull(blockers);
      this.blockers = blockers;
      return this;
    }

    @Override
    public BlockerList build() {
      return new BlockerList(blockers, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BlockerList extends ProtoAdapter<BlockerList> {
    public ProtoAdapter_BlockerList() {
      super(FieldEncoding.LENGTH_DELIMITED, BlockerList.class);
    }

    @Override
    public int encodedSize(BlockerList value) {
      return Blocker.ADAPTER.asRepeated().encodedSizeWithTag(1, value.blockers)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BlockerList value) throws IOException {
      Blocker.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.blockers);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BlockerList decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.blockers.add(Blocker.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BlockerList redact(BlockerList value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.blockers, Blocker.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
