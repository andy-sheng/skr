// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Account.proto
package com.wali.live.proto.Account;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class GetAccessTokenRsp extends Message<GetAccessTokenRsp, GetAccessTokenRsp.Builder> {
  public static final ProtoAdapter<GetAccessTokenRsp> ADAPTER = new ProtoAdapter_GetAccessTokenRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RETCODE = 0;

  public static final String DEFAULT_SERVICETOKEN = "";

  public static final String DEFAULT_SECURITYKEY = "";

  public static final String DEFAULT_ERRMSG = "";

  /**
   * 0:表示成功
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer retCode;

  /**
   * 用于milink传输，有效期服务器控制
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceToken;

  /**
   * 用户milink数据加密
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String securityKey;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String errmsg;

  public GetAccessTokenRsp(Integer retCode, String serviceToken, String securityKey,
      String errmsg) {
    this(retCode, serviceToken, securityKey, errmsg, ByteString.EMPTY);
  }

  public GetAccessTokenRsp(Integer retCode, String serviceToken, String securityKey, String errmsg,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.retCode = retCode;
    this.serviceToken = serviceToken;
    this.securityKey = securityKey;
    this.errmsg = errmsg;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.retCode = retCode;
    builder.serviceToken = serviceToken;
    builder.securityKey = securityKey;
    builder.errmsg = errmsg;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetAccessTokenRsp)) return false;
    GetAccessTokenRsp o = (GetAccessTokenRsp) other;
    return unknownFields().equals(o.unknownFields())
        && retCode.equals(o.retCode)
        && Internal.equals(serviceToken, o.serviceToken)
        && Internal.equals(securityKey, o.securityKey)
        && Internal.equals(errmsg, o.errmsg);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + retCode.hashCode();
      result = result * 37 + (serviceToken != null ? serviceToken.hashCode() : 0);
      result = result * 37 + (securityKey != null ? securityKey.hashCode() : 0);
      result = result * 37 + (errmsg != null ? errmsg.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", retCode=").append(retCode);
    if (serviceToken != null) builder.append(", serviceToken=").append(serviceToken);
    if (securityKey != null) builder.append(", securityKey=").append(securityKey);
    if (errmsg != null) builder.append(", errmsg=").append(errmsg);
    return builder.replace(0, 2, "GetAccessTokenRsp{").append('}').toString();
  }

  public static final GetAccessTokenRsp parseFrom(byte[] data) throws IOException {
    GetAccessTokenRsp c = null;
       c = GetAccessTokenRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 0:表示成功
   */
  public Integer getRetCode() {
    if(retCode==null){
        return DEFAULT_RETCODE;
    }
    return retCode;
  }

  /**
   * 用于milink传输，有效期服务器控制
   */
  public String getServiceToken() {
    if(serviceToken==null){
        return DEFAULT_SERVICETOKEN;
    }
    return serviceToken;
  }

  /**
   * 用户milink数据加密
   */
  public String getSecurityKey() {
    if(securityKey==null){
        return DEFAULT_SECURITYKEY;
    }
    return securityKey;
  }

  public String getErrmsg() {
    if(errmsg==null){
        return DEFAULT_ERRMSG;
    }
    return errmsg;
  }

  /**
   * 0:表示成功
   */
  public boolean hasRetCode() {
    return retCode!=null;
  }

  /**
   * 用于milink传输，有效期服务器控制
   */
  public boolean hasServiceToken() {
    return serviceToken!=null;
  }

  /**
   * 用户milink数据加密
   */
  public boolean hasSecurityKey() {
    return securityKey!=null;
  }

  public boolean hasErrmsg() {
    return errmsg!=null;
  }

  public static final class Builder extends Message.Builder<GetAccessTokenRsp, Builder> {
    public Integer retCode;

    public String serviceToken;

    public String securityKey;

    public String errmsg;

    public Builder() {
    }

    /**
     * 0:表示成功
     */
    public Builder setRetCode(Integer retCode) {
      this.retCode = retCode;
      return this;
    }

    /**
     * 用于milink传输，有效期服务器控制
     */
    public Builder setServiceToken(String serviceToken) {
      this.serviceToken = serviceToken;
      return this;
    }

    /**
     * 用户milink数据加密
     */
    public Builder setSecurityKey(String securityKey) {
      this.securityKey = securityKey;
      return this;
    }

    public Builder setErrmsg(String errmsg) {
      this.errmsg = errmsg;
      return this;
    }

    @Override
    public GetAccessTokenRsp build() {
      return new GetAccessTokenRsp(retCode, serviceToken, securityKey, errmsg, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetAccessTokenRsp extends ProtoAdapter<GetAccessTokenRsp> {
    public ProtoAdapter_GetAccessTokenRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetAccessTokenRsp.class);
    }

    @Override
    public int encodedSize(GetAccessTokenRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.retCode)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.serviceToken)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.securityKey)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.errmsg)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetAccessTokenRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.retCode);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.serviceToken);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.securityKey);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.errmsg);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetAccessTokenRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRetCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setServiceToken(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setSecurityKey(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setErrmsg(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetAccessTokenRsp redact(GetAccessTokenRsp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
