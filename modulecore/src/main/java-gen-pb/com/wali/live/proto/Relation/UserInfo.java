// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Relation.proto
package com.wali.live.proto.Relation;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 用户资料
 */
public final class UserInfo extends Message<UserInfo, UserInfo.Builder> {
  public static final ProtoAdapter<UserInfo> ADAPTER = new ProtoAdapter_UserInfo();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_USERID = 0L;

  public static final Long DEFAULT_AVATAR = 0L;

  public static final String DEFAULT_NICKNAME = "";

  public static final String DEFAULT_SIGNATURE = "";

  public static final Integer DEFAULT_GENDER = 0;

  public static final Integer DEFAULT_LEVEL = 0;

  public static final Integer DEFAULT_BADGE = 0;

  public static final Long DEFAULT_UPDATETIME = 0L;

  public static final String DEFAULT_CERTIFICATION = "";

  public static final Boolean DEFAULT_ISFOLLOWING = false;

  public static final Boolean DEFAULT_ISPUSHABLE = false;

  public static final Boolean DEFAULT_ISBOTHWAY = false;

  public static final Integer DEFAULT_CERTIFICATION_TYPE = 0;

  public static final Boolean DEFAULT_ISPKING = false;

  public static final Boolean DEFAULT_ISSHOWING = false;

  public static final Integer DEFAULT_VIEWERCNT = 0;

  /**
   * uid
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long userId;

  /**
   * 头像
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long avatar;

  /**
   * 昵称
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nickname;

  /**
   * 签名
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String signature;

  /**
   * 性别
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gender;

  /**
   * 等级
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer level;

  /**
   * 徽章
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer badge;

  /**
   * 更新时间，水位
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long updateTime;

  /**
   * 管理员
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> adminUids;

  /**
   * 认证信息
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String certification;

  /**
   * 是否关注 [仅在查询别人的粉丝、关注列表时需要]
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isFollowing;

  /**
   * 是否推送 [仅在查询关注列表时需要]
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isPushable;

  /**
   * 是否双向关注 [判断双向关注]
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isBothway;

  /**
   * 认证类型
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer certification_type;

  /**
   * 是否pk中
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isPking;

  /**
   * 是否在直播
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isShowing;

  /**
   * 直播观众数
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer viewerCnt;

  public UserInfo(Long userId, Long avatar, String nickname, String signature, Integer gender,
      Integer level, Integer badge, Long updateTime, List<Long> adminUids, String certification,
      Boolean isFollowing, Boolean isPushable, Boolean isBothway, Integer certification_type,
      Boolean isPking, Boolean isShowing, Integer viewerCnt) {
    this(userId, avatar, nickname, signature, gender, level, badge, updateTime, adminUids, certification, isFollowing, isPushable, isBothway, certification_type, isPking, isShowing, viewerCnt, ByteString.EMPTY);
  }

  public UserInfo(Long userId, Long avatar, String nickname, String signature, Integer gender,
      Integer level, Integer badge, Long updateTime, List<Long> adminUids, String certification,
      Boolean isFollowing, Boolean isPushable, Boolean isBothway, Integer certification_type,
      Boolean isPking, Boolean isShowing, Integer viewerCnt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userId = userId;
    this.avatar = avatar;
    this.nickname = nickname;
    this.signature = signature;
    this.gender = gender;
    this.level = level;
    this.badge = badge;
    this.updateTime = updateTime;
    this.adminUids = Internal.immutableCopyOf("adminUids", adminUids);
    this.certification = certification;
    this.isFollowing = isFollowing;
    this.isPushable = isPushable;
    this.isBothway = isBothway;
    this.certification_type = certification_type;
    this.isPking = isPking;
    this.isShowing = isShowing;
    this.viewerCnt = viewerCnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userId = userId;
    builder.avatar = avatar;
    builder.nickname = nickname;
    builder.signature = signature;
    builder.gender = gender;
    builder.level = level;
    builder.badge = badge;
    builder.updateTime = updateTime;
    builder.adminUids = Internal.copyOf("adminUids", adminUids);
    builder.certification = certification;
    builder.isFollowing = isFollowing;
    builder.isPushable = isPushable;
    builder.isBothway = isBothway;
    builder.certification_type = certification_type;
    builder.isPking = isPking;
    builder.isShowing = isShowing;
    builder.viewerCnt = viewerCnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UserInfo)) return false;
    UserInfo o = (UserInfo) other;
    return unknownFields().equals(o.unknownFields())
        && userId.equals(o.userId)
        && Internal.equals(avatar, o.avatar)
        && Internal.equals(nickname, o.nickname)
        && Internal.equals(signature, o.signature)
        && Internal.equals(gender, o.gender)
        && Internal.equals(level, o.level)
        && Internal.equals(badge, o.badge)
        && Internal.equals(updateTime, o.updateTime)
        && adminUids.equals(o.adminUids)
        && Internal.equals(certification, o.certification)
        && Internal.equals(isFollowing, o.isFollowing)
        && Internal.equals(isPushable, o.isPushable)
        && Internal.equals(isBothway, o.isBothway)
        && Internal.equals(certification_type, o.certification_type)
        && Internal.equals(isPking, o.isPking)
        && Internal.equals(isShowing, o.isShowing)
        && Internal.equals(viewerCnt, o.viewerCnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + userId.hashCode();
      result = result * 37 + (avatar != null ? avatar.hashCode() : 0);
      result = result * 37 + (nickname != null ? nickname.hashCode() : 0);
      result = result * 37 + (signature != null ? signature.hashCode() : 0);
      result = result * 37 + (gender != null ? gender.hashCode() : 0);
      result = result * 37 + (level != null ? level.hashCode() : 0);
      result = result * 37 + (badge != null ? badge.hashCode() : 0);
      result = result * 37 + (updateTime != null ? updateTime.hashCode() : 0);
      result = result * 37 + adminUids.hashCode();
      result = result * 37 + (certification != null ? certification.hashCode() : 0);
      result = result * 37 + (isFollowing != null ? isFollowing.hashCode() : 0);
      result = result * 37 + (isPushable != null ? isPushable.hashCode() : 0);
      result = result * 37 + (isBothway != null ? isBothway.hashCode() : 0);
      result = result * 37 + (certification_type != null ? certification_type.hashCode() : 0);
      result = result * 37 + (isPking != null ? isPking.hashCode() : 0);
      result = result * 37 + (isShowing != null ? isShowing.hashCode() : 0);
      result = result * 37 + (viewerCnt != null ? viewerCnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", userId=").append(userId);
    if (avatar != null) builder.append(", avatar=").append(avatar);
    if (nickname != null) builder.append(", nickname=").append(nickname);
    if (signature != null) builder.append(", signature=").append(signature);
    if (gender != null) builder.append(", gender=").append(gender);
    if (level != null) builder.append(", level=").append(level);
    if (badge != null) builder.append(", badge=").append(badge);
    if (updateTime != null) builder.append(", updateTime=").append(updateTime);
    if (!adminUids.isEmpty()) builder.append(", adminUids=").append(adminUids);
    if (certification != null) builder.append(", certification=").append(certification);
    if (isFollowing != null) builder.append(", isFollowing=").append(isFollowing);
    if (isPushable != null) builder.append(", isPushable=").append(isPushable);
    if (isBothway != null) builder.append(", isBothway=").append(isBothway);
    if (certification_type != null) builder.append(", certification_type=").append(certification_type);
    if (isPking != null) builder.append(", isPking=").append(isPking);
    if (isShowing != null) builder.append(", isShowing=").append(isShowing);
    if (viewerCnt != null) builder.append(", viewerCnt=").append(viewerCnt);
    return builder.replace(0, 2, "MyUserInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return UserInfo.ADAPTER.encode(this);
  }

  public static final UserInfo parseFrom(byte[] data) throws IOException {
    UserInfo c = null;
       c = UserInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * uid
   */
  public Long getUserId() {
    if(userId==null){
        return DEFAULT_USERID;
    }
    return userId;
  }

  /**
   * 头像
   */
  public Long getAvatar() {
    if(avatar==null){
        return DEFAULT_AVATAR;
    }
    return avatar;
  }

  /**
   * 昵称
   */
  public String getNickname() {
    if(nickname==null){
        return DEFAULT_NICKNAME;
    }
    return nickname;
  }

  /**
   * 签名
   */
  public String getSignature() {
    if(signature==null){
        return DEFAULT_SIGNATURE;
    }
    return signature;
  }

  /**
   * 性别
   */
  public Integer getGender() {
    if(gender==null){
        return DEFAULT_GENDER;
    }
    return gender;
  }

  /**
   * 等级
   */
  public Integer getLevel() {
    if(level==null){
        return DEFAULT_LEVEL;
    }
    return level;
  }

  /**
   * 徽章
   */
  public Integer getBadge() {
    if(badge==null){
        return DEFAULT_BADGE;
    }
    return badge;
  }

  /**
   * 更新时间，水位
   */
  public Long getUpdateTime() {
    if(updateTime==null){
        return DEFAULT_UPDATETIME;
    }
    return updateTime;
  }

  /**
   * 管理员
   */
  public List<Long> getAdminUidsList() {
    if(adminUids==null){
        return new java.util.ArrayList<Long>();
    }
    return adminUids;
  }

  /**
   * 认证信息
   */
  public String getCertification() {
    if(certification==null){
        return DEFAULT_CERTIFICATION;
    }
    return certification;
  }

  /**
   * 是否关注 [仅在查询别人的粉丝、关注列表时需要]
   */
  public Boolean getIsFollowing() {
    if(isFollowing==null){
        return DEFAULT_ISFOLLOWING;
    }
    return isFollowing;
  }

  /**
   * 是否推送 [仅在查询关注列表时需要]
   */
  public Boolean getIsPushable() {
    if(isPushable==null){
        return DEFAULT_ISPUSHABLE;
    }
    return isPushable;
  }

  /**
   * 是否双向关注 [判断双向关注]
   */
  public Boolean getIsBothway() {
    if(isBothway==null){
        return DEFAULT_ISBOTHWAY;
    }
    return isBothway;
  }

  /**
   * 认证类型
   */
  public Integer getCertificationType() {
    if(certification_type==null){
        return DEFAULT_CERTIFICATION_TYPE;
    }
    return certification_type;
  }

  /**
   * 是否pk中
   */
  public Boolean getIsPking() {
    if(isPking==null){
        return DEFAULT_ISPKING;
    }
    return isPking;
  }

  /**
   * 是否在直播
   */
  public Boolean getIsShowing() {
    if(isShowing==null){
        return DEFAULT_ISSHOWING;
    }
    return isShowing;
  }

  /**
   * 直播观众数
   */
  public Integer getViewerCnt() {
    if(viewerCnt==null){
        return DEFAULT_VIEWERCNT;
    }
    return viewerCnt;
  }

  /**
   * uid
   */
  public boolean hasUserId() {
    return userId!=null;
  }

  /**
   * 头像
   */
  public boolean hasAvatar() {
    return avatar!=null;
  }

  /**
   * 昵称
   */
  public boolean hasNickname() {
    return nickname!=null;
  }

  /**
   * 签名
   */
  public boolean hasSignature() {
    return signature!=null;
  }

  /**
   * 性别
   */
  public boolean hasGender() {
    return gender!=null;
  }

  /**
   * 等级
   */
  public boolean hasLevel() {
    return level!=null;
  }

  /**
   * 徽章
   */
  public boolean hasBadge() {
    return badge!=null;
  }

  /**
   * 更新时间，水位
   */
  public boolean hasUpdateTime() {
    return updateTime!=null;
  }

  /**
   * 管理员
   */
  public boolean hasAdminUidsList() {
    return adminUids!=null;
  }

  /**
   * 认证信息
   */
  public boolean hasCertification() {
    return certification!=null;
  }

  /**
   * 是否关注 [仅在查询别人的粉丝、关注列表时需要]
   */
  public boolean hasIsFollowing() {
    return isFollowing!=null;
  }

  /**
   * 是否推送 [仅在查询关注列表时需要]
   */
  public boolean hasIsPushable() {
    return isPushable!=null;
  }

  /**
   * 是否双向关注 [判断双向关注]
   */
  public boolean hasIsBothway() {
    return isBothway!=null;
  }

  /**
   * 认证类型
   */
  public boolean hasCertificationType() {
    return certification_type!=null;
  }

  /**
   * 是否pk中
   */
  public boolean hasIsPking() {
    return isPking!=null;
  }

  /**
   * 是否在直播
   */
  public boolean hasIsShowing() {
    return isShowing!=null;
  }

  /**
   * 直播观众数
   */
  public boolean hasViewerCnt() {
    return viewerCnt!=null;
  }

  public static final class Builder extends Message.Builder<UserInfo, Builder> {
    public Long userId;

    public Long avatar;

    public String nickname;

    public String signature;

    public Integer gender;

    public Integer level;

    public Integer badge;

    public Long updateTime;

    public List<Long> adminUids;

    public String certification;

    public Boolean isFollowing;

    public Boolean isPushable;

    public Boolean isBothway;

    public Integer certification_type;

    public Boolean isPking;

    public Boolean isShowing;

    public Integer viewerCnt;

    public Builder() {
      adminUids = Internal.newMutableList();
    }

    /**
     * uid
     */
    public Builder setUserId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 头像
     */
    public Builder setAvatar(Long avatar) {
      this.avatar = avatar;
      return this;
    }

    /**
     * 昵称
     */
    public Builder setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    /**
     * 签名
     */
    public Builder setSignature(String signature) {
      this.signature = signature;
      return this;
    }

    /**
     * 性别
     */
    public Builder setGender(Integer gender) {
      this.gender = gender;
      return this;
    }

    /**
     * 等级
     */
    public Builder setLevel(Integer level) {
      this.level = level;
      return this;
    }

    /**
     * 徽章
     */
    public Builder setBadge(Integer badge) {
      this.badge = badge;
      return this;
    }

    /**
     * 更新时间，水位
     */
    public Builder setUpdateTime(Long updateTime) {
      this.updateTime = updateTime;
      return this;
    }

    /**
     * 管理员
     */
    public Builder addAllAdminUids(List<Long> adminUids) {
      Internal.checkElementsNotNull(adminUids);
      this.adminUids = adminUids;
      return this;
    }

    /**
     * 认证信息
     */
    public Builder setCertification(String certification) {
      this.certification = certification;
      return this;
    }

    /**
     * 是否关注 [仅在查询别人的粉丝、关注列表时需要]
     */
    public Builder setIsFollowing(Boolean isFollowing) {
      this.isFollowing = isFollowing;
      return this;
    }

    /**
     * 是否推送 [仅在查询关注列表时需要]
     */
    public Builder setIsPushable(Boolean isPushable) {
      this.isPushable = isPushable;
      return this;
    }

    /**
     * 是否双向关注 [判断双向关注]
     */
    public Builder setIsBothway(Boolean isBothway) {
      this.isBothway = isBothway;
      return this;
    }

    /**
     * 认证类型
     */
    public Builder setCertificationType(Integer certification_type) {
      this.certification_type = certification_type;
      return this;
    }

    /**
     * 是否pk中
     */
    public Builder setIsPking(Boolean isPking) {
      this.isPking = isPking;
      return this;
    }

    /**
     * 是否在直播
     */
    public Builder setIsShowing(Boolean isShowing) {
      this.isShowing = isShowing;
      return this;
    }

    /**
     * 直播观众数
     */
    public Builder setViewerCnt(Integer viewerCnt) {
      this.viewerCnt = viewerCnt;
      return this;
    }

    @Override
    public UserInfo build() {
      return new UserInfo(userId, avatar, nickname, signature, gender, level, badge, updateTime, adminUids, certification, isFollowing, isPushable, isBothway, certification_type, isPking, isShowing, viewerCnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UserInfo extends ProtoAdapter<UserInfo> {
    public ProtoAdapter_UserInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, UserInfo.class);
    }

    @Override
    public int encodedSize(UserInfo value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.userId)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.avatar)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.nickname)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.signature)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.gender)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.level)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.badge)
          + ProtoAdapter.UINT64.encodedSizeWithTag(8, value.updateTime)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(9, value.adminUids)
          + ProtoAdapter.STRING.encodedSizeWithTag(10, value.certification)
          + ProtoAdapter.BOOL.encodedSizeWithTag(11, value.isFollowing)
          + ProtoAdapter.BOOL.encodedSizeWithTag(12, value.isPushable)
          + ProtoAdapter.BOOL.encodedSizeWithTag(13, value.isBothway)
          + ProtoAdapter.UINT32.encodedSizeWithTag(14, value.certification_type)
          + ProtoAdapter.BOOL.encodedSizeWithTag(15, value.isPking)
          + ProtoAdapter.BOOL.encodedSizeWithTag(16, value.isShowing)
          + ProtoAdapter.UINT32.encodedSizeWithTag(17, value.viewerCnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UserInfo value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.userId);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.avatar);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.nickname);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.signature);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.gender);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.level);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.badge);
      ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.updateTime);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 9, value.adminUids);
      ProtoAdapter.STRING.encodeWithTag(writer, 10, value.certification);
      ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.isFollowing);
      ProtoAdapter.BOOL.encodeWithTag(writer, 12, value.isPushable);
      ProtoAdapter.BOOL.encodeWithTag(writer, 13, value.isBothway);
      ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.certification_type);
      ProtoAdapter.BOOL.encodeWithTag(writer, 15, value.isPking);
      ProtoAdapter.BOOL.encodeWithTag(writer, 16, value.isShowing);
      ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.viewerCnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UserInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setAvatar(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setNickname(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setSignature(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setGender(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setBadge(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.setUpdateTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.adminUids.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.setCertification(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.setIsFollowing(ProtoAdapter.BOOL.decode(reader)); break;
          case 12: builder.setIsPushable(ProtoAdapter.BOOL.decode(reader)); break;
          case 13: builder.setIsBothway(ProtoAdapter.BOOL.decode(reader)); break;
          case 14: builder.setCertificationType(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.setIsPking(ProtoAdapter.BOOL.decode(reader)); break;
          case 16: builder.setIsShowing(ProtoAdapter.BOOL.decode(reader)); break;
          case 17: builder.setViewerCnt(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UserInfo redact(UserInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
