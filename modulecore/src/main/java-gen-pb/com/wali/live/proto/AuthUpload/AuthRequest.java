// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AuthUpload.proto
package com.wali.live.proto.AuthUpload;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 文件上传前的授权签名，如果文件已存在则重用之前的FileInfo信息，否则进行签名也返回新的FileInfo信息
 * cmd:voip.mfas.auth 多聊
 * cmd:on.mfas.auth   速聊
 * cmd:mzone.mfas.auth  社区化项目
 * cmd:zhibo.mfas.auth  直播
 * 参数解释见 http://ks3.ksyun.com/doc/api/index.html 请求签名部分
 */
public final class AuthRequest extends Message<AuthRequest, AuthRequest.Builder> {
  public static final ProtoAdapter<AuthRequest> ADAPTER = new ProtoAdapter_AuthRequest();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_RID = 0L;

  public static final String DEFAULT_HTTPVERB = "";

  public static final String DEFAULT_CONTENTMD5 = "";

  public static final String DEFAULT_CONTENTTYPE = "";

  public static final String DEFAULT_DATE = "";

  public static final String DEFAULT_CANONICALIZEDHEADERS = "";

  public static final String DEFAULT_SUFFIX = "";

  public static final AuthType DEFAULT_AUTHTYPE = AuthType.DEFAULT;

  public static final Long DEFAULT_VUID = 0L;

  public static final Integer DEFAULT_APPID = 0;

  /**
   * 客户端产生，服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long rid;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String httpVerb;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String contentMd5;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String contentType;

  /**
   * 2015-07-08号之前版本传递客户端时间；2015-07-08号之后版本传""空串，服务器会用当前时间生成date并返回给客户端
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String date;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String canonicalizedHeaders;

  /**
   * 文件后缀名，如上传图片文件则为jpg png等，多聊、速聊项目会使用该字段；社区化mzone、opensdk项目去掉了url里带后缀名的设计， 服务器将不会使用该字段
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String suffix;

  /**
   * 目前只有头像业务才需要传
   */
  @WireField(
      tag = 8,
      adapter = "com.wali.live.proto.AuthUpload.AuthType#ADAPTER"
  )
  public final AuthType authType;

  /**
   * 当前用户vuid，对头像业务用来拼接objectKey
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long vuid;

  /**
   * 服务端调用时填写该字段
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer appid;

  public AuthRequest(Long rid, String httpVerb, String contentMd5, String contentType, String date,
      String canonicalizedHeaders, String suffix, AuthType authType, Long vuid, Integer appid) {
    this(rid, httpVerb, contentMd5, contentType, date, canonicalizedHeaders, suffix, authType, vuid, appid, ByteString.EMPTY);
  }

  public AuthRequest(Long rid, String httpVerb, String contentMd5, String contentType, String date,
      String canonicalizedHeaders, String suffix, AuthType authType, Long vuid, Integer appid,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.rid = rid;
    this.httpVerb = httpVerb;
    this.contentMd5 = contentMd5;
    this.contentType = contentType;
    this.date = date;
    this.canonicalizedHeaders = canonicalizedHeaders;
    this.suffix = suffix;
    this.authType = authType;
    this.vuid = vuid;
    this.appid = appid;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.rid = rid;
    builder.httpVerb = httpVerb;
    builder.contentMd5 = contentMd5;
    builder.contentType = contentType;
    builder.date = date;
    builder.canonicalizedHeaders = canonicalizedHeaders;
    builder.suffix = suffix;
    builder.authType = authType;
    builder.vuid = vuid;
    builder.appid = appid;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AuthRequest)) return false;
    AuthRequest o = (AuthRequest) other;
    return unknownFields().equals(o.unknownFields())
        && rid.equals(o.rid)
        && httpVerb.equals(o.httpVerb)
        && contentMd5.equals(o.contentMd5)
        && contentType.equals(o.contentType)
        && date.equals(o.date)
        && canonicalizedHeaders.equals(o.canonicalizedHeaders)
        && suffix.equals(o.suffix)
        && Internal.equals(authType, o.authType)
        && Internal.equals(vuid, o.vuid)
        && Internal.equals(appid, o.appid);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + rid.hashCode();
      result = result * 37 + httpVerb.hashCode();
      result = result * 37 + contentMd5.hashCode();
      result = result * 37 + contentType.hashCode();
      result = result * 37 + date.hashCode();
      result = result * 37 + canonicalizedHeaders.hashCode();
      result = result * 37 + suffix.hashCode();
      result = result * 37 + (authType != null ? authType.hashCode() : 0);
      result = result * 37 + (vuid != null ? vuid.hashCode() : 0);
      result = result * 37 + (appid != null ? appid.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", rid=").append(rid);
    builder.append(", httpVerb=").append(httpVerb);
    builder.append(", contentMd5=").append(contentMd5);
    builder.append(", contentType=").append(contentType);
    builder.append(", date=").append(date);
    builder.append(", canonicalizedHeaders=").append(canonicalizedHeaders);
    builder.append(", suffix=").append(suffix);
    if (authType != null) builder.append(", authType=").append(authType);
    if (vuid != null) builder.append(", vuid=").append(vuid);
    if (appid != null) builder.append(", appid=").append(appid);
    return builder.replace(0, 2, "AuthRequest{").append('}').toString();
  }

  public byte[] toByteArray() {
    return AuthRequest.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<AuthRequest, Builder> {
    public Long rid;

    public String httpVerb;

    public String contentMd5;

    public String contentType;

    public String date;

    public String canonicalizedHeaders;

    public String suffix;

    public AuthType authType;

    public Long vuid;

    public Integer appid;

    public Builder() {
    }

    /**
     * 客户端产生，服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
     */
    public Builder setRid(Long rid) {
      this.rid = rid;
      return this;
    }

    public Builder setHttpVerb(String httpVerb) {
      this.httpVerb = httpVerb;
      return this;
    }

    public Builder setContentMd5(String contentMd5) {
      this.contentMd5 = contentMd5;
      return this;
    }

    public Builder setContentType(String contentType) {
      this.contentType = contentType;
      return this;
    }

    /**
     * 2015-07-08号之前版本传递客户端时间；2015-07-08号之后版本传""空串，服务器会用当前时间生成date并返回给客户端
     */
    public Builder setDate(String date) {
      this.date = date;
      return this;
    }

    public Builder setCanonicalizedHeaders(String canonicalizedHeaders) {
      this.canonicalizedHeaders = canonicalizedHeaders;
      return this;
    }

    /**
     * 文件后缀名，如上传图片文件则为jpg png等，多聊、速聊项目会使用该字段；社区化mzone、opensdk项目去掉了url里带后缀名的设计， 服务器将不会使用该字段
     */
    public Builder setSuffix(String suffix) {
      this.suffix = suffix;
      return this;
    }

    /**
     * 目前只有头像业务才需要传
     */
    public Builder setAuthType(AuthType authType) {
      this.authType = authType;
      return this;
    }

    /**
     * 当前用户vuid，对头像业务用来拼接objectKey
     */
    public Builder setVuid(Long vuid) {
      this.vuid = vuid;
      return this;
    }

    /**
     * 服务端调用时填写该字段
     */
    public Builder setAppid(Integer appid) {
      this.appid = appid;
      return this;
    }

    @Override
    public AuthRequest build() {
      if (rid == null
          || httpVerb == null
          || contentMd5 == null
          || contentType == null
          || date == null
          || canonicalizedHeaders == null
          || suffix == null) {
        throw Internal.missingRequiredFields(rid, "rid",
            httpVerb, "httpVerb",
            contentMd5, "contentMd5",
            contentType, "contentType",
            date, "date",
            canonicalizedHeaders, "canonicalizedHeaders",
            suffix, "suffix");
      }
      return new AuthRequest(rid, httpVerb, contentMd5, contentType, date, canonicalizedHeaders, suffix, authType, vuid, appid, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_AuthRequest extends ProtoAdapter<AuthRequest> {
    public ProtoAdapter_AuthRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, AuthRequest.class);
    }

    @Override
    public int encodedSize(AuthRequest value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.rid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.httpVerb)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.contentMd5)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.contentType)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.date)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.canonicalizedHeaders)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.suffix)
          + AuthType.ADAPTER.encodedSizeWithTag(8, value.authType)
          + ProtoAdapter.UINT64.encodedSizeWithTag(9, value.vuid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.appid)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AuthRequest value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.rid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.httpVerb);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.contentMd5);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.contentType);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.date);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.canonicalizedHeaders);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.suffix);
      AuthType.ADAPTER.encodeWithTag(writer, 8, value.authType);
      ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.vuid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.appid);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AuthRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setHttpVerb(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setContentMd5(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setContentType(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setDate(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setCanonicalizedHeaders(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setSuffix(ProtoAdapter.STRING.decode(reader)); break;
          case 8: {
            try {
              builder.setAuthType(AuthType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 9: builder.setVuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.setAppid(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AuthRequest redact(AuthRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
