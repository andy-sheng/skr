// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AuthUpload.proto
package com.wali.live.proto.AuthUpload;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class AuthResponse extends Message<AuthResponse, AuthResponse.Builder> {
  public static final ProtoAdapter<AuthResponse> ADAPTER = new ProtoAdapter_AuthResponse();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_RID = 0L;

  public static final Integer DEFAULT_ERRORCODE = 0;

  public static final Boolean DEFAULT_REUSABLE = false;

  public static final String DEFAULT_AUTHORIZATION = "";

  public static final String DEFAULT_ERRORMSG = "";

  public static final String DEFAULT_DATE = "";

  /**
   * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long rid;

  /**
   * 0表示成功,
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer errorCode;

  /**
   * 当reusable=true时不用上传文件，直接重用之前的上传结果；否则要重新上传。
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean reusable;

  /**
   * 当reusable=true时有值，否则无值
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String authorization;

  /**
   * 当reusable=true时就是之前的上传结果，否则为即将使用的上传信息
   */
  @WireField(
      tag = 5,
      adapter = "com.wali.live.proto.AuthUpload.FileInfo#ADAPTER"
  )
  public final FileInfo fileInfo;

  /**
   * 错误原因
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String errorMsg;

  /**
   * 当AuthRequest.date=""时，AuthResponse.date=服务器端时间，否则AuthResponse.date=AuthRequest.date
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String date;

  public AuthResponse(Long rid, Integer errorCode, Boolean reusable, String authorization,
      FileInfo fileInfo, String errorMsg, String date) {
    this(rid, errorCode, reusable, authorization, fileInfo, errorMsg, date, ByteString.EMPTY);
  }

  public AuthResponse(Long rid, Integer errorCode, Boolean reusable, String authorization,
      FileInfo fileInfo, String errorMsg, String date, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.rid = rid;
    this.errorCode = errorCode;
    this.reusable = reusable;
    this.authorization = authorization;
    this.fileInfo = fileInfo;
    this.errorMsg = errorMsg;
    this.date = date;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.rid = rid;
    builder.errorCode = errorCode;
    builder.reusable = reusable;
    builder.authorization = authorization;
    builder.fileInfo = fileInfo;
    builder.errorMsg = errorMsg;
    builder.date = date;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AuthResponse)) return false;
    AuthResponse o = (AuthResponse) other;
    return unknownFields().equals(o.unknownFields())
        && rid.equals(o.rid)
        && errorCode.equals(o.errorCode)
        && Internal.equals(reusable, o.reusable)
        && Internal.equals(authorization, o.authorization)
        && Internal.equals(fileInfo, o.fileInfo)
        && Internal.equals(errorMsg, o.errorMsg)
        && Internal.equals(date, o.date);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + rid.hashCode();
      result = result * 37 + errorCode.hashCode();
      result = result * 37 + (reusable != null ? reusable.hashCode() : 0);
      result = result * 37 + (authorization != null ? authorization.hashCode() : 0);
      result = result * 37 + (fileInfo != null ? fileInfo.hashCode() : 0);
      result = result * 37 + (errorMsg != null ? errorMsg.hashCode() : 0);
      result = result * 37 + (date != null ? date.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", rid=").append(rid);
    builder.append(", errorCode=").append(errorCode);
    if (reusable != null) builder.append(", reusable=").append(reusable);
    if (authorization != null) builder.append(", authorization=").append(authorization);
    if (fileInfo != null) builder.append(", fileInfo=").append(fileInfo);
    if (errorMsg != null) builder.append(", errorMsg=").append(errorMsg);
    if (date != null) builder.append(", date=").append(date);
    return builder.replace(0, 2, "AuthResponse{").append('}').toString();
  }

  public static final AuthResponse parseFrom(byte[] data) throws IOException {
    AuthResponse c = null;
       c = AuthResponse.ADAPTER.decode(data);
    return c;
  }

  /**
   * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
   */
  public Long getRid() {
    if(rid==null){
        return DEFAULT_RID;
    }
    return rid;
  }

  /**
   * 0表示成功,
   */
  public Integer getErrorCode() {
    if(errorCode==null){
        return DEFAULT_ERRORCODE;
    }
    return errorCode;
  }

  /**
   * 当reusable=true时不用上传文件，直接重用之前的上传结果；否则要重新上传。
   */
  public Boolean getReusable() {
    if(reusable==null){
        return DEFAULT_REUSABLE;
    }
    return reusable;
  }

  /**
   * 当reusable=true时有值，否则无值
   */
  public String getAuthorization() {
    if(authorization==null){
        return DEFAULT_AUTHORIZATION;
    }
    return authorization;
  }

  /**
   * 当reusable=true时就是之前的上传结果，否则为即将使用的上传信息
   */
  public FileInfo getFileInfo() {
    if(fileInfo==null){
        return new FileInfo.Builder().build();
    }
    return fileInfo;
  }

  /**
   * 错误原因
   */
  public String getErrorMsg() {
    if(errorMsg==null){
        return DEFAULT_ERRORMSG;
    }
    return errorMsg;
  }

  /**
   * 当AuthRequest.date=""时，AuthResponse.date=服务器端时间，否则AuthResponse.date=AuthRequest.date
   */
  public String getDate() {
    if(date==null){
        return DEFAULT_DATE;
    }
    return date;
  }

  /**
   * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
   */
  public boolean hasRid() {
    return rid!=null;
  }

  /**
   * 0表示成功,
   */
  public boolean hasErrorCode() {
    return errorCode!=null;
  }

  /**
   * 当reusable=true时不用上传文件，直接重用之前的上传结果；否则要重新上传。
   */
  public boolean hasReusable() {
    return reusable!=null;
  }

  /**
   * 当reusable=true时有值，否则无值
   */
  public boolean hasAuthorization() {
    return authorization!=null;
  }

  /**
   * 当reusable=true时就是之前的上传结果，否则为即将使用的上传信息
   */
  public boolean hasFileInfo() {
    return fileInfo!=null;
  }

  /**
   * 错误原因
   */
  public boolean hasErrorMsg() {
    return errorMsg!=null;
  }

  /**
   * 当AuthRequest.date=""时，AuthResponse.date=服务器端时间，否则AuthResponse.date=AuthRequest.date
   */
  public boolean hasDate() {
    return date!=null;
  }

  public static final class Builder extends Message.Builder<AuthResponse, Builder> {
    public Long rid;

    public Integer errorCode;

    public Boolean reusable;

    public String authorization;

    public FileInfo fileInfo;

    public String errorMsg;

    public String date;

    public Builder() {
    }

    /**
     * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
     */
    public Builder setRid(Long rid) {
      this.rid = rid;
      return this;
    }

    /**
     * 0表示成功,
     */
    public Builder setErrorCode(Integer errorCode) {
      this.errorCode = errorCode;
      return this;
    }

    /**
     * 当reusable=true时不用上传文件，直接重用之前的上传结果；否则要重新上传。
     */
    public Builder setReusable(Boolean reusable) {
      this.reusable = reusable;
      return this;
    }

    /**
     * 当reusable=true时有值，否则无值
     */
    public Builder setAuthorization(String authorization) {
      this.authorization = authorization;
      return this;
    }

    /**
     * 当reusable=true时就是之前的上传结果，否则为即将使用的上传信息
     */
    public Builder setFileInfo(FileInfo fileInfo) {
      this.fileInfo = fileInfo;
      return this;
    }

    /**
     * 错误原因
     */
    public Builder setErrorMsg(String errorMsg) {
      this.errorMsg = errorMsg;
      return this;
    }

    /**
     * 当AuthRequest.date=""时，AuthResponse.date=服务器端时间，否则AuthResponse.date=AuthRequest.date
     */
    public Builder setDate(String date) {
      this.date = date;
      return this;
    }

    @Override
    public AuthResponse build() {
      return new AuthResponse(rid, errorCode, reusable, authorization, fileInfo, errorMsg, date, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_AuthResponse extends ProtoAdapter<AuthResponse> {
    public ProtoAdapter_AuthResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, AuthResponse.class);
    }

    @Override
    public int encodedSize(AuthResponse value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.rid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.errorCode)
          + ProtoAdapter.BOOL.encodedSizeWithTag(3, value.reusable)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.authorization)
          + FileInfo.ADAPTER.encodedSizeWithTag(5, value.fileInfo)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.errorMsg)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.date)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AuthResponse value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.rid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.errorCode);
      ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.reusable);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.authorization);
      FileInfo.ADAPTER.encodeWithTag(writer, 5, value.fileInfo);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.errorMsg);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.date);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AuthResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setErrorCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setReusable(ProtoAdapter.BOOL.decode(reader)); break;
          case 4: builder.setAuthorization(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setFileInfo(FileInfo.ADAPTER.decode(reader)); break;
          case 6: builder.setErrorMsg(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setDate(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AuthResponse redact(AuthResponse value) {
      Builder builder = value.newBuilder();
      if (builder.fileInfo != null) builder.fileInfo = FileInfo.ADAPTER.redact(builder.fileInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
