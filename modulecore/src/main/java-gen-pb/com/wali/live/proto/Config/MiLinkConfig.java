// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Config.proto
package com.wali.live.proto.Config;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
 * --proto_path=./proto --java_out=./modulecore/src/main/java-gen-pb/ Config.proto
 * 命令字 zhibo.getconfig
 */
public final class MiLinkConfig extends Message<MiLinkConfig, MiLinkConfig.Builder> {
  public static final ProtoAdapter<MiLinkConfig> ADAPTER = new ProtoAdapter_MiLinkConfig();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_HEARTBEATINTERVAL = 0L;

  public static final Integer DEFAULT_B2TOKENEXPIRETIME = 0;

  /**
   * 心跳的时间间隔
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long heartBeatInterval;

  /**
   * b2token过期时长（秒）
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer b2TokenExpireTime;

  public MiLinkConfig(Long heartBeatInterval, Integer b2TokenExpireTime) {
    this(heartBeatInterval, b2TokenExpireTime, ByteString.EMPTY);
  }

  public MiLinkConfig(Long heartBeatInterval, Integer b2TokenExpireTime, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.heartBeatInterval = heartBeatInterval;
    this.b2TokenExpireTime = b2TokenExpireTime;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.heartBeatInterval = heartBeatInterval;
    builder.b2TokenExpireTime = b2TokenExpireTime;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MiLinkConfig)) return false;
    MiLinkConfig o = (MiLinkConfig) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(heartBeatInterval, o.heartBeatInterval)
        && Internal.equals(b2TokenExpireTime, o.b2TokenExpireTime);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (heartBeatInterval != null ? heartBeatInterval.hashCode() : 0);
      result = result * 37 + (b2TokenExpireTime != null ? b2TokenExpireTime.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (heartBeatInterval != null) builder.append(", heartBeatInterval=").append(heartBeatInterval);
    if (b2TokenExpireTime != null) builder.append(", b2TokenExpireTime=").append(b2TokenExpireTime);
    return builder.replace(0, 2, "MiLinkConfig{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MiLinkConfig.ADAPTER.encode(this);
  }

  public static final MiLinkConfig parseFrom(byte[] data) throws IOException {
    MiLinkConfig c = null;
       c = MiLinkConfig.ADAPTER.decode(data);
    return c;
  }

  /**
   * 心跳的时间间隔
   */
  public Long getHeartBeatInterval() {
    if(heartBeatInterval==null){
        return DEFAULT_HEARTBEATINTERVAL;
    }
    return heartBeatInterval;
  }

  /**
   * b2token过期时长（秒）
   */
  public Integer getB2TokenExpireTime() {
    if(b2TokenExpireTime==null){
        return DEFAULT_B2TOKENEXPIRETIME;
    }
    return b2TokenExpireTime;
  }

  /**
   * 心跳的时间间隔
   */
  public boolean hasHeartBeatInterval() {
    return heartBeatInterval!=null;
  }

  /**
   * b2token过期时长（秒）
   */
  public boolean hasB2TokenExpireTime() {
    return b2TokenExpireTime!=null;
  }

  public static final class Builder extends Message.Builder<MiLinkConfig, Builder> {
    public Long heartBeatInterval;

    public Integer b2TokenExpireTime;

    public Builder() {
    }

    /**
     * 心跳的时间间隔
     */
    public Builder setHeartBeatInterval(Long heartBeatInterval) {
      this.heartBeatInterval = heartBeatInterval;
      return this;
    }

    /**
     * b2token过期时长（秒）
     */
    public Builder setB2TokenExpireTime(Integer b2TokenExpireTime) {
      this.b2TokenExpireTime = b2TokenExpireTime;
      return this;
    }

    @Override
    public MiLinkConfig build() {
      return new MiLinkConfig(heartBeatInterval, b2TokenExpireTime, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MiLinkConfig extends ProtoAdapter<MiLinkConfig> {
    public ProtoAdapter_MiLinkConfig() {
      super(FieldEncoding.LENGTH_DELIMITED, MiLinkConfig.class);
    }

    @Override
    public int encodedSize(MiLinkConfig value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.heartBeatInterval)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.b2TokenExpireTime)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MiLinkConfig value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.heartBeatInterval);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.b2TokenExpireTime);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MiLinkConfig decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setHeartBeatInterval(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setB2TokenExpireTime(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MiLinkConfig redact(MiLinkConfig value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
