// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AuthUpload.proto
package com.wali.live.proto.AuthUpload;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 代表一个小文件的信息
 */
public final class FileInfo extends Message<FileInfo, FileInfo.Builder> {
  public static final ProtoAdapter<FileInfo> ADAPTER = new ProtoAdapter_FileInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_BUCKET = "";

  public static final String DEFAULT_OBJECTKEY = "";

  public static final String DEFAULT_URL = "";

  public static final String DEFAULT_ACL = "";

  public static final String DEFAULT_DOWNLOAD_URL = "";

  public static final String DEFAULT_UPLOAD_URL = "";

  public static final String DEFAULT_DOWNLOAD_DOMAIN = "";

  public static final String DEFAULT_UPLOAD_DOMAIN = "";

  /**
   * 参数解释见 http://ks3.ksyun.com/doc/api/index.html
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String bucket;

  /**
   * 参数解释见 http://ks3.ksyun.com/doc/api/index.html
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String objectKey;

  /**
   * 金山云小文件url
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String url;

  /**
   * 小文件权限
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String acl;

  /**
   * 下载地址
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String download_url;

  /**
   * 上传地址
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String upload_url;

  /**
   * 下载域名
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String download_domain;

  /**
   * 上传域名
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String upload_domain;

  public FileInfo(String bucket, String objectKey, String url, String acl, String download_url,
      String upload_url, String download_domain, String upload_domain) {
    this(bucket, objectKey, url, acl, download_url, upload_url, download_domain, upload_domain, ByteString.EMPTY);
  }

  public FileInfo(String bucket, String objectKey, String url, String acl, String download_url,
      String upload_url, String download_domain, String upload_domain, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.bucket = bucket;
    this.objectKey = objectKey;
    this.url = url;
    this.acl = acl;
    this.download_url = download_url;
    this.upload_url = upload_url;
    this.download_domain = download_domain;
    this.upload_domain = upload_domain;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.bucket = bucket;
    builder.objectKey = objectKey;
    builder.url = url;
    builder.acl = acl;
    builder.download_url = download_url;
    builder.upload_url = upload_url;
    builder.download_domain = download_domain;
    builder.upload_domain = upload_domain;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FileInfo)) return false;
    FileInfo o = (FileInfo) other;
    return unknownFields().equals(o.unknownFields())
        && bucket.equals(o.bucket)
        && objectKey.equals(o.objectKey)
        && url.equals(o.url)
        && acl.equals(o.acl)
        && Internal.equals(download_url, o.download_url)
        && Internal.equals(upload_url, o.upload_url)
        && Internal.equals(download_domain, o.download_domain)
        && Internal.equals(upload_domain, o.upload_domain);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + bucket.hashCode();
      result = result * 37 + objectKey.hashCode();
      result = result * 37 + url.hashCode();
      result = result * 37 + acl.hashCode();
      result = result * 37 + (download_url != null ? download_url.hashCode() : 0);
      result = result * 37 + (upload_url != null ? upload_url.hashCode() : 0);
      result = result * 37 + (download_domain != null ? download_domain.hashCode() : 0);
      result = result * 37 + (upload_domain != null ? upload_domain.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", bucket=").append(bucket);
    builder.append(", objectKey=").append(objectKey);
    builder.append(", url=").append(url);
    builder.append(", acl=").append(acl);
    if (download_url != null) builder.append(", download_url=").append(download_url);
    if (upload_url != null) builder.append(", upload_url=").append(upload_url);
    if (download_domain != null) builder.append(", download_domain=").append(download_domain);
    if (upload_domain != null) builder.append(", upload_domain=").append(upload_domain);
    return builder.replace(0, 2, "FileInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return FileInfo.ADAPTER.encode(this);
  }

  public static final FileInfo parseFrom(byte[] data) throws IOException {
    FileInfo c = null;
       c = FileInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 参数解释见 http://ks3.ksyun.com/doc/api/index.html
   */
  public String getBucket() {
    if(bucket==null){
        return DEFAULT_BUCKET;
    }
    return bucket;
  }

  /**
   * 参数解释见 http://ks3.ksyun.com/doc/api/index.html
   */
  public String getObjectKey() {
    if(objectKey==null){
        return DEFAULT_OBJECTKEY;
    }
    return objectKey;
  }

  /**
   * 金山云小文件url
   */
  public String getUrl() {
    if(url==null){
        return DEFAULT_URL;
    }
    return url;
  }

  /**
   * 小文件权限
   */
  public String getAcl() {
    if(acl==null){
        return DEFAULT_ACL;
    }
    return acl;
  }

  /**
   * 下载地址
   */
  public String getDownloadUrl() {
    if(download_url==null){
        return DEFAULT_DOWNLOAD_URL;
    }
    return download_url;
  }

  /**
   * 上传地址
   */
  public String getUploadUrl() {
    if(upload_url==null){
        return DEFAULT_UPLOAD_URL;
    }
    return upload_url;
  }

  /**
   * 下载域名
   */
  public String getDownloadDomain() {
    if(download_domain==null){
        return DEFAULT_DOWNLOAD_DOMAIN;
    }
    return download_domain;
  }

  /**
   * 上传域名
   */
  public String getUploadDomain() {
    if(upload_domain==null){
        return DEFAULT_UPLOAD_DOMAIN;
    }
    return upload_domain;
  }

  /**
   * 参数解释见 http://ks3.ksyun.com/doc/api/index.html
   */
  public boolean hasBucket() {
    return bucket!=null;
  }

  /**
   * 参数解释见 http://ks3.ksyun.com/doc/api/index.html
   */
  public boolean hasObjectKey() {
    return objectKey!=null;
  }

  /**
   * 金山云小文件url
   */
  public boolean hasUrl() {
    return url!=null;
  }

  /**
   * 小文件权限
   */
  public boolean hasAcl() {
    return acl!=null;
  }

  /**
   * 下载地址
   */
  public boolean hasDownloadUrl() {
    return download_url!=null;
  }

  /**
   * 上传地址
   */
  public boolean hasUploadUrl() {
    return upload_url!=null;
  }

  /**
   * 下载域名
   */
  public boolean hasDownloadDomain() {
    return download_domain!=null;
  }

  /**
   * 上传域名
   */
  public boolean hasUploadDomain() {
    return upload_domain!=null;
  }

  public static final class Builder extends Message.Builder<FileInfo, Builder> {
    public String bucket;

    public String objectKey;

    public String url;

    public String acl;

    public String download_url;

    public String upload_url;

    public String download_domain;

    public String upload_domain;

    public Builder() {
    }

    /**
     * 参数解释见 http://ks3.ksyun.com/doc/api/index.html
     */
    public Builder setBucket(String bucket) {
      this.bucket = bucket;
      return this;
    }

    /**
     * 参数解释见 http://ks3.ksyun.com/doc/api/index.html
     */
    public Builder setObjectKey(String objectKey) {
      this.objectKey = objectKey;
      return this;
    }

    /**
     * 金山云小文件url
     */
    public Builder setUrl(String url) {
      this.url = url;
      return this;
    }

    /**
     * 小文件权限
     */
    public Builder setAcl(String acl) {
      this.acl = acl;
      return this;
    }

    /**
     * 下载地址
     */
    public Builder setDownloadUrl(String download_url) {
      this.download_url = download_url;
      return this;
    }

    /**
     * 上传地址
     */
    public Builder setUploadUrl(String upload_url) {
      this.upload_url = upload_url;
      return this;
    }

    /**
     * 下载域名
     */
    public Builder setDownloadDomain(String download_domain) {
      this.download_domain = download_domain;
      return this;
    }

    /**
     * 上传域名
     */
    public Builder setUploadDomain(String upload_domain) {
      this.upload_domain = upload_domain;
      return this;
    }

    @Override
    public FileInfo build() {
      return new FileInfo(bucket, objectKey, url, acl, download_url, upload_url, download_domain, upload_domain, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_FileInfo extends ProtoAdapter<FileInfo> {
    public ProtoAdapter_FileInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, FileInfo.class);
    }

    @Override
    public int encodedSize(FileInfo value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.bucket)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.objectKey)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.url)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.acl)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.download_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.upload_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.download_domain)
          + ProtoAdapter.STRING.encodedSizeWithTag(8, value.upload_domain)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, FileInfo value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.bucket);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.objectKey);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.url);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.acl);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.download_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.upload_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.download_domain);
      ProtoAdapter.STRING.encodeWithTag(writer, 8, value.upload_domain);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public FileInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setBucket(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setObjectKey(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setAcl(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setDownloadUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setUploadUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setDownloadDomain(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setUploadDomain(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public FileInfo redact(FileInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
