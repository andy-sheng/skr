// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 申请认证(提交申请认证资料)
 * cmd:zhibo.user.applycertification
 */
public final class ApplyCertificationReq extends Message<ApplyCertificationReq, ApplyCertificationReq.Builder> {
  public static final ProtoAdapter<ApplyCertificationReq> ADAPTER = new ProtoAdapter_ApplyCertificationReq();

  private static final long serialVersionUID = 0L;

  public static final ByteString DEFAULT_CERTIFICATIONINFO = ByteString.EMPTY;

  public static final Integer DEFAULT_TYPE = 1;

  /**
   * 认证申请资料信息，由CertificationInfo序列化所得，用户模块透传申请资料二进制给管理后台，管理后台@小山和客户端约定CertificationInfo的字段内容
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.REQUIRED
  )
  public final ByteString certificationInfo;

  /**
   * 1：小米直播认证请求    2:实名认证请求
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  public ApplyCertificationReq(ByteString certificationInfo, Integer type) {
    this(certificationInfo, type, ByteString.EMPTY);
  }

  public ApplyCertificationReq(ByteString certificationInfo, Integer type,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.certificationInfo = certificationInfo;
    this.type = type;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.certificationInfo = certificationInfo;
    builder.type = type;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ApplyCertificationReq)) return false;
    ApplyCertificationReq o = (ApplyCertificationReq) other;
    return unknownFields().equals(o.unknownFields())
        && certificationInfo.equals(o.certificationInfo)
        && Internal.equals(type, o.type);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + certificationInfo.hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", certificationInfo=").append(certificationInfo);
    if (type != null) builder.append(", type=").append(type);
    return builder.replace(0, 2, "ApplyCertificationReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ApplyCertificationReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<ApplyCertificationReq, Builder> {
    public ByteString certificationInfo;

    public Integer type;

    public Builder() {
    }

    /**
     * 认证申请资料信息，由CertificationInfo序列化所得，用户模块透传申请资料二进制给管理后台，管理后台@小山和客户端约定CertificationInfo的字段内容
     */
    public Builder setCertificationInfo(ByteString certificationInfo) {
      this.certificationInfo = certificationInfo;
      return this;
    }

    /**
     * 1：小米直播认证请求    2:实名认证请求
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    @Override
    public ApplyCertificationReq build() {
      if (certificationInfo == null) {
        throw Internal.missingRequiredFields(certificationInfo, "certificationInfo");
      }
      return new ApplyCertificationReq(certificationInfo, type, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ApplyCertificationReq extends ProtoAdapter<ApplyCertificationReq> {
    public ProtoAdapter_ApplyCertificationReq() {
      super(FieldEncoding.LENGTH_DELIMITED, ApplyCertificationReq.class);
    }

    @Override
    public int encodedSize(ApplyCertificationReq value) {
      return ProtoAdapter.BYTES.encodedSizeWithTag(1, value.certificationInfo)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.type)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ApplyCertificationReq value) throws IOException {
      ProtoAdapter.BYTES.encodeWithTag(writer, 1, value.certificationInfo);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.type);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ApplyCertificationReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setCertificationInfo(ProtoAdapter.BYTES.decode(reader)); break;
          case 2: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ApplyCertificationReq redact(ApplyCertificationReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
