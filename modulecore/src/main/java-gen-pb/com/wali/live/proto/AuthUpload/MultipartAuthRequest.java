// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AuthUpload.proto
package com.wali.live.proto.AuthUpload;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class MultipartAuthRequest extends Message<MultipartAuthRequest, MultipartAuthRequest.Builder> {
  public static final ProtoAdapter<MultipartAuthRequest> ADAPTER = new ProtoAdapter_MultipartAuthRequest();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_RID = 0L;

  public static final String DEFAULT_RESOURCE = "";

  public static final String DEFAULT_DATE = "";

  public static final String DEFAULT_HTTPVERB = "";

  public static final String DEFAULT_CONTENTMD5 = "";

  public static final String DEFAULT_CONTENTTYPE = "";

  public static final String DEFAULT_ACL = "";

  /**
   * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long rid;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String resource;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String date;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String httpVerb;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String contentMd5;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String contentType;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String acl;

  public MultipartAuthRequest(Long rid, String resource, String date, String httpVerb,
      String contentMd5, String contentType, String acl) {
    this(rid, resource, date, httpVerb, contentMd5, contentType, acl, ByteString.EMPTY);
  }

  public MultipartAuthRequest(Long rid, String resource, String date, String httpVerb,
      String contentMd5, String contentType, String acl, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.rid = rid;
    this.resource = resource;
    this.date = date;
    this.httpVerb = httpVerb;
    this.contentMd5 = contentMd5;
    this.contentType = contentType;
    this.acl = acl;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.rid = rid;
    builder.resource = resource;
    builder.date = date;
    builder.httpVerb = httpVerb;
    builder.contentMd5 = contentMd5;
    builder.contentType = contentType;
    builder.acl = acl;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MultipartAuthRequest)) return false;
    MultipartAuthRequest o = (MultipartAuthRequest) other;
    return unknownFields().equals(o.unknownFields())
        && rid.equals(o.rid)
        && resource.equals(o.resource)
        && date.equals(o.date)
        && httpVerb.equals(o.httpVerb)
        && contentMd5.equals(o.contentMd5)
        && contentType.equals(o.contentType)
        && acl.equals(o.acl);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + rid.hashCode();
      result = result * 37 + resource.hashCode();
      result = result * 37 + date.hashCode();
      result = result * 37 + httpVerb.hashCode();
      result = result * 37 + contentMd5.hashCode();
      result = result * 37 + contentType.hashCode();
      result = result * 37 + acl.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", rid=").append(rid);
    builder.append(", resource=").append(resource);
    builder.append(", date=").append(date);
    builder.append(", httpVerb=").append(httpVerb);
    builder.append(", contentMd5=").append(contentMd5);
    builder.append(", contentType=").append(contentType);
    builder.append(", acl=").append(acl);
    return builder.replace(0, 2, "MultipartAuthRequest{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MultipartAuthRequest.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<MultipartAuthRequest, Builder> {
    public Long rid;

    public String resource;

    public String date;

    public String httpVerb;

    public String contentMd5;

    public String contentType;

    public String acl;

    public Builder() {
    }

    /**
     * 服务器返回的AuthResponse会原样带回AuthRequest的rid，客户端根据rid来将Request和Response配对
     */
    public Builder setRid(Long rid) {
      this.rid = rid;
      return this;
    }

    public Builder setResource(String resource) {
      this.resource = resource;
      return this;
    }

    public Builder setDate(String date) {
      this.date = date;
      return this;
    }

    public Builder setHttpVerb(String httpVerb) {
      this.httpVerb = httpVerb;
      return this;
    }

    public Builder setContentMd5(String contentMd5) {
      this.contentMd5 = contentMd5;
      return this;
    }

    public Builder setContentType(String contentType) {
      this.contentType = contentType;
      return this;
    }

    public Builder setAcl(String acl) {
      this.acl = acl;
      return this;
    }

    @Override
    public MultipartAuthRequest build() {
      if (rid == null
          || resource == null
          || date == null
          || httpVerb == null
          || contentMd5 == null
          || contentType == null
          || acl == null) {
        throw Internal.missingRequiredFields(rid, "rid",
            resource, "resource",
            date, "date",
            httpVerb, "httpVerb",
            contentMd5, "contentMd5",
            contentType, "contentType",
            acl, "acl");
      }
      return new MultipartAuthRequest(rid, resource, date, httpVerb, contentMd5, contentType, acl, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MultipartAuthRequest extends ProtoAdapter<MultipartAuthRequest> {
    public ProtoAdapter_MultipartAuthRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, MultipartAuthRequest.class);
    }

    @Override
    public int encodedSize(MultipartAuthRequest value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.rid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.resource)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.date)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.httpVerb)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.contentMd5)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.contentType)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.acl)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MultipartAuthRequest value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.rid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.resource);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.date);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.httpVerb);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.contentMd5);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.contentType);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.acl);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MultipartAuthRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setResource(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setDate(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setHttpVerb(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setContentMd5(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setContentType(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setAcl(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MultipartAuthRequest redact(MultipartAuthRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
