// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class GetCountryListRsp extends Message<GetCountryListRsp, GetCountryListRsp.Builder> {
  public static final ProtoAdapter<GetCountryListRsp> ADAPTER = new ProtoAdapter_GetCountryListRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RETCODE = 0;

  public static final String DEFAULT_ERR_MSG = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer retCode;

  /**
   * 错误提示文案, 非空时显示，否则显示客户端默认文案
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String err_msg;

  /**
   * 国家列表
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.User.CountryInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<CountryInfo> countryinfo;

  /**
   * 热门国家列表
   */
  @WireField(
      tag = 4,
      adapter = "com.wali.live.proto.User.CountryInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<CountryInfo> hotcountryinfo;

  public GetCountryListRsp(Integer retCode, String err_msg, List<CountryInfo> countryinfo,
      List<CountryInfo> hotcountryinfo) {
    this(retCode, err_msg, countryinfo, hotcountryinfo, ByteString.EMPTY);
  }

  public GetCountryListRsp(Integer retCode, String err_msg, List<CountryInfo> countryinfo,
      List<CountryInfo> hotcountryinfo, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.retCode = retCode;
    this.err_msg = err_msg;
    this.countryinfo = Internal.immutableCopyOf("countryinfo", countryinfo);
    this.hotcountryinfo = Internal.immutableCopyOf("hotcountryinfo", hotcountryinfo);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.retCode = retCode;
    builder.err_msg = err_msg;
    builder.countryinfo = Internal.copyOf("countryinfo", countryinfo);
    builder.hotcountryinfo = Internal.copyOf("hotcountryinfo", hotcountryinfo);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetCountryListRsp)) return false;
    GetCountryListRsp o = (GetCountryListRsp) other;
    return unknownFields().equals(o.unknownFields())
        && retCode.equals(o.retCode)
        && Internal.equals(err_msg, o.err_msg)
        && countryinfo.equals(o.countryinfo)
        && hotcountryinfo.equals(o.hotcountryinfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + retCode.hashCode();
      result = result * 37 + (err_msg != null ? err_msg.hashCode() : 0);
      result = result * 37 + countryinfo.hashCode();
      result = result * 37 + hotcountryinfo.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", retCode=").append(retCode);
    if (err_msg != null) builder.append(", err_msg=").append(err_msg);
    if (!countryinfo.isEmpty()) builder.append(", countryinfo=").append(countryinfo);
    if (!hotcountryinfo.isEmpty()) builder.append(", hotcountryinfo=").append(hotcountryinfo);
    return builder.replace(0, 2, "GetCountryListRsp{").append('}').toString();
  }

  public static final GetCountryListRsp parseFrom(byte[] data) throws IOException {
    GetCountryListRsp c = null;
       c = GetCountryListRsp.ADAPTER.decode(data);
    return c;
  }

  public Integer getRetCode() {
    if(retCode==null){
        return DEFAULT_RETCODE;
    }
    return retCode;
  }

  /**
   * 错误提示文案, 非空时显示，否则显示客户端默认文案
   */
  public String getErrMsg() {
    if(err_msg==null){
        return DEFAULT_ERR_MSG;
    }
    return err_msg;
  }

  /**
   * 国家列表
   */
  public List<CountryInfo> getCountryinfoList() {
    if(countryinfo==null){
        return new java.util.ArrayList<CountryInfo>();
    }
    return countryinfo;
  }

  /**
   * 热门国家列表
   */
  public List<CountryInfo> getHotcountryinfoList() {
    if(hotcountryinfo==null){
        return new java.util.ArrayList<CountryInfo>();
    }
    return hotcountryinfo;
  }

  public boolean hasRetCode() {
    return retCode!=null;
  }

  /**
   * 错误提示文案, 非空时显示，否则显示客户端默认文案
   */
  public boolean hasErrMsg() {
    return err_msg!=null;
  }

  /**
   * 国家列表
   */
  public boolean hasCountryinfoList() {
    return countryinfo!=null;
  }

  /**
   * 热门国家列表
   */
  public boolean hasHotcountryinfoList() {
    return hotcountryinfo!=null;
  }

  public static final class Builder extends Message.Builder<GetCountryListRsp, Builder> {
    public Integer retCode;

    public String err_msg;

    public List<CountryInfo> countryinfo;

    public List<CountryInfo> hotcountryinfo;

    public Builder() {
      countryinfo = Internal.newMutableList();
      hotcountryinfo = Internal.newMutableList();
    }

    public Builder setRetCode(Integer retCode) {
      this.retCode = retCode;
      return this;
    }

    /**
     * 错误提示文案, 非空时显示，否则显示客户端默认文案
     */
    public Builder setErrMsg(String err_msg) {
      this.err_msg = err_msg;
      return this;
    }

    /**
     * 国家列表
     */
    public Builder addAllCountryinfo(List<CountryInfo> countryinfo) {
      Internal.checkElementsNotNull(countryinfo);
      this.countryinfo = countryinfo;
      return this;
    }

    /**
     * 热门国家列表
     */
    public Builder addAllHotcountryinfo(List<CountryInfo> hotcountryinfo) {
      Internal.checkElementsNotNull(hotcountryinfo);
      this.hotcountryinfo = hotcountryinfo;
      return this;
    }

    @Override
    public GetCountryListRsp build() {
      return new GetCountryListRsp(retCode, err_msg, countryinfo, hotcountryinfo, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetCountryListRsp extends ProtoAdapter<GetCountryListRsp> {
    public ProtoAdapter_GetCountryListRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetCountryListRsp.class);
    }

    @Override
    public int encodedSize(GetCountryListRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.retCode)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.err_msg)
          + CountryInfo.ADAPTER.asRepeated().encodedSizeWithTag(3, value.countryinfo)
          + CountryInfo.ADAPTER.asRepeated().encodedSizeWithTag(4, value.hotcountryinfo)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetCountryListRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.retCode);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.err_msg);
      CountryInfo.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.countryinfo);
      CountryInfo.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.hotcountryinfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetCountryListRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRetCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setErrMsg(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.countryinfo.add(CountryInfo.ADAPTER.decode(reader)); break;
          case 4: builder.hotcountryinfo.add(CountryInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetCountryListRsp redact(GetCountryListRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.countryinfo, CountryInfo.ADAPTER);
      Internal.redactElements(builder.hotcountryinfo, CountryInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
