// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 客户端上传gps的位置信息来查询对应的countrycode 【用于android客户端拿不到正确国家编码的情况】
 * cmd:zhibo.user.getcountrycode
 */
public final class GetCountryCodeReq extends Message<GetCountryCodeReq, GetCountryCodeReq.Builder> {
  public static final ProtoAdapter<GetCountryCodeReq> ADAPTER = new ProtoAdapter_GetCountryCodeReq();

  private static final long serialVersionUID = 0L;

  public static final Double DEFAULT_GPS_LON = 0.0d;

  public static final Double DEFAULT_GPS_LAT = 0.0d;

  public static final String DEFAULT_GPS_COUNTRY = "";

  public static final String DEFAULT_GPS_COUNTRY_CODE = "";

  public static final String DEFAULT_GPS_PROVINCE = "";

  public static final String DEFAULT_GPS_CITY = "";

  public static final Integer DEFAULT_GPS_TYPE = 0;

  public static final Integer DEFAULT_GPS_LANG_TYPE = 0;

  /**
   * 经度
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double gps_lon;

  /**
   * 纬度
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double gps_lat;

  /**
   * 国家
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String gps_country;

  /**
   * gps返回的国家编码【百度地图的country_code不准的】
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String gps_country_code;

  /**
   * 省份
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String gps_province;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String gps_city;

  /**
   * 地址定位的地图类型：0:百度，1:ios原生，2:高德,3:其他
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gps_type;

  /**
   * gps位置信息对应的语言类型 1:简体中文 2：繁体中文 3：英文  [要未知可不填]
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gps_lang_type;

  public GetCountryCodeReq(Double gps_lon, Double gps_lat, String gps_country,
      String gps_country_code, String gps_province, String gps_city, Integer gps_type,
      Integer gps_lang_type) {
    this(gps_lon, gps_lat, gps_country, gps_country_code, gps_province, gps_city, gps_type, gps_lang_type, ByteString.EMPTY);
  }

  public GetCountryCodeReq(Double gps_lon, Double gps_lat, String gps_country,
      String gps_country_code, String gps_province, String gps_city, Integer gps_type,
      Integer gps_lang_type, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.gps_lon = gps_lon;
    this.gps_lat = gps_lat;
    this.gps_country = gps_country;
    this.gps_country_code = gps_country_code;
    this.gps_province = gps_province;
    this.gps_city = gps_city;
    this.gps_type = gps_type;
    this.gps_lang_type = gps_lang_type;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.gps_lon = gps_lon;
    builder.gps_lat = gps_lat;
    builder.gps_country = gps_country;
    builder.gps_country_code = gps_country_code;
    builder.gps_province = gps_province;
    builder.gps_city = gps_city;
    builder.gps_type = gps_type;
    builder.gps_lang_type = gps_lang_type;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetCountryCodeReq)) return false;
    GetCountryCodeReq o = (GetCountryCodeReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(gps_lon, o.gps_lon)
        && Internal.equals(gps_lat, o.gps_lat)
        && Internal.equals(gps_country, o.gps_country)
        && Internal.equals(gps_country_code, o.gps_country_code)
        && Internal.equals(gps_province, o.gps_province)
        && Internal.equals(gps_city, o.gps_city)
        && Internal.equals(gps_type, o.gps_type)
        && Internal.equals(gps_lang_type, o.gps_lang_type);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (gps_lon != null ? gps_lon.hashCode() : 0);
      result = result * 37 + (gps_lat != null ? gps_lat.hashCode() : 0);
      result = result * 37 + (gps_country != null ? gps_country.hashCode() : 0);
      result = result * 37 + (gps_country_code != null ? gps_country_code.hashCode() : 0);
      result = result * 37 + (gps_province != null ? gps_province.hashCode() : 0);
      result = result * 37 + (gps_city != null ? gps_city.hashCode() : 0);
      result = result * 37 + (gps_type != null ? gps_type.hashCode() : 0);
      result = result * 37 + (gps_lang_type != null ? gps_lang_type.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (gps_lon != null) builder.append(", gps_lon=").append(gps_lon);
    if (gps_lat != null) builder.append(", gps_lat=").append(gps_lat);
    if (gps_country != null) builder.append(", gps_country=").append(gps_country);
    if (gps_country_code != null) builder.append(", gps_country_code=").append(gps_country_code);
    if (gps_province != null) builder.append(", gps_province=").append(gps_province);
    if (gps_city != null) builder.append(", gps_city=").append(gps_city);
    if (gps_type != null) builder.append(", gps_type=").append(gps_type);
    if (gps_lang_type != null) builder.append(", gps_lang_type=").append(gps_lang_type);
    return builder.replace(0, 2, "GetCountryCodeReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GetCountryCodeReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<GetCountryCodeReq, Builder> {
    public Double gps_lon;

    public Double gps_lat;

    public String gps_country;

    public String gps_country_code;

    public String gps_province;

    public String gps_city;

    public Integer gps_type;

    public Integer gps_lang_type;

    public Builder() {
    }

    /**
     * 经度
     */
    public Builder setGpsLon(Double gps_lon) {
      this.gps_lon = gps_lon;
      return this;
    }

    /**
     * 纬度
     */
    public Builder setGpsLat(Double gps_lat) {
      this.gps_lat = gps_lat;
      return this;
    }

    /**
     * 国家
     */
    public Builder setGpsCountry(String gps_country) {
      this.gps_country = gps_country;
      return this;
    }

    /**
     * gps返回的国家编码【百度地图的country_code不准的】
     */
    public Builder setGpsCountryCode(String gps_country_code) {
      this.gps_country_code = gps_country_code;
      return this;
    }

    /**
     * 省份
     */
    public Builder setGpsProvince(String gps_province) {
      this.gps_province = gps_province;
      return this;
    }

    public Builder setGpsCity(String gps_city) {
      this.gps_city = gps_city;
      return this;
    }

    /**
     * 地址定位的地图类型：0:百度，1:ios原生，2:高德,3:其他
     */
    public Builder setGpsType(Integer gps_type) {
      this.gps_type = gps_type;
      return this;
    }

    /**
     * gps位置信息对应的语言类型 1:简体中文 2：繁体中文 3：英文  [要未知可不填]
     */
    public Builder setGpsLangType(Integer gps_lang_type) {
      this.gps_lang_type = gps_lang_type;
      return this;
    }

    @Override
    public GetCountryCodeReq build() {
      return new GetCountryCodeReq(gps_lon, gps_lat, gps_country, gps_country_code, gps_province, gps_city, gps_type, gps_lang_type, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetCountryCodeReq extends ProtoAdapter<GetCountryCodeReq> {
    public ProtoAdapter_GetCountryCodeReq() {
      super(FieldEncoding.LENGTH_DELIMITED, GetCountryCodeReq.class);
    }

    @Override
    public int encodedSize(GetCountryCodeReq value) {
      return ProtoAdapter.DOUBLE.encodedSizeWithTag(1, value.gps_lon)
          + ProtoAdapter.DOUBLE.encodedSizeWithTag(2, value.gps_lat)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.gps_country)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.gps_country_code)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.gps_province)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.gps_city)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.gps_type)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.gps_lang_type)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetCountryCodeReq value) throws IOException {
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 1, value.gps_lon);
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 2, value.gps_lat);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.gps_country);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.gps_country_code);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.gps_province);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.gps_city);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.gps_type);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.gps_lang_type);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetCountryCodeReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setGpsLon(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 2: builder.setGpsLat(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 3: builder.setGpsCountry(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setGpsCountryCode(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setGpsProvince(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setGpsCity(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setGpsType(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.setGpsLangType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetCountryCodeReq redact(GetCountryCodeReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
