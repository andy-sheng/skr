// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Config.proto
package com.wali.live.proto.Config;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class MilinkCertificateRsp extends Message<MilinkCertificateRsp, MilinkCertificateRsp.Builder> {
  public static final ProtoAdapter<MilinkCertificateRsp> ADAPTER = new ProtoAdapter_MilinkCertificateRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RET = 0;

  public static final ByteString DEFAULT_CERTIFICATE = ByteString.EMPTY;

  public static final Long DEFAULT_UPDATE_TS = 0L;

  /**
   * 返回码
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer ret;

  /**
   * 证书, 如果有改字段则更新证书
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString certificate;

  /**
   * 证书更新时间
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long update_ts;

  public MilinkCertificateRsp(Integer ret, ByteString certificate, Long update_ts) {
    this(ret, certificate, update_ts, ByteString.EMPTY);
  }

  public MilinkCertificateRsp(Integer ret, ByteString certificate, Long update_ts,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ret = ret;
    this.certificate = certificate;
    this.update_ts = update_ts;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ret = ret;
    builder.certificate = certificate;
    builder.update_ts = update_ts;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MilinkCertificateRsp)) return false;
    MilinkCertificateRsp o = (MilinkCertificateRsp) other;
    return unknownFields().equals(o.unknownFields())
        && ret.equals(o.ret)
        && Internal.equals(certificate, o.certificate)
        && Internal.equals(update_ts, o.update_ts);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + ret.hashCode();
      result = result * 37 + (certificate != null ? certificate.hashCode() : 0);
      result = result * 37 + (update_ts != null ? update_ts.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", ret=").append(ret);
    if (certificate != null) builder.append(", certificate=").append(certificate);
    if (update_ts != null) builder.append(", update_ts=").append(update_ts);
    return builder.replace(0, 2, "MilinkCertificateRsp{").append('}').toString();
  }

  public static final MilinkCertificateRsp parseFrom(byte[] data) throws IOException {
    MilinkCertificateRsp c = null;
       c = MilinkCertificateRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 返回码
   */
  public Integer getRet() {
    if(ret==null){
        return DEFAULT_RET;
    }
    return ret;
  }

  /**
   * 证书, 如果有改字段则更新证书
   */
  public ByteString getCertificate() {
    if(certificate==null){
        return ByteString.of(new byte[0]);
    }
    return certificate;
  }

  /**
   * 证书更新时间
   */
  public Long getUpdateTs() {
    if(update_ts==null){
        return DEFAULT_UPDATE_TS;
    }
    return update_ts;
  }

  /**
   * 返回码
   */
  public boolean hasRet() {
    return ret!=null;
  }

  /**
   * 证书, 如果有改字段则更新证书
   */
  public boolean hasCertificate() {
    return certificate!=null;
  }

  /**
   * 证书更新时间
   */
  public boolean hasUpdateTs() {
    return update_ts!=null;
  }

  public static final class Builder extends Message.Builder<MilinkCertificateRsp, Builder> {
    public Integer ret;

    public ByteString certificate;

    public Long update_ts;

    public Builder() {
    }

    /**
     * 返回码
     */
    public Builder setRet(Integer ret) {
      this.ret = ret;
      return this;
    }

    /**
     * 证书, 如果有改字段则更新证书
     */
    public Builder setCertificate(ByteString certificate) {
      this.certificate = certificate;
      return this;
    }

    /**
     * 证书更新时间
     */
    public Builder setUpdateTs(Long update_ts) {
      this.update_ts = update_ts;
      return this;
    }

    @Override
    public MilinkCertificateRsp build() {
      return new MilinkCertificateRsp(ret, certificate, update_ts, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MilinkCertificateRsp extends ProtoAdapter<MilinkCertificateRsp> {
    public ProtoAdapter_MilinkCertificateRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, MilinkCertificateRsp.class);
    }

    @Override
    public int encodedSize(MilinkCertificateRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.ret)
          + ProtoAdapter.BYTES.encodedSizeWithTag(2, value.certificate)
          + ProtoAdapter.UINT64.encodedSizeWithTag(3, value.update_ts)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MilinkCertificateRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.ret);
      ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.certificate);
      ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.update_ts);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MilinkCertificateRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRet(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setCertificate(ProtoAdapter.BYTES.decode(reader)); break;
          case 3: builder.setUpdateTs(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MilinkCertificateRsp redact(MilinkCertificateRsp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
