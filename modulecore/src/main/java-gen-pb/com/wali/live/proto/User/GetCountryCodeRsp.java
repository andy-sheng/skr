// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class GetCountryCodeRsp extends Message<GetCountryCodeRsp, GetCountryCodeRsp.Builder> {
  public static final ProtoAdapter<GetCountryCodeRsp> ADAPTER = new ProtoAdapter_GetCountryCodeRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RETCODE = 0;

  public static final String DEFAULT_ERR_MSG = "";

  public static final String DEFAULT_COUNTRY_CODE = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer retCode;

  /**
   * 错误提示文案, 非空时显示，否则显示客户端默认文案
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String err_msg;

  /**
   * 国家编码
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String country_code;

  public GetCountryCodeRsp(Integer retCode, String err_msg, String country_code) {
    this(retCode, err_msg, country_code, ByteString.EMPTY);
  }

  public GetCountryCodeRsp(Integer retCode, String err_msg, String country_code,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.retCode = retCode;
    this.err_msg = err_msg;
    this.country_code = country_code;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.retCode = retCode;
    builder.err_msg = err_msg;
    builder.country_code = country_code;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetCountryCodeRsp)) return false;
    GetCountryCodeRsp o = (GetCountryCodeRsp) other;
    return unknownFields().equals(o.unknownFields())
        && retCode.equals(o.retCode)
        && Internal.equals(err_msg, o.err_msg)
        && Internal.equals(country_code, o.country_code);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + retCode.hashCode();
      result = result * 37 + (err_msg != null ? err_msg.hashCode() : 0);
      result = result * 37 + (country_code != null ? country_code.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", retCode=").append(retCode);
    if (err_msg != null) builder.append(", err_msg=").append(err_msg);
    if (country_code != null) builder.append(", country_code=").append(country_code);
    return builder.replace(0, 2, "GetCountryCodeRsp{").append('}').toString();
  }

  public static final GetCountryCodeRsp parseFrom(byte[] data) throws IOException {
    GetCountryCodeRsp c = null;
       c = GetCountryCodeRsp.ADAPTER.decode(data);
    return c;
  }

  public Integer getRetCode() {
    if(retCode==null){
        return DEFAULT_RETCODE;
    }
    return retCode;
  }

  /**
   * 错误提示文案, 非空时显示，否则显示客户端默认文案
   */
  public String getErrMsg() {
    if(err_msg==null){
        return DEFAULT_ERR_MSG;
    }
    return err_msg;
  }

  /**
   * 国家编码
   */
  public String getCountryCode() {
    if(country_code==null){
        return DEFAULT_COUNTRY_CODE;
    }
    return country_code;
  }

  public boolean hasRetCode() {
    return retCode!=null;
  }

  /**
   * 错误提示文案, 非空时显示，否则显示客户端默认文案
   */
  public boolean hasErrMsg() {
    return err_msg!=null;
  }

  /**
   * 国家编码
   */
  public boolean hasCountryCode() {
    return country_code!=null;
  }

  public static final class Builder extends Message.Builder<GetCountryCodeRsp, Builder> {
    public Integer retCode;

    public String err_msg;

    public String country_code;

    public Builder() {
    }

    public Builder setRetCode(Integer retCode) {
      this.retCode = retCode;
      return this;
    }

    /**
     * 错误提示文案, 非空时显示，否则显示客户端默认文案
     */
    public Builder setErrMsg(String err_msg) {
      this.err_msg = err_msg;
      return this;
    }

    /**
     * 国家编码
     */
    public Builder setCountryCode(String country_code) {
      this.country_code = country_code;
      return this;
    }

    @Override
    public GetCountryCodeRsp build() {
      return new GetCountryCodeRsp(retCode, err_msg, country_code, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetCountryCodeRsp extends ProtoAdapter<GetCountryCodeRsp> {
    public ProtoAdapter_GetCountryCodeRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetCountryCodeRsp.class);
    }

    @Override
    public int encodedSize(GetCountryCodeRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.retCode)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.err_msg)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.country_code)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetCountryCodeRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.retCode);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.err_msg);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.country_code);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetCountryCodeRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRetCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setErrMsg(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setCountryCode(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetCountryCodeRsp redact(GetCountryCodeRsp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
