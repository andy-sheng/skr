// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: RoomInfo.proto
package com.wali.live.proto.RoomInfo;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 房间id查房间状态,客户端拉流卡顿的时候用
 * zhibo.live.roominfo
 */
public final class RoomInfoReq extends Message<RoomInfoReq, RoomInfoReq.Builder> {
  public static final ProtoAdapter<RoomInfoReq> ADAPTER = new ProtoAdapter_RoomInfoReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final String DEFAULT_LIVEID = "";

  public static final String DEFAULT_PASSWORD = "";

  public static final Boolean DEFAULT_GETLATESTLIVE = false;

  public static final Boolean DEFAULT_GETGAMEINFOONLY = false;

  /**
   * 操作人id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long uuid;

  /**
   * 直播人id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long zuid;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String liveId;

  /**
   * 如果是加密类型，带密码
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String password;

  /**
   * true：优先返回当前正在直播的信息 ,不管是否跟liveId一致。没有直播时，再返回指定liveId的回放; false:返回指定liveid的直播，如果改liveid的房间已关闭，返回liveid回放
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean getLatestLive;

  /**
   * true:只返回游戏信息
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean getGameInfoOnly;

  public RoomInfoReq(Long uuid, Long zuid, String liveId, String password, Boolean getLatestLive,
      Boolean getGameInfoOnly) {
    this(uuid, zuid, liveId, password, getLatestLive, getGameInfoOnly, ByteString.EMPTY);
  }

  public RoomInfoReq(Long uuid, Long zuid, String liveId, String password, Boolean getLatestLive,
      Boolean getGameInfoOnly, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.uuid = uuid;
    this.zuid = zuid;
    this.liveId = liveId;
    this.password = password;
    this.getLatestLive = getLatestLive;
    this.getGameInfoOnly = getGameInfoOnly;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.uuid = uuid;
    builder.zuid = zuid;
    builder.liveId = liveId;
    builder.password = password;
    builder.getLatestLive = getLatestLive;
    builder.getGameInfoOnly = getGameInfoOnly;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RoomInfoReq)) return false;
    RoomInfoReq o = (RoomInfoReq) other;
    return unknownFields().equals(o.unknownFields())
        && uuid.equals(o.uuid)
        && zuid.equals(o.zuid)
        && liveId.equals(o.liveId)
        && Internal.equals(password, o.password)
        && Internal.equals(getLatestLive, o.getLatestLive)
        && Internal.equals(getGameInfoOnly, o.getGameInfoOnly);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + uuid.hashCode();
      result = result * 37 + zuid.hashCode();
      result = result * 37 + liveId.hashCode();
      result = result * 37 + (password != null ? password.hashCode() : 0);
      result = result * 37 + (getLatestLive != null ? getLatestLive.hashCode() : 0);
      result = result * 37 + (getGameInfoOnly != null ? getGameInfoOnly.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", uuid=").append(uuid);
    builder.append(", zuid=").append(zuid);
    builder.append(", liveId=").append(liveId);
    if (password != null) builder.append(", password=").append(password);
    if (getLatestLive != null) builder.append(", getLatestLive=").append(getLatestLive);
    if (getGameInfoOnly != null) builder.append(", getGameInfoOnly=").append(getGameInfoOnly);
    return builder.replace(0, 2, "RoomInfoReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RoomInfoReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<RoomInfoReq, Builder> {
    public Long uuid;

    public Long zuid;

    public String liveId;

    public String password;

    public Boolean getLatestLive;

    public Boolean getGameInfoOnly;

    public Builder() {
    }

    /**
     * 操作人id
     */
    public Builder setUuid(Long uuid) {
      this.uuid = uuid;
      return this;
    }

    /**
     * 直播人id
     */
    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    public Builder setLiveId(String liveId) {
      this.liveId = liveId;
      return this;
    }

    /**
     * 如果是加密类型，带密码
     */
    public Builder setPassword(String password) {
      this.password = password;
      return this;
    }

    /**
     * true：优先返回当前正在直播的信息 ,不管是否跟liveId一致。没有直播时，再返回指定liveId的回放; false:返回指定liveid的直播，如果改liveid的房间已关闭，返回liveid回放
     */
    public Builder setGetLatestLive(Boolean getLatestLive) {
      this.getLatestLive = getLatestLive;
      return this;
    }

    /**
     * true:只返回游戏信息
     */
    public Builder setGetGameInfoOnly(Boolean getGameInfoOnly) {
      this.getGameInfoOnly = getGameInfoOnly;
      return this;
    }

    @Override
    public RoomInfoReq build() {
      if (uuid == null
          || zuid == null
          || liveId == null) {
        throw Internal.missingRequiredFields(uuid, "uuid",
            zuid, "zuid",
            liveId, "liveId");
      }
      return new RoomInfoReq(uuid, zuid, liveId, password, getLatestLive, getGameInfoOnly, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RoomInfoReq extends ProtoAdapter<RoomInfoReq> {
    public ProtoAdapter_RoomInfoReq() {
      super(FieldEncoding.LENGTH_DELIMITED, RoomInfoReq.class);
    }

    @Override
    public int encodedSize(RoomInfoReq value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.uuid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.zuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.liveId)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.password)
          + ProtoAdapter.BOOL.encodedSizeWithTag(5, value.getLatestLive)
          + ProtoAdapter.BOOL.encodedSizeWithTag(6, value.getGameInfoOnly)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RoomInfoReq value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.uuid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.zuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.liveId);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.password);
      ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.getLatestLive);
      ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.getGameInfoOnly);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RoomInfoReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setLiveId(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setPassword(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setGetLatestLive(ProtoAdapter.BOOL.decode(reader)); break;
          case 6: builder.setGetGameInfoOnly(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RoomInfoReq redact(RoomInfoReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
