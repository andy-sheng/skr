// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: User.proto
package com.wali.live.proto.User;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class HisLive extends Message<HisLive, HisLive.Builder> {
  public static final ProtoAdapter<HisLive> ADAPTER = new ProtoAdapter_HisLive();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_LIVEID = "";

  public static final Integer DEFAULT_VIEWERCNT = 0;

  public static final String DEFAULT_URL = "";

  public static final Long DEFAULT_STARTTIME = 0L;

  public static final Long DEFAULT_ENDTIME = 0L;

  public static final String DEFAULT_LIVETITLE = "";

  public static final String DEFAULT_SHAREURL = "";

  public static final Integer DEFAULT_TYPE = 0;

  /**
   * 房间id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String liveId;

  /**
   * 观众数
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer viewerCnt;

  /**
   * 回放地址
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String url;

  /**
   * 直播开始时间
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long startTime;

  /**
   * 直播结束时间
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long endTime;

  /**
   * 直播标题
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String liveTitle;

  /**
   * 分享的url
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String shareUrl;

  /**
   * 房间的封面信息
   */
  @WireField(
      tag = 8,
      adapter = "com.wali.live.proto.User.LiveCover#ADAPTER"
  )
  public final LiveCover liveCover;

  /**
   * 主播信息
   */
  @WireField(
      tag = 9,
      adapter = "com.wali.live.proto.User.PersonalInfo#ADAPTER"
  )
  public final PersonalInfo user;

  /**
   * 类型，0公开，1私密，2:口令，3门票 //同Live.proto里的直播间type
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  public HisLive(String liveId, Integer viewerCnt, String url, Long startTime, Long endTime,
      String liveTitle, String shareUrl, LiveCover liveCover, PersonalInfo user, Integer type) {
    this(liveId, viewerCnt, url, startTime, endTime, liveTitle, shareUrl, liveCover, user, type, ByteString.EMPTY);
  }

  public HisLive(String liveId, Integer viewerCnt, String url, Long startTime, Long endTime,
      String liveTitle, String shareUrl, LiveCover liveCover, PersonalInfo user, Integer type,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.liveId = liveId;
    this.viewerCnt = viewerCnt;
    this.url = url;
    this.startTime = startTime;
    this.endTime = endTime;
    this.liveTitle = liveTitle;
    this.shareUrl = shareUrl;
    this.liveCover = liveCover;
    this.user = user;
    this.type = type;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.liveId = liveId;
    builder.viewerCnt = viewerCnt;
    builder.url = url;
    builder.startTime = startTime;
    builder.endTime = endTime;
    builder.liveTitle = liveTitle;
    builder.shareUrl = shareUrl;
    builder.liveCover = liveCover;
    builder.user = user;
    builder.type = type;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HisLive)) return false;
    HisLive o = (HisLive) other;
    return unknownFields().equals(o.unknownFields())
        && liveId.equals(o.liveId)
        && Internal.equals(viewerCnt, o.viewerCnt)
        && Internal.equals(url, o.url)
        && Internal.equals(startTime, o.startTime)
        && Internal.equals(endTime, o.endTime)
        && Internal.equals(liveTitle, o.liveTitle)
        && Internal.equals(shareUrl, o.shareUrl)
        && Internal.equals(liveCover, o.liveCover)
        && Internal.equals(user, o.user)
        && Internal.equals(type, o.type);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + liveId.hashCode();
      result = result * 37 + (viewerCnt != null ? viewerCnt.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (startTime != null ? startTime.hashCode() : 0);
      result = result * 37 + (endTime != null ? endTime.hashCode() : 0);
      result = result * 37 + (liveTitle != null ? liveTitle.hashCode() : 0);
      result = result * 37 + (shareUrl != null ? shareUrl.hashCode() : 0);
      result = result * 37 + (liveCover != null ? liveCover.hashCode() : 0);
      result = result * 37 + (user != null ? user.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", liveId=").append(liveId);
    if (viewerCnt != null) builder.append(", viewerCnt=").append(viewerCnt);
    if (url != null) builder.append(", url=").append(url);
    if (startTime != null) builder.append(", startTime=").append(startTime);
    if (endTime != null) builder.append(", endTime=").append(endTime);
    if (liveTitle != null) builder.append(", liveTitle=").append(liveTitle);
    if (shareUrl != null) builder.append(", shareUrl=").append(shareUrl);
    if (liveCover != null) builder.append(", liveCover=").append(liveCover);
    if (user != null) builder.append(", user=").append(user);
    if (type != null) builder.append(", type=").append(type);
    return builder.replace(0, 2, "HisLive{").append('}').toString();
  }

  public byte[] toByteArray() {
    return HisLive.ADAPTER.encode(this);
  }

  public static final HisLive parseFrom(byte[] data) throws IOException {
    HisLive c = null;
       c = HisLive.ADAPTER.decode(data);
    return c;
  }

  /**
   * 房间id
   */
  public String getLiveId() {
    if(liveId==null){
        return DEFAULT_LIVEID;
    }
    return liveId;
  }

  /**
   * 观众数
   */
  public Integer getViewerCnt() {
    if(viewerCnt==null){
        return DEFAULT_VIEWERCNT;
    }
    return viewerCnt;
  }

  /**
   * 回放地址
   */
  public String getUrl() {
    if(url==null){
        return DEFAULT_URL;
    }
    return url;
  }

  /**
   * 直播开始时间
   */
  public Long getStartTime() {
    if(startTime==null){
        return DEFAULT_STARTTIME;
    }
    return startTime;
  }

  /**
   * 直播结束时间
   */
  public Long getEndTime() {
    if(endTime==null){
        return DEFAULT_ENDTIME;
    }
    return endTime;
  }

  /**
   * 直播标题
   */
  public String getLiveTitle() {
    if(liveTitle==null){
        return DEFAULT_LIVETITLE;
    }
    return liveTitle;
  }

  /**
   * 分享的url
   */
  public String getShareUrl() {
    if(shareUrl==null){
        return DEFAULT_SHAREURL;
    }
    return shareUrl;
  }

  /**
   * 房间的封面信息
   */
  public LiveCover getLiveCover() {
    if(liveCover==null){
        return new LiveCover.Builder().build();
    }
    return liveCover;
  }

  /**
   * 主播信息
   */
  public PersonalInfo getUser() {
    if(user==null){
        return new PersonalInfo.Builder().build();
    }
    return user;
  }

  /**
   * 类型，0公开，1私密，2:口令，3门票 //同Live.proto里的直播间type
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  /**
   * 房间id
   */
  public boolean hasLiveId() {
    return liveId!=null;
  }

  /**
   * 观众数
   */
  public boolean hasViewerCnt() {
    return viewerCnt!=null;
  }

  /**
   * 回放地址
   */
  public boolean hasUrl() {
    return url!=null;
  }

  /**
   * 直播开始时间
   */
  public boolean hasStartTime() {
    return startTime!=null;
  }

  /**
   * 直播结束时间
   */
  public boolean hasEndTime() {
    return endTime!=null;
  }

  /**
   * 直播标题
   */
  public boolean hasLiveTitle() {
    return liveTitle!=null;
  }

  /**
   * 分享的url
   */
  public boolean hasShareUrl() {
    return shareUrl!=null;
  }

  /**
   * 房间的封面信息
   */
  public boolean hasLiveCover() {
    return liveCover!=null;
  }

  /**
   * 主播信息
   */
  public boolean hasUser() {
    return user!=null;
  }

  /**
   * 类型，0公开，1私密，2:口令，3门票 //同Live.proto里的直播间type
   */
  public boolean hasType() {
    return type!=null;
  }

  public static final class Builder extends Message.Builder<HisLive, Builder> {
    public String liveId;

    public Integer viewerCnt;

    public String url;

    public Long startTime;

    public Long endTime;

    public String liveTitle;

    public String shareUrl;

    public LiveCover liveCover;

    public PersonalInfo user;

    public Integer type;

    public Builder() {
    }

    /**
     * 房间id
     */
    public Builder setLiveId(String liveId) {
      this.liveId = liveId;
      return this;
    }

    /**
     * 观众数
     */
    public Builder setViewerCnt(Integer viewerCnt) {
      this.viewerCnt = viewerCnt;
      return this;
    }

    /**
     * 回放地址
     */
    public Builder setUrl(String url) {
      this.url = url;
      return this;
    }

    /**
     * 直播开始时间
     */
    public Builder setStartTime(Long startTime) {
      this.startTime = startTime;
      return this;
    }

    /**
     * 直播结束时间
     */
    public Builder setEndTime(Long endTime) {
      this.endTime = endTime;
      return this;
    }

    /**
     * 直播标题
     */
    public Builder setLiveTitle(String liveTitle) {
      this.liveTitle = liveTitle;
      return this;
    }

    /**
     * 分享的url
     */
    public Builder setShareUrl(String shareUrl) {
      this.shareUrl = shareUrl;
      return this;
    }

    /**
     * 房间的封面信息
     */
    public Builder setLiveCover(LiveCover liveCover) {
      this.liveCover = liveCover;
      return this;
    }

    /**
     * 主播信息
     */
    public Builder setUser(PersonalInfo user) {
      this.user = user;
      return this;
    }

    /**
     * 类型，0公开，1私密，2:口令，3门票 //同Live.proto里的直播间type
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    @Override
    public HisLive build() {
      return new HisLive(liveId, viewerCnt, url, startTime, endTime, liveTitle, shareUrl, liveCover, user, type, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_HisLive extends ProtoAdapter<HisLive> {
    public ProtoAdapter_HisLive() {
      super(FieldEncoding.LENGTH_DELIMITED, HisLive.class);
    }

    @Override
    public int encodedSize(HisLive value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.liveId)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.viewerCnt)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.url)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.startTime)
          + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.endTime)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.liveTitle)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.shareUrl)
          + LiveCover.ADAPTER.encodedSizeWithTag(8, value.liveCover)
          + PersonalInfo.ADAPTER.encodedSizeWithTag(9, value.user)
          + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.type)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, HisLive value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.liveId);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.viewerCnt);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.url);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.startTime);
      ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.endTime);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.liveTitle);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.shareUrl);
      LiveCover.ADAPTER.encodeWithTag(writer, 8, value.liveCover);
      PersonalInfo.ADAPTER.encodeWithTag(writer, 9, value.user);
      ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.type);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public HisLive decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setLiveId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setViewerCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setStartTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.setEndTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.setLiveTitle(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setShareUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setLiveCover(LiveCover.ADAPTER.decode(reader)); break;
          case 9: builder.setUser(PersonalInfo.ADAPTER.decode(reader)); break;
          case 10: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public HisLive redact(HisLive value) {
      Builder builder = value.newBuilder();
      if (builder.liveCover != null) builder.liveCover = LiveCover.ADAPTER.redact(builder.liveCover);
      if (builder.user != null) builder.user = PersonalInfo.ADAPTER.redact(builder.user);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
