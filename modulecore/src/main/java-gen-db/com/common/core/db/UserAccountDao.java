package com.common.core.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.common.core.account.UserAccount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ACCOUNT".
*/
public class UserAccountDao extends AbstractDao<UserAccount, Long> {

    public static final String TABLENAME = "USER_ACCOUNT";

    /**
     * Properties of entity UserAccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property ServiceToken = new Property(2, String.class, "serviceToken", false, "SERVICE_TOKEN");
        public final static Property SecurityKey = new Property(3, String.class, "securityKey", false, "SECURITY_KEY");
        public final static Property PassToken = new Property(4, String.class, "passToken", false, "PASS_TOKEN");
        public final static Property NickName = new Property(5, String.class, "nickName", false, "NICK_NAME");
        public final static Property ImgUrl = new Property(6, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Sex = new Property(7, Integer.class, "sex", false, "SEX");
        public final static Property Slogan = new Property(8, String.class, "slogan", false, "SLOGAN");
        public final static Property UserName = new Property(9, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(10, String.class, "password", false, "PASSWORD");
        public final static Property OldPwd = new Property(11, String.class, "oldPwd", false, "OLD_PWD");
        public final static Property DeviceId = new Property(12, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property PSecurity = new Property(13, String.class, "pSecurity", false, "P_SECURITY");
        public final static Property SSecurity = new Property(14, String.class, "sSecurity", false, "S_SECURITY");
        public final static Property IsReset = new Property(15, Integer.class, "isReset", false, "IS_RESET");
        public final static Property IsNew = new Property(16, Integer.class, "isNew", false, "IS_NEW");
        public final static Property IsLogOff = new Property(17, Boolean.class, "isLogOff", false, "IS_LOG_OFF");
        public final static Property ThirdId = new Property(18, String.class, "thirdId", false, "THIRD_ID");
        public final static Property ChannelId = new Property(19, Integer.class, "channelId", false, "CHANNEL_ID");
        public final static Property NeedEditUserInfo = new Property(20, Boolean.class, "needEditUserInfo", false, "NEED_EDIT_USER_INFO");
        public final static Property Ext = new Property(21, String.class, "ext", false, "EXT");
    }


    public UserAccountDao(DaoConfig config) {
        super(config);
    }
    
    public UserAccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UID\" TEXT NOT NULL ," + // 1: uid
                "\"SERVICE_TOKEN\" TEXT," + // 2: serviceToken
                "\"SECURITY_KEY\" TEXT," + // 3: securityKey
                "\"PASS_TOKEN\" TEXT," + // 4: passToken
                "\"NICK_NAME\" TEXT," + // 5: nickName
                "\"IMG_URL\" TEXT," + // 6: imgUrl
                "\"SEX\" INTEGER," + // 7: sex
                "\"SLOGAN\" TEXT," + // 8: slogan
                "\"USER_NAME\" TEXT," + // 9: userName
                "\"PASSWORD\" TEXT," + // 10: password
                "\"OLD_PWD\" TEXT," + // 11: oldPwd
                "\"DEVICE_ID\" TEXT," + // 12: deviceId
                "\"P_SECURITY\" TEXT," + // 13: pSecurity
                "\"S_SECURITY\" TEXT," + // 14: sSecurity
                "\"IS_RESET\" INTEGER," + // 15: isReset
                "\"IS_NEW\" INTEGER," + // 16: isNew
                "\"IS_LOG_OFF\" INTEGER," + // 17: isLogOff
                "\"THIRD_ID\" TEXT," + // 18: thirdId
                "\"CHANNEL_ID\" INTEGER NOT NULL ," + // 19: channelId
                "\"NEED_EDIT_USER_INFO\" INTEGER," + // 20: needEditUserInfo
                "\"EXT\" TEXT);"); // 21: ext
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_ACCOUNT_UID_DESC ON USER_ACCOUNT" +
                " (\"UID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserAccount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
 
        String serviceToken = entity.getServiceToken();
        if (serviceToken != null) {
            stmt.bindString(3, serviceToken);
        }
 
        String securityKey = entity.getSecurityKey();
        if (securityKey != null) {
            stmt.bindString(4, securityKey);
        }
 
        String passToken = entity.getPassToken();
        if (passToken != null) {
            stmt.bindString(5, passToken);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(7, imgUrl);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(8, sex);
        }
 
        String slogan = entity.getSlogan();
        if (slogan != null) {
            stmt.bindString(9, slogan);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(10, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(11, password);
        }
 
        String oldPwd = entity.getOldPwd();
        if (oldPwd != null) {
            stmt.bindString(12, oldPwd);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(13, deviceId);
        }
 
        String pSecurity = entity.getPSecurity();
        if (pSecurity != null) {
            stmt.bindString(14, pSecurity);
        }
 
        String sSecurity = entity.getSSecurity();
        if (sSecurity != null) {
            stmt.bindString(15, sSecurity);
        }
 
        Integer isReset = entity.getIsReset();
        if (isReset != null) {
            stmt.bindLong(16, isReset);
        }
 
        Integer isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(17, isNew);
        }
 
        Boolean isLogOff = entity.getIsLogOff();
        if (isLogOff != null) {
            stmt.bindLong(18, isLogOff ? 1L: 0L);
        }
 
        String thirdId = entity.getThirdId();
        if (thirdId != null) {
            stmt.bindString(19, thirdId);
        }
        stmt.bindLong(20, entity.getChannelId());
 
        Boolean needEditUserInfo = entity.getNeedEditUserInfo();
        if (needEditUserInfo != null) {
            stmt.bindLong(21, needEditUserInfo ? 1L: 0L);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(22, ext);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserAccount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
 
        String serviceToken = entity.getServiceToken();
        if (serviceToken != null) {
            stmt.bindString(3, serviceToken);
        }
 
        String securityKey = entity.getSecurityKey();
        if (securityKey != null) {
            stmt.bindString(4, securityKey);
        }
 
        String passToken = entity.getPassToken();
        if (passToken != null) {
            stmt.bindString(5, passToken);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(7, imgUrl);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(8, sex);
        }
 
        String slogan = entity.getSlogan();
        if (slogan != null) {
            stmt.bindString(9, slogan);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(10, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(11, password);
        }
 
        String oldPwd = entity.getOldPwd();
        if (oldPwd != null) {
            stmt.bindString(12, oldPwd);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(13, deviceId);
        }
 
        String pSecurity = entity.getPSecurity();
        if (pSecurity != null) {
            stmt.bindString(14, pSecurity);
        }
 
        String sSecurity = entity.getSSecurity();
        if (sSecurity != null) {
            stmt.bindString(15, sSecurity);
        }
 
        Integer isReset = entity.getIsReset();
        if (isReset != null) {
            stmt.bindLong(16, isReset);
        }
 
        Integer isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(17, isNew);
        }
 
        Boolean isLogOff = entity.getIsLogOff();
        if (isLogOff != null) {
            stmt.bindLong(18, isLogOff ? 1L: 0L);
        }
 
        String thirdId = entity.getThirdId();
        if (thirdId != null) {
            stmt.bindString(19, thirdId);
        }
        stmt.bindLong(20, entity.getChannelId());
 
        Boolean needEditUserInfo = entity.getNeedEditUserInfo();
        if (needEditUserInfo != null) {
            stmt.bindLong(21, needEditUserInfo ? 1L: 0L);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(22, ext);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserAccount readEntity(Cursor cursor, int offset) {
        UserAccount entity = new UserAccount( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serviceToken
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // securityKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // passToken
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imgUrl
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // slogan
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // password
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // oldPwd
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // deviceId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pSecurity
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sSecurity
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // isReset
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // isNew
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // isLogOff
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // thirdId
            cursor.getInt(offset + 19), // channelId
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // needEditUserInfo
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // ext
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserAccount entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setServiceToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSecurityKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassToken(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImgUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSlogan(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPassword(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOldPwd(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDeviceId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPSecurity(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSSecurity(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsReset(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setIsNew(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setIsLogOff(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setThirdId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setChannelId(cursor.getInt(offset + 19));
        entity.setNeedEditUserInfo(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setExt(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserAccount entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserAccount entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserAccount entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
