package com.common.core.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.common.core.myinfo.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, Long.class, "uid", false, "UID");
        public final static Property Avatar = new Property(2, Long.class, "avatar", false, "AVATAR");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property Sign = new Property(4, String.class, "sign", false, "SIGN");
        public final static Property Gender = new Property(5, Integer.class, "gender", false, "GENDER");
        public final static Property Level = new Property(6, Integer.class, "level", false, "LEVEL");
        public final static Property Badge = new Property(7, Integer.class, "badge", false, "BADGE");
        public final static Property UpdateTs = new Property(8, Long.class, "updateTs", false, "UPDATE_TS");
        public final static Property CertificationType = new Property(9, Integer.class, "certificationType", false, "CERTIFICATION_TYPE");
        public final static Property Certification = new Property(10, String.class, "certification", false, "CERTIFICATION");
        public final static Property CertificationChanged = new Property(11, Boolean.class, "certificationChanged", false, "CERTIFICATION_CHANGED");
        public final static Property IsFocused = new Property(12, Boolean.class, "isFocused", false, "IS_FOCUSED");
        public final static Property IsBlock = new Property(13, Boolean.class, "isBlock", false, "IS_BLOCK");
        public final static Property IsBothwayFollowing = new Property(14, Boolean.class, "isBothwayFollowing", false, "IS_BOTHWAY_FOLLOWING");
        public final static Property LiveTicketNum = new Property(15, Integer.class, "liveTicketNum", false, "LIVE_TICKET_NUM");
        public final static Property FansNum = new Property(16, Integer.class, "fansNum", false, "FANS_NUM");
        public final static Property FollowNum = new Property(17, Integer.class, "followNum", false, "FOLLOW_NUM");
        public final static Property VodNum = new Property(18, Integer.class, "vodNum", false, "VOD_NUM");
        public final static Property EarnNum = new Property(19, Integer.class, "earnNum", false, "EARN_NUM");
        public final static Property DiamondNum = new Property(20, Integer.class, "diamondNum", false, "DIAMOND_NUM");
        public final static Property GoldCoinNum = new Property(21, Integer.class, "goldCoinNum", false, "GOLD_COIN_NUM");
        public final static Property SendDiamondNum = new Property(22, Integer.class, "sendDiamondNum", false, "SEND_DIAMOND_NUM");
        public final static Property SentVirtualDiamondNum = new Property(23, Integer.class, "sentVirtualDiamondNum", false, "SENT_VIRTUAL_DIAMOND_NUM");
        public final static Property VirtualDiamondNum = new Property(24, Integer.class, "virtualDiamondNum", false, "VIRTUAL_DIAMOND_NUM");
        public final static Property IsLive = new Property(25, Boolean.class, "isLive", false, "IS_LIVE");
        public final static Property ViewUrl = new Property(26, String.class, "viewUrl", false, "VIEW_URL");
        public final static Property RoomId = new Property(27, String.class, "roomId", false, "ROOM_ID");
        public final static Property TvRoomId = new Property(28, String.class, "tvRoomId", false, "TV_ROOM_ID");
        public final static Property RoomType = new Property(29, Integer.class, "roomType", false, "ROOM_TYPE");
        public final static Property Online = new Property(30, Boolean.class, "online", false, "ONLINE");
        public final static Property AppType = new Property(31, Integer.class, "appType", false, "APP_TYPE");
        public final static Property RedName = new Property(32, Boolean.class, "redName", false, "RED_NAME");
        public final static Property NorbleMedal = new Property(33, String.class, "norbleMedal", false, "NORBLE_MEDAL");
        public final static Property VipLevel = new Property(34, Integer.class, "vipLevel", false, "VIP_LEVEL");
        public final static Property IsVipFrozen = new Property(35, Boolean.class, "isVipFrozen", false, "IS_VIP_FROZEN");
        public final static Property IsVipHide = new Property(36, Boolean.class, "isVipHide", false, "IS_VIP_HIDE");
        public final static Property NobleLevel = new Property(37, Integer.class, "nobleLevel", false, "NOBLE_LEVEL");
        public final static Property IsNeedBindPhone = new Property(38, Boolean.class, "isNeedBindPhone", false, "IS_NEED_BIND_PHONE");
        public final static Property PhoneNum = new Property(39, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Ext = new Property(40, String.class, "ext", false, "EXT");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"AVATAR\" INTEGER," + // 2: avatar
                "\"NICK_NAME\" TEXT," + // 3: nickName
                "\"SIGN\" TEXT," + // 4: sign
                "\"GENDER\" INTEGER," + // 5: gender
                "\"LEVEL\" INTEGER," + // 6: level
                "\"BADGE\" INTEGER," + // 7: badge
                "\"UPDATE_TS\" INTEGER," + // 8: updateTs
                "\"CERTIFICATION_TYPE\" INTEGER," + // 9: certificationType
                "\"CERTIFICATION\" TEXT," + // 10: certification
                "\"CERTIFICATION_CHANGED\" INTEGER," + // 11: certificationChanged
                "\"IS_FOCUSED\" INTEGER," + // 12: isFocused
                "\"IS_BLOCK\" INTEGER," + // 13: isBlock
                "\"IS_BOTHWAY_FOLLOWING\" INTEGER," + // 14: isBothwayFollowing
                "\"LIVE_TICKET_NUM\" INTEGER," + // 15: liveTicketNum
                "\"FANS_NUM\" INTEGER," + // 16: fansNum
                "\"FOLLOW_NUM\" INTEGER," + // 17: followNum
                "\"VOD_NUM\" INTEGER," + // 18: vodNum
                "\"EARN_NUM\" INTEGER," + // 19: earnNum
                "\"DIAMOND_NUM\" INTEGER," + // 20: diamondNum
                "\"GOLD_COIN_NUM\" INTEGER," + // 21: goldCoinNum
                "\"SEND_DIAMOND_NUM\" INTEGER," + // 22: sendDiamondNum
                "\"SENT_VIRTUAL_DIAMOND_NUM\" INTEGER," + // 23: sentVirtualDiamondNum
                "\"VIRTUAL_DIAMOND_NUM\" INTEGER," + // 24: virtualDiamondNum
                "\"IS_LIVE\" INTEGER," + // 25: isLive
                "\"VIEW_URL\" TEXT," + // 26: viewUrl
                "\"ROOM_ID\" TEXT," + // 27: roomId
                "\"TV_ROOM_ID\" TEXT," + // 28: tvRoomId
                "\"ROOM_TYPE\" INTEGER," + // 29: roomType
                "\"ONLINE\" INTEGER," + // 30: online
                "\"APP_TYPE\" INTEGER," + // 31: appType
                "\"RED_NAME\" INTEGER," + // 32: redName
                "\"NORBLE_MEDAL\" TEXT," + // 33: norbleMedal
                "\"VIP_LEVEL\" INTEGER," + // 34: vipLevel
                "\"IS_VIP_FROZEN\" INTEGER," + // 35: isVipFrozen
                "\"IS_VIP_HIDE\" INTEGER," + // 36: isVipHide
                "\"NOBLE_LEVEL\" INTEGER," + // 37: nobleLevel
                "\"IS_NEED_BIND_PHONE\" INTEGER," + // 38: isNeedBindPhone
                "\"PHONE_NUM\" TEXT," + // 39: phoneNum
                "\"EXT\" TEXT);"); // 40: ext
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_INFO_UID_DESC ON USER_INFO" +
                " (\"UID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
 
        Long avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindLong(3, avatar);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(5, sign);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(7, level);
        }
 
        Integer badge = entity.getBadge();
        if (badge != null) {
            stmt.bindLong(8, badge);
        }
 
        Long updateTs = entity.getUpdateTs();
        if (updateTs != null) {
            stmt.bindLong(9, updateTs);
        }
 
        Integer certificationType = entity.getCertificationType();
        if (certificationType != null) {
            stmt.bindLong(10, certificationType);
        }
 
        String certification = entity.getCertification();
        if (certification != null) {
            stmt.bindString(11, certification);
        }
 
        Boolean certificationChanged = entity.getCertificationChanged();
        if (certificationChanged != null) {
            stmt.bindLong(12, certificationChanged ? 1L: 0L);
        }
 
        Boolean isFocused = entity.getIsFocused();
        if (isFocused != null) {
            stmt.bindLong(13, isFocused ? 1L: 0L);
        }
 
        Boolean isBlock = entity.getIsBlock();
        if (isBlock != null) {
            stmt.bindLong(14, isBlock ? 1L: 0L);
        }
 
        Boolean isBothwayFollowing = entity.getIsBothwayFollowing();
        if (isBothwayFollowing != null) {
            stmt.bindLong(15, isBothwayFollowing ? 1L: 0L);
        }
 
        Integer liveTicketNum = entity.getLiveTicketNum();
        if (liveTicketNum != null) {
            stmt.bindLong(16, liveTicketNum);
        }
 
        Integer fansNum = entity.getFansNum();
        if (fansNum != null) {
            stmt.bindLong(17, fansNum);
        }
 
        Integer followNum = entity.getFollowNum();
        if (followNum != null) {
            stmt.bindLong(18, followNum);
        }
 
        Integer vodNum = entity.getVodNum();
        if (vodNum != null) {
            stmt.bindLong(19, vodNum);
        }
 
        Integer earnNum = entity.getEarnNum();
        if (earnNum != null) {
            stmt.bindLong(20, earnNum);
        }
 
        Integer diamondNum = entity.getDiamondNum();
        if (diamondNum != null) {
            stmt.bindLong(21, diamondNum);
        }
 
        Integer goldCoinNum = entity.getGoldCoinNum();
        if (goldCoinNum != null) {
            stmt.bindLong(22, goldCoinNum);
        }
 
        Integer sendDiamondNum = entity.getSendDiamondNum();
        if (sendDiamondNum != null) {
            stmt.bindLong(23, sendDiamondNum);
        }
 
        Integer sentVirtualDiamondNum = entity.getSentVirtualDiamondNum();
        if (sentVirtualDiamondNum != null) {
            stmt.bindLong(24, sentVirtualDiamondNum);
        }
 
        Integer virtualDiamondNum = entity.getVirtualDiamondNum();
        if (virtualDiamondNum != null) {
            stmt.bindLong(25, virtualDiamondNum);
        }
 
        Boolean isLive = entity.getIsLive();
        if (isLive != null) {
            stmt.bindLong(26, isLive ? 1L: 0L);
        }
 
        String viewUrl = entity.getViewUrl();
        if (viewUrl != null) {
            stmt.bindString(27, viewUrl);
        }
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(28, roomId);
        }
 
        String tvRoomId = entity.getTvRoomId();
        if (tvRoomId != null) {
            stmt.bindString(29, tvRoomId);
        }
 
        Integer roomType = entity.getRoomType();
        if (roomType != null) {
            stmt.bindLong(30, roomType);
        }
 
        Boolean online = entity.getOnline();
        if (online != null) {
            stmt.bindLong(31, online ? 1L: 0L);
        }
 
        Integer appType = entity.getAppType();
        if (appType != null) {
            stmt.bindLong(32, appType);
        }
 
        Boolean redName = entity.getRedName();
        if (redName != null) {
            stmt.bindLong(33, redName ? 1L: 0L);
        }
 
        String norbleMedal = entity.getNorbleMedal();
        if (norbleMedal != null) {
            stmt.bindString(34, norbleMedal);
        }
 
        Integer vipLevel = entity.getVipLevel();
        if (vipLevel != null) {
            stmt.bindLong(35, vipLevel);
        }
 
        Boolean isVipFrozen = entity.getIsVipFrozen();
        if (isVipFrozen != null) {
            stmt.bindLong(36, isVipFrozen ? 1L: 0L);
        }
 
        Boolean isVipHide = entity.getIsVipHide();
        if (isVipHide != null) {
            stmt.bindLong(37, isVipHide ? 1L: 0L);
        }
 
        Integer nobleLevel = entity.getNobleLevel();
        if (nobleLevel != null) {
            stmt.bindLong(38, nobleLevel);
        }
 
        Boolean isNeedBindPhone = entity.getIsNeedBindPhone();
        if (isNeedBindPhone != null) {
            stmt.bindLong(39, isNeedBindPhone ? 1L: 0L);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(40, phoneNum);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(41, ext);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
 
        Long avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindLong(3, avatar);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(5, sign);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(7, level);
        }
 
        Integer badge = entity.getBadge();
        if (badge != null) {
            stmt.bindLong(8, badge);
        }
 
        Long updateTs = entity.getUpdateTs();
        if (updateTs != null) {
            stmt.bindLong(9, updateTs);
        }
 
        Integer certificationType = entity.getCertificationType();
        if (certificationType != null) {
            stmt.bindLong(10, certificationType);
        }
 
        String certification = entity.getCertification();
        if (certification != null) {
            stmt.bindString(11, certification);
        }
 
        Boolean certificationChanged = entity.getCertificationChanged();
        if (certificationChanged != null) {
            stmt.bindLong(12, certificationChanged ? 1L: 0L);
        }
 
        Boolean isFocused = entity.getIsFocused();
        if (isFocused != null) {
            stmt.bindLong(13, isFocused ? 1L: 0L);
        }
 
        Boolean isBlock = entity.getIsBlock();
        if (isBlock != null) {
            stmt.bindLong(14, isBlock ? 1L: 0L);
        }
 
        Boolean isBothwayFollowing = entity.getIsBothwayFollowing();
        if (isBothwayFollowing != null) {
            stmt.bindLong(15, isBothwayFollowing ? 1L: 0L);
        }
 
        Integer liveTicketNum = entity.getLiveTicketNum();
        if (liveTicketNum != null) {
            stmt.bindLong(16, liveTicketNum);
        }
 
        Integer fansNum = entity.getFansNum();
        if (fansNum != null) {
            stmt.bindLong(17, fansNum);
        }
 
        Integer followNum = entity.getFollowNum();
        if (followNum != null) {
            stmt.bindLong(18, followNum);
        }
 
        Integer vodNum = entity.getVodNum();
        if (vodNum != null) {
            stmt.bindLong(19, vodNum);
        }
 
        Integer earnNum = entity.getEarnNum();
        if (earnNum != null) {
            stmt.bindLong(20, earnNum);
        }
 
        Integer diamondNum = entity.getDiamondNum();
        if (diamondNum != null) {
            stmt.bindLong(21, diamondNum);
        }
 
        Integer goldCoinNum = entity.getGoldCoinNum();
        if (goldCoinNum != null) {
            stmt.bindLong(22, goldCoinNum);
        }
 
        Integer sendDiamondNum = entity.getSendDiamondNum();
        if (sendDiamondNum != null) {
            stmt.bindLong(23, sendDiamondNum);
        }
 
        Integer sentVirtualDiamondNum = entity.getSentVirtualDiamondNum();
        if (sentVirtualDiamondNum != null) {
            stmt.bindLong(24, sentVirtualDiamondNum);
        }
 
        Integer virtualDiamondNum = entity.getVirtualDiamondNum();
        if (virtualDiamondNum != null) {
            stmt.bindLong(25, virtualDiamondNum);
        }
 
        Boolean isLive = entity.getIsLive();
        if (isLive != null) {
            stmt.bindLong(26, isLive ? 1L: 0L);
        }
 
        String viewUrl = entity.getViewUrl();
        if (viewUrl != null) {
            stmt.bindString(27, viewUrl);
        }
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(28, roomId);
        }
 
        String tvRoomId = entity.getTvRoomId();
        if (tvRoomId != null) {
            stmt.bindString(29, tvRoomId);
        }
 
        Integer roomType = entity.getRoomType();
        if (roomType != null) {
            stmt.bindLong(30, roomType);
        }
 
        Boolean online = entity.getOnline();
        if (online != null) {
            stmt.bindLong(31, online ? 1L: 0L);
        }
 
        Integer appType = entity.getAppType();
        if (appType != null) {
            stmt.bindLong(32, appType);
        }
 
        Boolean redName = entity.getRedName();
        if (redName != null) {
            stmt.bindLong(33, redName ? 1L: 0L);
        }
 
        String norbleMedal = entity.getNorbleMedal();
        if (norbleMedal != null) {
            stmt.bindString(34, norbleMedal);
        }
 
        Integer vipLevel = entity.getVipLevel();
        if (vipLevel != null) {
            stmt.bindLong(35, vipLevel);
        }
 
        Boolean isVipFrozen = entity.getIsVipFrozen();
        if (isVipFrozen != null) {
            stmt.bindLong(36, isVipFrozen ? 1L: 0L);
        }
 
        Boolean isVipHide = entity.getIsVipHide();
        if (isVipHide != null) {
            stmt.bindLong(37, isVipHide ? 1L: 0L);
        }
 
        Integer nobleLevel = entity.getNobleLevel();
        if (nobleLevel != null) {
            stmt.bindLong(38, nobleLevel);
        }
 
        Boolean isNeedBindPhone = entity.getIsNeedBindPhone();
        if (isNeedBindPhone != null) {
            stmt.bindLong(39, isNeedBindPhone ? 1L: 0L);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(40, phoneNum);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(41, ext);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sign
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // level
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // badge
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // updateTs
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // certificationType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // certification
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // certificationChanged
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isFocused
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // isBlock
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // isBothwayFollowing
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // liveTicketNum
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // fansNum
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // followNum
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // vodNum
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // earnNum
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // diamondNum
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // goldCoinNum
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // sendDiamondNum
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // sentVirtualDiamondNum
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // virtualDiamondNum
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0, // isLive
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // viewUrl
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // roomId
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // tvRoomId
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // roomType
            cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0, // online
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // appType
            cursor.isNull(offset + 32) ? null : cursor.getShort(offset + 32) != 0, // redName
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // norbleMedal
            cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34), // vipLevel
            cursor.isNull(offset + 35) ? null : cursor.getShort(offset + 35) != 0, // isVipFrozen
            cursor.isNull(offset + 36) ? null : cursor.getShort(offset + 36) != 0, // isVipHide
            cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37), // nobleLevel
            cursor.isNull(offset + 38) ? null : cursor.getShort(offset + 38) != 0, // isNeedBindPhone
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // phoneNum
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40) // ext
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getLong(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSign(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLevel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBadge(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUpdateTs(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setCertificationType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setCertification(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCertificationChanged(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setIsFocused(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setIsBlock(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setIsBothwayFollowing(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setLiveTicketNum(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setFansNum(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setFollowNum(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setVodNum(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setEarnNum(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setDiamondNum(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setGoldCoinNum(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setSendDiamondNum(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setSentVirtualDiamondNum(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setVirtualDiamondNum(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setIsLive(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
        entity.setViewUrl(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setRoomId(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setTvRoomId(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRoomType(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setOnline(cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0);
        entity.setAppType(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setRedName(cursor.isNull(offset + 32) ? null : cursor.getShort(offset + 32) != 0);
        entity.setNorbleMedal(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setVipLevel(cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34));
        entity.setIsVipFrozen(cursor.isNull(offset + 35) ? null : cursor.getShort(offset + 35) != 0);
        entity.setIsVipHide(cursor.isNull(offset + 36) ? null : cursor.getShort(offset + 36) != 0);
        entity.setNobleLevel(cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37));
        entity.setIsNeedBindPhone(cursor.isNull(offset + 38) ? null : cursor.getShort(offset + 38) != 0);
        entity.setPhoneNum(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setExt(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
