package com.common.core.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.common.core.userinfo.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Avatar = new Property(2, Long.class, "avatar", false, "AVATAR");
        public final static Property UserNickname = new Property(3, String.class, "userNickname", false, "USER_NICKNAME");
        public final static Property Signature = new Property(4, String.class, "signature", false, "SIGNATURE");
        public final static Property Gender = new Property(5, Integer.class, "gender", false, "GENDER");
        public final static Property Level = new Property(6, Integer.class, "level", false, "LEVEL");
        public final static Property Badge = new Property(7, Integer.class, "badge", false, "BADGE");
        public final static Property CertificationType = new Property(8, Integer.class, "certificationType", false, "CERTIFICATION_TYPE");
        public final static Property Relative = new Property(9, Integer.class, "relative", false, "RELATIVE");
        public final static Property Block = new Property(10, Boolean.class, "block", false, "BLOCK");
        public final static Property VipLevel = new Property(11, Integer.class, "vipLevel", false, "VIP_LEVEL");
        public final static Property IsVipFrozen = new Property(12, Boolean.class, "isVipFrozen", false, "IS_VIP_FROZEN");
        public final static Property IsVipHide = new Property(13, Boolean.class, "isVipHide", false, "IS_VIP_HIDE");
        public final static Property NobleLevel = new Property(14, Integer.class, "nobleLevel", false, "NOBLE_LEVEL");
        public final static Property Ext = new Property(15, String.class, "ext", false, "EXT");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"AVATAR\" INTEGER," + // 2: avatar
                "\"USER_NICKNAME\" TEXT," + // 3: userNickname
                "\"SIGNATURE\" TEXT," + // 4: signature
                "\"GENDER\" INTEGER," + // 5: gender
                "\"LEVEL\" INTEGER," + // 6: level
                "\"BADGE\" INTEGER," + // 7: badge
                "\"CERTIFICATION_TYPE\" INTEGER," + // 8: certificationType
                "\"RELATIVE\" INTEGER," + // 9: relative
                "\"BLOCK\" INTEGER," + // 10: block
                "\"VIP_LEVEL\" INTEGER," + // 11: vipLevel
                "\"IS_VIP_FROZEN\" INTEGER," + // 12: isVipFrozen
                "\"IS_VIP_HIDE\" INTEGER," + // 13: isVipHide
                "\"NOBLE_LEVEL\" INTEGER," + // 14: nobleLevel
                "\"EXT\" TEXT);"); // 15: ext
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_INFO_USER_ID_DESC ON USER_INFO" +
                " (\"USER_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        Long avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindLong(3, avatar);
        }
 
        String userNickname = entity.getUserNickname();
        if (userNickname != null) {
            stmt.bindString(4, userNickname);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(5, signature);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(7, level);
        }
 
        Integer badge = entity.getBadge();
        if (badge != null) {
            stmt.bindLong(8, badge);
        }
 
        Integer certificationType = entity.getCertificationType();
        if (certificationType != null) {
            stmt.bindLong(9, certificationType);
        }
 
        Integer relative = entity.getRelative();
        if (relative != null) {
            stmt.bindLong(10, relative);
        }
 
        Boolean block = entity.getBlock();
        if (block != null) {
            stmt.bindLong(11, block ? 1L: 0L);
        }
 
        Integer vipLevel = entity.getVipLevel();
        if (vipLevel != null) {
            stmt.bindLong(12, vipLevel);
        }
 
        Boolean isVipFrozen = entity.getIsVipFrozen();
        if (isVipFrozen != null) {
            stmt.bindLong(13, isVipFrozen ? 1L: 0L);
        }
 
        Boolean isVipHide = entity.getIsVipHide();
        if (isVipHide != null) {
            stmt.bindLong(14, isVipHide ? 1L: 0L);
        }
 
        Integer nobleLevel = entity.getNobleLevel();
        if (nobleLevel != null) {
            stmt.bindLong(15, nobleLevel);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(16, ext);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        Long avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindLong(3, avatar);
        }
 
        String userNickname = entity.getUserNickname();
        if (userNickname != null) {
            stmt.bindString(4, userNickname);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(5, signature);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(7, level);
        }
 
        Integer badge = entity.getBadge();
        if (badge != null) {
            stmt.bindLong(8, badge);
        }
 
        Integer certificationType = entity.getCertificationType();
        if (certificationType != null) {
            stmt.bindLong(9, certificationType);
        }
 
        Integer relative = entity.getRelative();
        if (relative != null) {
            stmt.bindLong(10, relative);
        }
 
        Boolean block = entity.getBlock();
        if (block != null) {
            stmt.bindLong(11, block ? 1L: 0L);
        }
 
        Integer vipLevel = entity.getVipLevel();
        if (vipLevel != null) {
            stmt.bindLong(12, vipLevel);
        }
 
        Boolean isVipFrozen = entity.getIsVipFrozen();
        if (isVipFrozen != null) {
            stmt.bindLong(13, isVipFrozen ? 1L: 0L);
        }
 
        Boolean isVipHide = entity.getIsVipHide();
        if (isVipHide != null) {
            stmt.bindLong(14, isVipHide ? 1L: 0L);
        }
 
        Integer nobleLevel = entity.getNobleLevel();
        if (nobleLevel != null) {
            stmt.bindLong(15, nobleLevel);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(16, ext);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userNickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // signature
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // level
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // badge
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // certificationType
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // relative
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // block
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // vipLevel
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isVipFrozen
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // isVipHide
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // nobleLevel
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // ext
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUserNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSignature(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLevel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBadge(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCertificationType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setRelative(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBlock(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setVipLevel(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setIsVipFrozen(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setIsVipHide(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setNobleLevel(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setExt(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
