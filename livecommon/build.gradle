apply plugin: 'com.android.library'

android {
    if (rootProject.ext.buildFlavorType == 'livesdkaar') {
        defaultPublishConfig 'livesdkaarRelease'
    } else {
        defaultPublishConfig 'livesdkappRelease'
    }
    compileSdkVersion rootProject.ext.androidCompileSdkVersion
    buildToolsVersion rootProject.ext.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.androidMinSdkVersion
        targetSdkVersion rootProject.ext.androidTargetSdkVersion
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    productFlavors {
        livesdkapp
        livesdkaar
    }

//    sourceSets {
//        livesdkapp {
//            manifest.srcFile 'src/main/AndroidManifest.xml'
//            java.srcDirs = ['src/main/java', 'src/livesdkapp/java']
//            resources.srcDirs = ['src/main/java']
//            res.srcDirs = ['src/main/res']
//            assets.srcDirs = ['src/main/assets']
//        }
//        livesdkaar {
//            manifest.srcFile 'src/livesdkaar/AndroidManifest1.xml'
//            java.srcDirs = ['src/main/java', 'src/livesdkaar/java']
//            resources.srcDirs = ['src/main/java']
//            res.srcDirs = ['src/main/res']
//            assets.srcDirs = ['src/main/assets']
//        }
//    }

    useLibrary 'org.apache.http.legacy'
}

buildscript {
    repositories {
        mavenCentral()

    }

}

// 放一些直播业务的基础公共类
dependencies {
    testCompile 'junit:junit:4.12'
    def presentationDependencies = rootProject.ext.presentationDependencies
    compile presentationDependencies.androidAppCompat
    compile presentationDependencies.rxAndroid
    compile presentationDependencies.rxJava
    compile presentationDependencies.butterKnife

    compile 'com.thornbirds:component:1.0.0'
    compile 'com.thornbirds:componentAndroid:1.0.0'
    compile project(':data')

//    /*
//     *  动态加载引擎module [ engine | engineplayer ]
//     *  1. AndroidStudio 编译 :assemble前面是编译所选模块名
//     *  2. 命令行         编译 指定的module则是cd到对应目录执行命令
//     *  所以判断编译app还是watchsdkdemo通过 1或2判断
//     */
//    boolean isWatchSdkDemo = gradle.getStartParameter().getTaskRequests().toString().contains("watchsdkdemo:assemble") || gradle.getStartParameter().getCurrentDir().toString().endsWith("/watchsdkdemo")
//    if(isWatchSdkDemo){
//        compile project(':engineplayer')
//    }else{
//        compile project(':engine')
//    }

    if (rootProject.ext.flavorType == 'live') {
        compile project(':enginelive')
    } else {
        compile project(':engineplayer')
    }

    /**
     * 以下都是支付相关，可以优化，sdk去掉一点
     */
    compile files('libs/migamepluginstat_2.jar')
    compile files('libs/ks3-android-sdk-v-1.4.6.jar')

    livesdkappCompile files('libs/SDK_TY_4.6.11.jar')

    livesdkaarCompile files('libs/alipaySingle-20160825.jar')
    livesdkaarCompile files('libs/HyAlipay_release_20161202.jar')
    livesdkaarCompile files('libs/HyUcashierpay_release_20161202.jar')
    livesdkaarCompile files('libs/HyWxWappay_release_20170307.jar')
    livesdkaarCompile files('libs/libammsdk.jar')
    livesdkaarCompile files('libs/reporter.jar')
    livesdkaarCompile files('libs/volley-1.0.19.jar')
    livesdkaarCompile files('libs/zxingcore-3.1.0.jar')
}
