apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.androidCompileSdkVersion
    buildToolsVersion rootProject.ext.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.androidMinSdkVersion
        targetSdkVersion rootProject.ext.androidTargetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    useLibrary 'org.apache.http.legacy'
}

dependencies {
    provided presentationDependencies.androidAppCompat

    compile files('libs/webrtc.jar')
    compile files('libs/devicemanager.jar')
    compile files('libs/xplatform_util.jar')
    compile files('libs/player.jar')
}

task makeJar(type: Jar, dependsOn: build) {
    delete('build/libs/pluginplayer-noproguard.jar')
    //指定生成的jar名
    baseName 'pluginplayer-noproguard'
    //从哪里打包class文件 ,打的包可以在build/libs中找到
    from('build/intermediates/classes/debug/', configurations.compile.collect {
        it.isDirectory() ? it : zipTree(it)
    })
    exclude '**/BuildConfig.class'
    exclude '**/R.class'
    exclude '**/R$*.class'
}

task proguardJar(type: proguard.gradle.ProGuardTask, dependsOn: makeJar) {
    delete('build/libs/pluginplayer.jar')
    // 依赖库
    def sdkDir = android.getSdkDirectory().getAbsolutePath()
    if (sdkDir == null) {
        sdkDir = android.plugin.getSdkFolder().getAbsolutePath()
    }
    libraryjars sdkDir + '/platforms/' + android.compileSdkVersion.toString() + '/android.jar'
    // 输入路径
    injars 'build/libs/pluginplayer-noproguard.jar'
    // 输出路径
    outjars 'build/libs/pluginplayer.jar'
    // 添加配置信息
    configuration android.getDefaultProguardFile('proguard-android.txt')
    configuration 'proguard-rules.pro'
}

task buildJar(type: Copy, dependsOn: proguardJar) {
    from 'build/libs/pluginplayer.jar'
    into '../pluginplayerdemo/libs'
}