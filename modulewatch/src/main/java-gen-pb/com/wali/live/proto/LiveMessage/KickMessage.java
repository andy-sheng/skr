// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 踢人消息
 */
public final class KickMessage extends Message<KickMessage, KickMessage.Builder> {
  public static final ProtoAdapter<KickMessage> ADAPTER = new ProtoAdapter_KickMessage();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final String DEFAULT_LIVEID = "";

  public static final Long DEFAULT_OP_ID = 0L;

  public static final Integer DEFAULT_OP_TYPE = 0;

  public static final Long DEFAULT_KICKED_ID = 0L;

  public static final Integer DEFAULT_OPERATION_TYPE = 0;

  public static final String DEFAULT_KICKED_NICKNAME = "";

  /**
   * 主播id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long zuid;

  /**
   * 直播id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String liveid;

  /**
   * 操作人id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long op_id;

  /**
   * 操作人类型: 0:主播, 1:管理员, 2:榜一
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer op_type;

  /**
   * 被踢用户id
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kicked_id;

  /**
   * 操作类型: 0:本场拉黑，1:永久拉黑
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer operation_type;

  /**
   * 被踢用户昵称
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kicked_nickname;

  public KickMessage(Long zuid, String liveid, Long op_id, Integer op_type, Long kicked_id,
      Integer operation_type, String kicked_nickname) {
    this(zuid, liveid, op_id, op_type, kicked_id, operation_type, kicked_nickname, ByteString.EMPTY);
  }

  public KickMessage(Long zuid, String liveid, Long op_id, Integer op_type, Long kicked_id,
      Integer operation_type, String kicked_nickname, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.zuid = zuid;
    this.liveid = liveid;
    this.op_id = op_id;
    this.op_type = op_type;
    this.kicked_id = kicked_id;
    this.operation_type = operation_type;
    this.kicked_nickname = kicked_nickname;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.zuid = zuid;
    builder.liveid = liveid;
    builder.op_id = op_id;
    builder.op_type = op_type;
    builder.kicked_id = kicked_id;
    builder.operation_type = operation_type;
    builder.kicked_nickname = kicked_nickname;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof KickMessage)) return false;
    KickMessage o = (KickMessage) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(zuid, o.zuid)
        && Internal.equals(liveid, o.liveid)
        && Internal.equals(op_id, o.op_id)
        && Internal.equals(op_type, o.op_type)
        && Internal.equals(kicked_id, o.kicked_id)
        && Internal.equals(operation_type, o.operation_type)
        && Internal.equals(kicked_nickname, o.kicked_nickname);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (zuid != null ? zuid.hashCode() : 0);
      result = result * 37 + (liveid != null ? liveid.hashCode() : 0);
      result = result * 37 + (op_id != null ? op_id.hashCode() : 0);
      result = result * 37 + (op_type != null ? op_type.hashCode() : 0);
      result = result * 37 + (kicked_id != null ? kicked_id.hashCode() : 0);
      result = result * 37 + (operation_type != null ? operation_type.hashCode() : 0);
      result = result * 37 + (kicked_nickname != null ? kicked_nickname.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (zuid != null) builder.append(", zuid=").append(zuid);
    if (liveid != null) builder.append(", liveid=").append(liveid);
    if (op_id != null) builder.append(", op_id=").append(op_id);
    if (op_type != null) builder.append(", op_type=").append(op_type);
    if (kicked_id != null) builder.append(", kicked_id=").append(kicked_id);
    if (operation_type != null) builder.append(", operation_type=").append(operation_type);
    if (kicked_nickname != null) builder.append(", kicked_nickname=").append(kicked_nickname);
    return builder.replace(0, 2, "KickMessage{").append('}').toString();
  }

  public byte[] toByteArray() {
    return KickMessage.ADAPTER.encode(this);
  }

  public static final KickMessage parseFrom(byte[] data) throws IOException {
    KickMessage c = null;
       c = KickMessage.ADAPTER.decode(data);
    return c;
  }

  /**
   * 主播id
   */
  public Long getZuid() {
    if(zuid==null){
        return DEFAULT_ZUID;
    }
    return zuid;
  }

  /**
   * 直播id
   */
  public String getLiveid() {
    if(liveid==null){
        return DEFAULT_LIVEID;
    }
    return liveid;
  }

  /**
   * 操作人id
   */
  public Long getOpId() {
    if(op_id==null){
        return DEFAULT_OP_ID;
    }
    return op_id;
  }

  /**
   * 操作人类型: 0:主播, 1:管理员, 2:榜一
   */
  public Integer getOpType() {
    if(op_type==null){
        return DEFAULT_OP_TYPE;
    }
    return op_type;
  }

  /**
   * 被踢用户id
   */
  public Long getKickedId() {
    if(kicked_id==null){
        return DEFAULT_KICKED_ID;
    }
    return kicked_id;
  }

  /**
   * 操作类型: 0:本场拉黑，1:永久拉黑
   */
  public Integer getOperationType() {
    if(operation_type==null){
        return DEFAULT_OPERATION_TYPE;
    }
    return operation_type;
  }

  /**
   * 被踢用户昵称
   */
  public String getKickedNickname() {
    if(kicked_nickname==null){
        return DEFAULT_KICKED_NICKNAME;
    }
    return kicked_nickname;
  }

  /**
   * 主播id
   */
  public boolean hasZuid() {
    return zuid!=null;
  }

  /**
   * 直播id
   */
  public boolean hasLiveid() {
    return liveid!=null;
  }

  /**
   * 操作人id
   */
  public boolean hasOpId() {
    return op_id!=null;
  }

  /**
   * 操作人类型: 0:主播, 1:管理员, 2:榜一
   */
  public boolean hasOpType() {
    return op_type!=null;
  }

  /**
   * 被踢用户id
   */
  public boolean hasKickedId() {
    return kicked_id!=null;
  }

  /**
   * 操作类型: 0:本场拉黑，1:永久拉黑
   */
  public boolean hasOperationType() {
    return operation_type!=null;
  }

  /**
   * 被踢用户昵称
   */
  public boolean hasKickedNickname() {
    return kicked_nickname!=null;
  }

  public static final class Builder extends Message.Builder<KickMessage, Builder> {
    public Long zuid;

    public String liveid;

    public Long op_id;

    public Integer op_type;

    public Long kicked_id;

    public Integer operation_type;

    public String kicked_nickname;

    public Builder() {
    }

    /**
     * 主播id
     */
    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * 直播id
     */
    public Builder setLiveid(String liveid) {
      this.liveid = liveid;
      return this;
    }

    /**
     * 操作人id
     */
    public Builder setOpId(Long op_id) {
      this.op_id = op_id;
      return this;
    }

    /**
     * 操作人类型: 0:主播, 1:管理员, 2:榜一
     */
    public Builder setOpType(Integer op_type) {
      this.op_type = op_type;
      return this;
    }

    /**
     * 被踢用户id
     */
    public Builder setKickedId(Long kicked_id) {
      this.kicked_id = kicked_id;
      return this;
    }

    /**
     * 操作类型: 0:本场拉黑，1:永久拉黑
     */
    public Builder setOperationType(Integer operation_type) {
      this.operation_type = operation_type;
      return this;
    }

    /**
     * 被踢用户昵称
     */
    public Builder setKickedNickname(String kicked_nickname) {
      this.kicked_nickname = kicked_nickname;
      return this;
    }

    @Override
    public KickMessage build() {
      return new KickMessage(zuid, liveid, op_id, op_type, kicked_id, operation_type, kicked_nickname, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_KickMessage extends ProtoAdapter<KickMessage> {
    public ProtoAdapter_KickMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, KickMessage.class);
    }

    @Override
    public int encodedSize(KickMessage value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.zuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.liveid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(3, value.op_id)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.op_type)
          + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.kicked_id)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.operation_type)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.kicked_nickname)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, KickMessage value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.zuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.liveid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.op_id);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.op_type);
      ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.kicked_id);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.operation_type);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.kicked_nickname);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public KickMessage decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setLiveid(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setOpId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.setOpType(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setKickedId(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.setOperationType(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setKickedNickname(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public KickMessage redact(KickMessage value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
