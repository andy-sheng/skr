// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveCommon.proto
package com.wali.live.proto.LiveCommon;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class NewWidgetUnit extends Message<NewWidgetUnit, NewWidgetUnit.Builder> {
  public static final ProtoAdapter<NewWidgetUnit> ADAPTER = new ProtoAdapter_NewWidgetUnit();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_LINK_URL = "";

  public static final String DEFAULT_ICON = "";

  public static final String DEFAULT_TEXT = "";

  public static final Boolean DEFAULT_URLNEEDPARAM = false;

  public static final String DEFAULT_SCHEMAPREFIX = "";

  public static final String DEFAULT_SCHEMAPOSTFIX = "";

  public static final Integer DEFAULT_OPENTYPE = 0;

  /**
   * 跳转地址，支持native和h5跳转
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String link_url;

  /**
   * 图标地址
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String icon;

  /**
   * 文本
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String text;

  /**
   * 文本颜色
   */
  @WireField(
      tag = 4,
      adapter = "com.wali.live.proto.LiveCommon.ColorConfig#ADAPTER"
  )
  public final ColorConfig textColor;

  /**
   * url是否需要带上主播id，观众id，房间id
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean urlNeedParam;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String schemaPrefix;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String schemaPostfix;

  /**
   * 0:全屏打开,1:半屏打开
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer openType;

  /**
   * H5挂件配置项
   */
  @WireField(
      tag = 9,
      adapter = "com.wali.live.proto.LiveCommon.H5Config#ADAPTER"
  )
  public final H5Config h5Config;

  public NewWidgetUnit(String link_url, String icon, String text, ColorConfig textColor,
      Boolean urlNeedParam, String schemaPrefix, String schemaPostfix, Integer openType,
      H5Config h5Config) {
    this(link_url, icon, text, textColor, urlNeedParam, schemaPrefix, schemaPostfix, openType, h5Config, ByteString.EMPTY);
  }

  public NewWidgetUnit(String link_url, String icon, String text, ColorConfig textColor,
      Boolean urlNeedParam, String schemaPrefix, String schemaPostfix, Integer openType,
      H5Config h5Config, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.link_url = link_url;
    this.icon = icon;
    this.text = text;
    this.textColor = textColor;
    this.urlNeedParam = urlNeedParam;
    this.schemaPrefix = schemaPrefix;
    this.schemaPostfix = schemaPostfix;
    this.openType = openType;
    this.h5Config = h5Config;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.link_url = link_url;
    builder.icon = icon;
    builder.text = text;
    builder.textColor = textColor;
    builder.urlNeedParam = urlNeedParam;
    builder.schemaPrefix = schemaPrefix;
    builder.schemaPostfix = schemaPostfix;
    builder.openType = openType;
    builder.h5Config = h5Config;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof NewWidgetUnit)) return false;
    NewWidgetUnit o = (NewWidgetUnit) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(link_url, o.link_url)
        && Internal.equals(icon, o.icon)
        && Internal.equals(text, o.text)
        && Internal.equals(textColor, o.textColor)
        && Internal.equals(urlNeedParam, o.urlNeedParam)
        && Internal.equals(schemaPrefix, o.schemaPrefix)
        && Internal.equals(schemaPostfix, o.schemaPostfix)
        && Internal.equals(openType, o.openType)
        && Internal.equals(h5Config, o.h5Config);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (link_url != null ? link_url.hashCode() : 0);
      result = result * 37 + (icon != null ? icon.hashCode() : 0);
      result = result * 37 + (text != null ? text.hashCode() : 0);
      result = result * 37 + (textColor != null ? textColor.hashCode() : 0);
      result = result * 37 + (urlNeedParam != null ? urlNeedParam.hashCode() : 0);
      result = result * 37 + (schemaPrefix != null ? schemaPrefix.hashCode() : 0);
      result = result * 37 + (schemaPostfix != null ? schemaPostfix.hashCode() : 0);
      result = result * 37 + (openType != null ? openType.hashCode() : 0);
      result = result * 37 + (h5Config != null ? h5Config.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (link_url != null) builder.append(", link_url=").append(link_url);
    if (icon != null) builder.append(", icon=").append(icon);
    if (text != null) builder.append(", text=").append(text);
    if (textColor != null) builder.append(", textColor=").append(textColor);
    if (urlNeedParam != null) builder.append(", urlNeedParam=").append(urlNeedParam);
    if (schemaPrefix != null) builder.append(", schemaPrefix=").append(schemaPrefix);
    if (schemaPostfix != null) builder.append(", schemaPostfix=").append(schemaPostfix);
    if (openType != null) builder.append(", openType=").append(openType);
    if (h5Config != null) builder.append(", h5Config=").append(h5Config);
    return builder.replace(0, 2, "NewWidgetUnit{").append('}').toString();
  }

  public byte[] toByteArray() {
    return NewWidgetUnit.ADAPTER.encode(this);
  }

  public static final NewWidgetUnit parseFrom(byte[] data) throws IOException {
    NewWidgetUnit c = null;
       c = NewWidgetUnit.ADAPTER.decode(data);
    return c;
  }

  /**
   * 跳转地址，支持native和h5跳转
   */
  public String getLinkUrl() {
    if(link_url==null){
        return DEFAULT_LINK_URL;
    }
    return link_url;
  }

  /**
   * 图标地址
   */
  public String getIcon() {
    if(icon==null){
        return DEFAULT_ICON;
    }
    return icon;
  }

  /**
   * 文本
   */
  public String getText() {
    if(text==null){
        return DEFAULT_TEXT;
    }
    return text;
  }

  /**
   * 文本颜色
   */
  public ColorConfig getTextColor() {
    if(textColor==null){
        return new ColorConfig.Builder().build();
    }
    return textColor;
  }

  /**
   * url是否需要带上主播id，观众id，房间id
   */
  public Boolean getUrlNeedParam() {
    if(urlNeedParam==null){
        return DEFAULT_URLNEEDPARAM;
    }
    return urlNeedParam;
  }

  public String getSchemaPrefix() {
    if(schemaPrefix==null){
        return DEFAULT_SCHEMAPREFIX;
    }
    return schemaPrefix;
  }

  public String getSchemaPostfix() {
    if(schemaPostfix==null){
        return DEFAULT_SCHEMAPOSTFIX;
    }
    return schemaPostfix;
  }

  /**
   * 0:全屏打开,1:半屏打开
   */
  public Integer getOpenType() {
    if(openType==null){
        return DEFAULT_OPENTYPE;
    }
    return openType;
  }

  /**
   * H5挂件配置项
   */
  public H5Config getH5Config() {
    if(h5Config==null){
        return new H5Config.Builder().build();
    }
    return h5Config;
  }

  /**
   * 跳转地址，支持native和h5跳转
   */
  public boolean hasLinkUrl() {
    return link_url!=null;
  }

  /**
   * 图标地址
   */
  public boolean hasIcon() {
    return icon!=null;
  }

  /**
   * 文本
   */
  public boolean hasText() {
    return text!=null;
  }

  /**
   * 文本颜色
   */
  public boolean hasTextColor() {
    return textColor!=null;
  }

  /**
   * url是否需要带上主播id，观众id，房间id
   */
  public boolean hasUrlNeedParam() {
    return urlNeedParam!=null;
  }

  public boolean hasSchemaPrefix() {
    return schemaPrefix!=null;
  }

  public boolean hasSchemaPostfix() {
    return schemaPostfix!=null;
  }

  /**
   * 0:全屏打开,1:半屏打开
   */
  public boolean hasOpenType() {
    return openType!=null;
  }

  /**
   * H5挂件配置项
   */
  public boolean hasH5Config() {
    return h5Config!=null;
  }

  public static final class Builder extends Message.Builder<NewWidgetUnit, Builder> {
    public String link_url;

    public String icon;

    public String text;

    public ColorConfig textColor;

    public Boolean urlNeedParam;

    public String schemaPrefix;

    public String schemaPostfix;

    public Integer openType;

    public H5Config h5Config;

    public Builder() {
    }

    /**
     * 跳转地址，支持native和h5跳转
     */
    public Builder setLinkUrl(String link_url) {
      this.link_url = link_url;
      return this;
    }

    /**
     * 图标地址
     */
    public Builder setIcon(String icon) {
      this.icon = icon;
      return this;
    }

    /**
     * 文本
     */
    public Builder setText(String text) {
      this.text = text;
      return this;
    }

    /**
     * 文本颜色
     */
    public Builder setTextColor(ColorConfig textColor) {
      this.textColor = textColor;
      return this;
    }

    /**
     * url是否需要带上主播id，观众id，房间id
     */
    public Builder setUrlNeedParam(Boolean urlNeedParam) {
      this.urlNeedParam = urlNeedParam;
      return this;
    }

    public Builder setSchemaPrefix(String schemaPrefix) {
      this.schemaPrefix = schemaPrefix;
      return this;
    }

    public Builder setSchemaPostfix(String schemaPostfix) {
      this.schemaPostfix = schemaPostfix;
      return this;
    }

    /**
     * 0:全屏打开,1:半屏打开
     */
    public Builder setOpenType(Integer openType) {
      this.openType = openType;
      return this;
    }

    /**
     * H5挂件配置项
     */
    public Builder setH5Config(H5Config h5Config) {
      this.h5Config = h5Config;
      return this;
    }

    @Override
    public NewWidgetUnit build() {
      return new NewWidgetUnit(link_url, icon, text, textColor, urlNeedParam, schemaPrefix, schemaPostfix, openType, h5Config, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_NewWidgetUnit extends ProtoAdapter<NewWidgetUnit> {
    public ProtoAdapter_NewWidgetUnit() {
      super(FieldEncoding.LENGTH_DELIMITED, NewWidgetUnit.class);
    }

    @Override
    public int encodedSize(NewWidgetUnit value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.link_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.icon)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.text)
          + ColorConfig.ADAPTER.encodedSizeWithTag(4, value.textColor)
          + ProtoAdapter.BOOL.encodedSizeWithTag(5, value.urlNeedParam)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.schemaPrefix)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.schemaPostfix)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.openType)
          + H5Config.ADAPTER.encodedSizeWithTag(9, value.h5Config)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, NewWidgetUnit value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.link_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.icon);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.text);
      ColorConfig.ADAPTER.encodeWithTag(writer, 4, value.textColor);
      ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.urlNeedParam);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.schemaPrefix);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.schemaPostfix);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.openType);
      H5Config.ADAPTER.encodeWithTag(writer, 9, value.h5Config);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public NewWidgetUnit decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setLinkUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setIcon(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setText(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setTextColor(ColorConfig.ADAPTER.decode(reader)); break;
          case 5: builder.setUrlNeedParam(ProtoAdapter.BOOL.decode(reader)); break;
          case 6: builder.setSchemaPrefix(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setSchemaPostfix(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setOpenType(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.setH5Config(H5Config.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public NewWidgetUnit redact(NewWidgetUnit value) {
      Builder builder = value.newBuilder();
      if (builder.textColor != null) builder.textColor = ColorConfig.ADAPTER.redact(builder.textColor);
      if (builder.h5Config != null) builder.h5Config = H5Config.ADAPTER.redact(builder.h5Config);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
