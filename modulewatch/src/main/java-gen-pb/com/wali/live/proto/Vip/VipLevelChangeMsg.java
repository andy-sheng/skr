// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Vip.proto
package com.wali.live.proto.Vip;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 等级变化时发动的msg push，msg_ext 字段的内容
 * cmd: zhibo.push.sysmsg
 */
public final class VipLevelChangeMsg extends Message<VipLevelChangeMsg, VipLevelChangeMsg.Builder> {
  public static final ProtoAdapter<VipLevelChangeMsg> ADAPTER = new ProtoAdapter_VipLevelChangeMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_NEW_VIP_LEVEL = 0;

  public static final Integer DEFAULT_OLD_VIP_LEVEL = 0;

  /**
   * 升级后的vip等级
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer new_vip_level;

  /**
   * 升级前的vip等级
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer old_vip_level;

  public VipLevelChangeMsg(Integer new_vip_level, Integer old_vip_level) {
    this(new_vip_level, old_vip_level, ByteString.EMPTY);
  }

  public VipLevelChangeMsg(Integer new_vip_level, Integer old_vip_level, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.new_vip_level = new_vip_level;
    this.old_vip_level = old_vip_level;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.new_vip_level = new_vip_level;
    builder.old_vip_level = old_vip_level;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VipLevelChangeMsg)) return false;
    VipLevelChangeMsg o = (VipLevelChangeMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(new_vip_level, o.new_vip_level)
        && Internal.equals(old_vip_level, o.old_vip_level);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (new_vip_level != null ? new_vip_level.hashCode() : 0);
      result = result * 37 + (old_vip_level != null ? old_vip_level.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (new_vip_level != null) builder.append(", new_vip_level=").append(new_vip_level);
    if (old_vip_level != null) builder.append(", old_vip_level=").append(old_vip_level);
    return builder.replace(0, 2, "VipLevelChangeMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return VipLevelChangeMsg.ADAPTER.encode(this);
  }

  public static final VipLevelChangeMsg parseFrom(byte[] data) throws IOException {
    VipLevelChangeMsg c = null;
       c = VipLevelChangeMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 升级后的vip等级
   */
  public Integer getNewVipLevel() {
    if(new_vip_level==null){
        return DEFAULT_NEW_VIP_LEVEL;
    }
    return new_vip_level;
  }

  /**
   * 升级前的vip等级
   */
  public Integer getOldVipLevel() {
    if(old_vip_level==null){
        return DEFAULT_OLD_VIP_LEVEL;
    }
    return old_vip_level;
  }

  /**
   * 升级后的vip等级
   */
  public boolean hasNewVipLevel() {
    return new_vip_level!=null;
  }

  /**
   * 升级前的vip等级
   */
  public boolean hasOldVipLevel() {
    return old_vip_level!=null;
  }

  public static final class Builder extends Message.Builder<VipLevelChangeMsg, Builder> {
    public Integer new_vip_level;

    public Integer old_vip_level;

    public Builder() {
    }

    /**
     * 升级后的vip等级
     */
    public Builder setNewVipLevel(Integer new_vip_level) {
      this.new_vip_level = new_vip_level;
      return this;
    }

    /**
     * 升级前的vip等级
     */
    public Builder setOldVipLevel(Integer old_vip_level) {
      this.old_vip_level = old_vip_level;
      return this;
    }

    @Override
    public VipLevelChangeMsg build() {
      return new VipLevelChangeMsg(new_vip_level, old_vip_level, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VipLevelChangeMsg extends ProtoAdapter<VipLevelChangeMsg> {
    public ProtoAdapter_VipLevelChangeMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, VipLevelChangeMsg.class);
    }

    @Override
    public int encodedSize(VipLevelChangeMsg value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.new_vip_level)
          + ProtoAdapter.INT32.encodedSizeWithTag(2, value.old_vip_level)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VipLevelChangeMsg value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.new_vip_level);
      ProtoAdapter.INT32.encodeWithTag(writer, 2, value.old_vip_level);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VipLevelChangeMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setNewVipLevel(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.setOldVipLevel(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VipLevelChangeMsg redact(VipLevelChangeMsg value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
