// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LivePk.proto
package com.wali.live.proto.LivePK;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * zhibo.live.pkinvite
 */
public final class PKSetting extends Message<PKSetting, PKSetting.Builder> {
  public static final ProtoAdapter<PKSetting> ADAPTER = new ProtoAdapter_PKSetting();

  private static final long serialVersionUID = 0L;

  /**
   * pk内容 1：唱功 2：跳舞 3：乐器
   */
  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.LivePK.PKSettingContent#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final PKSettingContent content;

  /**
   * pk时间 1: 3分钟 2: 10分钟 3:15分钟
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LivePK.PKSettingDuration#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final PKSettingDuration duration;

  /**
   * pk惩罚
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.LivePK.PKSettingPunish#ADAPTER"
  )
  public final PKSettingPunish punish;

  public PKSetting(PKSettingContent content, PKSettingDuration duration, PKSettingPunish punish) {
    this(content, duration, punish, ByteString.EMPTY);
  }

  public PKSetting(PKSettingContent content, PKSettingDuration duration, PKSettingPunish punish,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.content = content;
    this.duration = duration;
    this.punish = punish;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.content = content;
    builder.duration = duration;
    builder.punish = punish;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PKSetting)) return false;
    PKSetting o = (PKSetting) other;
    return unknownFields().equals(o.unknownFields())
        && content.equals(o.content)
        && duration.equals(o.duration)
        && Internal.equals(punish, o.punish);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + content.hashCode();
      result = result * 37 + duration.hashCode();
      result = result * 37 + (punish != null ? punish.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", content=").append(content);
    builder.append(", duration=").append(duration);
    if (punish != null) builder.append(", punish=").append(punish);
    return builder.replace(0, 2, "PKSetting{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PKSetting.ADAPTER.encode(this);
  }

  public static final PKSetting parseFrom(byte[] data) throws IOException {
    PKSetting c = null;
       c = PKSetting.ADAPTER.decode(data);
    return c;
  }

  /**
   * pk内容 1：唱功 2：跳舞 3：乐器
   */
  public PKSettingContent getContent() {
    if(content==null){
        return new PKSettingContent.Builder().build();
    }
    return content;
  }

  /**
   * pk时间 1: 3分钟 2: 10分钟 3:15分钟
   */
  public PKSettingDuration getDuration() {
    if(duration==null){
        return new PKSettingDuration.Builder().build();
    }
    return duration;
  }

  /**
   * pk惩罚
   */
  public PKSettingPunish getPunish() {
    if(punish==null){
        return new PKSettingPunish.Builder().build();
    }
    return punish;
  }

  /**
   * pk内容 1：唱功 2：跳舞 3：乐器
   */
  public boolean hasContent() {
    return content!=null;
  }

  /**
   * pk时间 1: 3分钟 2: 10分钟 3:15分钟
   */
  public boolean hasDuration() {
    return duration!=null;
  }

  /**
   * pk惩罚
   */
  public boolean hasPunish() {
    return punish!=null;
  }

  public static final class Builder extends Message.Builder<PKSetting, Builder> {
    public PKSettingContent content;

    public PKSettingDuration duration;

    public PKSettingPunish punish;

    public Builder() {
    }

    /**
     * pk内容 1：唱功 2：跳舞 3：乐器
     */
    public Builder setContent(PKSettingContent content) {
      this.content = content;
      return this;
    }

    /**
     * pk时间 1: 3分钟 2: 10分钟 3:15分钟
     */
    public Builder setDuration(PKSettingDuration duration) {
      this.duration = duration;
      return this;
    }

    /**
     * pk惩罚
     */
    public Builder setPunish(PKSettingPunish punish) {
      this.punish = punish;
      return this;
    }

    @Override
    public PKSetting build() {
      return new PKSetting(content, duration, punish, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PKSetting extends ProtoAdapter<PKSetting> {
    public ProtoAdapter_PKSetting() {
      super(FieldEncoding.LENGTH_DELIMITED, PKSetting.class);
    }

    @Override
    public int encodedSize(PKSetting value) {
      return PKSettingContent.ADAPTER.encodedSizeWithTag(1, value.content)
          + PKSettingDuration.ADAPTER.encodedSizeWithTag(2, value.duration)
          + PKSettingPunish.ADAPTER.encodedSizeWithTag(3, value.punish)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PKSetting value) throws IOException {
      PKSettingContent.ADAPTER.encodeWithTag(writer, 1, value.content);
      PKSettingDuration.ADAPTER.encodeWithTag(writer, 2, value.duration);
      PKSettingPunish.ADAPTER.encodeWithTag(writer, 3, value.punish);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PKSetting decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setContent(PKSettingContent.ADAPTER.decode(reader)); break;
          case 2: builder.setDuration(PKSettingDuration.ADAPTER.decode(reader)); break;
          case 3: builder.setPunish(PKSettingPunish.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PKSetting redact(PKSetting value) {
      Builder builder = value.newBuilder();
      builder.content = PKSettingContent.ADAPTER.redact(builder.content);
      builder.duration = PKSettingDuration.ADAPTER.redact(builder.duration);
      if (builder.punish != null) builder.punish = PKSettingPunish.ADAPTER.redact(builder.punish);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
