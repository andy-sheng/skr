// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: RadioSignal.proto
package com.wali.live.proto.RadioSignal;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class DiantaiSyncRsp extends Message<DiantaiSyncRsp, DiantaiSyncRsp.Builder> {
  public static final ProtoAdapter<DiantaiSyncRsp> ADAPTER = new ProtoAdapter_DiantaiSyncRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RET = 0;

  public static final Integer DEFAULT_SYNC_INTERVAL = 0;

  public static final Integer DEFAULT_SYNC_TS = 0;

  public static final Long DEFAULT_SYNC_TS_MS = 0L;

  /**
   * 错误码
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer ret;

  /**
   * 电台成员信息，包含自己
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.RadioSignal.DiantaiUser#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<DiantaiUser> members;

  /**
   * 定时调用的时间间隔，单位:秒
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sync_interval;

  /**
   * 服务器时间, 单位:秒
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sync_ts;

  /**
   * 主播信息
   */
  @WireField(
      tag = 5,
      adapter = "com.wali.live.proto.RadioSignal.DiantaiAnchor#ADAPTER"
  )
  public final DiantaiAnchor anchor;

  /**
   * 服务器时间, 单位:毫秒
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long sync_ts_ms;

  public DiantaiSyncRsp(Integer ret, List<DiantaiUser> members, Integer sync_interval,
      Integer sync_ts, DiantaiAnchor anchor, Long sync_ts_ms) {
    this(ret, members, sync_interval, sync_ts, anchor, sync_ts_ms, ByteString.EMPTY);
  }

  public DiantaiSyncRsp(Integer ret, List<DiantaiUser> members, Integer sync_interval,
      Integer sync_ts, DiantaiAnchor anchor, Long sync_ts_ms, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ret = ret;
    this.members = Internal.immutableCopyOf("members", members);
    this.sync_interval = sync_interval;
    this.sync_ts = sync_ts;
    this.anchor = anchor;
    this.sync_ts_ms = sync_ts_ms;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ret = ret;
    builder.members = Internal.copyOf("members", members);
    builder.sync_interval = sync_interval;
    builder.sync_ts = sync_ts;
    builder.anchor = anchor;
    builder.sync_ts_ms = sync_ts_ms;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DiantaiSyncRsp)) return false;
    DiantaiSyncRsp o = (DiantaiSyncRsp) other;
    return unknownFields().equals(o.unknownFields())
        && ret.equals(o.ret)
        && members.equals(o.members)
        && Internal.equals(sync_interval, o.sync_interval)
        && Internal.equals(sync_ts, o.sync_ts)
        && Internal.equals(anchor, o.anchor)
        && Internal.equals(sync_ts_ms, o.sync_ts_ms);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + ret.hashCode();
      result = result * 37 + members.hashCode();
      result = result * 37 + (sync_interval != null ? sync_interval.hashCode() : 0);
      result = result * 37 + (sync_ts != null ? sync_ts.hashCode() : 0);
      result = result * 37 + (anchor != null ? anchor.hashCode() : 0);
      result = result * 37 + (sync_ts_ms != null ? sync_ts_ms.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", ret=").append(ret);
    if (!members.isEmpty()) builder.append(", members=").append(members);
    if (sync_interval != null) builder.append(", sync_interval=").append(sync_interval);
    if (sync_ts != null) builder.append(", sync_ts=").append(sync_ts);
    if (anchor != null) builder.append(", anchor=").append(anchor);
    if (sync_ts_ms != null) builder.append(", sync_ts_ms=").append(sync_ts_ms);
    return builder.replace(0, 2, "DiantaiSyncRsp{").append('}').toString();
  }

  public static final DiantaiSyncRsp parseFrom(byte[] data) throws IOException {
    DiantaiSyncRsp c = null;
       c = DiantaiSyncRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 错误码
   */
  public Integer getRet() {
    if(ret==null){
        return DEFAULT_RET;
    }
    return ret;
  }

  /**
   * 电台成员信息，包含自己
   */
  public List<DiantaiUser> getMembersList() {
    if(members==null){
        return new java.util.ArrayList<DiantaiUser>();
    }
    return members;
  }

  /**
   * 定时调用的时间间隔，单位:秒
   */
  public Integer getSyncInterval() {
    if(sync_interval==null){
        return DEFAULT_SYNC_INTERVAL;
    }
    return sync_interval;
  }

  /**
   * 服务器时间, 单位:秒
   */
  public Integer getSyncTs() {
    if(sync_ts==null){
        return DEFAULT_SYNC_TS;
    }
    return sync_ts;
  }

  /**
   * 主播信息
   */
  public DiantaiAnchor getAnchor() {
    if(anchor==null){
        return new DiantaiAnchor.Builder().build();
    }
    return anchor;
  }

  /**
   * 服务器时间, 单位:毫秒
   */
  public Long getSyncTsMs() {
    if(sync_ts_ms==null){
        return DEFAULT_SYNC_TS_MS;
    }
    return sync_ts_ms;
  }

  /**
   * 错误码
   */
  public boolean hasRet() {
    return ret!=null;
  }

  /**
   * 电台成员信息，包含自己
   */
  public boolean hasMembersList() {
    return members!=null;
  }

  /**
   * 定时调用的时间间隔，单位:秒
   */
  public boolean hasSyncInterval() {
    return sync_interval!=null;
  }

  /**
   * 服务器时间, 单位:秒
   */
  public boolean hasSyncTs() {
    return sync_ts!=null;
  }

  /**
   * 主播信息
   */
  public boolean hasAnchor() {
    return anchor!=null;
  }

  /**
   * 服务器时间, 单位:毫秒
   */
  public boolean hasSyncTsMs() {
    return sync_ts_ms!=null;
  }

  public static final class Builder extends Message.Builder<DiantaiSyncRsp, Builder> {
    public Integer ret;

    public List<DiantaiUser> members;

    public Integer sync_interval;

    public Integer sync_ts;

    public DiantaiAnchor anchor;

    public Long sync_ts_ms;

    public Builder() {
      members = Internal.newMutableList();
    }

    /**
     * 错误码
     */
    public Builder setRet(Integer ret) {
      this.ret = ret;
      return this;
    }

    /**
     * 电台成员信息，包含自己
     */
    public Builder addAllMembers(List<DiantaiUser> members) {
      Internal.checkElementsNotNull(members);
      this.members = members;
      return this;
    }

    /**
     * 定时调用的时间间隔，单位:秒
     */
    public Builder setSyncInterval(Integer sync_interval) {
      this.sync_interval = sync_interval;
      return this;
    }

    /**
     * 服务器时间, 单位:秒
     */
    public Builder setSyncTs(Integer sync_ts) {
      this.sync_ts = sync_ts;
      return this;
    }

    /**
     * 主播信息
     */
    public Builder setAnchor(DiantaiAnchor anchor) {
      this.anchor = anchor;
      return this;
    }

    /**
     * 服务器时间, 单位:毫秒
     */
    public Builder setSyncTsMs(Long sync_ts_ms) {
      this.sync_ts_ms = sync_ts_ms;
      return this;
    }

    @Override
    public DiantaiSyncRsp build() {
      return new DiantaiSyncRsp(ret, members, sync_interval, sync_ts, anchor, sync_ts_ms, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DiantaiSyncRsp extends ProtoAdapter<DiantaiSyncRsp> {
    public ProtoAdapter_DiantaiSyncRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, DiantaiSyncRsp.class);
    }

    @Override
    public int encodedSize(DiantaiSyncRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.ret)
          + DiantaiUser.ADAPTER.asRepeated().encodedSizeWithTag(2, value.members)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.sync_interval)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.sync_ts)
          + DiantaiAnchor.ADAPTER.encodedSizeWithTag(5, value.anchor)
          + ProtoAdapter.UINT64.encodedSizeWithTag(6, value.sync_ts_ms)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, DiantaiSyncRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.ret);
      DiantaiUser.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.members);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.sync_interval);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.sync_ts);
      DiantaiAnchor.ADAPTER.encodeWithTag(writer, 5, value.anchor);
      ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.sync_ts_ms);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DiantaiSyncRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRet(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.members.add(DiantaiUser.ADAPTER.decode(reader)); break;
          case 3: builder.setSyncInterval(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setSyncTs(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setAnchor(DiantaiAnchor.ADAPTER.decode(reader)); break;
          case 6: builder.setSyncTsMs(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public DiantaiSyncRsp redact(DiantaiSyncRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.members, DiantaiUser.ADAPTER);
      if (builder.anchor != null) builder.anchor = DiantaiAnchor.ADAPTER.redact(builder.anchor);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
