// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LivePk.proto
package com.wali.live.proto.LivePK;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * pk结束消息
 */
public final class PKEndMessage extends Message<PKEndMessage, PKEndMessage.Builder> {
  public static final ProtoAdapter<PKEndMessage> ADAPTER = new ProtoAdapter_PKEndMessage();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_FROM_UUID = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.LivePK.NewPKInfo#ADAPTER"
  )
  public final NewPKInfo pk_info;

  /**
   * 发起用户id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long from_uuid;

  /**
   * 0：正常结束 1：提前结束
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  public PKEndMessage(NewPKInfo pk_info, Long from_uuid, Integer type) {
    this(pk_info, from_uuid, type, ByteString.EMPTY);
  }

  public PKEndMessage(NewPKInfo pk_info, Long from_uuid, Integer type, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.pk_info = pk_info;
    this.from_uuid = from_uuid;
    this.type = type;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.pk_info = pk_info;
    builder.from_uuid = from_uuid;
    builder.type = type;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PKEndMessage)) return false;
    PKEndMessage o = (PKEndMessage) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(pk_info, o.pk_info)
        && Internal.equals(from_uuid, o.from_uuid)
        && Internal.equals(type, o.type);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (pk_info != null ? pk_info.hashCode() : 0);
      result = result * 37 + (from_uuid != null ? from_uuid.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (pk_info != null) builder.append(", pk_info=").append(pk_info);
    if (from_uuid != null) builder.append(", from_uuid=").append(from_uuid);
    if (type != null) builder.append(", type=").append(type);
    return builder.replace(0, 2, "PKEndMessage{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PKEndMessage.ADAPTER.encode(this);
  }

  public static final PKEndMessage parseFrom(byte[] data) throws IOException {
    PKEndMessage c = null;
       c = PKEndMessage.ADAPTER.decode(data);
    return c;
  }

  public NewPKInfo getPkInfo() {
    if(pk_info==null){
        return new NewPKInfo.Builder().build();
    }
    return pk_info;
  }

  /**
   * 发起用户id
   */
  public Long getFromUuid() {
    if(from_uuid==null){
        return DEFAULT_FROM_UUID;
    }
    return from_uuid;
  }

  /**
   * 0：正常结束 1：提前结束
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  public boolean hasPkInfo() {
    return pk_info!=null;
  }

  /**
   * 发起用户id
   */
  public boolean hasFromUuid() {
    return from_uuid!=null;
  }

  /**
   * 0：正常结束 1：提前结束
   */
  public boolean hasType() {
    return type!=null;
  }

  public static final class Builder extends Message.Builder<PKEndMessage, Builder> {
    public NewPKInfo pk_info;

    public Long from_uuid;

    public Integer type;

    public Builder() {
    }

    public Builder setPkInfo(NewPKInfo pk_info) {
      this.pk_info = pk_info;
      return this;
    }

    /**
     * 发起用户id
     */
    public Builder setFromUuid(Long from_uuid) {
      this.from_uuid = from_uuid;
      return this;
    }

    /**
     * 0：正常结束 1：提前结束
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    @Override
    public PKEndMessage build() {
      return new PKEndMessage(pk_info, from_uuid, type, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PKEndMessage extends ProtoAdapter<PKEndMessage> {
    public ProtoAdapter_PKEndMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, PKEndMessage.class);
    }

    @Override
    public int encodedSize(PKEndMessage value) {
      return NewPKInfo.ADAPTER.encodedSizeWithTag(1, value.pk_info)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.from_uuid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.type)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PKEndMessage value) throws IOException {
      NewPKInfo.ADAPTER.encodeWithTag(writer, 1, value.pk_info);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.from_uuid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.type);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PKEndMessage decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setPkInfo(NewPKInfo.ADAPTER.decode(reader)); break;
          case 2: builder.setFromUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PKEndMessage redact(PKEndMessage value) {
      Builder builder = value.newBuilder();
      if (builder.pk_info != null) builder.pk_info = NewPKInfo.ADAPTER.redact(builder.pk_info);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
