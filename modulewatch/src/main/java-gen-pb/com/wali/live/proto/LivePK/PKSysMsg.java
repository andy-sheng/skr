// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LivePk.proto
package com.wali.live.proto.LivePK;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PKSysMsg extends Message<PKSysMsg, PKSysMsg.Builder> {
  public static final ProtoAdapter<PKSysMsg> ADAPTER = new ProtoAdapter_PKSysMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  public static final ByteString DEFAULT_EXT_MSG = ByteString.EMPTY;

  /**
   * 1.邀请（PKInviteMsg ） 2.接受（PKAcceptMsg ） 3.拒绝（PKDeclineMsg ）
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString ext_msg;

  public PKSysMsg(Integer type, ByteString ext_msg) {
    this(type, ext_msg, ByteString.EMPTY);
  }

  public PKSysMsg(Integer type, ByteString ext_msg, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.ext_msg = ext_msg;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.ext_msg = ext_msg;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PKSysMsg)) return false;
    PKSysMsg o = (PKSysMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(type, o.type)
        && Internal.equals(ext_msg, o.ext_msg);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (ext_msg != null ? ext_msg.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (type != null) builder.append(", type=").append(type);
    if (ext_msg != null) builder.append(", ext_msg=").append(ext_msg);
    return builder.replace(0, 2, "PKSysMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PKSysMsg.ADAPTER.encode(this);
  }

  public static final PKSysMsg parseFrom(byte[] data) throws IOException {
    PKSysMsg c = null;
       c = PKSysMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 1.邀请（PKInviteMsg ） 2.接受（PKAcceptMsg ） 3.拒绝（PKDeclineMsg ）
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  public ByteString getExtMsg() {
    if(ext_msg==null){
        return ByteString.of(new byte[0]);
    }
    return ext_msg;
  }

  /**
   * 1.邀请（PKInviteMsg ） 2.接受（PKAcceptMsg ） 3.拒绝（PKDeclineMsg ）
   */
  public boolean hasType() {
    return type!=null;
  }

  public boolean hasExtMsg() {
    return ext_msg!=null;
  }

  public static final class Builder extends Message.Builder<PKSysMsg, Builder> {
    public Integer type;

    public ByteString ext_msg;

    public Builder() {
    }

    /**
     * 1.邀请（PKInviteMsg ） 2.接受（PKAcceptMsg ） 3.拒绝（PKDeclineMsg ）
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    public Builder setExtMsg(ByteString ext_msg) {
      this.ext_msg = ext_msg;
      return this;
    }

    @Override
    public PKSysMsg build() {
      return new PKSysMsg(type, ext_msg, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PKSysMsg extends ProtoAdapter<PKSysMsg> {
    public ProtoAdapter_PKSysMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, PKSysMsg.class);
    }

    @Override
    public int encodedSize(PKSysMsg value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.type)
          + ProtoAdapter.BYTES.encodedSizeWithTag(2, value.ext_msg)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PKSysMsg value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.type);
      ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.ext_msg);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PKSysMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setExtMsg(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PKSysMsg redact(PKSysMsg value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
