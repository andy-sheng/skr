// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: BigTurnTable.proto
package com.wali.live.proto.BigTurnTable;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class TurntablePreConfig extends Message<TurntablePreConfig, TurntablePreConfig.Builder> {
  public static final ProtoAdapter<TurntablePreConfig> ADAPTER = new ProtoAdapter_TurntablePreConfig();

  private static final long serialVersionUID = 0L;

  public static final TurntableType DEFAULT_TYPE = TurntableType.TYPE_128;

  public static final Integer DEFAULT_STARTCOST = 0;

  public static final Integer DEFAULT_DRAWCOST = 0;

  /**
   * 转盘类型
   */
  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.BigTurnTable.TurntableType#ADAPTER"
  )
  public final TurntableType type;

  /**
   * 开启需要的钻石数
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer startCost;

  /**
   * 一次抽奖需要的钻石数
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer drawCost;

  /**
   * 奖品内容
   */
  @WireField(
      tag = 4,
      adapter = "com.wali.live.proto.BigTurnTable.PrizeItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PrizeItem> prizeItem;

  public TurntablePreConfig(TurntableType type, Integer startCost, Integer drawCost,
      List<PrizeItem> prizeItem) {
    this(type, startCost, drawCost, prizeItem, ByteString.EMPTY);
  }

  public TurntablePreConfig(TurntableType type, Integer startCost, Integer drawCost,
      List<PrizeItem> prizeItem, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.startCost = startCost;
    this.drawCost = drawCost;
    this.prizeItem = Internal.immutableCopyOf("prizeItem", prizeItem);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.startCost = startCost;
    builder.drawCost = drawCost;
    builder.prizeItem = Internal.copyOf("prizeItem", prizeItem);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TurntablePreConfig)) return false;
    TurntablePreConfig o = (TurntablePreConfig) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(type, o.type)
        && Internal.equals(startCost, o.startCost)
        && Internal.equals(drawCost, o.drawCost)
        && prizeItem.equals(o.prizeItem);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (startCost != null ? startCost.hashCode() : 0);
      result = result * 37 + (drawCost != null ? drawCost.hashCode() : 0);
      result = result * 37 + prizeItem.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (type != null) builder.append(", type=").append(type);
    if (startCost != null) builder.append(", startCost=").append(startCost);
    if (drawCost != null) builder.append(", drawCost=").append(drawCost);
    if (!prizeItem.isEmpty()) builder.append(", prizeItem=").append(prizeItem);
    return builder.replace(0, 2, "TurntablePreConfig{").append('}').toString();
  }

  public byte[] toByteArray() {
    return TurntablePreConfig.ADAPTER.encode(this);
  }

  public static final TurntablePreConfig parseFrom(byte[] data) throws IOException {
    TurntablePreConfig c = null;
       c = TurntablePreConfig.ADAPTER.decode(data);
    return c;
  }

  /**
   * 转盘类型
   */
  public TurntableType getType() {
    if(type==null){
        return new TurntableType.Builder().build();
    }
    return type;
  }

  /**
   * 开启需要的钻石数
   */
  public Integer getStartCost() {
    if(startCost==null){
        return DEFAULT_STARTCOST;
    }
    return startCost;
  }

  /**
   * 一次抽奖需要的钻石数
   */
  public Integer getDrawCost() {
    if(drawCost==null){
        return DEFAULT_DRAWCOST;
    }
    return drawCost;
  }

  /**
   * 奖品内容
   */
  public List<PrizeItem> getPrizeItemList() {
    if(prizeItem==null){
        return new java.util.ArrayList<PrizeItem>();
    }
    return prizeItem;
  }

  /**
   * 转盘类型
   */
  public boolean hasType() {
    return type!=null;
  }

  /**
   * 开启需要的钻石数
   */
  public boolean hasStartCost() {
    return startCost!=null;
  }

  /**
   * 一次抽奖需要的钻石数
   */
  public boolean hasDrawCost() {
    return drawCost!=null;
  }

  /**
   * 奖品内容
   */
  public boolean hasPrizeItemList() {
    return prizeItem!=null;
  }

  public static final class Builder extends Message.Builder<TurntablePreConfig, Builder> {
    public TurntableType type;

    public Integer startCost;

    public Integer drawCost;

    public List<PrizeItem> prizeItem;

    public Builder() {
      prizeItem = Internal.newMutableList();
    }

    /**
     * 转盘类型
     */
    public Builder setType(TurntableType type) {
      this.type = type;
      return this;
    }

    /**
     * 开启需要的钻石数
     */
    public Builder setStartCost(Integer startCost) {
      this.startCost = startCost;
      return this;
    }

    /**
     * 一次抽奖需要的钻石数
     */
    public Builder setDrawCost(Integer drawCost) {
      this.drawCost = drawCost;
      return this;
    }

    /**
     * 奖品内容
     */
    public Builder addAllPrizeItem(List<PrizeItem> prizeItem) {
      Internal.checkElementsNotNull(prizeItem);
      this.prizeItem = prizeItem;
      return this;
    }

    @Override
    public TurntablePreConfig build() {
      return new TurntablePreConfig(type, startCost, drawCost, prizeItem, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_TurntablePreConfig extends ProtoAdapter<TurntablePreConfig> {
    public ProtoAdapter_TurntablePreConfig() {
      super(FieldEncoding.LENGTH_DELIMITED, TurntablePreConfig.class);
    }

    @Override
    public int encodedSize(TurntablePreConfig value) {
      return TurntableType.ADAPTER.encodedSizeWithTag(1, value.type)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.startCost)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.drawCost)
          + PrizeItem.ADAPTER.asRepeated().encodedSizeWithTag(4, value.prizeItem)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, TurntablePreConfig value) throws IOException {
      TurntableType.ADAPTER.encodeWithTag(writer, 1, value.type);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.startCost);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.drawCost);
      PrizeItem.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.prizeItem);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public TurntablePreConfig decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.setType(TurntableType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.setStartCost(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setDrawCost(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.prizeItem.add(PrizeItem.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public TurntablePreConfig redact(TurntablePreConfig value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.prizeItem, PrizeItem.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
