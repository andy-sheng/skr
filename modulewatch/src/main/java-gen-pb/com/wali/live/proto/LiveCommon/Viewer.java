// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveCommon.proto
package com.wali.live.proto.LiveCommon;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.wali.live.proto.User.Medal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Viewer extends Message<Viewer, Viewer.Builder> {
  public static final ProtoAdapter<Viewer> ADAPTER = new ProtoAdapter_Viewer();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UUID = 0L;

  public static final Integer DEFAULT_LEVEL = 0;

  public static final Long DEFAULT_AVATAR = 0L;

  public static final Integer DEFAULT_CERTIFICATION_TYPE = 0;

  public static final Boolean DEFAULT_REDNAME = false;

  public static final Integer DEFAULT_VIP_LEVEL = 0;

  public static final Boolean DEFAULT_VIP_DISABLE = false;

  public static final Integer DEFAULT_TICKET = 0;

  public static final Integer DEFAULT_APPID = 0;

  public static final Integer DEFAULT_NOBLELEVEL = 0;

  /**
   * 用户id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long uuid;

  /**
   * 等级
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer level;

  /**
   * 头像
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long avatar;

  /**
   * 认证类型
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer certification_type;

  /**
   * 社区红名
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean redName;

  /**
   * 财富（VIP）等级
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer vip_level;

  /**
   * vip是否处于冻结状态
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean vip_disable;

  /**
   * 本场对主播贡献的星票数
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer ticket;

  /**
   * appid
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer appid;

  /**
   * 贵族id 100表示子爵 200表示伯爵 300表示侯爵 400表示公爵 500表示国王 0不是贵族
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer nobleLevel;

  @WireField(
      tag = 11,
      adapter = "com.wali.live.proto.User.Medal#ADAPTER"
  )
  public final Medal userNobleMedal;

  public Viewer(Long uuid, Integer level, Long avatar, Integer certification_type, Boolean redName,
      Integer vip_level, Boolean vip_disable, Integer ticket, Integer appid, Integer nobleLevel,
      Medal userNobleMedal) {
    this(uuid, level, avatar, certification_type, redName, vip_level, vip_disable, ticket, appid, nobleLevel, userNobleMedal, ByteString.EMPTY);
  }

  public Viewer(Long uuid, Integer level, Long avatar, Integer certification_type, Boolean redName,
      Integer vip_level, Boolean vip_disable, Integer ticket, Integer appid, Integer nobleLevel,
      Medal userNobleMedal, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.uuid = uuid;
    this.level = level;
    this.avatar = avatar;
    this.certification_type = certification_type;
    this.redName = redName;
    this.vip_level = vip_level;
    this.vip_disable = vip_disable;
    this.ticket = ticket;
    this.appid = appid;
    this.nobleLevel = nobleLevel;
    this.userNobleMedal = userNobleMedal;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.uuid = uuid;
    builder.level = level;
    builder.avatar = avatar;
    builder.certification_type = certification_type;
    builder.redName = redName;
    builder.vip_level = vip_level;
    builder.vip_disable = vip_disable;
    builder.ticket = ticket;
    builder.appid = appid;
    builder.nobleLevel = nobleLevel;
    builder.userNobleMedal = userNobleMedal;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Viewer)) return false;
    Viewer o = (Viewer) other;
    return unknownFields().equals(o.unknownFields())
        && uuid.equals(o.uuid)
        && Internal.equals(level, o.level)
        && Internal.equals(avatar, o.avatar)
        && Internal.equals(certification_type, o.certification_type)
        && Internal.equals(redName, o.redName)
        && Internal.equals(vip_level, o.vip_level)
        && Internal.equals(vip_disable, o.vip_disable)
        && Internal.equals(ticket, o.ticket)
        && Internal.equals(appid, o.appid)
        && Internal.equals(nobleLevel, o.nobleLevel)
        && Internal.equals(userNobleMedal, o.userNobleMedal);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + uuid.hashCode();
      result = result * 37 + (level != null ? level.hashCode() : 0);
      result = result * 37 + (avatar != null ? avatar.hashCode() : 0);
      result = result * 37 + (certification_type != null ? certification_type.hashCode() : 0);
      result = result * 37 + (redName != null ? redName.hashCode() : 0);
      result = result * 37 + (vip_level != null ? vip_level.hashCode() : 0);
      result = result * 37 + (vip_disable != null ? vip_disable.hashCode() : 0);
      result = result * 37 + (ticket != null ? ticket.hashCode() : 0);
      result = result * 37 + (appid != null ? appid.hashCode() : 0);
      result = result * 37 + (nobleLevel != null ? nobleLevel.hashCode() : 0);
      result = result * 37 + (userNobleMedal != null ? userNobleMedal.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", uuid=").append(uuid);
    if (level != null) builder.append(", level=").append(level);
    if (avatar != null) builder.append(", avatar=").append(avatar);
    if (certification_type != null) builder.append(", certification_type=").append(certification_type);
    if (redName != null) builder.append(", redName=").append(redName);
    if (vip_level != null) builder.append(", vip_level=").append(vip_level);
    if (vip_disable != null) builder.append(", vip_disable=").append(vip_disable);
    if (ticket != null) builder.append(", ticket=").append(ticket);
    if (appid != null) builder.append(", appid=").append(appid);
    if (nobleLevel != null) builder.append(", nobleLevel=").append(nobleLevel);
    if (userNobleMedal != null) builder.append(", userNobleMedal=").append(userNobleMedal);
    return builder.replace(0, 2, "Viewer{").append('}').toString();
  }

  public byte[] toByteArray() {
    return Viewer.ADAPTER.encode(this);
  }

  public static final Viewer parseFrom(byte[] data) throws IOException {
    Viewer c = null;
       c = Viewer.ADAPTER.decode(data);
    return c;
  }

  /**
   * 用户id
   */
  public Long getUuid() {
    if(uuid==null){
        return DEFAULT_UUID;
    }
    return uuid;
  }

  /**
   * 等级
   */
  public Integer getLevel() {
    if(level==null){
        return DEFAULT_LEVEL;
    }
    return level;
  }

  /**
   * 头像
   */
  public Long getAvatar() {
    if(avatar==null){
        return DEFAULT_AVATAR;
    }
    return avatar;
  }

  /**
   * 认证类型
   */
  public Integer getCertificationType() {
    if(certification_type==null){
        return DEFAULT_CERTIFICATION_TYPE;
    }
    return certification_type;
  }

  /**
   * 社区红名
   */
  public Boolean getRedName() {
    if(redName==null){
        return DEFAULT_REDNAME;
    }
    return redName;
  }

  /**
   * 财富（VIP）等级
   */
  public Integer getVipLevel() {
    if(vip_level==null){
        return DEFAULT_VIP_LEVEL;
    }
    return vip_level;
  }

  /**
   * vip是否处于冻结状态
   */
  public Boolean getVipDisable() {
    if(vip_disable==null){
        return DEFAULT_VIP_DISABLE;
    }
    return vip_disable;
  }

  /**
   * 本场对主播贡献的星票数
   */
  public Integer getTicket() {
    if(ticket==null){
        return DEFAULT_TICKET;
    }
    return ticket;
  }

  /**
   * appid
   */
  public Integer getAppid() {
    if(appid==null){
        return DEFAULT_APPID;
    }
    return appid;
  }

  /**
   * 贵族id 100表示子爵 200表示伯爵 300表示侯爵 400表示公爵 500表示国王 0不是贵族
   */
  public Integer getNobleLevel() {
    if(nobleLevel==null){
        return DEFAULT_NOBLELEVEL;
    }
    return nobleLevel;
  }

  public Medal getUserNobleMedal() {
    if(userNobleMedal==null){
        return new Medal.Builder().build();
    }
    return userNobleMedal;
  }

  /**
   * 用户id
   */
  public boolean hasUuid() {
    return uuid!=null;
  }

  /**
   * 等级
   */
  public boolean hasLevel() {
    return level!=null;
  }

  /**
   * 头像
   */
  public boolean hasAvatar() {
    return avatar!=null;
  }

  /**
   * 认证类型
   */
  public boolean hasCertificationType() {
    return certification_type!=null;
  }

  /**
   * 社区红名
   */
  public boolean hasRedName() {
    return redName!=null;
  }

  /**
   * 财富（VIP）等级
   */
  public boolean hasVipLevel() {
    return vip_level!=null;
  }

  /**
   * vip是否处于冻结状态
   */
  public boolean hasVipDisable() {
    return vip_disable!=null;
  }

  /**
   * 本场对主播贡献的星票数
   */
  public boolean hasTicket() {
    return ticket!=null;
  }

  /**
   * appid
   */
  public boolean hasAppid() {
    return appid!=null;
  }

  /**
   * 贵族id 100表示子爵 200表示伯爵 300表示侯爵 400表示公爵 500表示国王 0不是贵族
   */
  public boolean hasNobleLevel() {
    return nobleLevel!=null;
  }

  public boolean hasUserNobleMedal() {
    return userNobleMedal!=null;
  }

  public static final class Builder extends Message.Builder<Viewer, Builder> {
    public Long uuid;

    public Integer level;

    public Long avatar;

    public Integer certification_type;

    public Boolean redName;

    public Integer vip_level;

    public Boolean vip_disable;

    public Integer ticket;

    public Integer appid;

    public Integer nobleLevel;

    public Medal userNobleMedal;

    public Builder() {
    }

    /**
     * 用户id
     */
    public Builder setUuid(Long uuid) {
      this.uuid = uuid;
      return this;
    }

    /**
     * 等级
     */
    public Builder setLevel(Integer level) {
      this.level = level;
      return this;
    }

    /**
     * 头像
     */
    public Builder setAvatar(Long avatar) {
      this.avatar = avatar;
      return this;
    }

    /**
     * 认证类型
     */
    public Builder setCertificationType(Integer certification_type) {
      this.certification_type = certification_type;
      return this;
    }

    /**
     * 社区红名
     */
    public Builder setRedName(Boolean redName) {
      this.redName = redName;
      return this;
    }

    /**
     * 财富（VIP）等级
     */
    public Builder setVipLevel(Integer vip_level) {
      this.vip_level = vip_level;
      return this;
    }

    /**
     * vip是否处于冻结状态
     */
    public Builder setVipDisable(Boolean vip_disable) {
      this.vip_disable = vip_disable;
      return this;
    }

    /**
     * 本场对主播贡献的星票数
     */
    public Builder setTicket(Integer ticket) {
      this.ticket = ticket;
      return this;
    }

    /**
     * appid
     */
    public Builder setAppid(Integer appid) {
      this.appid = appid;
      return this;
    }

    /**
     * 贵族id 100表示子爵 200表示伯爵 300表示侯爵 400表示公爵 500表示国王 0不是贵族
     */
    public Builder setNobleLevel(Integer nobleLevel) {
      this.nobleLevel = nobleLevel;
      return this;
    }

    public Builder setUserNobleMedal(Medal userNobleMedal) {
      this.userNobleMedal = userNobleMedal;
      return this;
    }

    @Override
    public Viewer build() {
      return new Viewer(uuid, level, avatar, certification_type, redName, vip_level, vip_disable, ticket, appid, nobleLevel, userNobleMedal, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Viewer extends ProtoAdapter<Viewer> {
    public ProtoAdapter_Viewer() {
      super(FieldEncoding.LENGTH_DELIMITED, Viewer.class);
    }

    @Override
    public int encodedSize(Viewer value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.uuid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.level)
          + ProtoAdapter.UINT64.encodedSizeWithTag(3, value.avatar)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.certification_type)
          + ProtoAdapter.BOOL.encodedSizeWithTag(5, value.redName)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.vip_level)
          + ProtoAdapter.BOOL.encodedSizeWithTag(7, value.vip_disable)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.ticket)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.appid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.nobleLevel)
          + Medal.ADAPTER.encodedSizeWithTag(11, value.userNobleMedal)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Viewer value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.uuid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.level);
      ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.avatar);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.certification_type);
      ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.redName);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.vip_level);
      ProtoAdapter.BOOL.encodeWithTag(writer, 7, value.vip_disable);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.ticket);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.appid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.nobleLevel);
      Medal.ADAPTER.encodeWithTag(writer, 11, value.userNobleMedal);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Viewer decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setAvatar(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.setCertificationType(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setRedName(ProtoAdapter.BOOL.decode(reader)); break;
          case 6: builder.setVipLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setVipDisable(ProtoAdapter.BOOL.decode(reader)); break;
          case 8: builder.setTicket(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.setAppid(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.setNobleLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.setUserNobleMedal(Medal.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Viewer redact(Viewer value) {
      Builder builder = value.newBuilder();
      if (builder.userNobleMedal != null) builder.userNobleMedal = Medal.ADAPTER.redact(builder.userNobleMedal);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
