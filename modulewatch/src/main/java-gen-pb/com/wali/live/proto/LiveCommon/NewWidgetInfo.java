// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveCommon.proto
package com.wali.live.proto.LiveCommon;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class NewWidgetInfo extends Message<NewWidgetInfo, NewWidgetInfo.Builder> {
  public static final ProtoAdapter<NewWidgetInfo> ADAPTER = new ProtoAdapter_NewWidgetInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_PULLINTERVAL = 0;

  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.LiveCommon.NewWidgetItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<NewWidgetItem> widgetItem;

  /**
   * 更新间隔
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer pullInterval;

  public NewWidgetInfo(List<NewWidgetItem> widgetItem, Integer pullInterval) {
    this(widgetItem, pullInterval, ByteString.EMPTY);
  }

  public NewWidgetInfo(List<NewWidgetItem> widgetItem, Integer pullInterval,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.widgetItem = Internal.immutableCopyOf("widgetItem", widgetItem);
    this.pullInterval = pullInterval;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.widgetItem = Internal.copyOf("widgetItem", widgetItem);
    builder.pullInterval = pullInterval;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof NewWidgetInfo)) return false;
    NewWidgetInfo o = (NewWidgetInfo) other;
    return unknownFields().equals(o.unknownFields())
        && widgetItem.equals(o.widgetItem)
        && Internal.equals(pullInterval, o.pullInterval);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + widgetItem.hashCode();
      result = result * 37 + (pullInterval != null ? pullInterval.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!widgetItem.isEmpty()) builder.append(", widgetItem=").append(widgetItem);
    if (pullInterval != null) builder.append(", pullInterval=").append(pullInterval);
    return builder.replace(0, 2, "NewWidgetInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return NewWidgetInfo.ADAPTER.encode(this);
  }

  public static final NewWidgetInfo parseFrom(byte[] data) throws IOException {
    NewWidgetInfo c = null;
       c = NewWidgetInfo.ADAPTER.decode(data);
    return c;
  }

  public List<NewWidgetItem> getWidgetItemList() {
    if(widgetItem==null){
        return new java.util.ArrayList<NewWidgetItem>();
    }
    return widgetItem;
  }

  /**
   * 更新间隔
   */
  public Integer getPullInterval() {
    if(pullInterval==null){
        return DEFAULT_PULLINTERVAL;
    }
    return pullInterval;
  }

  public boolean hasWidgetItemList() {
    return widgetItem!=null;
  }

  /**
   * 更新间隔
   */
  public boolean hasPullInterval() {
    return pullInterval!=null;
  }

  public static final class Builder extends Message.Builder<NewWidgetInfo, Builder> {
    public List<NewWidgetItem> widgetItem;

    public Integer pullInterval;

    public Builder() {
      widgetItem = Internal.newMutableList();
    }

    public Builder addAllWidgetItem(List<NewWidgetItem> widgetItem) {
      Internal.checkElementsNotNull(widgetItem);
      this.widgetItem = widgetItem;
      return this;
    }

    /**
     * 更新间隔
     */
    public Builder setPullInterval(Integer pullInterval) {
      this.pullInterval = pullInterval;
      return this;
    }

    @Override
    public NewWidgetInfo build() {
      return new NewWidgetInfo(widgetItem, pullInterval, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_NewWidgetInfo extends ProtoAdapter<NewWidgetInfo> {
    public ProtoAdapter_NewWidgetInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, NewWidgetInfo.class);
    }

    @Override
    public int encodedSize(NewWidgetInfo value) {
      return NewWidgetItem.ADAPTER.asRepeated().encodedSizeWithTag(1, value.widgetItem)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.pullInterval)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, NewWidgetInfo value) throws IOException {
      NewWidgetItem.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.widgetItem);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.pullInterval);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public NewWidgetInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.widgetItem.add(NewWidgetItem.ADAPTER.decode(reader)); break;
          case 2: builder.setPullInterval(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public NewWidgetInfo redact(NewWidgetInfo value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.widgetItem, NewWidgetItem.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
