// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: BigTurnTable.proto
package com.wali.live.proto.BigTurnTable;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PrizeItem extends Message<PrizeItem, PrizeItem.Builder> {
  public static final ProtoAdapter<PrizeItem> ADAPTER = new ProtoAdapter_PrizeItem();

  private static final long serialVersionUID = 0L;

  public static final GiftType DEFAULT_GIFTTYPE = GiftType.VIRTUAL_GIFT;

  public static final Integer DEFAULT_NUM = 0;

  public static final Integer DEFAULT_GIFTID = 0;

  public static final ToWhom DEFAULT_TOWHOM = ToWhom.ANCHOR;

  public static final String DEFAULT_TIMES = "";

  public static final Boolean DEFAULT_ISCUSTOM = false;

  public static final String DEFAULT_CUSTOMPRIZENAME = "";

  public static final String DEFAULT_GIFTNAME = "";

  public static final Integer DEFAULT_GIFTVALUE = 0;

  public static final Boolean DEFAULT_NEEDGLOBALMSG = false;

  /**
   * 奖品类型
   */
  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.BigTurnTable.GiftType#ADAPTER"
  )
  public final GiftType giftType;

  /**
   * 奖品个数
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer num;

  /**
   * giftType是虚拟礼物有效
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer giftId;

  /**
   * 奖品发给谁
   */
  @WireField(
      tag = 4,
      adapter = "com.wali.live.proto.BigTurnTable.ToWhom#ADAPTER"
  )
  public final ToWhom toWhom;

  /**
   * giftType是虚拟钻石时用于展示发放多少倍的钻石数
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String times;

  /**
   * 是否是主播自定义奖项
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isCustom;

  /**
   * 自定义奖项名字,isCustom为true读取
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String customPrizeName;

  /**
   * 礼物名字,服务器内部使用，不对客户端下发
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String giftName;

  /**
   * 单个礼物价值
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer giftValue;

  /**
   * 是否需要发送全局push,服务器内部使用，不对客户端下发
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean needGlobalMsg;

  public PrizeItem(GiftType giftType, Integer num, Integer giftId, ToWhom toWhom, String times,
      Boolean isCustom, String customPrizeName, String giftName, Integer giftValue,
      Boolean needGlobalMsg) {
    this(giftType, num, giftId, toWhom, times, isCustom, customPrizeName, giftName, giftValue, needGlobalMsg, ByteString.EMPTY);
  }

  public PrizeItem(GiftType giftType, Integer num, Integer giftId, ToWhom toWhom, String times,
      Boolean isCustom, String customPrizeName, String giftName, Integer giftValue,
      Boolean needGlobalMsg, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.giftType = giftType;
    this.num = num;
    this.giftId = giftId;
    this.toWhom = toWhom;
    this.times = times;
    this.isCustom = isCustom;
    this.customPrizeName = customPrizeName;
    this.giftName = giftName;
    this.giftValue = giftValue;
    this.needGlobalMsg = needGlobalMsg;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.giftType = giftType;
    builder.num = num;
    builder.giftId = giftId;
    builder.toWhom = toWhom;
    builder.times = times;
    builder.isCustom = isCustom;
    builder.customPrizeName = customPrizeName;
    builder.giftName = giftName;
    builder.giftValue = giftValue;
    builder.needGlobalMsg = needGlobalMsg;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PrizeItem)) return false;
    PrizeItem o = (PrizeItem) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(giftType, o.giftType)
        && Internal.equals(num, o.num)
        && Internal.equals(giftId, o.giftId)
        && Internal.equals(toWhom, o.toWhom)
        && Internal.equals(times, o.times)
        && Internal.equals(isCustom, o.isCustom)
        && Internal.equals(customPrizeName, o.customPrizeName)
        && Internal.equals(giftName, o.giftName)
        && Internal.equals(giftValue, o.giftValue)
        && Internal.equals(needGlobalMsg, o.needGlobalMsg);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (giftType != null ? giftType.hashCode() : 0);
      result = result * 37 + (num != null ? num.hashCode() : 0);
      result = result * 37 + (giftId != null ? giftId.hashCode() : 0);
      result = result * 37 + (toWhom != null ? toWhom.hashCode() : 0);
      result = result * 37 + (times != null ? times.hashCode() : 0);
      result = result * 37 + (isCustom != null ? isCustom.hashCode() : 0);
      result = result * 37 + (customPrizeName != null ? customPrizeName.hashCode() : 0);
      result = result * 37 + (giftName != null ? giftName.hashCode() : 0);
      result = result * 37 + (giftValue != null ? giftValue.hashCode() : 0);
      result = result * 37 + (needGlobalMsg != null ? needGlobalMsg.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (giftType != null) builder.append(", giftType=").append(giftType);
    if (num != null) builder.append(", num=").append(num);
    if (giftId != null) builder.append(", giftId=").append(giftId);
    if (toWhom != null) builder.append(", toWhom=").append(toWhom);
    if (times != null) builder.append(", times=").append(times);
    if (isCustom != null) builder.append(", isCustom=").append(isCustom);
    if (customPrizeName != null) builder.append(", customPrizeName=").append(customPrizeName);
    if (giftName != null) builder.append(", giftName=").append(giftName);
    if (giftValue != null) builder.append(", giftValue=").append(giftValue);
    if (needGlobalMsg != null) builder.append(", needGlobalMsg=").append(needGlobalMsg);
    return builder.replace(0, 2, "PrizeItem{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PrizeItem.ADAPTER.encode(this);
  }

  public static final PrizeItem parseFrom(byte[] data) throws IOException {
    PrizeItem c = null;
       c = PrizeItem.ADAPTER.decode(data);
    return c;
  }

  /**
   * 奖品类型
   */
  public GiftType getGiftType() {
    if(giftType==null){
        return new GiftType.Builder().build();
    }
    return giftType;
  }

  /**
   * 奖品个数
   */
  public Integer getNum() {
    if(num==null){
        return DEFAULT_NUM;
    }
    return num;
  }

  /**
   * giftType是虚拟礼物有效
   */
  public Integer getGiftId() {
    if(giftId==null){
        return DEFAULT_GIFTID;
    }
    return giftId;
  }

  /**
   * 奖品发给谁
   */
  public ToWhom getToWhom() {
    if(toWhom==null){
        return new ToWhom.Builder().build();
    }
    return toWhom;
  }

  /**
   * giftType是虚拟钻石时用于展示发放多少倍的钻石数
   */
  public String getTimes() {
    if(times==null){
        return DEFAULT_TIMES;
    }
    return times;
  }

  /**
   * 是否是主播自定义奖项
   */
  public Boolean getIsCustom() {
    if(isCustom==null){
        return DEFAULT_ISCUSTOM;
    }
    return isCustom;
  }

  /**
   * 自定义奖项名字,isCustom为true读取
   */
  public String getCustomPrizeName() {
    if(customPrizeName==null){
        return DEFAULT_CUSTOMPRIZENAME;
    }
    return customPrizeName;
  }

  /**
   * 礼物名字,服务器内部使用，不对客户端下发
   */
  public String getGiftName() {
    if(giftName==null){
        return DEFAULT_GIFTNAME;
    }
    return giftName;
  }

  /**
   * 单个礼物价值
   */
  public Integer getGiftValue() {
    if(giftValue==null){
        return DEFAULT_GIFTVALUE;
    }
    return giftValue;
  }

  /**
   * 是否需要发送全局push,服务器内部使用，不对客户端下发
   */
  public Boolean getNeedGlobalMsg() {
    if(needGlobalMsg==null){
        return DEFAULT_NEEDGLOBALMSG;
    }
    return needGlobalMsg;
  }

  /**
   * 奖品类型
   */
  public boolean hasGiftType() {
    return giftType!=null;
  }

  /**
   * 奖品个数
   */
  public boolean hasNum() {
    return num!=null;
  }

  /**
   * giftType是虚拟礼物有效
   */
  public boolean hasGiftId() {
    return giftId!=null;
  }

  /**
   * 奖品发给谁
   */
  public boolean hasToWhom() {
    return toWhom!=null;
  }

  /**
   * giftType是虚拟钻石时用于展示发放多少倍的钻石数
   */
  public boolean hasTimes() {
    return times!=null;
  }

  /**
   * 是否是主播自定义奖项
   */
  public boolean hasIsCustom() {
    return isCustom!=null;
  }

  /**
   * 自定义奖项名字,isCustom为true读取
   */
  public boolean hasCustomPrizeName() {
    return customPrizeName!=null;
  }

  /**
   * 礼物名字,服务器内部使用，不对客户端下发
   */
  public boolean hasGiftName() {
    return giftName!=null;
  }

  /**
   * 单个礼物价值
   */
  public boolean hasGiftValue() {
    return giftValue!=null;
  }

  /**
   * 是否需要发送全局push,服务器内部使用，不对客户端下发
   */
  public boolean hasNeedGlobalMsg() {
    return needGlobalMsg!=null;
  }

  public static final class Builder extends Message.Builder<PrizeItem, Builder> {
    public GiftType giftType;

    public Integer num;

    public Integer giftId;

    public ToWhom toWhom;

    public String times;

    public Boolean isCustom;

    public String customPrizeName;

    public String giftName;

    public Integer giftValue;

    public Boolean needGlobalMsg;

    public Builder() {
    }

    /**
     * 奖品类型
     */
    public Builder setGiftType(GiftType giftType) {
      this.giftType = giftType;
      return this;
    }

    /**
     * 奖品个数
     */
    public Builder setNum(Integer num) {
      this.num = num;
      return this;
    }

    /**
     * giftType是虚拟礼物有效
     */
    public Builder setGiftId(Integer giftId) {
      this.giftId = giftId;
      return this;
    }

    /**
     * 奖品发给谁
     */
    public Builder setToWhom(ToWhom toWhom) {
      this.toWhom = toWhom;
      return this;
    }

    /**
     * giftType是虚拟钻石时用于展示发放多少倍的钻石数
     */
    public Builder setTimes(String times) {
      this.times = times;
      return this;
    }

    /**
     * 是否是主播自定义奖项
     */
    public Builder setIsCustom(Boolean isCustom) {
      this.isCustom = isCustom;
      return this;
    }

    /**
     * 自定义奖项名字,isCustom为true读取
     */
    public Builder setCustomPrizeName(String customPrizeName) {
      this.customPrizeName = customPrizeName;
      return this;
    }

    /**
     * 礼物名字,服务器内部使用，不对客户端下发
     */
    public Builder setGiftName(String giftName) {
      this.giftName = giftName;
      return this;
    }

    /**
     * 单个礼物价值
     */
    public Builder setGiftValue(Integer giftValue) {
      this.giftValue = giftValue;
      return this;
    }

    /**
     * 是否需要发送全局push,服务器内部使用，不对客户端下发
     */
    public Builder setNeedGlobalMsg(Boolean needGlobalMsg) {
      this.needGlobalMsg = needGlobalMsg;
      return this;
    }

    @Override
    public PrizeItem build() {
      return new PrizeItem(giftType, num, giftId, toWhom, times, isCustom, customPrizeName, giftName, giftValue, needGlobalMsg, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PrizeItem extends ProtoAdapter<PrizeItem> {
    public ProtoAdapter_PrizeItem() {
      super(FieldEncoding.LENGTH_DELIMITED, PrizeItem.class);
    }

    @Override
    public int encodedSize(PrizeItem value) {
      return GiftType.ADAPTER.encodedSizeWithTag(1, value.giftType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.num)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.giftId)
          + ToWhom.ADAPTER.encodedSizeWithTag(4, value.toWhom)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.times)
          + ProtoAdapter.BOOL.encodedSizeWithTag(6, value.isCustom)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.customPrizeName)
          + ProtoAdapter.STRING.encodedSizeWithTag(8, value.giftName)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.giftValue)
          + ProtoAdapter.BOOL.encodedSizeWithTag(10, value.needGlobalMsg)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PrizeItem value) throws IOException {
      GiftType.ADAPTER.encodeWithTag(writer, 1, value.giftType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.num);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.giftId);
      ToWhom.ADAPTER.encodeWithTag(writer, 4, value.toWhom);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.times);
      ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.isCustom);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.customPrizeName);
      ProtoAdapter.STRING.encodeWithTag(writer, 8, value.giftName);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.giftValue);
      ProtoAdapter.BOOL.encodeWithTag(writer, 10, value.needGlobalMsg);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PrizeItem decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.setGiftType(GiftType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.setNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setGiftId(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: {
            try {
              builder.setToWhom(ToWhom.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 5: builder.setTimes(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setIsCustom(ProtoAdapter.BOOL.decode(reader)); break;
          case 7: builder.setCustomPrizeName(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setGiftName(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.setGiftValue(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.setNeedGlobalMsg(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PrizeItem redact(PrizeItem value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
