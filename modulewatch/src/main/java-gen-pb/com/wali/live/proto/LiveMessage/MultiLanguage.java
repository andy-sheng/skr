// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class MultiLanguage extends Message<MultiLanguage, MultiLanguage.Builder> {
  public static final ProtoAdapter<MultiLanguage> ADAPTER = new ProtoAdapter_MultiLanguage();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.LiveMessage.Language#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Language> language;

  public MultiLanguage(List<Language> language) {
    this(language, ByteString.EMPTY);
  }

  public MultiLanguage(List<Language> language, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.language = Internal.immutableCopyOf("language", language);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.language = Internal.copyOf("language", language);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MultiLanguage)) return false;
    MultiLanguage o = (MultiLanguage) other;
    return unknownFields().equals(o.unknownFields())
        && language.equals(o.language);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + language.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!language.isEmpty()) builder.append(", language=").append(language);
    return builder.replace(0, 2, "MultiLanguage{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MultiLanguage.ADAPTER.encode(this);
  }

  public static final MultiLanguage parseFrom(byte[] data) throws IOException {
    MultiLanguage c = null;
       c = MultiLanguage.ADAPTER.decode(data);
    return c;
  }

  public List<Language> getLanguageList() {
    if(language==null){
        return new java.util.ArrayList<Language>();
    }
    return language;
  }

  public boolean hasLanguageList() {
    return language!=null;
  }

  public static final class Builder extends Message.Builder<MultiLanguage, Builder> {
    public List<Language> language;

    public Builder() {
      language = Internal.newMutableList();
    }

    public Builder addAllLanguage(List<Language> language) {
      Internal.checkElementsNotNull(language);
      this.language = language;
      return this;
    }

    @Override
    public MultiLanguage build() {
      return new MultiLanguage(language, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MultiLanguage extends ProtoAdapter<MultiLanguage> {
    public ProtoAdapter_MultiLanguage() {
      super(FieldEncoding.LENGTH_DELIMITED, MultiLanguage.class);
    }

    @Override
    public int encodedSize(MultiLanguage value) {
      return Language.ADAPTER.asRepeated().encodedSizeWithTag(1, value.language)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MultiLanguage value) throws IOException {
      Language.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.language);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MultiLanguage decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.language.add(Language.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MultiLanguage redact(MultiLanguage value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.language, Language.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
