// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 禁言消息
 */
public final class ForbiddenMessage extends Message<ForbiddenMessage, ForbiddenMessage.Builder> {
  public static final ProtoAdapter<ForbiddenMessage> ADAPTER = new ProtoAdapter_ForbiddenMessage();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_USERID = 0L;

  public static final Integer DEFAULT_OP_TYPE = 0;

  public static final String DEFAULT_BAN_NICKNAME = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 操作人类型: 0:管理员, 1:巡查员, 2:榜一,3:房主,4:运营后台
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer op_type;

  /**
   * 被禁言用户昵称
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String ban_nickname;

  public ForbiddenMessage(Long userId, Integer op_type, String ban_nickname) {
    this(userId, op_type, ban_nickname, ByteString.EMPTY);
  }

  public ForbiddenMessage(Long userId, Integer op_type, String ban_nickname,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userId = userId;
    this.op_type = op_type;
    this.ban_nickname = ban_nickname;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userId = userId;
    builder.op_type = op_type;
    builder.ban_nickname = ban_nickname;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ForbiddenMessage)) return false;
    ForbiddenMessage o = (ForbiddenMessage) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(userId, o.userId)
        && Internal.equals(op_type, o.op_type)
        && Internal.equals(ban_nickname, o.ban_nickname);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (op_type != null ? op_type.hashCode() : 0);
      result = result * 37 + (ban_nickname != null ? ban_nickname.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userId != null) builder.append(", userId=").append(userId);
    if (op_type != null) builder.append(", op_type=").append(op_type);
    if (ban_nickname != null) builder.append(", ban_nickname=").append(ban_nickname);
    return builder.replace(0, 2, "ForbiddenMessage{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ForbiddenMessage.ADAPTER.encode(this);
  }

  public static final ForbiddenMessage parseFrom(byte[] data) throws IOException {
    ForbiddenMessage c = null;
       c = ForbiddenMessage.ADAPTER.decode(data);
    return c;
  }

  public Long getUserId() {
    if(userId==null){
        return DEFAULT_USERID;
    }
    return userId;
  }

  /**
   * 操作人类型: 0:管理员, 1:巡查员, 2:榜一,3:房主,4:运营后台
   */
  public Integer getOpType() {
    if(op_type==null){
        return DEFAULT_OP_TYPE;
    }
    return op_type;
  }

  /**
   * 被禁言用户昵称
   */
  public String getBanNickname() {
    if(ban_nickname==null){
        return DEFAULT_BAN_NICKNAME;
    }
    return ban_nickname;
  }

  public boolean hasUserId() {
    return userId!=null;
  }

  /**
   * 操作人类型: 0:管理员, 1:巡查员, 2:榜一,3:房主,4:运营后台
   */
  public boolean hasOpType() {
    return op_type!=null;
  }

  /**
   * 被禁言用户昵称
   */
  public boolean hasBanNickname() {
    return ban_nickname!=null;
  }

  public static final class Builder extends Message.Builder<ForbiddenMessage, Builder> {
    public Long userId;

    public Integer op_type;

    public String ban_nickname;

    public Builder() {
    }

    public Builder setUserId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 操作人类型: 0:管理员, 1:巡查员, 2:榜一,3:房主,4:运营后台
     */
    public Builder setOpType(Integer op_type) {
      this.op_type = op_type;
      return this;
    }

    /**
     * 被禁言用户昵称
     */
    public Builder setBanNickname(String ban_nickname) {
      this.ban_nickname = ban_nickname;
      return this;
    }

    @Override
    public ForbiddenMessage build() {
      return new ForbiddenMessage(userId, op_type, ban_nickname, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ForbiddenMessage extends ProtoAdapter<ForbiddenMessage> {
    public ProtoAdapter_ForbiddenMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, ForbiddenMessage.class);
    }

    @Override
    public int encodedSize(ForbiddenMessage value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.userId)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.op_type)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.ban_nickname)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ForbiddenMessage value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.userId);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.op_type);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.ban_nickname);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ForbiddenMessage decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUserId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setOpType(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setBanNickname(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ForbiddenMessage redact(ForbiddenMessage value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
