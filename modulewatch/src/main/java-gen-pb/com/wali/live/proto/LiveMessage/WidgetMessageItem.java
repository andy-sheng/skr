// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class WidgetMessageItem extends Message<WidgetMessageItem, WidgetMessageItem.Builder> {
  public static final ProtoAdapter<WidgetMessageItem> ADAPTER = new ProtoAdapter_WidgetMessageItem();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_LINK_URL = "";

  public static final Integer DEFAULT_POSITION = 0;

  public static final String DEFAULT_ICON = "";

  public static final String DEFAULT_TEXT = "";

  public static final Integer DEFAULT_SHOWTYPE = 0;

  /**
   * 跳转地址
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String link_url;

  /**
   * 坐标：0:左上角，1:右上角，2:左下角，3：右下角
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer position;

  /**
   * 图标地址
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String icon;

  /**
   * 文字内容
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String text;

  /**
   * 展示的类型。0：主播和观众都展示，1主播不展示观众展示，2:主播展示观众不展示
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer showType;

  public WidgetMessageItem(String link_url, Integer position, String icon, String text,
      Integer showType) {
    this(link_url, position, icon, text, showType, ByteString.EMPTY);
  }

  public WidgetMessageItem(String link_url, Integer position, String icon, String text,
      Integer showType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.link_url = link_url;
    this.position = position;
    this.icon = icon;
    this.text = text;
    this.showType = showType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.link_url = link_url;
    builder.position = position;
    builder.icon = icon;
    builder.text = text;
    builder.showType = showType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof WidgetMessageItem)) return false;
    WidgetMessageItem o = (WidgetMessageItem) other;
    return unknownFields().equals(o.unknownFields())
        && link_url.equals(o.link_url)
        && position.equals(o.position)
        && Internal.equals(icon, o.icon)
        && Internal.equals(text, o.text)
        && Internal.equals(showType, o.showType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + link_url.hashCode();
      result = result * 37 + position.hashCode();
      result = result * 37 + (icon != null ? icon.hashCode() : 0);
      result = result * 37 + (text != null ? text.hashCode() : 0);
      result = result * 37 + (showType != null ? showType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", link_url=").append(link_url);
    builder.append(", position=").append(position);
    if (icon != null) builder.append(", icon=").append(icon);
    if (text != null) builder.append(", text=").append(text);
    if (showType != null) builder.append(", showType=").append(showType);
    return builder.replace(0, 2, "WidgetMessageItem{").append('}').toString();
  }

  public byte[] toByteArray() {
    return WidgetMessageItem.ADAPTER.encode(this);
  }

  public static final WidgetMessageItem parseFrom(byte[] data) throws IOException {
    WidgetMessageItem c = null;
       c = WidgetMessageItem.ADAPTER.decode(data);
    return c;
  }

  /**
   * 跳转地址
   */
  public String getLinkUrl() {
    if(link_url==null){
        return DEFAULT_LINK_URL;
    }
    return link_url;
  }

  /**
   * 坐标：0:左上角，1:右上角，2:左下角，3：右下角
   */
  public Integer getPosition() {
    if(position==null){
        return DEFAULT_POSITION;
    }
    return position;
  }

  /**
   * 图标地址
   */
  public String getIcon() {
    if(icon==null){
        return DEFAULT_ICON;
    }
    return icon;
  }

  /**
   * 文字内容
   */
  public String getText() {
    if(text==null){
        return DEFAULT_TEXT;
    }
    return text;
  }

  /**
   * 展示的类型。0：主播和观众都展示，1主播不展示观众展示，2:主播展示观众不展示
   */
  public Integer getShowType() {
    if(showType==null){
        return DEFAULT_SHOWTYPE;
    }
    return showType;
  }

  /**
   * 跳转地址
   */
  public boolean hasLinkUrl() {
    return link_url!=null;
  }

  /**
   * 坐标：0:左上角，1:右上角，2:左下角，3：右下角
   */
  public boolean hasPosition() {
    return position!=null;
  }

  /**
   * 图标地址
   */
  public boolean hasIcon() {
    return icon!=null;
  }

  /**
   * 文字内容
   */
  public boolean hasText() {
    return text!=null;
  }

  /**
   * 展示的类型。0：主播和观众都展示，1主播不展示观众展示，2:主播展示观众不展示
   */
  public boolean hasShowType() {
    return showType!=null;
  }

  public static final class Builder extends Message.Builder<WidgetMessageItem, Builder> {
    public String link_url;

    public Integer position;

    public String icon;

    public String text;

    public Integer showType;

    public Builder() {
    }

    /**
     * 跳转地址
     */
    public Builder setLinkUrl(String link_url) {
      this.link_url = link_url;
      return this;
    }

    /**
     * 坐标：0:左上角，1:右上角，2:左下角，3：右下角
     */
    public Builder setPosition(Integer position) {
      this.position = position;
      return this;
    }

    /**
     * 图标地址
     */
    public Builder setIcon(String icon) {
      this.icon = icon;
      return this;
    }

    /**
     * 文字内容
     */
    public Builder setText(String text) {
      this.text = text;
      return this;
    }

    /**
     * 展示的类型。0：主播和观众都展示，1主播不展示观众展示，2:主播展示观众不展示
     */
    public Builder setShowType(Integer showType) {
      this.showType = showType;
      return this;
    }

    @Override
    public WidgetMessageItem build() {
      return new WidgetMessageItem(link_url, position, icon, text, showType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_WidgetMessageItem extends ProtoAdapter<WidgetMessageItem> {
    public ProtoAdapter_WidgetMessageItem() {
      super(FieldEncoding.LENGTH_DELIMITED, WidgetMessageItem.class);
    }

    @Override
    public int encodedSize(WidgetMessageItem value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.link_url)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.position)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.icon)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.text)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.showType)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, WidgetMessageItem value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.link_url);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.position);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.icon);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.text);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.showType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public WidgetMessageItem decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setLinkUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setPosition(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setIcon(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setText(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setShowType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public WidgetMessageItem redact(WidgetMessageItem value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
