// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LivePk.proto
package com.wali.live.proto.LivePK;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class NewPKInfo extends Message<NewPKInfo, NewPKInfo.Builder> {
  public static final ProtoAdapter<NewPKInfo> ADAPTER = new ProtoAdapter_NewPKInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_PK_TYPE = 0;

  public static final Long DEFAULT_ADMIN_UUID = 0L;

  public static final Long DEFAULT_INVITE_TS = 0L;

  public static final Long DEFAULT_BEGIN_TS = 0L;

  /**
   * 0:主播发起 1：场控发起
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer pk_type;

  /**
   * 发起方
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LivePK.PKInfoItem#ADAPTER"
  )
  public final PKInfoItem first;

  /**
   * 被pk方
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.LivePK.PKInfoItem#ADAPTER"
  )
  public final PKInfoItem second;

  /**
   * 场控id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long admin_uuid;

  /**
   * 邀请时间
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long invite_ts;

  /**
   * 开始时间
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long begin_ts;

  /**
   * pk设置
   */
  @WireField(
      tag = 7,
      adapter = "com.wali.live.proto.LivePK.PKSetting#ADAPTER"
  )
  public final PKSetting setting;

  public NewPKInfo(Integer pk_type, PKInfoItem first, PKInfoItem second, Long admin_uuid,
      Long invite_ts, Long begin_ts, PKSetting setting) {
    this(pk_type, first, second, admin_uuid, invite_ts, begin_ts, setting, ByteString.EMPTY);
  }

  public NewPKInfo(Integer pk_type, PKInfoItem first, PKInfoItem second, Long admin_uuid,
      Long invite_ts, Long begin_ts, PKSetting setting, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.pk_type = pk_type;
    this.first = first;
    this.second = second;
    this.admin_uuid = admin_uuid;
    this.invite_ts = invite_ts;
    this.begin_ts = begin_ts;
    this.setting = setting;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.pk_type = pk_type;
    builder.first = first;
    builder.second = second;
    builder.admin_uuid = admin_uuid;
    builder.invite_ts = invite_ts;
    builder.begin_ts = begin_ts;
    builder.setting = setting;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof NewPKInfo)) return false;
    NewPKInfo o = (NewPKInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(pk_type, o.pk_type)
        && Internal.equals(first, o.first)
        && Internal.equals(second, o.second)
        && Internal.equals(admin_uuid, o.admin_uuid)
        && Internal.equals(invite_ts, o.invite_ts)
        && Internal.equals(begin_ts, o.begin_ts)
        && Internal.equals(setting, o.setting);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (pk_type != null ? pk_type.hashCode() : 0);
      result = result * 37 + (first != null ? first.hashCode() : 0);
      result = result * 37 + (second != null ? second.hashCode() : 0);
      result = result * 37 + (admin_uuid != null ? admin_uuid.hashCode() : 0);
      result = result * 37 + (invite_ts != null ? invite_ts.hashCode() : 0);
      result = result * 37 + (begin_ts != null ? begin_ts.hashCode() : 0);
      result = result * 37 + (setting != null ? setting.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (pk_type != null) builder.append(", pk_type=").append(pk_type);
    if (first != null) builder.append(", first=").append(first);
    if (second != null) builder.append(", second=").append(second);
    if (admin_uuid != null) builder.append(", admin_uuid=").append(admin_uuid);
    if (invite_ts != null) builder.append(", invite_ts=").append(invite_ts);
    if (begin_ts != null) builder.append(", begin_ts=").append(begin_ts);
    if (setting != null) builder.append(", setting=").append(setting);
    return builder.replace(0, 2, "NewPKInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return NewPKInfo.ADAPTER.encode(this);
  }

  public static final NewPKInfo parseFrom(byte[] data) throws IOException {
    NewPKInfo c = null;
       c = NewPKInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 0:主播发起 1：场控发起
   */
  public Integer getPkType() {
    if(pk_type==null){
        return DEFAULT_PK_TYPE;
    }
    return pk_type;
  }

  /**
   * 发起方
   */
  public PKInfoItem getFirst() {
    if(first==null){
        return new PKInfoItem.Builder().build();
    }
    return first;
  }

  /**
   * 被pk方
   */
  public PKInfoItem getSecond() {
    if(second==null){
        return new PKInfoItem.Builder().build();
    }
    return second;
  }

  /**
   * 场控id
   */
  public Long getAdminUuid() {
    if(admin_uuid==null){
        return DEFAULT_ADMIN_UUID;
    }
    return admin_uuid;
  }

  /**
   * 邀请时间
   */
  public Long getInviteTs() {
    if(invite_ts==null){
        return DEFAULT_INVITE_TS;
    }
    return invite_ts;
  }

  /**
   * 开始时间
   */
  public Long getBeginTs() {
    if(begin_ts==null){
        return DEFAULT_BEGIN_TS;
    }
    return begin_ts;
  }

  /**
   * pk设置
   */
  public PKSetting getSetting() {
    if(setting==null){
        return new PKSetting.Builder().build();
    }
    return setting;
  }

  /**
   * 0:主播发起 1：场控发起
   */
  public boolean hasPkType() {
    return pk_type!=null;
  }

  /**
   * 发起方
   */
  public boolean hasFirst() {
    return first!=null;
  }

  /**
   * 被pk方
   */
  public boolean hasSecond() {
    return second!=null;
  }

  /**
   * 场控id
   */
  public boolean hasAdminUuid() {
    return admin_uuid!=null;
  }

  /**
   * 邀请时间
   */
  public boolean hasInviteTs() {
    return invite_ts!=null;
  }

  /**
   * 开始时间
   */
  public boolean hasBeginTs() {
    return begin_ts!=null;
  }

  /**
   * pk设置
   */
  public boolean hasSetting() {
    return setting!=null;
  }

  public static final class Builder extends Message.Builder<NewPKInfo, Builder> {
    public Integer pk_type;

    public PKInfoItem first;

    public PKInfoItem second;

    public Long admin_uuid;

    public Long invite_ts;

    public Long begin_ts;

    public PKSetting setting;

    public Builder() {
    }

    /**
     * 0:主播发起 1：场控发起
     */
    public Builder setPkType(Integer pk_type) {
      this.pk_type = pk_type;
      return this;
    }

    /**
     * 发起方
     */
    public Builder setFirst(PKInfoItem first) {
      this.first = first;
      return this;
    }

    /**
     * 被pk方
     */
    public Builder setSecond(PKInfoItem second) {
      this.second = second;
      return this;
    }

    /**
     * 场控id
     */
    public Builder setAdminUuid(Long admin_uuid) {
      this.admin_uuid = admin_uuid;
      return this;
    }

    /**
     * 邀请时间
     */
    public Builder setInviteTs(Long invite_ts) {
      this.invite_ts = invite_ts;
      return this;
    }

    /**
     * 开始时间
     */
    public Builder setBeginTs(Long begin_ts) {
      this.begin_ts = begin_ts;
      return this;
    }

    /**
     * pk设置
     */
    public Builder setSetting(PKSetting setting) {
      this.setting = setting;
      return this;
    }

    @Override
    public NewPKInfo build() {
      return new NewPKInfo(pk_type, first, second, admin_uuid, invite_ts, begin_ts, setting, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_NewPKInfo extends ProtoAdapter<NewPKInfo> {
    public ProtoAdapter_NewPKInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, NewPKInfo.class);
    }

    @Override
    public int encodedSize(NewPKInfo value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.pk_type)
          + PKInfoItem.ADAPTER.encodedSizeWithTag(2, value.first)
          + PKInfoItem.ADAPTER.encodedSizeWithTag(3, value.second)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.admin_uuid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.invite_ts)
          + ProtoAdapter.UINT64.encodedSizeWithTag(6, value.begin_ts)
          + PKSetting.ADAPTER.encodedSizeWithTag(7, value.setting)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, NewPKInfo value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.pk_type);
      PKInfoItem.ADAPTER.encodeWithTag(writer, 2, value.first);
      PKInfoItem.ADAPTER.encodeWithTag(writer, 3, value.second);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.admin_uuid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.invite_ts);
      ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.begin_ts);
      PKSetting.ADAPTER.encodeWithTag(writer, 7, value.setting);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public NewPKInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setPkType(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setFirst(PKInfoItem.ADAPTER.decode(reader)); break;
          case 3: builder.setSecond(PKInfoItem.ADAPTER.decode(reader)); break;
          case 4: builder.setAdminUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.setInviteTs(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.setBeginTs(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.setSetting(PKSetting.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public NewPKInfo redact(NewPKInfo value) {
      Builder builder = value.newBuilder();
      if (builder.first != null) builder.first = PKInfoItem.ADAPTER.redact(builder.first);
      if (builder.second != null) builder.second = PKInfoItem.ADAPTER.redact(builder.second);
      if (builder.setting != null) builder.setting = PKSetting.ADAPTER.redact(builder.setting);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
