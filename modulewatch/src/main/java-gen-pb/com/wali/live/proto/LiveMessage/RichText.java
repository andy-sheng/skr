// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * msg_type 105  系统推送的图文消息
 */
public final class RichText extends Message<RichText, RichText.Builder> {
  public static final ProtoAdapter<RichText> ADAPTER = new ProtoAdapter_RichText();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_BRIEF = "";

  public static final String DEFAULT_POSTER = "";

  public static final String DEFAULT_DETAIL_URL = "";

  public static final String DEFAULT_TITLE = "";

  /**
   * 摘要
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String brief;

  /**
   * 图片
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String poster;

  /**
   * 详情
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String detail_url;

  /**
   * 标题
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  public RichText(String brief, String poster, String detail_url, String title) {
    this(brief, poster, detail_url, title, ByteString.EMPTY);
  }

  public RichText(String brief, String poster, String detail_url, String title,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.brief = brief;
    this.poster = poster;
    this.detail_url = detail_url;
    this.title = title;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.brief = brief;
    builder.poster = poster;
    builder.detail_url = detail_url;
    builder.title = title;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RichText)) return false;
    RichText o = (RichText) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(brief, o.brief)
        && Internal.equals(poster, o.poster)
        && Internal.equals(detail_url, o.detail_url)
        && Internal.equals(title, o.title);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (brief != null ? brief.hashCode() : 0);
      result = result * 37 + (poster != null ? poster.hashCode() : 0);
      result = result * 37 + (detail_url != null ? detail_url.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (brief != null) builder.append(", brief=").append(brief);
    if (poster != null) builder.append(", poster=").append(poster);
    if (detail_url != null) builder.append(", detail_url=").append(detail_url);
    if (title != null) builder.append(", title=").append(title);
    return builder.replace(0, 2, "RichText{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RichText.ADAPTER.encode(this);
  }

  public static final RichText parseFrom(byte[] data) throws IOException {
    RichText c = null;
       c = RichText.ADAPTER.decode(data);
    return c;
  }

  /**
   * 摘要
   */
  public String getBrief() {
    if(brief==null){
        return DEFAULT_BRIEF;
    }
    return brief;
  }

  /**
   * 图片
   */
  public String getPoster() {
    if(poster==null){
        return DEFAULT_POSTER;
    }
    return poster;
  }

  /**
   * 详情
   */
  public String getDetailUrl() {
    if(detail_url==null){
        return DEFAULT_DETAIL_URL;
    }
    return detail_url;
  }

  /**
   * 标题
   */
  public String getTitle() {
    if(title==null){
        return DEFAULT_TITLE;
    }
    return title;
  }

  /**
   * 摘要
   */
  public boolean hasBrief() {
    return brief!=null;
  }

  /**
   * 图片
   */
  public boolean hasPoster() {
    return poster!=null;
  }

  /**
   * 详情
   */
  public boolean hasDetailUrl() {
    return detail_url!=null;
  }

  /**
   * 标题
   */
  public boolean hasTitle() {
    return title!=null;
  }

  public static final class Builder extends Message.Builder<RichText, Builder> {
    public String brief;

    public String poster;

    public String detail_url;

    public String title;

    public Builder() {
    }

    /**
     * 摘要
     */
    public Builder setBrief(String brief) {
      this.brief = brief;
      return this;
    }

    /**
     * 图片
     */
    public Builder setPoster(String poster) {
      this.poster = poster;
      return this;
    }

    /**
     * 详情
     */
    public Builder setDetailUrl(String detail_url) {
      this.detail_url = detail_url;
      return this;
    }

    /**
     * 标题
     */
    public Builder setTitle(String title) {
      this.title = title;
      return this;
    }

    @Override
    public RichText build() {
      return new RichText(brief, poster, detail_url, title, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RichText extends ProtoAdapter<RichText> {
    public ProtoAdapter_RichText() {
      super(FieldEncoding.LENGTH_DELIMITED, RichText.class);
    }

    @Override
    public int encodedSize(RichText value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.brief)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.poster)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.detail_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.title)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RichText value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.brief);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.poster);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.detail_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.title);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RichText decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setBrief(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setPoster(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setDetailUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setTitle(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RichText redact(RichText value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
