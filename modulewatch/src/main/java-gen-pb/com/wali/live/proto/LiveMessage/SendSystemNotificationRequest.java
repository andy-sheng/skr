// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class SendSystemNotificationRequest extends Message<SendSystemNotificationRequest, SendSystemNotificationRequest.Builder> {
  public static final ProtoAdapter<SendSystemNotificationRequest> ADAPTER = new ProtoAdapter_SendSystemNotificationRequest();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_FROM = 0L;

  public static final Long DEFAULT_TO = 0L;

  public static final Integer DEFAULT_MSG_TYPE = 0;

  public static final String DEFAULT_MSG_BODY = "";

  public static final ByteString DEFAULT_MSG_EXT = ByteString.EMPTY;

  public static final Long DEFAULT_CID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long from;

  /**
   * 全局通知 to不要填；给某个人发添接收者ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long to;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer msg_type;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String msg_body;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString msg_ext;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long cid;

  public SendSystemNotificationRequest(Long from, Long to, Integer msg_type, String msg_body,
      ByteString msg_ext, Long cid) {
    this(from, to, msg_type, msg_body, msg_ext, cid, ByteString.EMPTY);
  }

  public SendSystemNotificationRequest(Long from, Long to, Integer msg_type, String msg_body,
      ByteString msg_ext, Long cid, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.from = from;
    this.to = to;
    this.msg_type = msg_type;
    this.msg_body = msg_body;
    this.msg_ext = msg_ext;
    this.cid = cid;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.from = from;
    builder.to = to;
    builder.msg_type = msg_type;
    builder.msg_body = msg_body;
    builder.msg_ext = msg_ext;
    builder.cid = cid;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SendSystemNotificationRequest)) return false;
    SendSystemNotificationRequest o = (SendSystemNotificationRequest) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(from, o.from)
        && Internal.equals(to, o.to)
        && Internal.equals(msg_type, o.msg_type)
        && Internal.equals(msg_body, o.msg_body)
        && Internal.equals(msg_ext, o.msg_ext)
        && Internal.equals(cid, o.cid);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (from != null ? from.hashCode() : 0);
      result = result * 37 + (to != null ? to.hashCode() : 0);
      result = result * 37 + (msg_type != null ? msg_type.hashCode() : 0);
      result = result * 37 + (msg_body != null ? msg_body.hashCode() : 0);
      result = result * 37 + (msg_ext != null ? msg_ext.hashCode() : 0);
      result = result * 37 + (cid != null ? cid.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (from != null) builder.append(", from=").append(from);
    if (to != null) builder.append(", to=").append(to);
    if (msg_type != null) builder.append(", msg_type=").append(msg_type);
    if (msg_body != null) builder.append(", msg_body=").append(msg_body);
    if (msg_ext != null) builder.append(", msg_ext=").append(msg_ext);
    if (cid != null) builder.append(", cid=").append(cid);
    return builder.replace(0, 2, "SendSystemNotificationRequest{").append('}').toString();
  }

  public byte[] toByteArray() {
    return SendSystemNotificationRequest.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<SendSystemNotificationRequest, Builder> {
    public Long from;

    public Long to;

    public Integer msg_type;

    public String msg_body;

    public ByteString msg_ext;

    public Long cid;

    public Builder() {
    }

    public Builder setFrom(Long from) {
      this.from = from;
      return this;
    }

    /**
     * 全局通知 to不要填；给某个人发添接收者ID
     */
    public Builder setTo(Long to) {
      this.to = to;
      return this;
    }

    public Builder setMsgType(Integer msg_type) {
      this.msg_type = msg_type;
      return this;
    }

    public Builder setMsgBody(String msg_body) {
      this.msg_body = msg_body;
      return this;
    }

    public Builder setMsgExt(ByteString msg_ext) {
      this.msg_ext = msg_ext;
      return this;
    }

    public Builder setCid(Long cid) {
      this.cid = cid;
      return this;
    }

    @Override
    public SendSystemNotificationRequest build() {
      return new SendSystemNotificationRequest(from, to, msg_type, msg_body, msg_ext, cid, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SendSystemNotificationRequest extends ProtoAdapter<SendSystemNotificationRequest> {
    public ProtoAdapter_SendSystemNotificationRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, SendSystemNotificationRequest.class);
    }

    @Override
    public int encodedSize(SendSystemNotificationRequest value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.from)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.to)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.msg_type)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.msg_body)
          + ProtoAdapter.BYTES.encodedSizeWithTag(5, value.msg_ext)
          + ProtoAdapter.UINT64.encodedSizeWithTag(6, value.cid)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SendSystemNotificationRequest value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.from);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.to);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.msg_type);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.msg_body);
      ProtoAdapter.BYTES.encodeWithTag(writer, 5, value.msg_ext);
      ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.cid);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SendSystemNotificationRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setFrom(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setTo(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setMsgType(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setMsgBody(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setMsgExt(ProtoAdapter.BYTES.decode(reader)); break;
          case 6: builder.setCid(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SendSystemNotificationRequest redact(SendSystemNotificationRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
