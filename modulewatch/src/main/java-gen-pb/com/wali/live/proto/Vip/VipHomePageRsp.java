// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Vip.proto
package com.wali.live.proto.Vip;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class VipHomePageRsp extends Message<VipHomePageRsp, VipHomePageRsp.Builder> {
  public static final ProtoAdapter<VipHomePageRsp> ADAPTER = new ProtoAdapter_VipHomePageRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RET = 0;

  public static final Integer DEFAULT_VIP_LEVEL = 0;

  public static final Integer DEFAULT_VIP_EXP = 0;

  public static final Integer DEFAULT_NEXT_VIP_LEVEL_EXP = 0;

  public static final Integer DEFAULT_VIP_LEVEL_INTERVAL = 0;

  public static final String DEFAULT_VIP_LEVEL_NAME = "";

  public static final Boolean DEFAULT_VIP_DISABLE = false;

  public static final Integer DEFAULT_TOTAL_GEM_CNT = 0;

  public static final Integer DEFAULT_NEED_GEM_CNT = 0;

  /**
   * 返回码
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer ret;

  /**
   * vip等级
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer vip_level;

  /**
   * vip经验值
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer vip_exp;

  /**
   * 当前经验距离下一等需要级经验值. 满级时为0
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer next_vip_level_exp;

  /**
   * 当前等级和下一等奖的经验值差. 满级时为0
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer vip_level_interval;

  /**
   * 当前vip等级名称
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String vip_level_name;

  /**
   * vip特权
   */
  @WireField(
      tag = 7,
      adapter = "com.wali.live.proto.Vip.VipPrivilege#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<VipPrivilege> vip_privileges;

  /**
   * vip是否被冻结
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean vip_disable;

  /**
   * 送出金钻数
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer total_gem_cnt;

  /**
   * 升级所需金钻数
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer need_gem_cnt;

  public VipHomePageRsp(Integer ret, Integer vip_level, Integer vip_exp, Integer next_vip_level_exp,
      Integer vip_level_interval, String vip_level_name, List<VipPrivilege> vip_privileges,
      Boolean vip_disable, Integer total_gem_cnt, Integer need_gem_cnt) {
    this(ret, vip_level, vip_exp, next_vip_level_exp, vip_level_interval, vip_level_name, vip_privileges, vip_disable, total_gem_cnt, need_gem_cnt, ByteString.EMPTY);
  }

  public VipHomePageRsp(Integer ret, Integer vip_level, Integer vip_exp, Integer next_vip_level_exp,
      Integer vip_level_interval, String vip_level_name, List<VipPrivilege> vip_privileges,
      Boolean vip_disable, Integer total_gem_cnt, Integer need_gem_cnt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ret = ret;
    this.vip_level = vip_level;
    this.vip_exp = vip_exp;
    this.next_vip_level_exp = next_vip_level_exp;
    this.vip_level_interval = vip_level_interval;
    this.vip_level_name = vip_level_name;
    this.vip_privileges = Internal.immutableCopyOf("vip_privileges", vip_privileges);
    this.vip_disable = vip_disable;
    this.total_gem_cnt = total_gem_cnt;
    this.need_gem_cnt = need_gem_cnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ret = ret;
    builder.vip_level = vip_level;
    builder.vip_exp = vip_exp;
    builder.next_vip_level_exp = next_vip_level_exp;
    builder.vip_level_interval = vip_level_interval;
    builder.vip_level_name = vip_level_name;
    builder.vip_privileges = Internal.copyOf("vip_privileges", vip_privileges);
    builder.vip_disable = vip_disable;
    builder.total_gem_cnt = total_gem_cnt;
    builder.need_gem_cnt = need_gem_cnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VipHomePageRsp)) return false;
    VipHomePageRsp o = (VipHomePageRsp) other;
    return unknownFields().equals(o.unknownFields())
        && ret.equals(o.ret)
        && vip_level.equals(o.vip_level)
        && vip_exp.equals(o.vip_exp)
        && next_vip_level_exp.equals(o.next_vip_level_exp)
        && Internal.equals(vip_level_interval, o.vip_level_interval)
        && Internal.equals(vip_level_name, o.vip_level_name)
        && vip_privileges.equals(o.vip_privileges)
        && Internal.equals(vip_disable, o.vip_disable)
        && Internal.equals(total_gem_cnt, o.total_gem_cnt)
        && Internal.equals(need_gem_cnt, o.need_gem_cnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + ret.hashCode();
      result = result * 37 + vip_level.hashCode();
      result = result * 37 + vip_exp.hashCode();
      result = result * 37 + next_vip_level_exp.hashCode();
      result = result * 37 + (vip_level_interval != null ? vip_level_interval.hashCode() : 0);
      result = result * 37 + (vip_level_name != null ? vip_level_name.hashCode() : 0);
      result = result * 37 + vip_privileges.hashCode();
      result = result * 37 + (vip_disable != null ? vip_disable.hashCode() : 0);
      result = result * 37 + (total_gem_cnt != null ? total_gem_cnt.hashCode() : 0);
      result = result * 37 + (need_gem_cnt != null ? need_gem_cnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", ret=").append(ret);
    builder.append(", vip_level=").append(vip_level);
    builder.append(", vip_exp=").append(vip_exp);
    builder.append(", next_vip_level_exp=").append(next_vip_level_exp);
    if (vip_level_interval != null) builder.append(", vip_level_interval=").append(vip_level_interval);
    if (vip_level_name != null) builder.append(", vip_level_name=").append(vip_level_name);
    if (!vip_privileges.isEmpty()) builder.append(", vip_privileges=").append(vip_privileges);
    if (vip_disable != null) builder.append(", vip_disable=").append(vip_disable);
    if (total_gem_cnt != null) builder.append(", total_gem_cnt=").append(total_gem_cnt);
    if (need_gem_cnt != null) builder.append(", need_gem_cnt=").append(need_gem_cnt);
    return builder.replace(0, 2, "VipHomePageRsp{").append('}').toString();
  }

  public static final VipHomePageRsp parseFrom(byte[] data) throws IOException {
    VipHomePageRsp c = null;
       c = VipHomePageRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 返回码
   */
  public Integer getRet() {
    if(ret==null){
        return DEFAULT_RET;
    }
    return ret;
  }

  /**
   * vip等级
   */
  public Integer getVipLevel() {
    if(vip_level==null){
        return DEFAULT_VIP_LEVEL;
    }
    return vip_level;
  }

  /**
   * vip经验值
   */
  public Integer getVipExp() {
    if(vip_exp==null){
        return DEFAULT_VIP_EXP;
    }
    return vip_exp;
  }

  /**
   * 当前经验距离下一等需要级经验值. 满级时为0
   */
  public Integer getNextVipLevelExp() {
    if(next_vip_level_exp==null){
        return DEFAULT_NEXT_VIP_LEVEL_EXP;
    }
    return next_vip_level_exp;
  }

  /**
   * 当前等级和下一等奖的经验值差. 满级时为0
   */
  public Integer getVipLevelInterval() {
    if(vip_level_interval==null){
        return DEFAULT_VIP_LEVEL_INTERVAL;
    }
    return vip_level_interval;
  }

  /**
   * 当前vip等级名称
   */
  public String getVipLevelName() {
    if(vip_level_name==null){
        return DEFAULT_VIP_LEVEL_NAME;
    }
    return vip_level_name;
  }

  /**
   * vip特权
   */
  public List<VipPrivilege> getVipPrivilegesList() {
    if(vip_privileges==null){
        return new java.util.ArrayList<VipPrivilege>();
    }
    return vip_privileges;
  }

  /**
   * vip是否被冻结
   */
  public Boolean getVipDisable() {
    if(vip_disable==null){
        return DEFAULT_VIP_DISABLE;
    }
    return vip_disable;
  }

  /**
   * 送出金钻数
   */
  public Integer getTotalGemCnt() {
    if(total_gem_cnt==null){
        return DEFAULT_TOTAL_GEM_CNT;
    }
    return total_gem_cnt;
  }

  /**
   * 升级所需金钻数
   */
  public Integer getNeedGemCnt() {
    if(need_gem_cnt==null){
        return DEFAULT_NEED_GEM_CNT;
    }
    return need_gem_cnt;
  }

  /**
   * 返回码
   */
  public boolean hasRet() {
    return ret!=null;
  }

  /**
   * vip等级
   */
  public boolean hasVipLevel() {
    return vip_level!=null;
  }

  /**
   * vip经验值
   */
  public boolean hasVipExp() {
    return vip_exp!=null;
  }

  /**
   * 当前经验距离下一等需要级经验值. 满级时为0
   */
  public boolean hasNextVipLevelExp() {
    return next_vip_level_exp!=null;
  }

  /**
   * 当前等级和下一等奖的经验值差. 满级时为0
   */
  public boolean hasVipLevelInterval() {
    return vip_level_interval!=null;
  }

  /**
   * 当前vip等级名称
   */
  public boolean hasVipLevelName() {
    return vip_level_name!=null;
  }

  /**
   * vip特权
   */
  public boolean hasVipPrivilegesList() {
    return vip_privileges!=null;
  }

  /**
   * vip是否被冻结
   */
  public boolean hasVipDisable() {
    return vip_disable!=null;
  }

  /**
   * 送出金钻数
   */
  public boolean hasTotalGemCnt() {
    return total_gem_cnt!=null;
  }

  /**
   * 升级所需金钻数
   */
  public boolean hasNeedGemCnt() {
    return need_gem_cnt!=null;
  }

  public static final class Builder extends Message.Builder<VipHomePageRsp, Builder> {
    public Integer ret;

    public Integer vip_level;

    public Integer vip_exp;

    public Integer next_vip_level_exp;

    public Integer vip_level_interval;

    public String vip_level_name;

    public List<VipPrivilege> vip_privileges;

    public Boolean vip_disable;

    public Integer total_gem_cnt;

    public Integer need_gem_cnt;

    public Builder() {
      vip_privileges = Internal.newMutableList();
    }

    /**
     * 返回码
     */
    public Builder setRet(Integer ret) {
      this.ret = ret;
      return this;
    }

    /**
     * vip等级
     */
    public Builder setVipLevel(Integer vip_level) {
      this.vip_level = vip_level;
      return this;
    }

    /**
     * vip经验值
     */
    public Builder setVipExp(Integer vip_exp) {
      this.vip_exp = vip_exp;
      return this;
    }

    /**
     * 当前经验距离下一等需要级经验值. 满级时为0
     */
    public Builder setNextVipLevelExp(Integer next_vip_level_exp) {
      this.next_vip_level_exp = next_vip_level_exp;
      return this;
    }

    /**
     * 当前等级和下一等奖的经验值差. 满级时为0
     */
    public Builder setVipLevelInterval(Integer vip_level_interval) {
      this.vip_level_interval = vip_level_interval;
      return this;
    }

    /**
     * 当前vip等级名称
     */
    public Builder setVipLevelName(String vip_level_name) {
      this.vip_level_name = vip_level_name;
      return this;
    }

    /**
     * vip特权
     */
    public Builder addAllVipPrivileges(List<VipPrivilege> vip_privileges) {
      Internal.checkElementsNotNull(vip_privileges);
      this.vip_privileges = vip_privileges;
      return this;
    }

    /**
     * vip是否被冻结
     */
    public Builder setVipDisable(Boolean vip_disable) {
      this.vip_disable = vip_disable;
      return this;
    }

    /**
     * 送出金钻数
     */
    public Builder setTotalGemCnt(Integer total_gem_cnt) {
      this.total_gem_cnt = total_gem_cnt;
      return this;
    }

    /**
     * 升级所需金钻数
     */
    public Builder setNeedGemCnt(Integer need_gem_cnt) {
      this.need_gem_cnt = need_gem_cnt;
      return this;
    }

    @Override
    public VipHomePageRsp build() {
      return new VipHomePageRsp(ret, vip_level, vip_exp, next_vip_level_exp, vip_level_interval, vip_level_name, vip_privileges, vip_disable, total_gem_cnt, need_gem_cnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VipHomePageRsp extends ProtoAdapter<VipHomePageRsp> {
    public ProtoAdapter_VipHomePageRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, VipHomePageRsp.class);
    }

    @Override
    public int encodedSize(VipHomePageRsp value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.ret)
          + ProtoAdapter.INT32.encodedSizeWithTag(2, value.vip_level)
          + ProtoAdapter.INT32.encodedSizeWithTag(3, value.vip_exp)
          + ProtoAdapter.INT32.encodedSizeWithTag(4, value.next_vip_level_exp)
          + ProtoAdapter.INT32.encodedSizeWithTag(5, value.vip_level_interval)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.vip_level_name)
          + VipPrivilege.ADAPTER.asRepeated().encodedSizeWithTag(7, value.vip_privileges)
          + ProtoAdapter.BOOL.encodedSizeWithTag(8, value.vip_disable)
          + ProtoAdapter.INT32.encodedSizeWithTag(9, value.total_gem_cnt)
          + ProtoAdapter.INT32.encodedSizeWithTag(10, value.need_gem_cnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VipHomePageRsp value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.ret);
      ProtoAdapter.INT32.encodeWithTag(writer, 2, value.vip_level);
      ProtoAdapter.INT32.encodeWithTag(writer, 3, value.vip_exp);
      ProtoAdapter.INT32.encodeWithTag(writer, 4, value.next_vip_level_exp);
      ProtoAdapter.INT32.encodeWithTag(writer, 5, value.vip_level_interval);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.vip_level_name);
      VipPrivilege.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.vip_privileges);
      ProtoAdapter.BOOL.encodeWithTag(writer, 8, value.vip_disable);
      ProtoAdapter.INT32.encodeWithTag(writer, 9, value.total_gem_cnt);
      ProtoAdapter.INT32.encodeWithTag(writer, 10, value.need_gem_cnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VipHomePageRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRet(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.setVipLevel(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.setVipExp(ProtoAdapter.INT32.decode(reader)); break;
          case 4: builder.setNextVipLevelExp(ProtoAdapter.INT32.decode(reader)); break;
          case 5: builder.setVipLevelInterval(ProtoAdapter.INT32.decode(reader)); break;
          case 6: builder.setVipLevelName(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.vip_privileges.add(VipPrivilege.ADAPTER.decode(reader)); break;
          case 8: builder.setVipDisable(ProtoAdapter.BOOL.decode(reader)); break;
          case 9: builder.setTotalGemCnt(ProtoAdapter.INT32.decode(reader)); break;
          case 10: builder.setNeedGemCnt(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VipHomePageRsp redact(VipHomePageRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.vip_privileges, VipPrivilege.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
