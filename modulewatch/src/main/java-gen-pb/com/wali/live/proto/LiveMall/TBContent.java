// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMall.proto
package com.wali.live.proto.LiveMall;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class TBContent extends Message<TBContent, TBContent.Builder> {
  public static final ProtoAdapter<TBContent> ADAPTER = new ProtoAdapter_TBContent();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_CONTENT = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String content;

  public TBContent(String content) {
    this(content, ByteString.EMPTY);
  }

  public TBContent(String content, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.content = content;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.content = content;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TBContent)) return false;
    TBContent o = (TBContent) other;
    return unknownFields().equals(o.unknownFields())
        && content.equals(o.content);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + content.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", content=").append(content);
    return builder.replace(0, 2, "TBContent{").append('}').toString();
  }

  public byte[] toByteArray() {
    return TBContent.ADAPTER.encode(this);
  }

  public static final TBContent parseFrom(byte[] data) throws IOException {
    TBContent c = null;
       c = TBContent.ADAPTER.decode(data);
    return c;
  }

  public String getContent() {
    if(content==null){
        return DEFAULT_CONTENT;
    }
    return content;
  }

  public boolean hasContent() {
    return content!=null;
  }

  public static final class Builder extends Message.Builder<TBContent, Builder> {
    public String content;

    public Builder() {
    }

    public Builder setContent(String content) {
      this.content = content;
      return this;
    }

    @Override
    public TBContent build() {
      return new TBContent(content, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_TBContent extends ProtoAdapter<TBContent> {
    public ProtoAdapter_TBContent() {
      super(FieldEncoding.LENGTH_DELIMITED, TBContent.class);
    }

    @Override
    public int encodedSize(TBContent value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.content)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, TBContent value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.content);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public TBContent decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setContent(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public TBContent redact(TBContent value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
