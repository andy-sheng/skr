// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LivePk.proto
package com.wali.live.proto.LivePK;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class PKSettings extends Message<PKSettings, PKSettings.Builder> {
  public static final ProtoAdapter<PKSettings> ADAPTER = new ProtoAdapter_PKSettings();

  private static final long serialVersionUID = 0L;

  /**
   * pk内容 1：唱功 2：跳舞 3：乐器
   */
  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.LivePK.PKSettingContent#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PKSettingContent> content;

  /**
   * pk时间 1: 3分钟 2: 10分钟 3:15分钟
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LivePK.PKSettingDuration#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PKSettingDuration> duration;

  /**
   * pk惩罚
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.LivePK.PKSettingPunish#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PKSettingPunish> punish;

  public PKSettings(List<PKSettingContent> content, List<PKSettingDuration> duration,
      List<PKSettingPunish> punish) {
    this(content, duration, punish, ByteString.EMPTY);
  }

  public PKSettings(List<PKSettingContent> content, List<PKSettingDuration> duration,
      List<PKSettingPunish> punish, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.content = Internal.immutableCopyOf("content", content);
    this.duration = Internal.immutableCopyOf("duration", duration);
    this.punish = Internal.immutableCopyOf("punish", punish);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.content = Internal.copyOf("content", content);
    builder.duration = Internal.copyOf("duration", duration);
    builder.punish = Internal.copyOf("punish", punish);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PKSettings)) return false;
    PKSettings o = (PKSettings) other;
    return unknownFields().equals(o.unknownFields())
        && content.equals(o.content)
        && duration.equals(o.duration)
        && punish.equals(o.punish);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + content.hashCode();
      result = result * 37 + duration.hashCode();
      result = result * 37 + punish.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!content.isEmpty()) builder.append(", content=").append(content);
    if (!duration.isEmpty()) builder.append(", duration=").append(duration);
    if (!punish.isEmpty()) builder.append(", punish=").append(punish);
    return builder.replace(0, 2, "PKSettings{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PKSettings.ADAPTER.encode(this);
  }

  public static final PKSettings parseFrom(byte[] data) throws IOException {
    PKSettings c = null;
       c = PKSettings.ADAPTER.decode(data);
    return c;
  }

  /**
   * pk内容 1：唱功 2：跳舞 3：乐器
   */
  public List<PKSettingContent> getContentList() {
    if(content==null){
        return new java.util.ArrayList<PKSettingContent>();
    }
    return content;
  }

  /**
   * pk时间 1: 3分钟 2: 10分钟 3:15分钟
   */
  public List<PKSettingDuration> getDurationList() {
    if(duration==null){
        return new java.util.ArrayList<PKSettingDuration>();
    }
    return duration;
  }

  /**
   * pk惩罚
   */
  public List<PKSettingPunish> getPunishList() {
    if(punish==null){
        return new java.util.ArrayList<PKSettingPunish>();
    }
    return punish;
  }

  /**
   * pk内容 1：唱功 2：跳舞 3：乐器
   */
  public boolean hasContentList() {
    return content!=null;
  }

  /**
   * pk时间 1: 3分钟 2: 10分钟 3:15分钟
   */
  public boolean hasDurationList() {
    return duration!=null;
  }

  /**
   * pk惩罚
   */
  public boolean hasPunishList() {
    return punish!=null;
  }

  public static final class Builder extends Message.Builder<PKSettings, Builder> {
    public List<PKSettingContent> content;

    public List<PKSettingDuration> duration;

    public List<PKSettingPunish> punish;

    public Builder() {
      content = Internal.newMutableList();
      duration = Internal.newMutableList();
      punish = Internal.newMutableList();
    }

    /**
     * pk内容 1：唱功 2：跳舞 3：乐器
     */
    public Builder addAllContent(List<PKSettingContent> content) {
      Internal.checkElementsNotNull(content);
      this.content = content;
      return this;
    }

    /**
     * pk时间 1: 3分钟 2: 10分钟 3:15分钟
     */
    public Builder addAllDuration(List<PKSettingDuration> duration) {
      Internal.checkElementsNotNull(duration);
      this.duration = duration;
      return this;
    }

    /**
     * pk惩罚
     */
    public Builder addAllPunish(List<PKSettingPunish> punish) {
      Internal.checkElementsNotNull(punish);
      this.punish = punish;
      return this;
    }

    @Override
    public PKSettings build() {
      return new PKSettings(content, duration, punish, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PKSettings extends ProtoAdapter<PKSettings> {
    public ProtoAdapter_PKSettings() {
      super(FieldEncoding.LENGTH_DELIMITED, PKSettings.class);
    }

    @Override
    public int encodedSize(PKSettings value) {
      return PKSettingContent.ADAPTER.asRepeated().encodedSizeWithTag(1, value.content)
          + PKSettingDuration.ADAPTER.asRepeated().encodedSizeWithTag(2, value.duration)
          + PKSettingPunish.ADAPTER.asRepeated().encodedSizeWithTag(3, value.punish)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PKSettings value) throws IOException {
      PKSettingContent.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.content);
      PKSettingDuration.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.duration);
      PKSettingPunish.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.punish);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PKSettings decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.content.add(PKSettingContent.ADAPTER.decode(reader)); break;
          case 2: builder.duration.add(PKSettingDuration.ADAPTER.decode(reader)); break;
          case 3: builder.punish.add(PKSettingPunish.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PKSettings redact(PKSettings value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.content, PKSettingContent.ADAPTER);
      Internal.redactElements(builder.duration, PKSettingDuration.ADAPTER);
      Internal.redactElements(builder.punish, PKSettingPunish.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
