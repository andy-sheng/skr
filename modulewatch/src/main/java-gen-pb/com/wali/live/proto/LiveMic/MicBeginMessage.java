// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMic.proto
package com.wali.live.proto.LiveMic;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * mic开始消息
 */
public final class MicBeginMessage extends Message<MicBeginMessage, MicBeginMessage.Builder> {
  public static final ProtoAdapter<MicBeginMessage> ADAPTER = new ProtoAdapter_MicBeginMessage();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final String DEFAULT_LIVEID = "";

  public static final Boolean DEFAULT_ENABLEVIEWERMIC = false;

  public static final Integer DEFAULT_TYPE = 0;

  /**
   * 主播用户id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long zuid;

  /**
   * 房间号
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String liveId;

  /**
   * 连麦的信息
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.LiveMic.MicInfo#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final MicInfo micInfo;

  /**
   * 是否允许观众端发起连麦（true：允许）
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean enableViewerMic;

  /**
   * 0:主播与观众连麦 1：主播与主播连麦
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  public MicBeginMessage(Long zuid, String liveId, MicInfo micInfo, Boolean enableViewerMic,
      Integer type) {
    this(zuid, liveId, micInfo, enableViewerMic, type, ByteString.EMPTY);
  }

  public MicBeginMessage(Long zuid, String liveId, MicInfo micInfo, Boolean enableViewerMic,
      Integer type, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.zuid = zuid;
    this.liveId = liveId;
    this.micInfo = micInfo;
    this.enableViewerMic = enableViewerMic;
    this.type = type;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.zuid = zuid;
    builder.liveId = liveId;
    builder.micInfo = micInfo;
    builder.enableViewerMic = enableViewerMic;
    builder.type = type;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MicBeginMessage)) return false;
    MicBeginMessage o = (MicBeginMessage) other;
    return unknownFields().equals(o.unknownFields())
        && zuid.equals(o.zuid)
        && liveId.equals(o.liveId)
        && micInfo.equals(o.micInfo)
        && Internal.equals(enableViewerMic, o.enableViewerMic)
        && Internal.equals(type, o.type);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + zuid.hashCode();
      result = result * 37 + liveId.hashCode();
      result = result * 37 + micInfo.hashCode();
      result = result * 37 + (enableViewerMic != null ? enableViewerMic.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", zuid=").append(zuid);
    builder.append(", liveId=").append(liveId);
    builder.append(", micInfo=").append(micInfo);
    if (enableViewerMic != null) builder.append(", enableViewerMic=").append(enableViewerMic);
    if (type != null) builder.append(", type=").append(type);
    return builder.replace(0, 2, "MicBeginMessage{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MicBeginMessage.ADAPTER.encode(this);
  }

  public static final MicBeginMessage parseFrom(byte[] data) throws IOException {
    MicBeginMessage c = null;
       c = MicBeginMessage.ADAPTER.decode(data);
    return c;
  }

  /**
   * 主播用户id
   */
  public Long getZuid() {
    if(zuid==null){
        return DEFAULT_ZUID;
    }
    return zuid;
  }

  /**
   * 房间号
   */
  public String getLiveId() {
    if(liveId==null){
        return DEFAULT_LIVEID;
    }
    return liveId;
  }

  /**
   * 连麦的信息
   */
  public MicInfo getMicInfo() {
    if(micInfo==null){
        return new MicInfo.Builder().build();
    }
    return micInfo;
  }

  /**
   * 是否允许观众端发起连麦（true：允许）
   */
  public Boolean getEnableViewerMic() {
    if(enableViewerMic==null){
        return DEFAULT_ENABLEVIEWERMIC;
    }
    return enableViewerMic;
  }

  /**
   * 0:主播与观众连麦 1：主播与主播连麦
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  /**
   * 主播用户id
   */
  public boolean hasZuid() {
    return zuid!=null;
  }

  /**
   * 房间号
   */
  public boolean hasLiveId() {
    return liveId!=null;
  }

  /**
   * 连麦的信息
   */
  public boolean hasMicInfo() {
    return micInfo!=null;
  }

  /**
   * 是否允许观众端发起连麦（true：允许）
   */
  public boolean hasEnableViewerMic() {
    return enableViewerMic!=null;
  }

  /**
   * 0:主播与观众连麦 1：主播与主播连麦
   */
  public boolean hasType() {
    return type!=null;
  }

  public static final class Builder extends Message.Builder<MicBeginMessage, Builder> {
    public Long zuid;

    public String liveId;

    public MicInfo micInfo;

    public Boolean enableViewerMic;

    public Integer type;

    public Builder() {
    }

    /**
     * 主播用户id
     */
    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * 房间号
     */
    public Builder setLiveId(String liveId) {
      this.liveId = liveId;
      return this;
    }

    /**
     * 连麦的信息
     */
    public Builder setMicInfo(MicInfo micInfo) {
      this.micInfo = micInfo;
      return this;
    }

    /**
     * 是否允许观众端发起连麦（true：允许）
     */
    public Builder setEnableViewerMic(Boolean enableViewerMic) {
      this.enableViewerMic = enableViewerMic;
      return this;
    }

    /**
     * 0:主播与观众连麦 1：主播与主播连麦
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    @Override
    public MicBeginMessage build() {
      return new MicBeginMessage(zuid, liveId, micInfo, enableViewerMic, type, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MicBeginMessage extends ProtoAdapter<MicBeginMessage> {
    public ProtoAdapter_MicBeginMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, MicBeginMessage.class);
    }

    @Override
    public int encodedSize(MicBeginMessage value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.zuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.liveId)
          + MicInfo.ADAPTER.encodedSizeWithTag(3, value.micInfo)
          + ProtoAdapter.BOOL.encodedSizeWithTag(4, value.enableViewerMic)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.type)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MicBeginMessage value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.zuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.liveId);
      MicInfo.ADAPTER.encodeWithTag(writer, 3, value.micInfo);
      ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.enableViewerMic);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.type);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MicBeginMessage decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setLiveId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setMicInfo(MicInfo.ADAPTER.decode(reader)); break;
          case 4: builder.setEnableViewerMic(ProtoAdapter.BOOL.decode(reader)); break;
          case 5: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MicBeginMessage redact(MicBeginMessage value) {
      Builder builder = value.newBuilder();
      builder.micInfo = MicInfo.ADAPTER.redact(builder.micInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
