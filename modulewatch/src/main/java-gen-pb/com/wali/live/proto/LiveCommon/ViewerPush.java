// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveCommon.proto
package com.wali.live.proto.LiveCommon;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * push
 * zhibo.live.viewerPush
 */
public final class ViewerPush extends Message<ViewerPush, ViewerPush.Builder> {
  public static final ProtoAdapter<ViewerPush> ADAPTER = new ProtoAdapter_ViewerPush();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_LEAVE = false;

  public static final Integer DEFAULT_VIEWERCNT = 0;

  /**
   * 观众
   */
  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.LiveCommon.Viewer#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final Viewer viewer;

  /**
   * 此用户是否是离开房间
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean leave;

  /**
   * 观众人数
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer viewerCnt;

  public ViewerPush(Viewer viewer, Boolean leave, Integer viewerCnt) {
    this(viewer, leave, viewerCnt, ByteString.EMPTY);
  }

  public ViewerPush(Viewer viewer, Boolean leave, Integer viewerCnt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.viewer = viewer;
    this.leave = leave;
    this.viewerCnt = viewerCnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.viewer = viewer;
    builder.leave = leave;
    builder.viewerCnt = viewerCnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ViewerPush)) return false;
    ViewerPush o = (ViewerPush) other;
    return unknownFields().equals(o.unknownFields())
        && viewer.equals(o.viewer)
        && Internal.equals(leave, o.leave)
        && Internal.equals(viewerCnt, o.viewerCnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + viewer.hashCode();
      result = result * 37 + (leave != null ? leave.hashCode() : 0);
      result = result * 37 + (viewerCnt != null ? viewerCnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", viewer=").append(viewer);
    if (leave != null) builder.append(", leave=").append(leave);
    if (viewerCnt != null) builder.append(", viewerCnt=").append(viewerCnt);
    return builder.replace(0, 2, "ViewerPush{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ViewerPush.ADAPTER.encode(this);
  }

  public static final ViewerPush parseFrom(byte[] data) throws IOException {
    ViewerPush c = null;
       c = ViewerPush.ADAPTER.decode(data);
    return c;
  }

  /**
   * 观众
   */
  public Viewer getViewer() {
    if(viewer==null){
        return new Viewer.Builder().build();
    }
    return viewer;
  }

  /**
   * 此用户是否是离开房间
   */
  public Boolean getLeave() {
    if(leave==null){
        return DEFAULT_LEAVE;
    }
    return leave;
  }

  /**
   * 观众人数
   */
  public Integer getViewerCnt() {
    if(viewerCnt==null){
        return DEFAULT_VIEWERCNT;
    }
    return viewerCnt;
  }

  /**
   * 观众
   */
  public boolean hasViewer() {
    return viewer!=null;
  }

  /**
   * 此用户是否是离开房间
   */
  public boolean hasLeave() {
    return leave!=null;
  }

  /**
   * 观众人数
   */
  public boolean hasViewerCnt() {
    return viewerCnt!=null;
  }

  public static final class Builder extends Message.Builder<ViewerPush, Builder> {
    public Viewer viewer;

    public Boolean leave;

    public Integer viewerCnt;

    public Builder() {
    }

    /**
     * 观众
     */
    public Builder setViewer(Viewer viewer) {
      this.viewer = viewer;
      return this;
    }

    /**
     * 此用户是否是离开房间
     */
    public Builder setLeave(Boolean leave) {
      this.leave = leave;
      return this;
    }

    /**
     * 观众人数
     */
    public Builder setViewerCnt(Integer viewerCnt) {
      this.viewerCnt = viewerCnt;
      return this;
    }

    @Override
    public ViewerPush build() {
      return new ViewerPush(viewer, leave, viewerCnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ViewerPush extends ProtoAdapter<ViewerPush> {
    public ProtoAdapter_ViewerPush() {
      super(FieldEncoding.LENGTH_DELIMITED, ViewerPush.class);
    }

    @Override
    public int encodedSize(ViewerPush value) {
      return Viewer.ADAPTER.encodedSizeWithTag(1, value.viewer)
          + ProtoAdapter.BOOL.encodedSizeWithTag(2, value.leave)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.viewerCnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ViewerPush value) throws IOException {
      Viewer.ADAPTER.encodeWithTag(writer, 1, value.viewer);
      ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.leave);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.viewerCnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ViewerPush decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setViewer(Viewer.ADAPTER.decode(reader)); break;
          case 2: builder.setLeave(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.setViewerCnt(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ViewerPush redact(ViewerPush value) {
      Builder builder = value.newBuilder();
      builder.viewer = Viewer.ADAPTER.redact(builder.viewer);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
