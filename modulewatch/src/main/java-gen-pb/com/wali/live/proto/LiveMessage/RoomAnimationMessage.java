// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class RoomAnimationMessage extends Message<RoomAnimationMessage, RoomAnimationMessage.Builder> {
  public static final ProtoAdapter<RoomAnimationMessage> ADAPTER = new ProtoAdapter_RoomAnimationMessage();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ANIMATION_EFFECT = 0;

  public static final String DEFAULT_ANIMATIONCONTENT = "";

  public static final Integer DEFAULT_ANIMATION_TYPE = 0;

  /**
   * 动画效果 （与 animation_type对应效果）
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer animation_effect;

  /**
   * 动画展现的内容文案
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String animationContent;

  /**
   * 动画类型（1 升级 2进房间）
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer animation_type;

  public RoomAnimationMessage(Integer animation_effect, String animationContent,
      Integer animation_type) {
    this(animation_effect, animationContent, animation_type, ByteString.EMPTY);
  }

  public RoomAnimationMessage(Integer animation_effect, String animationContent,
      Integer animation_type, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.animation_effect = animation_effect;
    this.animationContent = animationContent;
    this.animation_type = animation_type;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.animation_effect = animation_effect;
    builder.animationContent = animationContent;
    builder.animation_type = animation_type;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RoomAnimationMessage)) return false;
    RoomAnimationMessage o = (RoomAnimationMessage) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(animation_effect, o.animation_effect)
        && Internal.equals(animationContent, o.animationContent)
        && Internal.equals(animation_type, o.animation_type);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (animation_effect != null ? animation_effect.hashCode() : 0);
      result = result * 37 + (animationContent != null ? animationContent.hashCode() : 0);
      result = result * 37 + (animation_type != null ? animation_type.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (animation_effect != null) builder.append(", animation_effect=").append(animation_effect);
    if (animationContent != null) builder.append(", animationContent=").append(animationContent);
    if (animation_type != null) builder.append(", animation_type=").append(animation_type);
    return builder.replace(0, 2, "RoomAnimationMessage{").append('}').toString();
  }

  public byte[] toByteArray() {
    return RoomAnimationMessage.ADAPTER.encode(this);
  }

  public static final RoomAnimationMessage parseFrom(byte[] data) throws IOException {
    RoomAnimationMessage c = null;
       c = RoomAnimationMessage.ADAPTER.decode(data);
    return c;
  }

  /**
   * 动画效果 （与 animation_type对应效果）
   */
  public Integer getAnimationEffect() {
    if(animation_effect==null){
        return DEFAULT_ANIMATION_EFFECT;
    }
    return animation_effect;
  }

  /**
   * 动画展现的内容文案
   */
  public String getAnimationContent() {
    if(animationContent==null){
        return DEFAULT_ANIMATIONCONTENT;
    }
    return animationContent;
  }

  /**
   * 动画类型（1 升级 2进房间）
   */
  public Integer getAnimationType() {
    if(animation_type==null){
        return DEFAULT_ANIMATION_TYPE;
    }
    return animation_type;
  }

  /**
   * 动画效果 （与 animation_type对应效果）
   */
  public boolean hasAnimationEffect() {
    return animation_effect!=null;
  }

  /**
   * 动画展现的内容文案
   */
  public boolean hasAnimationContent() {
    return animationContent!=null;
  }

  /**
   * 动画类型（1 升级 2进房间）
   */
  public boolean hasAnimationType() {
    return animation_type!=null;
  }

  public static final class Builder extends Message.Builder<RoomAnimationMessage, Builder> {
    public Integer animation_effect;

    public String animationContent;

    public Integer animation_type;

    public Builder() {
    }

    /**
     * 动画效果 （与 animation_type对应效果）
     */
    public Builder setAnimationEffect(Integer animation_effect) {
      this.animation_effect = animation_effect;
      return this;
    }

    /**
     * 动画展现的内容文案
     */
    public Builder setAnimationContent(String animationContent) {
      this.animationContent = animationContent;
      return this;
    }

    /**
     * 动画类型（1 升级 2进房间）
     */
    public Builder setAnimationType(Integer animation_type) {
      this.animation_type = animation_type;
      return this;
    }

    @Override
    public RoomAnimationMessage build() {
      return new RoomAnimationMessage(animation_effect, animationContent, animation_type, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RoomAnimationMessage extends ProtoAdapter<RoomAnimationMessage> {
    public ProtoAdapter_RoomAnimationMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, RoomAnimationMessage.class);
    }

    @Override
    public int encodedSize(RoomAnimationMessage value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.animation_effect)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.animationContent)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.animation_type)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RoomAnimationMessage value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.animation_effect);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.animationContent);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.animation_type);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RoomAnimationMessage decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setAnimationEffect(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setAnimationContent(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setAnimationType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RoomAnimationMessage redact(RoomAnimationMessage value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
