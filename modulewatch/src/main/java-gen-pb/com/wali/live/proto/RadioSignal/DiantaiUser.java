// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: RadioSignal.proto
package com.wali.live.proto.RadioSignal;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class DiantaiUser extends Message<DiantaiUser, DiantaiUser.Builder> {
  public static final ProtoAdapter<DiantaiUser> ADAPTER = new ProtoAdapter_DiantaiUser();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final Integer DEFAULT_SEAT_INDEX = 0;

  public static final Integer DEFAULT_STATUS = 0;

  public static final Long DEFAULT_AVATAR = 0L;

  public static final String DEFAULT_NICKNAME = "";

  public static final Integer DEFAULT_GENDER = 0;

  public static final Boolean DEFAULT_IS_MUTE = false;

  public static final Integer DEFAULT_ONLINESTATUS = 0;

  public static final Integer DEFAULT_SPEAK_STATUS = 0;

  /**
   * zuid, 如果为0,则表示当前位置为空
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long zuid;

  /**
   * 座位号
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer seat_index;

  /**
   * 1: 正常  2:静音
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer status;

  /**
   * 头像
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long avatar;

  /**
   * 昵称
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nickname;

  /**
   * 性别
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gender;

  /**
   * 是否被禁言
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_mute;

  /**
   * 0:在线 1:离线
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer onlineStatus;

  /**
   * 用户发言状态： 0:没有发言 1:发言中
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer speak_status;

  public DiantaiUser(Long zuid, Integer seat_index, Integer status, Long avatar, String nickname,
      Integer gender, Boolean is_mute, Integer onlineStatus, Integer speak_status) {
    this(zuid, seat_index, status, avatar, nickname, gender, is_mute, onlineStatus, speak_status, ByteString.EMPTY);
  }

  public DiantaiUser(Long zuid, Integer seat_index, Integer status, Long avatar, String nickname,
      Integer gender, Boolean is_mute, Integer onlineStatus, Integer speak_status,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.zuid = zuid;
    this.seat_index = seat_index;
    this.status = status;
    this.avatar = avatar;
    this.nickname = nickname;
    this.gender = gender;
    this.is_mute = is_mute;
    this.onlineStatus = onlineStatus;
    this.speak_status = speak_status;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.zuid = zuid;
    builder.seat_index = seat_index;
    builder.status = status;
    builder.avatar = avatar;
    builder.nickname = nickname;
    builder.gender = gender;
    builder.is_mute = is_mute;
    builder.onlineStatus = onlineStatus;
    builder.speak_status = speak_status;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DiantaiUser)) return false;
    DiantaiUser o = (DiantaiUser) other;
    return unknownFields().equals(o.unknownFields())
        && zuid.equals(o.zuid)
        && Internal.equals(seat_index, o.seat_index)
        && Internal.equals(status, o.status)
        && Internal.equals(avatar, o.avatar)
        && Internal.equals(nickname, o.nickname)
        && Internal.equals(gender, o.gender)
        && Internal.equals(is_mute, o.is_mute)
        && Internal.equals(onlineStatus, o.onlineStatus)
        && Internal.equals(speak_status, o.speak_status);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + zuid.hashCode();
      result = result * 37 + (seat_index != null ? seat_index.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (avatar != null ? avatar.hashCode() : 0);
      result = result * 37 + (nickname != null ? nickname.hashCode() : 0);
      result = result * 37 + (gender != null ? gender.hashCode() : 0);
      result = result * 37 + (is_mute != null ? is_mute.hashCode() : 0);
      result = result * 37 + (onlineStatus != null ? onlineStatus.hashCode() : 0);
      result = result * 37 + (speak_status != null ? speak_status.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", zuid=").append(zuid);
    if (seat_index != null) builder.append(", seat_index=").append(seat_index);
    if (status != null) builder.append(", status=").append(status);
    if (avatar != null) builder.append(", avatar=").append(avatar);
    if (nickname != null) builder.append(", nickname=").append(nickname);
    if (gender != null) builder.append(", gender=").append(gender);
    if (is_mute != null) builder.append(", is_mute=").append(is_mute);
    if (onlineStatus != null) builder.append(", onlineStatus=").append(onlineStatus);
    if (speak_status != null) builder.append(", speak_status=").append(speak_status);
    return builder.replace(0, 2, "DiantaiUser{").append('}').toString();
  }

  public byte[] toByteArray() {
    return DiantaiUser.ADAPTER.encode(this);
  }

  public static final DiantaiUser parseFrom(byte[] data) throws IOException {
    DiantaiUser c = null;
       c = DiantaiUser.ADAPTER.decode(data);
    return c;
  }

  /**
   * zuid, 如果为0,则表示当前位置为空
   */
  public Long getZuid() {
    if(zuid==null){
        return DEFAULT_ZUID;
    }
    return zuid;
  }

  /**
   * 座位号
   */
  public Integer getSeatIndex() {
    if(seat_index==null){
        return DEFAULT_SEAT_INDEX;
    }
    return seat_index;
  }

  /**
   * 1: 正常  2:静音
   */
  public Integer getStatus() {
    if(status==null){
        return DEFAULT_STATUS;
    }
    return status;
  }

  /**
   * 头像
   */
  public Long getAvatar() {
    if(avatar==null){
        return DEFAULT_AVATAR;
    }
    return avatar;
  }

  /**
   * 昵称
   */
  public String getNickname() {
    if(nickname==null){
        return DEFAULT_NICKNAME;
    }
    return nickname;
  }

  /**
   * 性别
   */
  public Integer getGender() {
    if(gender==null){
        return DEFAULT_GENDER;
    }
    return gender;
  }

  /**
   * 是否被禁言
   */
  public Boolean getIsMute() {
    if(is_mute==null){
        return DEFAULT_IS_MUTE;
    }
    return is_mute;
  }

  /**
   * 0:在线 1:离线
   */
  public Integer getOnlineStatus() {
    if(onlineStatus==null){
        return DEFAULT_ONLINESTATUS;
    }
    return onlineStatus;
  }

  /**
   * 用户发言状态： 0:没有发言 1:发言中
   */
  public Integer getSpeakStatus() {
    if(speak_status==null){
        return DEFAULT_SPEAK_STATUS;
    }
    return speak_status;
  }

  /**
   * zuid, 如果为0,则表示当前位置为空
   */
  public boolean hasZuid() {
    return zuid!=null;
  }

  /**
   * 座位号
   */
  public boolean hasSeatIndex() {
    return seat_index!=null;
  }

  /**
   * 1: 正常  2:静音
   */
  public boolean hasStatus() {
    return status!=null;
  }

  /**
   * 头像
   */
  public boolean hasAvatar() {
    return avatar!=null;
  }

  /**
   * 昵称
   */
  public boolean hasNickname() {
    return nickname!=null;
  }

  /**
   * 性别
   */
  public boolean hasGender() {
    return gender!=null;
  }

  /**
   * 是否被禁言
   */
  public boolean hasIsMute() {
    return is_mute!=null;
  }

  /**
   * 0:在线 1:离线
   */
  public boolean hasOnlineStatus() {
    return onlineStatus!=null;
  }

  /**
   * 用户发言状态： 0:没有发言 1:发言中
   */
  public boolean hasSpeakStatus() {
    return speak_status!=null;
  }

  public static final class Builder extends Message.Builder<DiantaiUser, Builder> {
    public Long zuid;

    public Integer seat_index;

    public Integer status;

    public Long avatar;

    public String nickname;

    public Integer gender;

    public Boolean is_mute;

    public Integer onlineStatus;

    public Integer speak_status;

    public Builder() {
    }

    /**
     * zuid, 如果为0,则表示当前位置为空
     */
    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * 座位号
     */
    public Builder setSeatIndex(Integer seat_index) {
      this.seat_index = seat_index;
      return this;
    }

    /**
     * 1: 正常  2:静音
     */
    public Builder setStatus(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 头像
     */
    public Builder setAvatar(Long avatar) {
      this.avatar = avatar;
      return this;
    }

    /**
     * 昵称
     */
    public Builder setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    /**
     * 性别
     */
    public Builder setGender(Integer gender) {
      this.gender = gender;
      return this;
    }

    /**
     * 是否被禁言
     */
    public Builder setIsMute(Boolean is_mute) {
      this.is_mute = is_mute;
      return this;
    }

    /**
     * 0:在线 1:离线
     */
    public Builder setOnlineStatus(Integer onlineStatus) {
      this.onlineStatus = onlineStatus;
      return this;
    }

    /**
     * 用户发言状态： 0:没有发言 1:发言中
     */
    public Builder setSpeakStatus(Integer speak_status) {
      this.speak_status = speak_status;
      return this;
    }

    @Override
    public DiantaiUser build() {
      return new DiantaiUser(zuid, seat_index, status, avatar, nickname, gender, is_mute, onlineStatus, speak_status, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DiantaiUser extends ProtoAdapter<DiantaiUser> {
    public ProtoAdapter_DiantaiUser() {
      super(FieldEncoding.LENGTH_DELIMITED, DiantaiUser.class);
    }

    @Override
    public int encodedSize(DiantaiUser value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.zuid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.seat_index)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.status)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.avatar)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.nickname)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.gender)
          + ProtoAdapter.BOOL.encodedSizeWithTag(7, value.is_mute)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.onlineStatus)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.speak_status)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, DiantaiUser value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.zuid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.seat_index);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.status);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.avatar);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.nickname);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.gender);
      ProtoAdapter.BOOL.encodeWithTag(writer, 7, value.is_mute);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.onlineStatus);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.speak_status);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DiantaiUser decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setSeatIndex(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setAvatar(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.setNickname(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setGender(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setIsMute(ProtoAdapter.BOOL.decode(reader)); break;
          case 8: builder.setOnlineStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.setSpeakStatus(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public DiantaiUser redact(DiantaiUser value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
