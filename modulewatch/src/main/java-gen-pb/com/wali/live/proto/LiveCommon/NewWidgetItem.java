// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveCommon.proto
package com.wali.live.proto.LiveCommon;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class NewWidgetItem extends Message<NewWidgetItem, NewWidgetItem.Builder> {
  public static final ProtoAdapter<NewWidgetItem> ADAPTER = new ProtoAdapter_NewWidgetItem();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_WIDGETID = 0;

  public static final Integer DEFAULT_POSITION = 0;

  public static final Integer DEFAULT_DISPLAYTYPE = 0;

  public static final Integer DEFAULT_DISPLAYTIME = 0;

  /**
   * 运营位ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer widgetID;

  /**
   * 坐标：0:左上角，1:右上角，2:左下角，3：右下角 4：橱窗左上角，5：橱窗右上角，6:礼物左下角,7:快捷礼物位置,8:橱窗标题栏右侧第二位
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer position;

  /**
   * 运营位展示类型: 0:常驻式, 1:一次性显示, 2:轮播式
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer displayType;

  /**
   * 运营位展示单元
   */
  @WireField(
      tag = 4,
      adapter = "com.wali.live.proto.LiveCommon.NewWidgetUnit#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<NewWidgetUnit> widgetUint;

  /**
   * 运营位单元展示间隔时间,单位:秒
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer displayTime;

  /**
   * 计数组件
   */
  @WireField(
      tag = 6,
      adapter = "com.wali.live.proto.LiveCommon.CounterItem#ADAPTER"
  )
  public final CounterItem counterItem;

  /**
   * 点击组件
   */
  @WireField(
      tag = 7,
      adapter = "com.wali.live.proto.LiveCommon.ClickItem#ADAPTER"
  )
  public final ClickItem clickItem;

  /**
   * 礼物的扩展信息
   */
  @WireField(
      tag = 8,
      adapter = "com.wali.live.proto.LiveCommon.SuperGiftInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<SuperGiftInfo> superGiftInfo;

  public NewWidgetItem(Integer widgetID, Integer position, Integer displayType,
      List<NewWidgetUnit> widgetUint, Integer displayTime, CounterItem counterItem,
      ClickItem clickItem, List<SuperGiftInfo> superGiftInfo) {
    this(widgetID, position, displayType, widgetUint, displayTime, counterItem, clickItem, superGiftInfo, ByteString.EMPTY);
  }

  public NewWidgetItem(Integer widgetID, Integer position, Integer displayType,
      List<NewWidgetUnit> widgetUint, Integer displayTime, CounterItem counterItem,
      ClickItem clickItem, List<SuperGiftInfo> superGiftInfo, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.widgetID = widgetID;
    this.position = position;
    this.displayType = displayType;
    this.widgetUint = Internal.immutableCopyOf("widgetUint", widgetUint);
    this.displayTime = displayTime;
    this.counterItem = counterItem;
    this.clickItem = clickItem;
    this.superGiftInfo = Internal.immutableCopyOf("superGiftInfo", superGiftInfo);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.widgetID = widgetID;
    builder.position = position;
    builder.displayType = displayType;
    builder.widgetUint = Internal.copyOf("widgetUint", widgetUint);
    builder.displayTime = displayTime;
    builder.counterItem = counterItem;
    builder.clickItem = clickItem;
    builder.superGiftInfo = Internal.copyOf("superGiftInfo", superGiftInfo);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof NewWidgetItem)) return false;
    NewWidgetItem o = (NewWidgetItem) other;
    return unknownFields().equals(o.unknownFields())
        && widgetID.equals(o.widgetID)
        && position.equals(o.position)
        && Internal.equals(displayType, o.displayType)
        && widgetUint.equals(o.widgetUint)
        && Internal.equals(displayTime, o.displayTime)
        && Internal.equals(counterItem, o.counterItem)
        && Internal.equals(clickItem, o.clickItem)
        && superGiftInfo.equals(o.superGiftInfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + widgetID.hashCode();
      result = result * 37 + position.hashCode();
      result = result * 37 + (displayType != null ? displayType.hashCode() : 0);
      result = result * 37 + widgetUint.hashCode();
      result = result * 37 + (displayTime != null ? displayTime.hashCode() : 0);
      result = result * 37 + (counterItem != null ? counterItem.hashCode() : 0);
      result = result * 37 + (clickItem != null ? clickItem.hashCode() : 0);
      result = result * 37 + superGiftInfo.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", widgetID=").append(widgetID);
    builder.append(", position=").append(position);
    if (displayType != null) builder.append(", displayType=").append(displayType);
    if (!widgetUint.isEmpty()) builder.append(", widgetUint=").append(widgetUint);
    if (displayTime != null) builder.append(", displayTime=").append(displayTime);
    if (counterItem != null) builder.append(", counterItem=").append(counterItem);
    if (clickItem != null) builder.append(", clickItem=").append(clickItem);
    if (!superGiftInfo.isEmpty()) builder.append(", superGiftInfo=").append(superGiftInfo);
    return builder.replace(0, 2, "NewWidgetItem{").append('}').toString();
  }

  public byte[] toByteArray() {
    return NewWidgetItem.ADAPTER.encode(this);
  }

  public static final NewWidgetItem parseFrom(byte[] data) throws IOException {
    NewWidgetItem c = null;
       c = NewWidgetItem.ADAPTER.decode(data);
    return c;
  }

  /**
   * 运营位ID
   */
  public Integer getWidgetID() {
    if(widgetID==null){
        return DEFAULT_WIDGETID;
    }
    return widgetID;
  }

  /**
   * 坐标：0:左上角，1:右上角，2:左下角，3：右下角 4：橱窗左上角，5：橱窗右上角，6:礼物左下角,7:快捷礼物位置,8:橱窗标题栏右侧第二位
   */
  public Integer getPosition() {
    if(position==null){
        return DEFAULT_POSITION;
    }
    return position;
  }

  /**
   * 运营位展示类型: 0:常驻式, 1:一次性显示, 2:轮播式
   */
  public Integer getDisplayType() {
    if(displayType==null){
        return DEFAULT_DISPLAYTYPE;
    }
    return displayType;
  }

  /**
   * 运营位展示单元
   */
  public List<NewWidgetUnit> getWidgetUintList() {
    if(widgetUint==null){
        return new java.util.ArrayList<NewWidgetUnit>();
    }
    return widgetUint;
  }

  /**
   * 运营位单元展示间隔时间,单位:秒
   */
  public Integer getDisplayTime() {
    if(displayTime==null){
        return DEFAULT_DISPLAYTIME;
    }
    return displayTime;
  }

  /**
   * 计数组件
   */
  public CounterItem getCounterItem() {
    if(counterItem==null){
        return new CounterItem.Builder().build();
    }
    return counterItem;
  }

  /**
   * 点击组件
   */
  public ClickItem getClickItem() {
    if(clickItem==null){
        return new ClickItem.Builder().build();
    }
    return clickItem;
  }

  /**
   * 礼物的扩展信息
   */
  public List<SuperGiftInfo> getSuperGiftInfoList() {
    if(superGiftInfo==null){
        return new java.util.ArrayList<SuperGiftInfo>();
    }
    return superGiftInfo;
  }

  /**
   * 运营位ID
   */
  public boolean hasWidgetID() {
    return widgetID!=null;
  }

  /**
   * 坐标：0:左上角，1:右上角，2:左下角，3：右下角 4：橱窗左上角，5：橱窗右上角，6:礼物左下角,7:快捷礼物位置,8:橱窗标题栏右侧第二位
   */
  public boolean hasPosition() {
    return position!=null;
  }

  /**
   * 运营位展示类型: 0:常驻式, 1:一次性显示, 2:轮播式
   */
  public boolean hasDisplayType() {
    return displayType!=null;
  }

  /**
   * 运营位展示单元
   */
  public boolean hasWidgetUintList() {
    return widgetUint!=null;
  }

  /**
   * 运营位单元展示间隔时间,单位:秒
   */
  public boolean hasDisplayTime() {
    return displayTime!=null;
  }

  /**
   * 计数组件
   */
  public boolean hasCounterItem() {
    return counterItem!=null;
  }

  /**
   * 点击组件
   */
  public boolean hasClickItem() {
    return clickItem!=null;
  }

  /**
   * 礼物的扩展信息
   */
  public boolean hasSuperGiftInfoList() {
    return superGiftInfo!=null;
  }

  public static final class Builder extends Message.Builder<NewWidgetItem, Builder> {
    public Integer widgetID;

    public Integer position;

    public Integer displayType;

    public List<NewWidgetUnit> widgetUint;

    public Integer displayTime;

    public CounterItem counterItem;

    public ClickItem clickItem;

    public List<SuperGiftInfo> superGiftInfo;

    public Builder() {
      widgetUint = Internal.newMutableList();
      superGiftInfo = Internal.newMutableList();
    }

    /**
     * 运营位ID
     */
    public Builder setWidgetID(Integer widgetID) {
      this.widgetID = widgetID;
      return this;
    }

    /**
     * 坐标：0:左上角，1:右上角，2:左下角，3：右下角 4：橱窗左上角，5：橱窗右上角，6:礼物左下角,7:快捷礼物位置,8:橱窗标题栏右侧第二位
     */
    public Builder setPosition(Integer position) {
      this.position = position;
      return this;
    }

    /**
     * 运营位展示类型: 0:常驻式, 1:一次性显示, 2:轮播式
     */
    public Builder setDisplayType(Integer displayType) {
      this.displayType = displayType;
      return this;
    }

    /**
     * 运营位展示单元
     */
    public Builder addAllWidgetUint(List<NewWidgetUnit> widgetUint) {
      Internal.checkElementsNotNull(widgetUint);
      this.widgetUint = widgetUint;
      return this;
    }

    /**
     * 运营位单元展示间隔时间,单位:秒
     */
    public Builder setDisplayTime(Integer displayTime) {
      this.displayTime = displayTime;
      return this;
    }

    /**
     * 计数组件
     */
    public Builder setCounterItem(CounterItem counterItem) {
      this.counterItem = counterItem;
      return this;
    }

    /**
     * 点击组件
     */
    public Builder setClickItem(ClickItem clickItem) {
      this.clickItem = clickItem;
      return this;
    }

    /**
     * 礼物的扩展信息
     */
    public Builder addAllSuperGiftInfo(List<SuperGiftInfo> superGiftInfo) {
      Internal.checkElementsNotNull(superGiftInfo);
      this.superGiftInfo = superGiftInfo;
      return this;
    }

    @Override
    public NewWidgetItem build() {
      return new NewWidgetItem(widgetID, position, displayType, widgetUint, displayTime, counterItem, clickItem, superGiftInfo, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_NewWidgetItem extends ProtoAdapter<NewWidgetItem> {
    public ProtoAdapter_NewWidgetItem() {
      super(FieldEncoding.LENGTH_DELIMITED, NewWidgetItem.class);
    }

    @Override
    public int encodedSize(NewWidgetItem value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.widgetID)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.position)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.displayType)
          + NewWidgetUnit.ADAPTER.asRepeated().encodedSizeWithTag(4, value.widgetUint)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.displayTime)
          + CounterItem.ADAPTER.encodedSizeWithTag(6, value.counterItem)
          + ClickItem.ADAPTER.encodedSizeWithTag(7, value.clickItem)
          + SuperGiftInfo.ADAPTER.asRepeated().encodedSizeWithTag(8, value.superGiftInfo)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, NewWidgetItem value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.widgetID);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.position);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.displayType);
      NewWidgetUnit.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.widgetUint);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.displayTime);
      CounterItem.ADAPTER.encodeWithTag(writer, 6, value.counterItem);
      ClickItem.ADAPTER.encodeWithTag(writer, 7, value.clickItem);
      SuperGiftInfo.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.superGiftInfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public NewWidgetItem decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setWidgetID(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setPosition(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setDisplayType(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.widgetUint.add(NewWidgetUnit.ADAPTER.decode(reader)); break;
          case 5: builder.setDisplayTime(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setCounterItem(CounterItem.ADAPTER.decode(reader)); break;
          case 7: builder.setClickItem(ClickItem.ADAPTER.decode(reader)); break;
          case 8: builder.superGiftInfo.add(SuperGiftInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public NewWidgetItem redact(NewWidgetItem value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.widgetUint, NewWidgetUnit.ADAPTER);
      if (builder.counterItem != null) builder.counterItem = CounterItem.ADAPTER.redact(builder.counterItem);
      if (builder.clickItem != null) builder.clickItem = ClickItem.ADAPTER.redact(builder.clickItem);
      Internal.redactElements(builder.superGiftInfo, SuperGiftInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
