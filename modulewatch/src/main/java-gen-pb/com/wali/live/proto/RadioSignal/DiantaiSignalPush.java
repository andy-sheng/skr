// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: RadioSignal.proto
package com.wali.live.proto.RadioSignal;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * push协议，命令字: zhibo.diantai.signal_push【外层协议格式参照zhibo.push.roommsg msg_type=130】
 */
public final class DiantaiSignalPush extends Message<DiantaiSignalPush, DiantaiSignalPush.Builder> {
  public static final ProtoAdapter<DiantaiSignalPush> ADAPTER = new ProtoAdapter_DiantaiSignalPush();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ACTION = 0;

  public static final Integer DEFAULT_DIANTAI_ID = 0;

  public static final String DEFAULT_ROOM_ID = "";

  public static final Long DEFAULT_FROM_ZUID = 0L;

  public static final Long DEFAULT_TO_ZUID = 0L;

  public static final Integer DEFAULT_SYNC_TS = 0;

  /**
   * 1:apply push, 2: invite push  3: approve push  4: accept push  5: quit push  6: kick push  7: status update 8: mute 9: unmute 10: cancel apply 11:online status
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer action;

  /**
   * 电台id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer diantai_id;

  /**
   * 直播房间id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String room_id;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long from_zuid;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long to_zuid;

  /**
   * 电台成员信息，包含自己
   */
  @WireField(
      tag = 6,
      adapter = "com.wali.live.proto.RadioSignal.DiantaiUser#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<DiantaiUser> members;

  /**
   * 服务器时间, 单位:秒
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sync_ts;

  public DiantaiSignalPush(Integer action, Integer diantai_id, String room_id, Long from_zuid,
      Long to_zuid, List<DiantaiUser> members, Integer sync_ts) {
    this(action, diantai_id, room_id, from_zuid, to_zuid, members, sync_ts, ByteString.EMPTY);
  }

  public DiantaiSignalPush(Integer action, Integer diantai_id, String room_id, Long from_zuid,
      Long to_zuid, List<DiantaiUser> members, Integer sync_ts, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.action = action;
    this.diantai_id = diantai_id;
    this.room_id = room_id;
    this.from_zuid = from_zuid;
    this.to_zuid = to_zuid;
    this.members = Internal.immutableCopyOf("members", members);
    this.sync_ts = sync_ts;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.action = action;
    builder.diantai_id = diantai_id;
    builder.room_id = room_id;
    builder.from_zuid = from_zuid;
    builder.to_zuid = to_zuid;
    builder.members = Internal.copyOf("members", members);
    builder.sync_ts = sync_ts;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DiantaiSignalPush)) return false;
    DiantaiSignalPush o = (DiantaiSignalPush) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(action, o.action)
        && Internal.equals(diantai_id, o.diantai_id)
        && Internal.equals(room_id, o.room_id)
        && Internal.equals(from_zuid, o.from_zuid)
        && Internal.equals(to_zuid, o.to_zuid)
        && members.equals(o.members)
        && Internal.equals(sync_ts, o.sync_ts);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (action != null ? action.hashCode() : 0);
      result = result * 37 + (diantai_id != null ? diantai_id.hashCode() : 0);
      result = result * 37 + (room_id != null ? room_id.hashCode() : 0);
      result = result * 37 + (from_zuid != null ? from_zuid.hashCode() : 0);
      result = result * 37 + (to_zuid != null ? to_zuid.hashCode() : 0);
      result = result * 37 + members.hashCode();
      result = result * 37 + (sync_ts != null ? sync_ts.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (action != null) builder.append(", action=").append(action);
    if (diantai_id != null) builder.append(", diantai_id=").append(diantai_id);
    if (room_id != null) builder.append(", room_id=").append(room_id);
    if (from_zuid != null) builder.append(", from_zuid=").append(from_zuid);
    if (to_zuid != null) builder.append(", to_zuid=").append(to_zuid);
    if (!members.isEmpty()) builder.append(", members=").append(members);
    if (sync_ts != null) builder.append(", sync_ts=").append(sync_ts);
    return builder.replace(0, 2, "DiantaiSignalPush{").append('}').toString();
  }

  public byte[] toByteArray() {
    return DiantaiSignalPush.ADAPTER.encode(this);
  }

  public static final DiantaiSignalPush parseFrom(byte[] data) throws IOException {
    DiantaiSignalPush c = null;
       c = DiantaiSignalPush.ADAPTER.decode(data);
    return c;
  }

  /**
   * 1:apply push, 2: invite push  3: approve push  4: accept push  5: quit push  6: kick push  7: status update 8: mute 9: unmute 10: cancel apply 11:online status
   */
  public Integer getAction() {
    if(action==null){
        return DEFAULT_ACTION;
    }
    return action;
  }

  /**
   * 电台id
   */
  public Integer getDiantaiId() {
    if(diantai_id==null){
        return DEFAULT_DIANTAI_ID;
    }
    return diantai_id;
  }

  /**
   * 直播房间id
   */
  public String getRoomId() {
    if(room_id==null){
        return DEFAULT_ROOM_ID;
    }
    return room_id;
  }

  public Long getFromZuid() {
    if(from_zuid==null){
        return DEFAULT_FROM_ZUID;
    }
    return from_zuid;
  }

  public Long getToZuid() {
    if(to_zuid==null){
        return DEFAULT_TO_ZUID;
    }
    return to_zuid;
  }

  /**
   * 电台成员信息，包含自己
   */
  public List<DiantaiUser> getMembersList() {
    if(members==null){
        return new java.util.ArrayList<DiantaiUser>();
    }
    return members;
  }

  /**
   * 服务器时间, 单位:秒
   */
  public Integer getSyncTs() {
    if(sync_ts==null){
        return DEFAULT_SYNC_TS;
    }
    return sync_ts;
  }

  /**
   * 1:apply push, 2: invite push  3: approve push  4: accept push  5: quit push  6: kick push  7: status update 8: mute 9: unmute 10: cancel apply 11:online status
   */
  public boolean hasAction() {
    return action!=null;
  }

  /**
   * 电台id
   */
  public boolean hasDiantaiId() {
    return diantai_id!=null;
  }

  /**
   * 直播房间id
   */
  public boolean hasRoomId() {
    return room_id!=null;
  }

  public boolean hasFromZuid() {
    return from_zuid!=null;
  }

  public boolean hasToZuid() {
    return to_zuid!=null;
  }

  /**
   * 电台成员信息，包含自己
   */
  public boolean hasMembersList() {
    return members!=null;
  }

  /**
   * 服务器时间, 单位:秒
   */
  public boolean hasSyncTs() {
    return sync_ts!=null;
  }

  public static final class Builder extends Message.Builder<DiantaiSignalPush, Builder> {
    public Integer action;

    public Integer diantai_id;

    public String room_id;

    public Long from_zuid;

    public Long to_zuid;

    public List<DiantaiUser> members;

    public Integer sync_ts;

    public Builder() {
      members = Internal.newMutableList();
    }

    /**
     * 1:apply push, 2: invite push  3: approve push  4: accept push  5: quit push  6: kick push  7: status update 8: mute 9: unmute 10: cancel apply 11:online status
     */
    public Builder setAction(Integer action) {
      this.action = action;
      return this;
    }

    /**
     * 电台id
     */
    public Builder setDiantaiId(Integer diantai_id) {
      this.diantai_id = diantai_id;
      return this;
    }

    /**
     * 直播房间id
     */
    public Builder setRoomId(String room_id) {
      this.room_id = room_id;
      return this;
    }

    public Builder setFromZuid(Long from_zuid) {
      this.from_zuid = from_zuid;
      return this;
    }

    public Builder setToZuid(Long to_zuid) {
      this.to_zuid = to_zuid;
      return this;
    }

    /**
     * 电台成员信息，包含自己
     */
    public Builder addAllMembers(List<DiantaiUser> members) {
      Internal.checkElementsNotNull(members);
      this.members = members;
      return this;
    }

    /**
     * 服务器时间, 单位:秒
     */
    public Builder setSyncTs(Integer sync_ts) {
      this.sync_ts = sync_ts;
      return this;
    }

    @Override
    public DiantaiSignalPush build() {
      return new DiantaiSignalPush(action, diantai_id, room_id, from_zuid, to_zuid, members, sync_ts, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DiantaiSignalPush extends ProtoAdapter<DiantaiSignalPush> {
    public ProtoAdapter_DiantaiSignalPush() {
      super(FieldEncoding.LENGTH_DELIMITED, DiantaiSignalPush.class);
    }

    @Override
    public int encodedSize(DiantaiSignalPush value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.action)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.diantai_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.room_id)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.from_zuid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.to_zuid)
          + DiantaiUser.ADAPTER.asRepeated().encodedSizeWithTag(6, value.members)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.sync_ts)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, DiantaiSignalPush value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.action);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.diantai_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.room_id);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.from_zuid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.to_zuid);
      DiantaiUser.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.members);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.sync_ts);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DiantaiSignalPush decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setAction(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setDiantaiId(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setRoomId(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setFromZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.setToZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.members.add(DiantaiUser.ADAPTER.decode(reader)); break;
          case 7: builder.setSyncTs(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public DiantaiSignalPush redact(DiantaiSignalPush value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.members, DiantaiUser.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
