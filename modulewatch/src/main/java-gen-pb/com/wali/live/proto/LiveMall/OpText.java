// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMall.proto
package com.wali.live.proto.LiveMall;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class OpText extends Message<OpText, OpText.Builder> {
  public static final ProtoAdapter<OpText> ADAPTER = new ProtoAdapter_OpText();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_TEXT_TYPE = 0;

  public static final ByteString DEFAULT_TEXT = ByteString.EMPTY;

  public static final String DEFAULT_EXPLANATION = "";

  /**
   * 0 文字 1 文字加店铺主页 2 文字加优惠券
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer text_type;

  /**
   * 0 Text 1 ShopText
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString text;

  /**
   * 说明
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String explanation;

  public OpText(Integer text_type, ByteString text, String explanation) {
    this(text_type, text, explanation, ByteString.EMPTY);
  }

  public OpText(Integer text_type, ByteString text, String explanation, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.text_type = text_type;
    this.text = text;
    this.explanation = explanation;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.text_type = text_type;
    builder.text = text;
    builder.explanation = explanation;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OpText)) return false;
    OpText o = (OpText) other;
    return unknownFields().equals(o.unknownFields())
        && text_type.equals(o.text_type)
        && Internal.equals(text, o.text)
        && Internal.equals(explanation, o.explanation);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + text_type.hashCode();
      result = result * 37 + (text != null ? text.hashCode() : 0);
      result = result * 37 + (explanation != null ? explanation.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", text_type=").append(text_type);
    if (text != null) builder.append(", text=").append(text);
    if (explanation != null) builder.append(", explanation=").append(explanation);
    return builder.replace(0, 2, "OpText{").append('}').toString();
  }

  public byte[] toByteArray() {
    return OpText.ADAPTER.encode(this);
  }

  public static final OpText parseFrom(byte[] data) throws IOException {
    OpText c = null;
       c = OpText.ADAPTER.decode(data);
    return c;
  }

  /**
   * 0 文字 1 文字加店铺主页 2 文字加优惠券
   */
  public Integer getTextType() {
    if(text_type==null){
        return DEFAULT_TEXT_TYPE;
    }
    return text_type;
  }

  /**
   * 0 Text 1 ShopText
   */
  public ByteString getText() {
    if(text==null){
        return ByteString.of(new byte[0]);
    }
    return text;
  }

  /**
   * 说明
   */
  public String getExplanation() {
    if(explanation==null){
        return DEFAULT_EXPLANATION;
    }
    return explanation;
  }

  /**
   * 0 文字 1 文字加店铺主页 2 文字加优惠券
   */
  public boolean hasTextType() {
    return text_type!=null;
  }

  /**
   * 0 Text 1 ShopText
   */
  public boolean hasText() {
    return text!=null;
  }

  /**
   * 说明
   */
  public boolean hasExplanation() {
    return explanation!=null;
  }

  public static final class Builder extends Message.Builder<OpText, Builder> {
    public Integer text_type;

    public ByteString text;

    public String explanation;

    public Builder() {
    }

    /**
     * 0 文字 1 文字加店铺主页 2 文字加优惠券
     */
    public Builder setTextType(Integer text_type) {
      this.text_type = text_type;
      return this;
    }

    /**
     * 0 Text 1 ShopText
     */
    public Builder setText(ByteString text) {
      this.text = text;
      return this;
    }

    /**
     * 说明
     */
    public Builder setExplanation(String explanation) {
      this.explanation = explanation;
      return this;
    }

    @Override
    public OpText build() {
      return new OpText(text_type, text, explanation, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OpText extends ProtoAdapter<OpText> {
    public ProtoAdapter_OpText() {
      super(FieldEncoding.LENGTH_DELIMITED, OpText.class);
    }

    @Override
    public int encodedSize(OpText value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.text_type)
          + ProtoAdapter.BYTES.encodedSizeWithTag(2, value.text)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.explanation)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OpText value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.text_type);
      ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.text);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.explanation);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OpText decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTextType(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.setText(ProtoAdapter.BYTES.decode(reader)); break;
          case 3: builder.setExplanation(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OpText redact(OpText value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
