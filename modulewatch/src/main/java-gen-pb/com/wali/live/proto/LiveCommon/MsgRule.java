// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveCommon.proto
package com.wali.live.proto.LiveCommon;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class MsgRule extends Message<MsgRule, MsgRule.Builder> {
  public static final ProtoAdapter<MsgRule> ADAPTER = new ProtoAdapter_MsgRule();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_UNREPEATABLE = false;

  public static final Integer DEFAULT_SPEAKPERIOD = 0;

  /**
   * 不能重复，默认false，不设置或者​false：可以重复发言，true：不能重复发言
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean unrepeatable;

  /**
   * 发言频率周期,单位s,不设置或者0代表没有限制
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer speakPeriod;

  public MsgRule(Boolean unrepeatable, Integer speakPeriod) {
    this(unrepeatable, speakPeriod, ByteString.EMPTY);
  }

  public MsgRule(Boolean unrepeatable, Integer speakPeriod, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.unrepeatable = unrepeatable;
    this.speakPeriod = speakPeriod;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.unrepeatable = unrepeatable;
    builder.speakPeriod = speakPeriod;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MsgRule)) return false;
    MsgRule o = (MsgRule) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(unrepeatable, o.unrepeatable)
        && Internal.equals(speakPeriod, o.speakPeriod);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (unrepeatable != null ? unrepeatable.hashCode() : 0);
      result = result * 37 + (speakPeriod != null ? speakPeriod.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (unrepeatable != null) builder.append(", unrepeatable=").append(unrepeatable);
    if (speakPeriod != null) builder.append(", speakPeriod=").append(speakPeriod);
    return builder.replace(0, 2, "MsgRule{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MsgRule.ADAPTER.encode(this);
  }

  public static final MsgRule parseFrom(byte[] data) throws IOException {
    MsgRule c = null;
       c = MsgRule.ADAPTER.decode(data);
    return c;
  }

  /**
   * 不能重复，默认false，不设置或者​false：可以重复发言，true：不能重复发言
   */
  public Boolean getUnrepeatable() {
    if(unrepeatable==null){
        return DEFAULT_UNREPEATABLE;
    }
    return unrepeatable;
  }

  /**
   * 发言频率周期,单位s,不设置或者0代表没有限制
   */
  public Integer getSpeakPeriod() {
    if(speakPeriod==null){
        return DEFAULT_SPEAKPERIOD;
    }
    return speakPeriod;
  }

  /**
   * 不能重复，默认false，不设置或者​false：可以重复发言，true：不能重复发言
   */
  public boolean hasUnrepeatable() {
    return unrepeatable!=null;
  }

  /**
   * 发言频率周期,单位s,不设置或者0代表没有限制
   */
  public boolean hasSpeakPeriod() {
    return speakPeriod!=null;
  }

  public static final class Builder extends Message.Builder<MsgRule, Builder> {
    public Boolean unrepeatable;

    public Integer speakPeriod;

    public Builder() {
    }

    /**
     * 不能重复，默认false，不设置或者​false：可以重复发言，true：不能重复发言
     */
    public Builder setUnrepeatable(Boolean unrepeatable) {
      this.unrepeatable = unrepeatable;
      return this;
    }

    /**
     * 发言频率周期,单位s,不设置或者0代表没有限制
     */
    public Builder setSpeakPeriod(Integer speakPeriod) {
      this.speakPeriod = speakPeriod;
      return this;
    }

    @Override
    public MsgRule build() {
      return new MsgRule(unrepeatable, speakPeriod, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MsgRule extends ProtoAdapter<MsgRule> {
    public ProtoAdapter_MsgRule() {
      super(FieldEncoding.LENGTH_DELIMITED, MsgRule.class);
    }

    @Override
    public int encodedSize(MsgRule value) {
      return ProtoAdapter.BOOL.encodedSizeWithTag(1, value.unrepeatable)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.speakPeriod)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MsgRule value) throws IOException {
      ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.unrepeatable);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.speakPeriod);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MsgRule decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUnrepeatable(ProtoAdapter.BOOL.decode(reader)); break;
          case 2: builder.setSpeakPeriod(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MsgRule redact(MsgRule value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
