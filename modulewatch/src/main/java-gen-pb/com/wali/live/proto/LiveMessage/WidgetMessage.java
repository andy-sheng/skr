// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 运营位推送消息格式
 * 展示类型为0,1时，后端发送RoomMessageRequest给所有人，主播端判断展示类型为1时忽略该消息
 * 展示类型为2时，后端发送PushMessageRequest给主播
 */
public final class WidgetMessage extends Message<WidgetMessage, WidgetMessage.Builder> {
  public static final ProtoAdapter<WidgetMessage> ADAPTER = new ProtoAdapter_WidgetMessage();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  /**
   * 主播id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long zuid;

  /**
   * push消息内容
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LiveMessage.WidgetMessageItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<WidgetMessageItem> msgItem;

  /**
   * 新版运营位push内容
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.LiveMessage.NewWidgetMessageItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<NewWidgetMessageItem> newWidgetItem;

  public WidgetMessage(Long zuid, List<WidgetMessageItem> msgItem,
      List<NewWidgetMessageItem> newWidgetItem) {
    this(zuid, msgItem, newWidgetItem, ByteString.EMPTY);
  }

  public WidgetMessage(Long zuid, List<WidgetMessageItem> msgItem,
      List<NewWidgetMessageItem> newWidgetItem, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.zuid = zuid;
    this.msgItem = Internal.immutableCopyOf("msgItem", msgItem);
    this.newWidgetItem = Internal.immutableCopyOf("newWidgetItem", newWidgetItem);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.zuid = zuid;
    builder.msgItem = Internal.copyOf("msgItem", msgItem);
    builder.newWidgetItem = Internal.copyOf("newWidgetItem", newWidgetItem);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof WidgetMessage)) return false;
    WidgetMessage o = (WidgetMessage) other;
    return unknownFields().equals(o.unknownFields())
        && zuid.equals(o.zuid)
        && msgItem.equals(o.msgItem)
        && newWidgetItem.equals(o.newWidgetItem);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + zuid.hashCode();
      result = result * 37 + msgItem.hashCode();
      result = result * 37 + newWidgetItem.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", zuid=").append(zuid);
    if (!msgItem.isEmpty()) builder.append(", msgItem=").append(msgItem);
    if (!newWidgetItem.isEmpty()) builder.append(", newWidgetItem=").append(newWidgetItem);
    return builder.replace(0, 2, "WidgetMessage{").append('}').toString();
  }

  public byte[] toByteArray() {
    return WidgetMessage.ADAPTER.encode(this);
  }

  public static final WidgetMessage parseFrom(byte[] data) throws IOException {
    WidgetMessage c = null;
       c = WidgetMessage.ADAPTER.decode(data);
    return c;
  }

  /**
   * 主播id
   */
  public Long getZuid() {
    if(zuid==null){
        return DEFAULT_ZUID;
    }
    return zuid;
  }

  /**
   * push消息内容
   */
  public List<WidgetMessageItem> getMsgItemList() {
    if(msgItem==null){
        return new java.util.ArrayList<WidgetMessageItem>();
    }
    return msgItem;
  }

  /**
   * 新版运营位push内容
   */
  public List<NewWidgetMessageItem> getNewWidgetItemList() {
    if(newWidgetItem==null){
        return new java.util.ArrayList<NewWidgetMessageItem>();
    }
    return newWidgetItem;
  }

  /**
   * 主播id
   */
  public boolean hasZuid() {
    return zuid!=null;
  }

  /**
   * push消息内容
   */
  public boolean hasMsgItemList() {
    return msgItem!=null;
  }

  /**
   * 新版运营位push内容
   */
  public boolean hasNewWidgetItemList() {
    return newWidgetItem!=null;
  }

  public static final class Builder extends Message.Builder<WidgetMessage, Builder> {
    public Long zuid;

    public List<WidgetMessageItem> msgItem;

    public List<NewWidgetMessageItem> newWidgetItem;

    public Builder() {
      msgItem = Internal.newMutableList();
      newWidgetItem = Internal.newMutableList();
    }

    /**
     * 主播id
     */
    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * push消息内容
     */
    public Builder addAllMsgItem(List<WidgetMessageItem> msgItem) {
      Internal.checkElementsNotNull(msgItem);
      this.msgItem = msgItem;
      return this;
    }

    /**
     * 新版运营位push内容
     */
    public Builder addAllNewWidgetItem(List<NewWidgetMessageItem> newWidgetItem) {
      Internal.checkElementsNotNull(newWidgetItem);
      this.newWidgetItem = newWidgetItem;
      return this;
    }

    @Override
    public WidgetMessage build() {
      return new WidgetMessage(zuid, msgItem, newWidgetItem, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_WidgetMessage extends ProtoAdapter<WidgetMessage> {
    public ProtoAdapter_WidgetMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, WidgetMessage.class);
    }

    @Override
    public int encodedSize(WidgetMessage value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.zuid)
          + WidgetMessageItem.ADAPTER.asRepeated().encodedSizeWithTag(2, value.msgItem)
          + NewWidgetMessageItem.ADAPTER.asRepeated().encodedSizeWithTag(3, value.newWidgetItem)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, WidgetMessage value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.zuid);
      WidgetMessageItem.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.msgItem);
      NewWidgetMessageItem.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.newWidgetItem);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public WidgetMessage decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.msgItem.add(WidgetMessageItem.ADAPTER.decode(reader)); break;
          case 3: builder.newWidgetItem.add(NewWidgetMessageItem.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public WidgetMessage redact(WidgetMessage value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.msgItem, WidgetMessageItem.ADAPTER);
      Internal.redactElements(builder.newWidgetItem, NewWidgetMessageItem.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
