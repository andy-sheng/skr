// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: BigTurnTable.proto
package com.wali.live.proto.BigTurnTable;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class RewardTurntableRsp extends Message<RewardTurntableRsp, RewardTurntableRsp.Builder> {
  public static final ProtoAdapter<RewardTurntableRsp> ADAPTER = new ProtoAdapter_RewardTurntableRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RETCODE = 0;

  public static final Long DEFAULT_USER_ASSET_TIMESTAMP = 0L;

  public static final Integer DEFAULT_RECEIVER_TOTAL_TICKETS = 0;

  /**
   * 0表示成功
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer retCode;

  /**
   * 购买者当前可用资产时间戳（只有是送给主播的奖品服务器才下发这个字段）
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long user_asset_timestamp;

  /**
   * 礼品卡列表（只有是送给主播的奖品服务器才下发这个字段）
   */
  @WireField(
      tag = 3,
      adapter = "com.wali.live.proto.BigTurnTable.VGiftCard#ADAPTER"
  )
  public final VGiftCard gift_card;

  /**
   * 主播此时的票数
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer receiver_total_tickets;

  public RewardTurntableRsp(Integer retCode, Long user_asset_timestamp, VGiftCard gift_card,
      Integer receiver_total_tickets) {
    this(retCode, user_asset_timestamp, gift_card, receiver_total_tickets, ByteString.EMPTY);
  }

  public RewardTurntableRsp(Integer retCode, Long user_asset_timestamp, VGiftCard gift_card,
      Integer receiver_total_tickets, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.retCode = retCode;
    this.user_asset_timestamp = user_asset_timestamp;
    this.gift_card = gift_card;
    this.receiver_total_tickets = receiver_total_tickets;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.retCode = retCode;
    builder.user_asset_timestamp = user_asset_timestamp;
    builder.gift_card = gift_card;
    builder.receiver_total_tickets = receiver_total_tickets;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RewardTurntableRsp)) return false;
    RewardTurntableRsp o = (RewardTurntableRsp) other;
    return unknownFields().equals(o.unknownFields())
        && retCode.equals(o.retCode)
        && Internal.equals(user_asset_timestamp, o.user_asset_timestamp)
        && Internal.equals(gift_card, o.gift_card)
        && Internal.equals(receiver_total_tickets, o.receiver_total_tickets);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + retCode.hashCode();
      result = result * 37 + (user_asset_timestamp != null ? user_asset_timestamp.hashCode() : 0);
      result = result * 37 + (gift_card != null ? gift_card.hashCode() : 0);
      result = result * 37 + (receiver_total_tickets != null ? receiver_total_tickets.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", retCode=").append(retCode);
    if (user_asset_timestamp != null) builder.append(", user_asset_timestamp=").append(user_asset_timestamp);
    if (gift_card != null) builder.append(", gift_card=").append(gift_card);
    if (receiver_total_tickets != null) builder.append(", receiver_total_tickets=").append(receiver_total_tickets);
    return builder.replace(0, 2, "RewardTurntableRsp{").append('}').toString();
  }

  public static final RewardTurntableRsp parseFrom(byte[] data) throws IOException {
    RewardTurntableRsp c = null;
       c = RewardTurntableRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 0表示成功
   */
  public Integer getRetCode() {
    if(retCode==null){
        return DEFAULT_RETCODE;
    }
    return retCode;
  }

  /**
   * 购买者当前可用资产时间戳（只有是送给主播的奖品服务器才下发这个字段）
   */
  public Long getUserAssetTimestamp() {
    if(user_asset_timestamp==null){
        return DEFAULT_USER_ASSET_TIMESTAMP;
    }
    return user_asset_timestamp;
  }

  /**
   * 礼品卡列表（只有是送给主播的奖品服务器才下发这个字段）
   */
  public VGiftCard getGiftCard() {
    if(gift_card==null){
        return new VGiftCard.Builder().build();
    }
    return gift_card;
  }

  /**
   * 主播此时的票数
   */
  public Integer getReceiverTotalTickets() {
    if(receiver_total_tickets==null){
        return DEFAULT_RECEIVER_TOTAL_TICKETS;
    }
    return receiver_total_tickets;
  }

  /**
   * 0表示成功
   */
  public boolean hasRetCode() {
    return retCode!=null;
  }

  /**
   * 购买者当前可用资产时间戳（只有是送给主播的奖品服务器才下发这个字段）
   */
  public boolean hasUserAssetTimestamp() {
    return user_asset_timestamp!=null;
  }

  /**
   * 礼品卡列表（只有是送给主播的奖品服务器才下发这个字段）
   */
  public boolean hasGiftCard() {
    return gift_card!=null;
  }

  /**
   * 主播此时的票数
   */
  public boolean hasReceiverTotalTickets() {
    return receiver_total_tickets!=null;
  }

  public static final class Builder extends Message.Builder<RewardTurntableRsp, Builder> {
    public Integer retCode;

    public Long user_asset_timestamp;

    public VGiftCard gift_card;

    public Integer receiver_total_tickets;

    public Builder() {
    }

    /**
     * 0表示成功
     */
    public Builder setRetCode(Integer retCode) {
      this.retCode = retCode;
      return this;
    }

    /**
     * 购买者当前可用资产时间戳（只有是送给主播的奖品服务器才下发这个字段）
     */
    public Builder setUserAssetTimestamp(Long user_asset_timestamp) {
      this.user_asset_timestamp = user_asset_timestamp;
      return this;
    }

    /**
     * 礼品卡列表（只有是送给主播的奖品服务器才下发这个字段）
     */
    public Builder setGiftCard(VGiftCard gift_card) {
      this.gift_card = gift_card;
      return this;
    }

    /**
     * 主播此时的票数
     */
    public Builder setReceiverTotalTickets(Integer receiver_total_tickets) {
      this.receiver_total_tickets = receiver_total_tickets;
      return this;
    }

    @Override
    public RewardTurntableRsp build() {
      return new RewardTurntableRsp(retCode, user_asset_timestamp, gift_card, receiver_total_tickets, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RewardTurntableRsp extends ProtoAdapter<RewardTurntableRsp> {
    public ProtoAdapter_RewardTurntableRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, RewardTurntableRsp.class);
    }

    @Override
    public int encodedSize(RewardTurntableRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.retCode)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.user_asset_timestamp)
          + VGiftCard.ADAPTER.encodedSizeWithTag(3, value.gift_card)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.receiver_total_tickets)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RewardTurntableRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.retCode);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.user_asset_timestamp);
      VGiftCard.ADAPTER.encodeWithTag(writer, 3, value.gift_card);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.receiver_total_tickets);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RewardTurntableRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRetCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setUserAssetTimestamp(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setGiftCard(VGiftCard.ADAPTER.decode(reader)); break;
          case 4: builder.setReceiverTotalTickets(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RewardTurntableRsp redact(RewardTurntableRsp value) {
      Builder builder = value.newBuilder();
      if (builder.gift_card != null) builder.gift_card = VGiftCard.ADAPTER.redact(builder.gift_card);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
