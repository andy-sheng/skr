// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMall.proto
package com.wali.live.proto.LiveMall;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 命令字：zhibo.shopping.get_pid  获取主播pid，购物唯一表示，来分佣金
 */
public final class GetPidReq extends Message<GetPidReq, GetPidReq.Builder> {
  public static final ProtoAdapter<GetPidReq> ADAPTER = new ProtoAdapter_GetPidReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_HOST_ID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.REQUIRED
  )
  public final Long host_id;

  public GetPidReq(Long host_id) {
    this(host_id, ByteString.EMPTY);
  }

  public GetPidReq(Long host_id, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.host_id = host_id;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.host_id = host_id;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetPidReq)) return false;
    GetPidReq o = (GetPidReq) other;
    return unknownFields().equals(o.unknownFields())
        && host_id.equals(o.host_id);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + host_id.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", host_id=").append(host_id);
    return builder.replace(0, 2, "GetPidReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GetPidReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<GetPidReq, Builder> {
    public Long host_id;

    public Builder() {
    }

    public Builder setHostId(Long host_id) {
      this.host_id = host_id;
      return this;
    }

    @Override
    public GetPidReq build() {
      if (host_id == null) {
        throw Internal.missingRequiredFields(host_id, "host_id");
      }
      return new GetPidReq(host_id, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetPidReq extends ProtoAdapter<GetPidReq> {
    public ProtoAdapter_GetPidReq() {
      super(FieldEncoding.LENGTH_DELIMITED, GetPidReq.class);
    }

    @Override
    public int encodedSize(GetPidReq value) {
      return ProtoAdapter.INT64.encodedSizeWithTag(1, value.host_id)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetPidReq value) throws IOException {
      ProtoAdapter.INT64.encodeWithTag(writer, 1, value.host_id);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetPidReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setHostId(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetPidReq redact(GetPidReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
