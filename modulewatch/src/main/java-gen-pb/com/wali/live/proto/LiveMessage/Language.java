// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Language extends Message<Language, Language.Builder> {
  public static final ProtoAdapter<Language> ADAPTER = new ProtoAdapter_Language();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_LANGUAGE_CODE = 0;

  public static final String DEFAULT_TEXT = "";

  /**
   * 语言代号客户端的语言，0:中文简体，1:英文
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer language_code;

  /**
   * 对应文案
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String text;

  public Language(Integer language_code, String text) {
    this(language_code, text, ByteString.EMPTY);
  }

  public Language(Integer language_code, String text, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.language_code = language_code;
    this.text = text;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.language_code = language_code;
    builder.text = text;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Language)) return false;
    Language o = (Language) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(language_code, o.language_code)
        && Internal.equals(text, o.text);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (language_code != null ? language_code.hashCode() : 0);
      result = result * 37 + (text != null ? text.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (language_code != null) builder.append(", language_code=").append(language_code);
    if (text != null) builder.append(", text=").append(text);
    return builder.replace(0, 2, "Language{").append('}').toString();
  }

  public byte[] toByteArray() {
    return Language.ADAPTER.encode(this);
  }

  public static final Language parseFrom(byte[] data) throws IOException {
    Language c = null;
       c = Language.ADAPTER.decode(data);
    return c;
  }

  /**
   * 语言代号客户端的语言，0:中文简体，1:英文
   */
  public Integer getLanguageCode() {
    if(language_code==null){
        return DEFAULT_LANGUAGE_CODE;
    }
    return language_code;
  }

  /**
   * 对应文案
   */
  public String getText() {
    if(text==null){
        return DEFAULT_TEXT;
    }
    return text;
  }

  /**
   * 语言代号客户端的语言，0:中文简体，1:英文
   */
  public boolean hasLanguageCode() {
    return language_code!=null;
  }

  /**
   * 对应文案
   */
  public boolean hasText() {
    return text!=null;
  }

  public static final class Builder extends Message.Builder<Language, Builder> {
    public Integer language_code;

    public String text;

    public Builder() {
    }

    /**
     * 语言代号客户端的语言，0:中文简体，1:英文
     */
    public Builder setLanguageCode(Integer language_code) {
      this.language_code = language_code;
      return this;
    }

    /**
     * 对应文案
     */
    public Builder setText(String text) {
      this.text = text;
      return this;
    }

    @Override
    public Language build() {
      return new Language(language_code, text, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Language extends ProtoAdapter<Language> {
    public ProtoAdapter_Language() {
      super(FieldEncoding.LENGTH_DELIMITED, Language.class);
    }

    @Override
    public int encodedSize(Language value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.language_code)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.text)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Language value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.language_code);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.text);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Language decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setLanguageCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setText(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Language redact(Language value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
