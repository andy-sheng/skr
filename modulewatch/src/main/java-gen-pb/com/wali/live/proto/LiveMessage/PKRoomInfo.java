// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PKRoomInfo extends Message<PKRoomInfo, PKRoomInfo.Builder> {
  public static final ProtoAdapter<PKRoomInfo> ADAPTER = new ProtoAdapter_PKRoomInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_PK_ROOM_ID = "";

  public static final Long DEFAULT_PK_ZUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String pk_room_id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long pk_zuid;

  public PKRoomInfo(String pk_room_id, Long pk_zuid) {
    this(pk_room_id, pk_zuid, ByteString.EMPTY);
  }

  public PKRoomInfo(String pk_room_id, Long pk_zuid, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.pk_room_id = pk_room_id;
    this.pk_zuid = pk_zuid;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.pk_room_id = pk_room_id;
    builder.pk_zuid = pk_zuid;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PKRoomInfo)) return false;
    PKRoomInfo o = (PKRoomInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(pk_room_id, o.pk_room_id)
        && Internal.equals(pk_zuid, o.pk_zuid);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (pk_room_id != null ? pk_room_id.hashCode() : 0);
      result = result * 37 + (pk_zuid != null ? pk_zuid.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (pk_room_id != null) builder.append(", pk_room_id=").append(pk_room_id);
    if (pk_zuid != null) builder.append(", pk_zuid=").append(pk_zuid);
    return builder.replace(0, 2, "PKRoomInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PKRoomInfo.ADAPTER.encode(this);
  }

  public static final PKRoomInfo parseFrom(byte[] data) throws IOException {
    PKRoomInfo c = null;
       c = PKRoomInfo.ADAPTER.decode(data);
    return c;
  }

  public String getPkRoomId() {
    if(pk_room_id==null){
        return DEFAULT_PK_ROOM_ID;
    }
    return pk_room_id;
  }

  public Long getPkZuid() {
    if(pk_zuid==null){
        return DEFAULT_PK_ZUID;
    }
    return pk_zuid;
  }

  public boolean hasPkRoomId() {
    return pk_room_id!=null;
  }

  public boolean hasPkZuid() {
    return pk_zuid!=null;
  }

  public static final class Builder extends Message.Builder<PKRoomInfo, Builder> {
    public String pk_room_id;

    public Long pk_zuid;

    public Builder() {
    }

    public Builder setPkRoomId(String pk_room_id) {
      this.pk_room_id = pk_room_id;
      return this;
    }

    public Builder setPkZuid(Long pk_zuid) {
      this.pk_zuid = pk_zuid;
      return this;
    }

    @Override
    public PKRoomInfo build() {
      return new PKRoomInfo(pk_room_id, pk_zuid, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PKRoomInfo extends ProtoAdapter<PKRoomInfo> {
    public ProtoAdapter_PKRoomInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, PKRoomInfo.class);
    }

    @Override
    public int encodedSize(PKRoomInfo value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.pk_room_id)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.pk_zuid)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PKRoomInfo value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.pk_room_id);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.pk_zuid);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PKRoomInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setPkRoomId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setPkZuid(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PKRoomInfo redact(PKRoomInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
