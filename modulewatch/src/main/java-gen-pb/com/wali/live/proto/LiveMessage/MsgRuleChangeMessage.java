// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import com.wali.live.proto.LiveCommon.MsgRule;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 房间内规则变化push内容
 */
public final class MsgRuleChangeMessage extends Message<MsgRuleChangeMessage, MsgRuleChangeMessage.Builder> {
  public static final ProtoAdapter<MsgRuleChangeMessage> ADAPTER = new ProtoAdapter_MsgRuleChangeMessage();

  private static final long serialVersionUID = 0L;

  /**
   * 房间的发消息的规则 ，如果没有设置表示清空（恢复初始值）
   */
  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.LiveCommon.MsgRule#ADAPTER"
  )
  public final MsgRule msgRule;

  public MsgRuleChangeMessage(MsgRule msgRule) {
    this(msgRule, ByteString.EMPTY);
  }

  public MsgRuleChangeMessage(MsgRule msgRule, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.msgRule = msgRule;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.msgRule = msgRule;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MsgRuleChangeMessage)) return false;
    MsgRuleChangeMessage o = (MsgRuleChangeMessage) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(msgRule, o.msgRule);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (msgRule != null ? msgRule.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (msgRule != null) builder.append(", msgRule=").append(msgRule);
    return builder.replace(0, 2, "MsgRuleChangeMessage{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MsgRuleChangeMessage.ADAPTER.encode(this);
  }

  public static final MsgRuleChangeMessage parseFrom(byte[] data) throws IOException {
    MsgRuleChangeMessage c = null;
       c = MsgRuleChangeMessage.ADAPTER.decode(data);
    return c;
  }

  /**
   * 房间的发消息的规则 ，如果没有设置表示清空（恢复初始值）
   */
  public MsgRule getMsgRule() {
    if(msgRule==null){
        return new MsgRule.Builder().build();
    }
    return msgRule;
  }

  /**
   * 房间的发消息的规则 ，如果没有设置表示清空（恢复初始值）
   */
  public boolean hasMsgRule() {
    return msgRule!=null;
  }

  public static final class Builder extends Message.Builder<MsgRuleChangeMessage, Builder> {
    public MsgRule msgRule;

    public Builder() {
    }

    /**
     * 房间的发消息的规则 ，如果没有设置表示清空（恢复初始值）
     */
    public Builder setMsgRule(MsgRule msgRule) {
      this.msgRule = msgRule;
      return this;
    }

    @Override
    public MsgRuleChangeMessage build() {
      return new MsgRuleChangeMessage(msgRule, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MsgRuleChangeMessage extends ProtoAdapter<MsgRuleChangeMessage> {
    public ProtoAdapter_MsgRuleChangeMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, MsgRuleChangeMessage.class);
    }

    @Override
    public int encodedSize(MsgRuleChangeMessage value) {
      return MsgRule.ADAPTER.encodedSizeWithTag(1, value.msgRule)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MsgRuleChangeMessage value) throws IOException {
      MsgRule.ADAPTER.encodeWithTag(writer, 1, value.msgRule);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MsgRuleChangeMessage decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setMsgRule(MsgRule.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MsgRuleChangeMessage redact(MsgRuleChangeMessage value) {
      Builder builder = value.newBuilder();
      if (builder.msgRule != null) builder.msgRule = MsgRule.ADAPTER.redact(builder.msgRule);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
