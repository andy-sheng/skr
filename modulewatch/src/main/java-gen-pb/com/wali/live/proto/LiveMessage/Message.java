// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 消息存储以及push消息结构
 */
public final class Message extends com.squareup.wire.Message<Message, Message.Builder> {
  public static final ProtoAdapter<Message> ADAPTER = new ProtoAdapter_Message();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_FROM_USER = 0L;

  public static final Long DEFAULT_TO_USER = 0L;

  public static final String DEFAULT_ROOM_ID = "";

  public static final Long DEFAULT_CID = 0L;

  public static final Integer DEFAULT_MSG_SEQ = 0;

  public static final Long DEFAULT_TIMESTAMP = 0L;

  public static final Integer DEFAULT_MSG_TYPE = 0;

  public static final String DEFAULT_MSG_BODY = "";

  public static final Integer DEFAULT_MSG_STATUS = 0;

  public static final ByteString DEFAULT_MSG_EXT = ByteString.EMPTY;

  public static final String DEFAULT_FROM_USER_NICK_NAME = "";

  public static final Integer DEFAULT_FROM_USER_LEVEL = 0;

  public static final Integer DEFAULT_FROM_USER_GENDER = 0;

  public static final String DEFAULT_CERTIFICATION = "";

  public static final Integer DEFAULT_CERTIFICATION_TYPE = 0;

  public static final String DEFAULT_SUPPORT_TXT = "";

  public static final Integer DEFAULT_ROOM_TYPE = 0;

  public static final String DEFAULT_ORIGIN_ROOM_ID = "";

  public static final Integer DEFAULT_MSG_CATETORY = 0;

  public static final String DEFAULT_FROM_USER_SHOW_NAME = "";

  public static final Boolean DEFAULT_IS_FROM_USER_REDNAME = false;

  public static final Integer DEFAULT_VIP_LEVEL = 0;

  public static final Boolean DEFAULT_VIP_DISABLE = false;

  public static final Boolean DEFAULT_VIP_HIDDEN = false;

  public static final Integer DEFAULT_REAL_NAME_CERTIFICATION_STATUS = 0;

  public static final Boolean DEFAULT_IS_PUSH_SELF = false;

  public static final Integer DEFAULT_FROM_EFFECT_ID = 0;

  public static final Integer DEFAULT_NOBLE_LEVEL = 0;

  public static final Integer DEFAULT_SPECIAL_EFFECT_ID = 0;

  /**
   * 消息发送者
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long from_user;

  /**
   * 消息接收者
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long to_user;

  /**
   * 房间ID
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String room_id;

  /**
   * 客户端消息ID
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long cid;

  /**
   * 服务器生成的消息seq
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer msg_seq;

  /**
   * 消息的时间戳
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long timestamp;

  /**
   * 消息类型
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer msg_type;

  /**
   * 文本消息体
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String msg_body;

  /**
   * 消息状态，比如删除，备用
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer msg_status;

  /**
   * 扩展pb
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString msg_ext;

  /**
   * 消息发送者的昵称
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String from_user_nick_name;

  /**
   * 消息发送者的级别
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer from_user_level;

  /**
   * 消息发送者性别
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer from_user_gender;

  /**
   * 认证信息
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String certification;

  /**
   * 认证类型
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer certification_type;

  /**
   * 版本兼容文案
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String support_txt;

  /**
   * 房间类型 0正常 1是PK
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer room_type;

  /**
   * 原始房间  PK情况下代表，消息的来源方
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String origin_room_id;

  /**
   * 1:普通私信消息 目前只提供私信使用
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer msg_catetory;

  /**
   * 多语言文案
   */
  @WireField(
      tag = 20,
      adapter = "com.wali.live.proto.LiveMessage.MultiLanguage#ADAPTER"
  )
  public final MultiLanguage multi_language;

  /**
   * 兼容老版本，展示用户名字
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String from_user_show_name;

  /**
   * 发送方是否红名
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_from_user_redname;

  /**
   * 所有类型弹幕扩展字段(针对多种类型的弹幕)
   */
  @WireField(
      tag = 23,
      adapter = "com.wali.live.proto.LiveMessage.GlobalRoomMessageExt#ADAPTER"
  )
  public final GlobalRoomMessageExt global_room_msg_ext;

  /**
   * 财富等级
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer vip_level;

  /**
   * 财富等级是否被冻结
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean vip_disable;

  /**
   * 是否VIP隐身
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean vip_hidden;

  /**
   * 实名认证状态,1:审核中,2:实名认证已通过,3:实名认证未通过
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer real_name_certification_status;

  /**
   * 飘屏(306)弹幕push：粉丝团开通的飘屏要给自己push(设置true)，其他飘屏消息不需要给自己push
   */
  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_push_self;

  /**
   * 发送者的特效id
   */
  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer from_effect_id;

  /**
   * 贵族等级
   */
  @WireField(
      tag = 30,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer noble_level;

  /**
   * 发送者的特效id兼容已发版本bug
   */
  @WireField(
      tag = 31,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer special_effect_id;

  public Message(Long from_user, Long to_user, String room_id, Long cid, Integer msg_seq,
      Long timestamp, Integer msg_type, String msg_body, Integer msg_status, ByteString msg_ext,
      String from_user_nick_name, Integer from_user_level, Integer from_user_gender,
      String certification, Integer certification_type, String support_txt, Integer room_type,
      String origin_room_id, Integer msg_catetory, MultiLanguage multi_language,
      String from_user_show_name, Boolean is_from_user_redname,
      GlobalRoomMessageExt global_room_msg_ext, Integer vip_level, Boolean vip_disable,
      Boolean vip_hidden, Integer real_name_certification_status, Boolean is_push_self,
      Integer from_effect_id, Integer noble_level, Integer special_effect_id) {
    this(from_user, to_user, room_id, cid, msg_seq, timestamp, msg_type, msg_body, msg_status, msg_ext, from_user_nick_name, from_user_level, from_user_gender, certification, certification_type, support_txt, room_type, origin_room_id, msg_catetory, multi_language, from_user_show_name, is_from_user_redname, global_room_msg_ext, vip_level, vip_disable, vip_hidden, real_name_certification_status, is_push_self, from_effect_id, noble_level, special_effect_id, ByteString.EMPTY);
  }

  public Message(Long from_user, Long to_user, String room_id, Long cid, Integer msg_seq,
      Long timestamp, Integer msg_type, String msg_body, Integer msg_status, ByteString msg_ext,
      String from_user_nick_name, Integer from_user_level, Integer from_user_gender,
      String certification, Integer certification_type, String support_txt, Integer room_type,
      String origin_room_id, Integer msg_catetory, MultiLanguage multi_language,
      String from_user_show_name, Boolean is_from_user_redname,
      GlobalRoomMessageExt global_room_msg_ext, Integer vip_level, Boolean vip_disable,
      Boolean vip_hidden, Integer real_name_certification_status, Boolean is_push_self,
      Integer from_effect_id, Integer noble_level, Integer special_effect_id,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.from_user = from_user;
    this.to_user = to_user;
    this.room_id = room_id;
    this.cid = cid;
    this.msg_seq = msg_seq;
    this.timestamp = timestamp;
    this.msg_type = msg_type;
    this.msg_body = msg_body;
    this.msg_status = msg_status;
    this.msg_ext = msg_ext;
    this.from_user_nick_name = from_user_nick_name;
    this.from_user_level = from_user_level;
    this.from_user_gender = from_user_gender;
    this.certification = certification;
    this.certification_type = certification_type;
    this.support_txt = support_txt;
    this.room_type = room_type;
    this.origin_room_id = origin_room_id;
    this.msg_catetory = msg_catetory;
    this.multi_language = multi_language;
    this.from_user_show_name = from_user_show_name;
    this.is_from_user_redname = is_from_user_redname;
    this.global_room_msg_ext = global_room_msg_ext;
    this.vip_level = vip_level;
    this.vip_disable = vip_disable;
    this.vip_hidden = vip_hidden;
    this.real_name_certification_status = real_name_certification_status;
    this.is_push_self = is_push_self;
    this.from_effect_id = from_effect_id;
    this.noble_level = noble_level;
    this.special_effect_id = special_effect_id;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.from_user = from_user;
    builder.to_user = to_user;
    builder.room_id = room_id;
    builder.cid = cid;
    builder.msg_seq = msg_seq;
    builder.timestamp = timestamp;
    builder.msg_type = msg_type;
    builder.msg_body = msg_body;
    builder.msg_status = msg_status;
    builder.msg_ext = msg_ext;
    builder.from_user_nick_name = from_user_nick_name;
    builder.from_user_level = from_user_level;
    builder.from_user_gender = from_user_gender;
    builder.certification = certification;
    builder.certification_type = certification_type;
    builder.support_txt = support_txt;
    builder.room_type = room_type;
    builder.origin_room_id = origin_room_id;
    builder.msg_catetory = msg_catetory;
    builder.multi_language = multi_language;
    builder.from_user_show_name = from_user_show_name;
    builder.is_from_user_redname = is_from_user_redname;
    builder.global_room_msg_ext = global_room_msg_ext;
    builder.vip_level = vip_level;
    builder.vip_disable = vip_disable;
    builder.vip_hidden = vip_hidden;
    builder.real_name_certification_status = real_name_certification_status;
    builder.is_push_self = is_push_self;
    builder.from_effect_id = from_effect_id;
    builder.noble_level = noble_level;
    builder.special_effect_id = special_effect_id;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Message)) return false;
    Message o = (Message) other;
    return unknownFields().equals(o.unknownFields())
        && from_user.equals(o.from_user)
        && Internal.equals(to_user, o.to_user)
        && Internal.equals(room_id, o.room_id)
        && Internal.equals(cid, o.cid)
        && Internal.equals(msg_seq, o.msg_seq)
        && Internal.equals(timestamp, o.timestamp)
        && Internal.equals(msg_type, o.msg_type)
        && Internal.equals(msg_body, o.msg_body)
        && Internal.equals(msg_status, o.msg_status)
        && Internal.equals(msg_ext, o.msg_ext)
        && Internal.equals(from_user_nick_name, o.from_user_nick_name)
        && Internal.equals(from_user_level, o.from_user_level)
        && Internal.equals(from_user_gender, o.from_user_gender)
        && Internal.equals(certification, o.certification)
        && Internal.equals(certification_type, o.certification_type)
        && Internal.equals(support_txt, o.support_txt)
        && Internal.equals(room_type, o.room_type)
        && Internal.equals(origin_room_id, o.origin_room_id)
        && Internal.equals(msg_catetory, o.msg_catetory)
        && Internal.equals(multi_language, o.multi_language)
        && Internal.equals(from_user_show_name, o.from_user_show_name)
        && Internal.equals(is_from_user_redname, o.is_from_user_redname)
        && Internal.equals(global_room_msg_ext, o.global_room_msg_ext)
        && Internal.equals(vip_level, o.vip_level)
        && Internal.equals(vip_disable, o.vip_disable)
        && Internal.equals(vip_hidden, o.vip_hidden)
        && Internal.equals(real_name_certification_status, o.real_name_certification_status)
        && Internal.equals(is_push_self, o.is_push_self)
        && Internal.equals(from_effect_id, o.from_effect_id)
        && Internal.equals(noble_level, o.noble_level)
        && Internal.equals(special_effect_id, o.special_effect_id);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + from_user.hashCode();
      result = result * 37 + (to_user != null ? to_user.hashCode() : 0);
      result = result * 37 + (room_id != null ? room_id.hashCode() : 0);
      result = result * 37 + (cid != null ? cid.hashCode() : 0);
      result = result * 37 + (msg_seq != null ? msg_seq.hashCode() : 0);
      result = result * 37 + (timestamp != null ? timestamp.hashCode() : 0);
      result = result * 37 + (msg_type != null ? msg_type.hashCode() : 0);
      result = result * 37 + (msg_body != null ? msg_body.hashCode() : 0);
      result = result * 37 + (msg_status != null ? msg_status.hashCode() : 0);
      result = result * 37 + (msg_ext != null ? msg_ext.hashCode() : 0);
      result = result * 37 + (from_user_nick_name != null ? from_user_nick_name.hashCode() : 0);
      result = result * 37 + (from_user_level != null ? from_user_level.hashCode() : 0);
      result = result * 37 + (from_user_gender != null ? from_user_gender.hashCode() : 0);
      result = result * 37 + (certification != null ? certification.hashCode() : 0);
      result = result * 37 + (certification_type != null ? certification_type.hashCode() : 0);
      result = result * 37 + (support_txt != null ? support_txt.hashCode() : 0);
      result = result * 37 + (room_type != null ? room_type.hashCode() : 0);
      result = result * 37 + (origin_room_id != null ? origin_room_id.hashCode() : 0);
      result = result * 37 + (msg_catetory != null ? msg_catetory.hashCode() : 0);
      result = result * 37 + (multi_language != null ? multi_language.hashCode() : 0);
      result = result * 37 + (from_user_show_name != null ? from_user_show_name.hashCode() : 0);
      result = result * 37 + (is_from_user_redname != null ? is_from_user_redname.hashCode() : 0);
      result = result * 37 + (global_room_msg_ext != null ? global_room_msg_ext.hashCode() : 0);
      result = result * 37 + (vip_level != null ? vip_level.hashCode() : 0);
      result = result * 37 + (vip_disable != null ? vip_disable.hashCode() : 0);
      result = result * 37 + (vip_hidden != null ? vip_hidden.hashCode() : 0);
      result = result * 37 + (real_name_certification_status != null ? real_name_certification_status.hashCode() : 0);
      result = result * 37 + (is_push_self != null ? is_push_self.hashCode() : 0);
      result = result * 37 + (from_effect_id != null ? from_effect_id.hashCode() : 0);
      result = result * 37 + (noble_level != null ? noble_level.hashCode() : 0);
      result = result * 37 + (special_effect_id != null ? special_effect_id.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", from_user=").append(from_user);
    if (to_user != null) builder.append(", to_user=").append(to_user);
    if (room_id != null) builder.append(", room_id=").append(room_id);
    if (cid != null) builder.append(", cid=").append(cid);
    if (msg_seq != null) builder.append(", msg_seq=").append(msg_seq);
    if (timestamp != null) builder.append(", timestamp=").append(timestamp);
    if (msg_type != null) builder.append(", msg_type=").append(msg_type);
    if (msg_body != null) builder.append(", msg_body=").append(msg_body);
    if (msg_status != null) builder.append(", msg_status=").append(msg_status);
    if (msg_ext != null) builder.append(", msg_ext=").append(msg_ext);
    if (from_user_nick_name != null) builder.append(", from_user_nick_name=").append(from_user_nick_name);
    if (from_user_level != null) builder.append(", from_user_level=").append(from_user_level);
    if (from_user_gender != null) builder.append(", from_user_gender=").append(from_user_gender);
    if (certification != null) builder.append(", certification=").append(certification);
    if (certification_type != null) builder.append(", certification_type=").append(certification_type);
    if (support_txt != null) builder.append(", support_txt=").append(support_txt);
    if (room_type != null) builder.append(", room_type=").append(room_type);
    if (origin_room_id != null) builder.append(", origin_room_id=").append(origin_room_id);
    if (msg_catetory != null) builder.append(", msg_catetory=").append(msg_catetory);
    if (multi_language != null) builder.append(", multi_language=").append(multi_language);
    if (from_user_show_name != null) builder.append(", from_user_show_name=").append(from_user_show_name);
    if (is_from_user_redname != null) builder.append(", is_from_user_redname=").append(is_from_user_redname);
    if (global_room_msg_ext != null) builder.append(", global_room_msg_ext=").append(global_room_msg_ext);
    if (vip_level != null) builder.append(", vip_level=").append(vip_level);
    if (vip_disable != null) builder.append(", vip_disable=").append(vip_disable);
    if (vip_hidden != null) builder.append(", vip_hidden=").append(vip_hidden);
    if (real_name_certification_status != null) builder.append(", real_name_certification_status=").append(real_name_certification_status);
    if (is_push_self != null) builder.append(", is_push_self=").append(is_push_self);
    if (from_effect_id != null) builder.append(", from_effect_id=").append(from_effect_id);
    if (noble_level != null) builder.append(", noble_level=").append(noble_level);
    if (special_effect_id != null) builder.append(", special_effect_id=").append(special_effect_id);
    return builder.replace(0, 2, "Message{").append('}').toString();
  }

  public byte[] toByteArray() {
    return Message.ADAPTER.encode(this);
  }

  public static final Message parseFrom(byte[] data) throws IOException {
    Message c = null;
       c = Message.ADAPTER.decode(data);
    return c;
  }

  /**
   * 消息发送者
   */
  public Long getFromUser() {
    if(from_user==null){
        return DEFAULT_FROM_USER;
    }
    return from_user;
  }

  /**
   * 消息接收者
   */
  public Long getToUser() {
    if(to_user==null){
        return DEFAULT_TO_USER;
    }
    return to_user;
  }

  /**
   * 房间ID
   */
  public String getRoomId() {
    if(room_id==null){
        return DEFAULT_ROOM_ID;
    }
    return room_id;
  }

  /**
   * 客户端消息ID
   */
  public Long getCid() {
    if(cid==null){
        return DEFAULT_CID;
    }
    return cid;
  }

  /**
   * 服务器生成的消息seq
   */
  public Integer getMsgSeq() {
    if(msg_seq==null){
        return DEFAULT_MSG_SEQ;
    }
    return msg_seq;
  }

  /**
   * 消息的时间戳
   */
  public Long getTimestamp() {
    if(timestamp==null){
        return DEFAULT_TIMESTAMP;
    }
    return timestamp;
  }

  /**
   * 消息类型
   */
  public Integer getMsgType() {
    if(msg_type==null){
        return DEFAULT_MSG_TYPE;
    }
    return msg_type;
  }

  /**
   * 文本消息体
   */
  public String getMsgBody() {
    if(msg_body==null){
        return DEFAULT_MSG_BODY;
    }
    return msg_body;
  }

  /**
   * 消息状态，比如删除，备用
   */
  public Integer getMsgStatus() {
    if(msg_status==null){
        return DEFAULT_MSG_STATUS;
    }
    return msg_status;
  }

  /**
   * 扩展pb
   */
  public ByteString getMsgExt() {
    if(msg_ext==null){
        return ByteString.of(new byte[0]);
    }
    return msg_ext;
  }

  /**
   * 消息发送者的昵称
   */
  public String getFromUserNickName() {
    if(from_user_nick_name==null){
        return DEFAULT_FROM_USER_NICK_NAME;
    }
    return from_user_nick_name;
  }

  /**
   * 消息发送者的级别
   */
  public Integer getFromUserLevel() {
    if(from_user_level==null){
        return DEFAULT_FROM_USER_LEVEL;
    }
    return from_user_level;
  }

  /**
   * 消息发送者性别
   */
  public Integer getFromUserGender() {
    if(from_user_gender==null){
        return DEFAULT_FROM_USER_GENDER;
    }
    return from_user_gender;
  }

  /**
   * 认证信息
   */
  public String getCertification() {
    if(certification==null){
        return DEFAULT_CERTIFICATION;
    }
    return certification;
  }

  /**
   * 认证类型
   */
  public Integer getCertificationType() {
    if(certification_type==null){
        return DEFAULT_CERTIFICATION_TYPE;
    }
    return certification_type;
  }

  /**
   * 版本兼容文案
   */
  public String getSupportTxt() {
    if(support_txt==null){
        return DEFAULT_SUPPORT_TXT;
    }
    return support_txt;
  }

  /**
   * 房间类型 0正常 1是PK
   */
  public Integer getRoomType() {
    if(room_type==null){
        return DEFAULT_ROOM_TYPE;
    }
    return room_type;
  }

  /**
   * 原始房间  PK情况下代表，消息的来源方
   */
  public String getOriginRoomId() {
    if(origin_room_id==null){
        return DEFAULT_ORIGIN_ROOM_ID;
    }
    return origin_room_id;
  }

  /**
   * 1:普通私信消息 目前只提供私信使用
   */
  public Integer getMsgCatetory() {
    if(msg_catetory==null){
        return DEFAULT_MSG_CATETORY;
    }
    return msg_catetory;
  }

  /**
   * 多语言文案
   */
  public MultiLanguage getMultiLanguage() {
    if(multi_language==null){
        return new MultiLanguage.Builder().build();
    }
    return multi_language;
  }

  /**
   * 兼容老版本，展示用户名字
   */
  public String getFromUserShowName() {
    if(from_user_show_name==null){
        return DEFAULT_FROM_USER_SHOW_NAME;
    }
    return from_user_show_name;
  }

  /**
   * 发送方是否红名
   */
  public Boolean getIsFromUserRedname() {
    if(is_from_user_redname==null){
        return DEFAULT_IS_FROM_USER_REDNAME;
    }
    return is_from_user_redname;
  }

  /**
   * 所有类型弹幕扩展字段(针对多种类型的弹幕)
   */
  public GlobalRoomMessageExt getGlobalRoomMsgExt() {
    if(global_room_msg_ext==null){
        return new GlobalRoomMessageExt.Builder().build();
    }
    return global_room_msg_ext;
  }

  /**
   * 财富等级
   */
  public Integer getVipLevel() {
    if(vip_level==null){
        return DEFAULT_VIP_LEVEL;
    }
    return vip_level;
  }

  /**
   * 财富等级是否被冻结
   */
  public Boolean getVipDisable() {
    if(vip_disable==null){
        return DEFAULT_VIP_DISABLE;
    }
    return vip_disable;
  }

  /**
   * 是否VIP隐身
   */
  public Boolean getVipHidden() {
    if(vip_hidden==null){
        return DEFAULT_VIP_HIDDEN;
    }
    return vip_hidden;
  }

  /**
   * 实名认证状态,1:审核中,2:实名认证已通过,3:实名认证未通过
   */
  public Integer getRealNameCertificationStatus() {
    if(real_name_certification_status==null){
        return DEFAULT_REAL_NAME_CERTIFICATION_STATUS;
    }
    return real_name_certification_status;
  }

  /**
   * 飘屏(306)弹幕push：粉丝团开通的飘屏要给自己push(设置true)，其他飘屏消息不需要给自己push
   */
  public Boolean getIsPushSelf() {
    if(is_push_self==null){
        return DEFAULT_IS_PUSH_SELF;
    }
    return is_push_self;
  }

  /**
   * 发送者的特效id
   */
  public Integer getFromEffectId() {
    if(from_effect_id==null){
        return DEFAULT_FROM_EFFECT_ID;
    }
    return from_effect_id;
  }

  /**
   * 贵族等级
   */
  public Integer getNobleLevel() {
    if(noble_level==null){
        return DEFAULT_NOBLE_LEVEL;
    }
    return noble_level;
  }

  /**
   * 发送者的特效id兼容已发版本bug
   */
  public Integer getSpecialEffectId() {
    if(special_effect_id==null){
        return DEFAULT_SPECIAL_EFFECT_ID;
    }
    return special_effect_id;
  }

  /**
   * 消息发送者
   */
  public boolean hasFromUser() {
    return from_user!=null;
  }

  /**
   * 消息接收者
   */
  public boolean hasToUser() {
    return to_user!=null;
  }

  /**
   * 房间ID
   */
  public boolean hasRoomId() {
    return room_id!=null;
  }

  /**
   * 客户端消息ID
   */
  public boolean hasCid() {
    return cid!=null;
  }

  /**
   * 服务器生成的消息seq
   */
  public boolean hasMsgSeq() {
    return msg_seq!=null;
  }

  /**
   * 消息的时间戳
   */
  public boolean hasTimestamp() {
    return timestamp!=null;
  }

  /**
   * 消息类型
   */
  public boolean hasMsgType() {
    return msg_type!=null;
  }

  /**
   * 文本消息体
   */
  public boolean hasMsgBody() {
    return msg_body!=null;
  }

  /**
   * 消息状态，比如删除，备用
   */
  public boolean hasMsgStatus() {
    return msg_status!=null;
  }

  /**
   * 扩展pb
   */
  public boolean hasMsgExt() {
    return msg_ext!=null;
  }

  /**
   * 消息发送者的昵称
   */
  public boolean hasFromUserNickName() {
    return from_user_nick_name!=null;
  }

  /**
   * 消息发送者的级别
   */
  public boolean hasFromUserLevel() {
    return from_user_level!=null;
  }

  /**
   * 消息发送者性别
   */
  public boolean hasFromUserGender() {
    return from_user_gender!=null;
  }

  /**
   * 认证信息
   */
  public boolean hasCertification() {
    return certification!=null;
  }

  /**
   * 认证类型
   */
  public boolean hasCertificationType() {
    return certification_type!=null;
  }

  /**
   * 版本兼容文案
   */
  public boolean hasSupportTxt() {
    return support_txt!=null;
  }

  /**
   * 房间类型 0正常 1是PK
   */
  public boolean hasRoomType() {
    return room_type!=null;
  }

  /**
   * 原始房间  PK情况下代表，消息的来源方
   */
  public boolean hasOriginRoomId() {
    return origin_room_id!=null;
  }

  /**
   * 1:普通私信消息 目前只提供私信使用
   */
  public boolean hasMsgCatetory() {
    return msg_catetory!=null;
  }

  /**
   * 多语言文案
   */
  public boolean hasMultiLanguage() {
    return multi_language!=null;
  }

  /**
   * 兼容老版本，展示用户名字
   */
  public boolean hasFromUserShowName() {
    return from_user_show_name!=null;
  }

  /**
   * 发送方是否红名
   */
  public boolean hasIsFromUserRedname() {
    return is_from_user_redname!=null;
  }

  /**
   * 所有类型弹幕扩展字段(针对多种类型的弹幕)
   */
  public boolean hasGlobalRoomMsgExt() {
    return global_room_msg_ext!=null;
  }

  /**
   * 财富等级
   */
  public boolean hasVipLevel() {
    return vip_level!=null;
  }

  /**
   * 财富等级是否被冻结
   */
  public boolean hasVipDisable() {
    return vip_disable!=null;
  }

  /**
   * 是否VIP隐身
   */
  public boolean hasVipHidden() {
    return vip_hidden!=null;
  }

  /**
   * 实名认证状态,1:审核中,2:实名认证已通过,3:实名认证未通过
   */
  public boolean hasRealNameCertificationStatus() {
    return real_name_certification_status!=null;
  }

  /**
   * 飘屏(306)弹幕push：粉丝团开通的飘屏要给自己push(设置true)，其他飘屏消息不需要给自己push
   */
  public boolean hasIsPushSelf() {
    return is_push_self!=null;
  }

  /**
   * 发送者的特效id
   */
  public boolean hasFromEffectId() {
    return from_effect_id!=null;
  }

  /**
   * 贵族等级
   */
  public boolean hasNobleLevel() {
    return noble_level!=null;
  }

  /**
   * 发送者的特效id兼容已发版本bug
   */
  public boolean hasSpecialEffectId() {
    return special_effect_id!=null;
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<Message, Builder> {
    public Long from_user;

    public Long to_user;

    public String room_id;

    public Long cid;

    public Integer msg_seq;

    public Long timestamp;

    public Integer msg_type;

    public String msg_body;

    public Integer msg_status;

    public ByteString msg_ext;

    public String from_user_nick_name;

    public Integer from_user_level;

    public Integer from_user_gender;

    public String certification;

    public Integer certification_type;

    public String support_txt;

    public Integer room_type;

    public String origin_room_id;

    public Integer msg_catetory;

    public MultiLanguage multi_language;

    public String from_user_show_name;

    public Boolean is_from_user_redname;

    public GlobalRoomMessageExt global_room_msg_ext;

    public Integer vip_level;

    public Boolean vip_disable;

    public Boolean vip_hidden;

    public Integer real_name_certification_status;

    public Boolean is_push_self;

    public Integer from_effect_id;

    public Integer noble_level;

    public Integer special_effect_id;

    public Builder() {
    }

    /**
     * 消息发送者
     */
    public Builder setFromUser(Long from_user) {
      this.from_user = from_user;
      return this;
    }

    /**
     * 消息接收者
     */
    public Builder setToUser(Long to_user) {
      this.to_user = to_user;
      return this;
    }

    /**
     * 房间ID
     */
    public Builder setRoomId(String room_id) {
      this.room_id = room_id;
      return this;
    }

    /**
     * 客户端消息ID
     */
    public Builder setCid(Long cid) {
      this.cid = cid;
      return this;
    }

    /**
     * 服务器生成的消息seq
     */
    public Builder setMsgSeq(Integer msg_seq) {
      this.msg_seq = msg_seq;
      return this;
    }

    /**
     * 消息的时间戳
     */
    public Builder setTimestamp(Long timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    /**
     * 消息类型
     */
    public Builder setMsgType(Integer msg_type) {
      this.msg_type = msg_type;
      return this;
    }

    /**
     * 文本消息体
     */
    public Builder setMsgBody(String msg_body) {
      this.msg_body = msg_body;
      return this;
    }

    /**
     * 消息状态，比如删除，备用
     */
    public Builder setMsgStatus(Integer msg_status) {
      this.msg_status = msg_status;
      return this;
    }

    /**
     * 扩展pb
     */
    public Builder setMsgExt(ByteString msg_ext) {
      this.msg_ext = msg_ext;
      return this;
    }

    /**
     * 消息发送者的昵称
     */
    public Builder setFromUserNickName(String from_user_nick_name) {
      this.from_user_nick_name = from_user_nick_name;
      return this;
    }

    /**
     * 消息发送者的级别
     */
    public Builder setFromUserLevel(Integer from_user_level) {
      this.from_user_level = from_user_level;
      return this;
    }

    /**
     * 消息发送者性别
     */
    public Builder setFromUserGender(Integer from_user_gender) {
      this.from_user_gender = from_user_gender;
      return this;
    }

    /**
     * 认证信息
     */
    public Builder setCertification(String certification) {
      this.certification = certification;
      return this;
    }

    /**
     * 认证类型
     */
    public Builder setCertificationType(Integer certification_type) {
      this.certification_type = certification_type;
      return this;
    }

    /**
     * 版本兼容文案
     */
    public Builder setSupportTxt(String support_txt) {
      this.support_txt = support_txt;
      return this;
    }

    /**
     * 房间类型 0正常 1是PK
     */
    public Builder setRoomType(Integer room_type) {
      this.room_type = room_type;
      return this;
    }

    /**
     * 原始房间  PK情况下代表，消息的来源方
     */
    public Builder setOriginRoomId(String origin_room_id) {
      this.origin_room_id = origin_room_id;
      return this;
    }

    /**
     * 1:普通私信消息 目前只提供私信使用
     */
    public Builder setMsgCatetory(Integer msg_catetory) {
      this.msg_catetory = msg_catetory;
      return this;
    }

    /**
     * 多语言文案
     */
    public Builder setMultiLanguage(MultiLanguage multi_language) {
      this.multi_language = multi_language;
      return this;
    }

    /**
     * 兼容老版本，展示用户名字
     */
    public Builder setFromUserShowName(String from_user_show_name) {
      this.from_user_show_name = from_user_show_name;
      return this;
    }

    /**
     * 发送方是否红名
     */
    public Builder setIsFromUserRedname(Boolean is_from_user_redname) {
      this.is_from_user_redname = is_from_user_redname;
      return this;
    }

    /**
     * 所有类型弹幕扩展字段(针对多种类型的弹幕)
     */
    public Builder setGlobalRoomMsgExt(GlobalRoomMessageExt global_room_msg_ext) {
      this.global_room_msg_ext = global_room_msg_ext;
      return this;
    }

    /**
     * 财富等级
     */
    public Builder setVipLevel(Integer vip_level) {
      this.vip_level = vip_level;
      return this;
    }

    /**
     * 财富等级是否被冻结
     */
    public Builder setVipDisable(Boolean vip_disable) {
      this.vip_disable = vip_disable;
      return this;
    }

    /**
     * 是否VIP隐身
     */
    public Builder setVipHidden(Boolean vip_hidden) {
      this.vip_hidden = vip_hidden;
      return this;
    }

    /**
     * 实名认证状态,1:审核中,2:实名认证已通过,3:实名认证未通过
     */
    public Builder setRealNameCertificationStatus(Integer real_name_certification_status) {
      this.real_name_certification_status = real_name_certification_status;
      return this;
    }

    /**
     * 飘屏(306)弹幕push：粉丝团开通的飘屏要给自己push(设置true)，其他飘屏消息不需要给自己push
     */
    public Builder setIsPushSelf(Boolean is_push_self) {
      this.is_push_self = is_push_self;
      return this;
    }

    /**
     * 发送者的特效id
     */
    public Builder setFromEffectId(Integer from_effect_id) {
      this.from_effect_id = from_effect_id;
      return this;
    }

    /**
     * 贵族等级
     */
    public Builder setNobleLevel(Integer noble_level) {
      this.noble_level = noble_level;
      return this;
    }

    /**
     * 发送者的特效id兼容已发版本bug
     */
    public Builder setSpecialEffectId(Integer special_effect_id) {
      this.special_effect_id = special_effect_id;
      return this;
    }

    @Override
    public Message build() {
      return new Message(from_user, to_user, room_id, cid, msg_seq, timestamp, msg_type, msg_body, msg_status, msg_ext, from_user_nick_name, from_user_level, from_user_gender, certification, certification_type, support_txt, room_type, origin_room_id, msg_catetory, multi_language, from_user_show_name, is_from_user_redname, global_room_msg_ext, vip_level, vip_disable, vip_hidden, real_name_certification_status, is_push_self, from_effect_id, noble_level, special_effect_id, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Message extends ProtoAdapter<Message> {
    public ProtoAdapter_Message() {
      super(FieldEncoding.LENGTH_DELIMITED, Message.class);
    }

    @Override
    public int encodedSize(Message value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.from_user)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.to_user)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.room_id)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.cid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.msg_seq)
          + ProtoAdapter.UINT64.encodedSizeWithTag(6, value.timestamp)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.msg_type)
          + ProtoAdapter.STRING.encodedSizeWithTag(8, value.msg_body)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.msg_status)
          + ProtoAdapter.BYTES.encodedSizeWithTag(10, value.msg_ext)
          + ProtoAdapter.STRING.encodedSizeWithTag(11, value.from_user_nick_name)
          + ProtoAdapter.UINT32.encodedSizeWithTag(12, value.from_user_level)
          + ProtoAdapter.UINT32.encodedSizeWithTag(13, value.from_user_gender)
          + ProtoAdapter.STRING.encodedSizeWithTag(14, value.certification)
          + ProtoAdapter.UINT32.encodedSizeWithTag(15, value.certification_type)
          + ProtoAdapter.STRING.encodedSizeWithTag(16, value.support_txt)
          + ProtoAdapter.UINT32.encodedSizeWithTag(17, value.room_type)
          + ProtoAdapter.STRING.encodedSizeWithTag(18, value.origin_room_id)
          + ProtoAdapter.UINT32.encodedSizeWithTag(19, value.msg_catetory)
          + MultiLanguage.ADAPTER.encodedSizeWithTag(20, value.multi_language)
          + ProtoAdapter.STRING.encodedSizeWithTag(21, value.from_user_show_name)
          + ProtoAdapter.BOOL.encodedSizeWithTag(22, value.is_from_user_redname)
          + GlobalRoomMessageExt.ADAPTER.encodedSizeWithTag(23, value.global_room_msg_ext)
          + ProtoAdapter.UINT32.encodedSizeWithTag(24, value.vip_level)
          + ProtoAdapter.BOOL.encodedSizeWithTag(25, value.vip_disable)
          + ProtoAdapter.BOOL.encodedSizeWithTag(26, value.vip_hidden)
          + ProtoAdapter.UINT32.encodedSizeWithTag(27, value.real_name_certification_status)
          + ProtoAdapter.BOOL.encodedSizeWithTag(28, value.is_push_self)
          + ProtoAdapter.UINT32.encodedSizeWithTag(29, value.from_effect_id)
          + ProtoAdapter.UINT32.encodedSizeWithTag(30, value.noble_level)
          + ProtoAdapter.UINT32.encodedSizeWithTag(31, value.special_effect_id)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Message value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.from_user);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.to_user);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.room_id);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.cid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.msg_seq);
      ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.timestamp);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.msg_type);
      ProtoAdapter.STRING.encodeWithTag(writer, 8, value.msg_body);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.msg_status);
      ProtoAdapter.BYTES.encodeWithTag(writer, 10, value.msg_ext);
      ProtoAdapter.STRING.encodeWithTag(writer, 11, value.from_user_nick_name);
      ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.from_user_level);
      ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.from_user_gender);
      ProtoAdapter.STRING.encodeWithTag(writer, 14, value.certification);
      ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.certification_type);
      ProtoAdapter.STRING.encodeWithTag(writer, 16, value.support_txt);
      ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.room_type);
      ProtoAdapter.STRING.encodeWithTag(writer, 18, value.origin_room_id);
      ProtoAdapter.UINT32.encodeWithTag(writer, 19, value.msg_catetory);
      MultiLanguage.ADAPTER.encodeWithTag(writer, 20, value.multi_language);
      ProtoAdapter.STRING.encodeWithTag(writer, 21, value.from_user_show_name);
      ProtoAdapter.BOOL.encodeWithTag(writer, 22, value.is_from_user_redname);
      GlobalRoomMessageExt.ADAPTER.encodeWithTag(writer, 23, value.global_room_msg_ext);
      ProtoAdapter.UINT32.encodeWithTag(writer, 24, value.vip_level);
      ProtoAdapter.BOOL.encodeWithTag(writer, 25, value.vip_disable);
      ProtoAdapter.BOOL.encodeWithTag(writer, 26, value.vip_hidden);
      ProtoAdapter.UINT32.encodeWithTag(writer, 27, value.real_name_certification_status);
      ProtoAdapter.BOOL.encodeWithTag(writer, 28, value.is_push_self);
      ProtoAdapter.UINT32.encodeWithTag(writer, 29, value.from_effect_id);
      ProtoAdapter.UINT32.encodeWithTag(writer, 30, value.noble_level);
      ProtoAdapter.UINT32.encodeWithTag(writer, 31, value.special_effect_id);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Message decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setFromUser(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setToUser(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setRoomId(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setCid(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.setMsgSeq(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setTimestamp(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.setMsgType(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.setMsgBody(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.setMsgStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.setMsgExt(ProtoAdapter.BYTES.decode(reader)); break;
          case 11: builder.setFromUserNickName(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.setFromUserLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 13: builder.setFromUserGender(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.setCertification(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.setCertificationType(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.setSupportTxt(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.setRoomType(ProtoAdapter.UINT32.decode(reader)); break;
          case 18: builder.setOriginRoomId(ProtoAdapter.STRING.decode(reader)); break;
          case 19: builder.setMsgCatetory(ProtoAdapter.UINT32.decode(reader)); break;
          case 20: builder.setMultiLanguage(MultiLanguage.ADAPTER.decode(reader)); break;
          case 21: builder.setFromUserShowName(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.setIsFromUserRedname(ProtoAdapter.BOOL.decode(reader)); break;
          case 23: builder.setGlobalRoomMsgExt(GlobalRoomMessageExt.ADAPTER.decode(reader)); break;
          case 24: builder.setVipLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 25: builder.setVipDisable(ProtoAdapter.BOOL.decode(reader)); break;
          case 26: builder.setVipHidden(ProtoAdapter.BOOL.decode(reader)); break;
          case 27: builder.setRealNameCertificationStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 28: builder.setIsPushSelf(ProtoAdapter.BOOL.decode(reader)); break;
          case 29: builder.setFromEffectId(ProtoAdapter.UINT32.decode(reader)); break;
          case 30: builder.setNobleLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 31: builder.setSpecialEffectId(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Message redact(Message value) {
      Builder builder = value.newBuilder();
      if (builder.multi_language != null) builder.multi_language = MultiLanguage.ADAPTER.redact(builder.multi_language);
      if (builder.global_room_msg_ext != null) builder.global_room_msg_ext = GlobalRoomMessageExt.ADAPTER.redact(builder.global_room_msg_ext);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
