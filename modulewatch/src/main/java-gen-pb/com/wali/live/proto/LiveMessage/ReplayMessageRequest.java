// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 回放直播消息请求
 */
public final class ReplayMessageRequest extends Message<ReplayMessageRequest, ReplayMessageRequest.Builder> {
  public static final ProtoAdapter<ReplayMessageRequest> ADAPTER = new ProtoAdapter_ReplayMessageRequest();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_FROM_USER = 0L;

  public static final String DEFAULT_ROOM_ID = "";

  public static final String DEFAULT_PAGE_ID = "";

  public static final Integer DEFAULT_LIMIT = 0;

  public static final Long DEFAULT_CID = 0L;

  public static final Long DEFAULT_TIMESTAMP = 0L;

  /**
   * 消息发送者
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long from_user;

  /**
   * 房间ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String room_id;

  /**
   * 分页拉取ID，第一次传""
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String page_id;

  /**
   * 拉取消息条数
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer limit;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long cid;

  /**
   * 拖动时间戳
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long timestamp;

  public ReplayMessageRequest(Long from_user, String room_id, String page_id, Integer limit,
      Long cid, Long timestamp) {
    this(from_user, room_id, page_id, limit, cid, timestamp, ByteString.EMPTY);
  }

  public ReplayMessageRequest(Long from_user, String room_id, String page_id, Integer limit,
      Long cid, Long timestamp, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.from_user = from_user;
    this.room_id = room_id;
    this.page_id = page_id;
    this.limit = limit;
    this.cid = cid;
    this.timestamp = timestamp;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.from_user = from_user;
    builder.room_id = room_id;
    builder.page_id = page_id;
    builder.limit = limit;
    builder.cid = cid;
    builder.timestamp = timestamp;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ReplayMessageRequest)) return false;
    ReplayMessageRequest o = (ReplayMessageRequest) other;
    return unknownFields().equals(o.unknownFields())
        && from_user.equals(o.from_user)
        && Internal.equals(room_id, o.room_id)
        && Internal.equals(page_id, o.page_id)
        && Internal.equals(limit, o.limit)
        && Internal.equals(cid, o.cid)
        && Internal.equals(timestamp, o.timestamp);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + from_user.hashCode();
      result = result * 37 + (room_id != null ? room_id.hashCode() : 0);
      result = result * 37 + (page_id != null ? page_id.hashCode() : 0);
      result = result * 37 + (limit != null ? limit.hashCode() : 0);
      result = result * 37 + (cid != null ? cid.hashCode() : 0);
      result = result * 37 + (timestamp != null ? timestamp.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", from_user=").append(from_user);
    if (room_id != null) builder.append(", room_id=").append(room_id);
    if (page_id != null) builder.append(", page_id=").append(page_id);
    if (limit != null) builder.append(", limit=").append(limit);
    if (cid != null) builder.append(", cid=").append(cid);
    if (timestamp != null) builder.append(", timestamp=").append(timestamp);
    return builder.replace(0, 2, "ReplayMessageRequest{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ReplayMessageRequest.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<ReplayMessageRequest, Builder> {
    public Long from_user;

    public String room_id;

    public String page_id;

    public Integer limit;

    public Long cid;

    public Long timestamp;

    public Builder() {
    }

    /**
     * 消息发送者
     */
    public Builder setFromUser(Long from_user) {
      this.from_user = from_user;
      return this;
    }

    /**
     * 房间ID
     */
    public Builder setRoomId(String room_id) {
      this.room_id = room_id;
      return this;
    }

    /**
     * 分页拉取ID，第一次传""
     */
    public Builder setPageId(String page_id) {
      this.page_id = page_id;
      return this;
    }

    /**
     * 拉取消息条数
     */
    public Builder setLimit(Integer limit) {
      this.limit = limit;
      return this;
    }

    public Builder setCid(Long cid) {
      this.cid = cid;
      return this;
    }

    /**
     * 拖动时间戳
     */
    public Builder setTimestamp(Long timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    @Override
    public ReplayMessageRequest build() {
      if (from_user == null) {
        throw Internal.missingRequiredFields(from_user, "from_user");
      }
      return new ReplayMessageRequest(from_user, room_id, page_id, limit, cid, timestamp, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ReplayMessageRequest extends ProtoAdapter<ReplayMessageRequest> {
    public ProtoAdapter_ReplayMessageRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, ReplayMessageRequest.class);
    }

    @Override
    public int encodedSize(ReplayMessageRequest value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.from_user)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.room_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.page_id)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.limit)
          + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.cid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(6, value.timestamp)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ReplayMessageRequest value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.from_user);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.room_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.page_id);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.limit);
      ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.cid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.timestamp);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ReplayMessageRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setFromUser(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setRoomId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setPageId(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setLimit(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setCid(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.setTimestamp(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ReplayMessageRequest redact(ReplayMessageRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
