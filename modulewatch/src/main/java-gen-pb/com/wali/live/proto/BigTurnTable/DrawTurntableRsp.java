// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: BigTurnTable.proto
package com.wali.live.proto.BigTurnTable;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class DrawTurntableRsp extends Message<DrawTurntableRsp, DrawTurntableRsp.Builder> {
  public static final ProtoAdapter<DrawTurntableRsp> ADAPTER = new ProtoAdapter_DrawTurntableRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RETCODE = 0;

  public static final Integer DEFAULT_PRIZEINDEX = 0;

  public static final String DEFAULT_PRIZEKEY = "";

  /**
   * 0表示成功
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer retCode;

  /**
   * 奖品索引, 顺序从1点钟方向开始顺时针，index从0开始
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer prizeIndex;

  /**
   * 此次中奖的key,客户端在zhibo.turntable.reward里传这个值用于获取此次抽奖的奖品
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String prizeKey;

  public DrawTurntableRsp(Integer retCode, Integer prizeIndex, String prizeKey) {
    this(retCode, prizeIndex, prizeKey, ByteString.EMPTY);
  }

  public DrawTurntableRsp(Integer retCode, Integer prizeIndex, String prizeKey,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.retCode = retCode;
    this.prizeIndex = prizeIndex;
    this.prizeKey = prizeKey;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.retCode = retCode;
    builder.prizeIndex = prizeIndex;
    builder.prizeKey = prizeKey;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DrawTurntableRsp)) return false;
    DrawTurntableRsp o = (DrawTurntableRsp) other;
    return unknownFields().equals(o.unknownFields())
        && retCode.equals(o.retCode)
        && Internal.equals(prizeIndex, o.prizeIndex)
        && Internal.equals(prizeKey, o.prizeKey);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + retCode.hashCode();
      result = result * 37 + (prizeIndex != null ? prizeIndex.hashCode() : 0);
      result = result * 37 + (prizeKey != null ? prizeKey.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", retCode=").append(retCode);
    if (prizeIndex != null) builder.append(", prizeIndex=").append(prizeIndex);
    if (prizeKey != null) builder.append(", prizeKey=").append(prizeKey);
    return builder.replace(0, 2, "DrawTurntableRsp{").append('}').toString();
  }

  public static final DrawTurntableRsp parseFrom(byte[] data) throws IOException {
    DrawTurntableRsp c = null;
       c = DrawTurntableRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 0表示成功
   */
  public Integer getRetCode() {
    if(retCode==null){
        return DEFAULT_RETCODE;
    }
    return retCode;
  }

  /**
   * 奖品索引, 顺序从1点钟方向开始顺时针，index从0开始
   */
  public Integer getPrizeIndex() {
    if(prizeIndex==null){
        return DEFAULT_PRIZEINDEX;
    }
    return prizeIndex;
  }

  /**
   * 此次中奖的key,客户端在zhibo.turntable.reward里传这个值用于获取此次抽奖的奖品
   */
  public String getPrizeKey() {
    if(prizeKey==null){
        return DEFAULT_PRIZEKEY;
    }
    return prizeKey;
  }

  /**
   * 0表示成功
   */
  public boolean hasRetCode() {
    return retCode!=null;
  }

  /**
   * 奖品索引, 顺序从1点钟方向开始顺时针，index从0开始
   */
  public boolean hasPrizeIndex() {
    return prizeIndex!=null;
  }

  /**
   * 此次中奖的key,客户端在zhibo.turntable.reward里传这个值用于获取此次抽奖的奖品
   */
  public boolean hasPrizeKey() {
    return prizeKey!=null;
  }

  public static final class Builder extends Message.Builder<DrawTurntableRsp, Builder> {
    public Integer retCode;

    public Integer prizeIndex;

    public String prizeKey;

    public Builder() {
    }

    /**
     * 0表示成功
     */
    public Builder setRetCode(Integer retCode) {
      this.retCode = retCode;
      return this;
    }

    /**
     * 奖品索引, 顺序从1点钟方向开始顺时针，index从0开始
     */
    public Builder setPrizeIndex(Integer prizeIndex) {
      this.prizeIndex = prizeIndex;
      return this;
    }

    /**
     * 此次中奖的key,客户端在zhibo.turntable.reward里传这个值用于获取此次抽奖的奖品
     */
    public Builder setPrizeKey(String prizeKey) {
      this.prizeKey = prizeKey;
      return this;
    }

    @Override
    public DrawTurntableRsp build() {
      return new DrawTurntableRsp(retCode, prizeIndex, prizeKey, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DrawTurntableRsp extends ProtoAdapter<DrawTurntableRsp> {
    public ProtoAdapter_DrawTurntableRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, DrawTurntableRsp.class);
    }

    @Override
    public int encodedSize(DrawTurntableRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.retCode)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.prizeIndex)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.prizeKey)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, DrawTurntableRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.retCode);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.prizeIndex);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.prizeKey);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DrawTurntableRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRetCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setPrizeIndex(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.setPrizeKey(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public DrawTurntableRsp redact(DrawTurntableRsp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
