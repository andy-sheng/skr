// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
 * --proto_path=./proto --java_out=./modulewatch/src/main/java-gen-pb/ LiveMessage.proto
 * option java_multiple_files = true;
 * wiki地址：http://wiki.n.miui.com/pages/viewpage.action?pageId=18997331
 * 发送消息请求：包括私信，礼物消息，赞消息，聊天室消息等
 * 消息类型：
 * 100 私信
 * 200 设置管理员消息
 * 201 取消管理员消息
 * 205 消息频率控制等消息
 *
 * 302 房间礼物消息
 * 303 房间文本消息
 * 304 房间禁言消息
 * 307 房间取消禁言消息
 * 305 房间点赞消息
 * 306 房间收费弹幕消息
 *
 * 311 房间观众变化消息
 *
 * 320 加入房间消息
 * 321 离开房间消息
 *
 * 322 主播离开房间
 * 323 主播回到房间
 *
 * 330 开始直播消息
 * 331 结束直播消息
 *
 * 400 全局通知消息
 * 401 房间通知消息
 * 402 主播通知消息
 * ...
 * 私信请求
 */
public final class ChatMessageRequest extends Message<ChatMessageRequest, ChatMessageRequest.Builder> {
  public static final ProtoAdapter<ChatMessageRequest> ADAPTER = new ProtoAdapter_ChatMessageRequest();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_FROM_USER = 0L;

  public static final Long DEFAULT_TO_USER = 0L;

  public static final Long DEFAULT_CID = 0L;

  public static final Integer DEFAULT_MSG_TYPE = 0;

  public static final String DEFAULT_MSG_BODY = "";

  public static final ByteString DEFAULT_MSG_EXT = ByteString.EMPTY;

  /**
   * 消息发送者
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long from_user;

  /**
   * 消息接收者
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long to_user;

  /**
   * 客户端消息ID，客户端去重使用
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long cid;

  /**
   * 根据msg_type扩展msg_ext字段结构
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer msg_type;

  /**
   * 文本消息的消息体
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String msg_body;

  /**
   * 消息扩展pb，跟msg_type对应
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString msg_ext;

  public ChatMessageRequest(Long from_user, Long to_user, Long cid, Integer msg_type,
      String msg_body, ByteString msg_ext) {
    this(from_user, to_user, cid, msg_type, msg_body, msg_ext, ByteString.EMPTY);
  }

  public ChatMessageRequest(Long from_user, Long to_user, Long cid, Integer msg_type,
      String msg_body, ByteString msg_ext, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.from_user = from_user;
    this.to_user = to_user;
    this.cid = cid;
    this.msg_type = msg_type;
    this.msg_body = msg_body;
    this.msg_ext = msg_ext;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.from_user = from_user;
    builder.to_user = to_user;
    builder.cid = cid;
    builder.msg_type = msg_type;
    builder.msg_body = msg_body;
    builder.msg_ext = msg_ext;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChatMessageRequest)) return false;
    ChatMessageRequest o = (ChatMessageRequest) other;
    return unknownFields().equals(o.unknownFields())
        && from_user.equals(o.from_user)
        && Internal.equals(to_user, o.to_user)
        && Internal.equals(cid, o.cid)
        && Internal.equals(msg_type, o.msg_type)
        && Internal.equals(msg_body, o.msg_body)
        && Internal.equals(msg_ext, o.msg_ext);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + from_user.hashCode();
      result = result * 37 + (to_user != null ? to_user.hashCode() : 0);
      result = result * 37 + (cid != null ? cid.hashCode() : 0);
      result = result * 37 + (msg_type != null ? msg_type.hashCode() : 0);
      result = result * 37 + (msg_body != null ? msg_body.hashCode() : 0);
      result = result * 37 + (msg_ext != null ? msg_ext.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", from_user=").append(from_user);
    if (to_user != null) builder.append(", to_user=").append(to_user);
    if (cid != null) builder.append(", cid=").append(cid);
    if (msg_type != null) builder.append(", msg_type=").append(msg_type);
    if (msg_body != null) builder.append(", msg_body=").append(msg_body);
    if (msg_ext != null) builder.append(", msg_ext=").append(msg_ext);
    return builder.replace(0, 2, "ChatMessageRequest{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ChatMessageRequest.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<ChatMessageRequest, Builder> {
    public Long from_user;

    public Long to_user;

    public Long cid;

    public Integer msg_type;

    public String msg_body;

    public ByteString msg_ext;

    public Builder() {
    }

    /**
     * 消息发送者
     */
    public Builder setFromUser(Long from_user) {
      this.from_user = from_user;
      return this;
    }

    /**
     * 消息接收者
     */
    public Builder setToUser(Long to_user) {
      this.to_user = to_user;
      return this;
    }

    /**
     * 客户端消息ID，客户端去重使用
     */
    public Builder setCid(Long cid) {
      this.cid = cid;
      return this;
    }

    /**
     * 根据msg_type扩展msg_ext字段结构
     */
    public Builder setMsgType(Integer msg_type) {
      this.msg_type = msg_type;
      return this;
    }

    /**
     * 文本消息的消息体
     */
    public Builder setMsgBody(String msg_body) {
      this.msg_body = msg_body;
      return this;
    }

    /**
     * 消息扩展pb，跟msg_type对应
     */
    public Builder setMsgExt(ByteString msg_ext) {
      this.msg_ext = msg_ext;
      return this;
    }

    @Override
    public ChatMessageRequest build() {
      if (from_user == null) {
        throw Internal.missingRequiredFields(from_user, "from_user");
      }
      return new ChatMessageRequest(from_user, to_user, cid, msg_type, msg_body, msg_ext, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ChatMessageRequest extends ProtoAdapter<ChatMessageRequest> {
    public ProtoAdapter_ChatMessageRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, ChatMessageRequest.class);
    }

    @Override
    public int encodedSize(ChatMessageRequest value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.from_user)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.to_user)
          + ProtoAdapter.UINT64.encodedSizeWithTag(3, value.cid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.msg_type)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.msg_body)
          + ProtoAdapter.BYTES.encodedSizeWithTag(6, value.msg_ext)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ChatMessageRequest value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.from_user);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.to_user);
      ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.cid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.msg_type);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.msg_body);
      ProtoAdapter.BYTES.encodeWithTag(writer, 6, value.msg_ext);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ChatMessageRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setFromUser(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setToUser(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setCid(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.setMsgType(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setMsgBody(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setMsgExt(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ChatMessageRequest redact(ChatMessageRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
