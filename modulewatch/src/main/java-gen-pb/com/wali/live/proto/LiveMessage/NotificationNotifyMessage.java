// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class NotificationNotifyMessage extends Message<NotificationNotifyMessage, NotificationNotifyMessage.Builder> {
  public static final ProtoAdapter<NotificationNotifyMessage> ADAPTER = new ProtoAdapter_NotificationNotifyMessage();

  private static final long serialVersionUID = 0L;

  public static final NotificationType DEFAULT_TYPE = NotificationType.SYSTEM;

  public static final ByteString DEFAULT_NOTIFICATION = ByteString.EMPTY;

  @WireField(
      tag = 1,
      adapter = "com.wali.live.proto.LiveMessage.NotificationType#ADAPTER"
  )
  public final NotificationType type;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString notification;

  public NotificationNotifyMessage(NotificationType type, ByteString notification) {
    this(type, notification, ByteString.EMPTY);
  }

  public NotificationNotifyMessage(NotificationType type, ByteString notification,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.notification = notification;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.notification = notification;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof NotificationNotifyMessage)) return false;
    NotificationNotifyMessage o = (NotificationNotifyMessage) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(type, o.type)
        && Internal.equals(notification, o.notification);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (notification != null ? notification.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (type != null) builder.append(", type=").append(type);
    if (notification != null) builder.append(", notification=").append(notification);
    return builder.replace(0, 2, "NotificationNotifyMessage{").append('}').toString();
  }

  public byte[] toByteArray() {
    return NotificationNotifyMessage.ADAPTER.encode(this);
  }

  public static final NotificationNotifyMessage parseFrom(byte[] data) throws IOException {
    NotificationNotifyMessage c = null;
       c = NotificationNotifyMessage.ADAPTER.decode(data);
    return c;
  }

  public NotificationType getType() {
    if(type==null){
        return new NotificationType.Builder().build();
    }
    return type;
  }

  public ByteString getNotification() {
    if(notification==null){
        return ByteString.of(new byte[0]);
    }
    return notification;
  }

  public boolean hasType() {
    return type!=null;
  }

  public boolean hasNotification() {
    return notification!=null;
  }

  public static final class Builder extends Message.Builder<NotificationNotifyMessage, Builder> {
    public NotificationType type;

    public ByteString notification;

    public Builder() {
    }

    public Builder setType(NotificationType type) {
      this.type = type;
      return this;
    }

    public Builder setNotification(ByteString notification) {
      this.notification = notification;
      return this;
    }

    @Override
    public NotificationNotifyMessage build() {
      return new NotificationNotifyMessage(type, notification, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_NotificationNotifyMessage extends ProtoAdapter<NotificationNotifyMessage> {
    public ProtoAdapter_NotificationNotifyMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, NotificationNotifyMessage.class);
    }

    @Override
    public int encodedSize(NotificationNotifyMessage value) {
      return NotificationType.ADAPTER.encodedSizeWithTag(1, value.type)
          + ProtoAdapter.BYTES.encodedSizeWithTag(2, value.notification)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, NotificationNotifyMessage value) throws IOException {
      NotificationType.ADAPTER.encodeWithTag(writer, 1, value.type);
      ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.notification);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public NotificationNotifyMessage decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.setType(NotificationType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.setNotification(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public NotificationNotifyMessage redact(NotificationNotifyMessage value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
