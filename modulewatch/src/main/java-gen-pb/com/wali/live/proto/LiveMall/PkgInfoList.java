// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMall.proto
package com.wali.live.proto.LiveMall;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class PkgInfoList extends Message<PkgInfoList, PkgInfoList.Builder> {
  public static final ProtoAdapter<PkgInfoList> ADAPTER = new ProtoAdapter_PkgInfoList();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ITEM_NAME = "";

  /**
   * 一级分类名称
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String item_name;

  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LiveMall.PkgInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PkgInfo> pkg_info;

  public PkgInfoList(String item_name, List<PkgInfo> pkg_info) {
    this(item_name, pkg_info, ByteString.EMPTY);
  }

  public PkgInfoList(String item_name, List<PkgInfo> pkg_info, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.item_name = item_name;
    this.pkg_info = Internal.immutableCopyOf("pkg_info", pkg_info);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.item_name = item_name;
    builder.pkg_info = Internal.copyOf("pkg_info", pkg_info);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PkgInfoList)) return false;
    PkgInfoList o = (PkgInfoList) other;
    return unknownFields().equals(o.unknownFields())
        && item_name.equals(o.item_name)
        && pkg_info.equals(o.pkg_info);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + item_name.hashCode();
      result = result * 37 + pkg_info.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", item_name=").append(item_name);
    if (!pkg_info.isEmpty()) builder.append(", pkg_info=").append(pkg_info);
    return builder.replace(0, 2, "PkgInfoList{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PkgInfoList.ADAPTER.encode(this);
  }

  public static final PkgInfoList parseFrom(byte[] data) throws IOException {
    PkgInfoList c = null;
       c = PkgInfoList.ADAPTER.decode(data);
    return c;
  }

  /**
   * 一级分类名称
   */
  public String getItemName() {
    if(item_name==null){
        return DEFAULT_ITEM_NAME;
    }
    return item_name;
  }

  public List<PkgInfo> getPkgInfoList() {
    if(pkg_info==null){
        return new java.util.ArrayList<PkgInfo>();
    }
    return pkg_info;
  }

  /**
   * 一级分类名称
   */
  public boolean hasItemName() {
    return item_name!=null;
  }

  public boolean hasPkgInfoList() {
    return pkg_info!=null;
  }

  public static final class Builder extends Message.Builder<PkgInfoList, Builder> {
    public String item_name;

    public List<PkgInfo> pkg_info;

    public Builder() {
      pkg_info = Internal.newMutableList();
    }

    /**
     * 一级分类名称
     */
    public Builder setItemName(String item_name) {
      this.item_name = item_name;
      return this;
    }

    public Builder addAllPkgInfo(List<PkgInfo> pkg_info) {
      Internal.checkElementsNotNull(pkg_info);
      this.pkg_info = pkg_info;
      return this;
    }

    @Override
    public PkgInfoList build() {
      return new PkgInfoList(item_name, pkg_info, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PkgInfoList extends ProtoAdapter<PkgInfoList> {
    public ProtoAdapter_PkgInfoList() {
      super(FieldEncoding.LENGTH_DELIMITED, PkgInfoList.class);
    }

    @Override
    public int encodedSize(PkgInfoList value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.item_name)
          + PkgInfo.ADAPTER.asRepeated().encodedSizeWithTag(2, value.pkg_info)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PkgInfoList value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.item_name);
      PkgInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.pkg_info);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PkgInfoList decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setItemName(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.pkg_info.add(PkgInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PkgInfoList redact(PkgInfoList value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.pkg_info, PkgInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
