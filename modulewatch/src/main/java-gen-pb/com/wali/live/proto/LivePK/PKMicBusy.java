// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LivePk.proto
package com.wali.live.proto.LivePK;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PKMicBusy extends Message<PKMicBusy, PKMicBusy.Builder> {
  public static final ProtoAdapter<PKMicBusy> ADAPTER = new ProtoAdapter_PKMicBusy();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UUID = 0L;

  public static final Long DEFAULT_LIVEID = 0L;

  public static final Long DEFAULT_INVITE_UUID = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final String DEFAULT_NICKNAME = "";

  /**
   * 处于busy状态的用户id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long uuid;

  /**
   * 处于busy状态的liveid
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long liveid;

  /**
   * 发起用户id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long invite_uuid;

  /**
   * 发起用户所在房间主播id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long zuid;

  /**
   * 处于busy状态的用户昵称
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nickname;

  public PKMicBusy(Long uuid, Long liveid, Long invite_uuid, Long zuid, String nickname) {
    this(uuid, liveid, invite_uuid, zuid, nickname, ByteString.EMPTY);
  }

  public PKMicBusy(Long uuid, Long liveid, Long invite_uuid, Long zuid, String nickname,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.uuid = uuid;
    this.liveid = liveid;
    this.invite_uuid = invite_uuid;
    this.zuid = zuid;
    this.nickname = nickname;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.uuid = uuid;
    builder.liveid = liveid;
    builder.invite_uuid = invite_uuid;
    builder.zuid = zuid;
    builder.nickname = nickname;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PKMicBusy)) return false;
    PKMicBusy o = (PKMicBusy) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(uuid, o.uuid)
        && Internal.equals(liveid, o.liveid)
        && Internal.equals(invite_uuid, o.invite_uuid)
        && Internal.equals(zuid, o.zuid)
        && Internal.equals(nickname, o.nickname);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (uuid != null ? uuid.hashCode() : 0);
      result = result * 37 + (liveid != null ? liveid.hashCode() : 0);
      result = result * 37 + (invite_uuid != null ? invite_uuid.hashCode() : 0);
      result = result * 37 + (zuid != null ? zuid.hashCode() : 0);
      result = result * 37 + (nickname != null ? nickname.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (uuid != null) builder.append(", uuid=").append(uuid);
    if (liveid != null) builder.append(", liveid=").append(liveid);
    if (invite_uuid != null) builder.append(", invite_uuid=").append(invite_uuid);
    if (zuid != null) builder.append(", zuid=").append(zuid);
    if (nickname != null) builder.append(", nickname=").append(nickname);
    return builder.replace(0, 2, "PKMicBusy{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PKMicBusy.ADAPTER.encode(this);
  }

  public static final PKMicBusy parseFrom(byte[] data) throws IOException {
    PKMicBusy c = null;
       c = PKMicBusy.ADAPTER.decode(data);
    return c;
  }

  /**
   * 处于busy状态的用户id
   */
  public Long getUuid() {
    if(uuid==null){
        return DEFAULT_UUID;
    }
    return uuid;
  }

  /**
   * 处于busy状态的liveid
   */
  public Long getLiveid() {
    if(liveid==null){
        return DEFAULT_LIVEID;
    }
    return liveid;
  }

  /**
   * 发起用户id
   */
  public Long getInviteUuid() {
    if(invite_uuid==null){
        return DEFAULT_INVITE_UUID;
    }
    return invite_uuid;
  }

  /**
   * 发起用户所在房间主播id
   */
  public Long getZuid() {
    if(zuid==null){
        return DEFAULT_ZUID;
    }
    return zuid;
  }

  /**
   * 处于busy状态的用户昵称
   */
  public String getNickname() {
    if(nickname==null){
        return DEFAULT_NICKNAME;
    }
    return nickname;
  }

  /**
   * 处于busy状态的用户id
   */
  public boolean hasUuid() {
    return uuid!=null;
  }

  /**
   * 处于busy状态的liveid
   */
  public boolean hasLiveid() {
    return liveid!=null;
  }

  /**
   * 发起用户id
   */
  public boolean hasInviteUuid() {
    return invite_uuid!=null;
  }

  /**
   * 发起用户所在房间主播id
   */
  public boolean hasZuid() {
    return zuid!=null;
  }

  /**
   * 处于busy状态的用户昵称
   */
  public boolean hasNickname() {
    return nickname!=null;
  }

  public static final class Builder extends Message.Builder<PKMicBusy, Builder> {
    public Long uuid;

    public Long liveid;

    public Long invite_uuid;

    public Long zuid;

    public String nickname;

    public Builder() {
    }

    /**
     * 处于busy状态的用户id
     */
    public Builder setUuid(Long uuid) {
      this.uuid = uuid;
      return this;
    }

    /**
     * 处于busy状态的liveid
     */
    public Builder setLiveid(Long liveid) {
      this.liveid = liveid;
      return this;
    }

    /**
     * 发起用户id
     */
    public Builder setInviteUuid(Long invite_uuid) {
      this.invite_uuid = invite_uuid;
      return this;
    }

    /**
     * 发起用户所在房间主播id
     */
    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * 处于busy状态的用户昵称
     */
    public Builder setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    @Override
    public PKMicBusy build() {
      return new PKMicBusy(uuid, liveid, invite_uuid, zuid, nickname, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PKMicBusy extends ProtoAdapter<PKMicBusy> {
    public ProtoAdapter_PKMicBusy() {
      super(FieldEncoding.LENGTH_DELIMITED, PKMicBusy.class);
    }

    @Override
    public int encodedSize(PKMicBusy value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.uuid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.liveid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(3, value.invite_uuid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.zuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.nickname)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PKMicBusy value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.uuid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.liveid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.invite_uuid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.zuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.nickname);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PKMicBusy decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setLiveid(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setInviteUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.setNickname(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PKMicBusy redact(PKMicBusy value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
