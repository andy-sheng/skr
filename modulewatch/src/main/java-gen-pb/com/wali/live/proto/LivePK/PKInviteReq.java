// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LivePk.proto
package com.wali.live.proto.LivePK;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * zhibo.live.pkinvite
 */
public final class PKInviteReq extends Message<PKInviteReq, PKInviteReq.Builder> {
  public static final ProtoAdapter<PKInviteReq> ADAPTER = new ProtoAdapter_PKInviteReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UUID = 0L;

  public static final String DEFAULT_LIVEID = "";

  public static final Long DEFAULT_PK_UUID = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  public static final Long DEFAULT_ADMIN_UUID = 0L;

  /**
   * 发起的主播id（场控发起传场控id）
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long uuid;

  /**
   * 发起的主播房间号（场控发起传进入的房间号）
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String liveid;

  /**
   * 被pk用户id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long pk_uuid;

  /**
   * 0:主播邀请 1：场控邀请
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  /**
   * 设置
   */
  @WireField(
      tag = 5,
      adapter = "com.wali.live.proto.LivePK.PKSetting#ADAPTER"
  )
  public final PKSetting setting;

  /**
   * 场控id
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long admin_uuid;

  public PKInviteReq(Long uuid, String liveid, Long pk_uuid, Integer type, PKSetting setting,
      Long admin_uuid) {
    this(uuid, liveid, pk_uuid, type, setting, admin_uuid, ByteString.EMPTY);
  }

  public PKInviteReq(Long uuid, String liveid, Long pk_uuid, Integer type, PKSetting setting,
      Long admin_uuid, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.uuid = uuid;
    this.liveid = liveid;
    this.pk_uuid = pk_uuid;
    this.type = type;
    this.setting = setting;
    this.admin_uuid = admin_uuid;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.uuid = uuid;
    builder.liveid = liveid;
    builder.pk_uuid = pk_uuid;
    builder.type = type;
    builder.setting = setting;
    builder.admin_uuid = admin_uuid;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PKInviteReq)) return false;
    PKInviteReq o = (PKInviteReq) other;
    return unknownFields().equals(o.unknownFields())
        && uuid.equals(o.uuid)
        && liveid.equals(o.liveid)
        && pk_uuid.equals(o.pk_uuid)
        && Internal.equals(type, o.type)
        && Internal.equals(setting, o.setting)
        && Internal.equals(admin_uuid, o.admin_uuid);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + uuid.hashCode();
      result = result * 37 + liveid.hashCode();
      result = result * 37 + pk_uuid.hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (setting != null ? setting.hashCode() : 0);
      result = result * 37 + (admin_uuid != null ? admin_uuid.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", uuid=").append(uuid);
    builder.append(", liveid=").append(liveid);
    builder.append(", pk_uuid=").append(pk_uuid);
    if (type != null) builder.append(", type=").append(type);
    if (setting != null) builder.append(", setting=").append(setting);
    if (admin_uuid != null) builder.append(", admin_uuid=").append(admin_uuid);
    return builder.replace(0, 2, "PKInviteReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PKInviteReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<PKInviteReq, Builder> {
    public Long uuid;

    public String liveid;

    public Long pk_uuid;

    public Integer type;

    public PKSetting setting;

    public Long admin_uuid;

    public Builder() {
    }

    /**
     * 发起的主播id（场控发起传场控id）
     */
    public Builder setUuid(Long uuid) {
      this.uuid = uuid;
      return this;
    }

    /**
     * 发起的主播房间号（场控发起传进入的房间号）
     */
    public Builder setLiveid(String liveid) {
      this.liveid = liveid;
      return this;
    }

    /**
     * 被pk用户id
     */
    public Builder setPkUuid(Long pk_uuid) {
      this.pk_uuid = pk_uuid;
      return this;
    }

    /**
     * 0:主播邀请 1：场控邀请
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 设置
     */
    public Builder setSetting(PKSetting setting) {
      this.setting = setting;
      return this;
    }

    /**
     * 场控id
     */
    public Builder setAdminUuid(Long admin_uuid) {
      this.admin_uuid = admin_uuid;
      return this;
    }

    @Override
    public PKInviteReq build() {
      if (uuid == null
          || liveid == null
          || pk_uuid == null) {
        throw Internal.missingRequiredFields(uuid, "uuid",
            liveid, "liveid",
            pk_uuid, "pk_uuid");
      }
      return new PKInviteReq(uuid, liveid, pk_uuid, type, setting, admin_uuid, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PKInviteReq extends ProtoAdapter<PKInviteReq> {
    public ProtoAdapter_PKInviteReq() {
      super(FieldEncoding.LENGTH_DELIMITED, PKInviteReq.class);
    }

    @Override
    public int encodedSize(PKInviteReq value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.uuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.liveid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(3, value.pk_uuid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.type)
          + PKSetting.ADAPTER.encodedSizeWithTag(5, value.setting)
          + ProtoAdapter.UINT64.encodedSizeWithTag(6, value.admin_uuid)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PKInviteReq value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.uuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.liveid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.pk_uuid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.type);
      PKSetting.ADAPTER.encodeWithTag(writer, 5, value.setting);
      ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.admin_uuid);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PKInviteReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setLiveid(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setPkUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setSetting(PKSetting.ADAPTER.decode(reader)); break;
          case 6: builder.setAdminUuid(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PKInviteReq redact(PKInviteReq value) {
      Builder builder = value.newBuilder();
      if (builder.setting != null) builder.setting = PKSetting.ADAPTER.redact(builder.setting);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
