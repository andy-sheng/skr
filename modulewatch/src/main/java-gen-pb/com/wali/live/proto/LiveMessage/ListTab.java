// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class ListTab extends Message<ListTab, ListTab.Builder> {
  public static final ProtoAdapter<ListTab> ADAPTER = new ProtoAdapter_ListTab();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_LIST_NAME = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String list_name;

  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LiveMessage.ListTabItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ListTabItem> item;

  public ListTab(String list_name, List<ListTabItem> item) {
    this(list_name, item, ByteString.EMPTY);
  }

  public ListTab(String list_name, List<ListTabItem> item, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.list_name = list_name;
    this.item = Internal.immutableCopyOf("item", item);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.list_name = list_name;
    builder.item = Internal.copyOf("item", item);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ListTab)) return false;
    ListTab o = (ListTab) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(list_name, o.list_name)
        && item.equals(o.item);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (list_name != null ? list_name.hashCode() : 0);
      result = result * 37 + item.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (list_name != null) builder.append(", list_name=").append(list_name);
    if (!item.isEmpty()) builder.append(", item=").append(item);
    return builder.replace(0, 2, "ListTab{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ListTab.ADAPTER.encode(this);
  }

  public static final ListTab parseFrom(byte[] data) throws IOException {
    ListTab c = null;
       c = ListTab.ADAPTER.decode(data);
    return c;
  }

  public String getListName() {
    if(list_name==null){
        return DEFAULT_LIST_NAME;
    }
    return list_name;
  }

  public List<ListTabItem> getItemList() {
    if(item==null){
        return new java.util.ArrayList<ListTabItem>();
    }
    return item;
  }

  public boolean hasListName() {
    return list_name!=null;
  }

  public boolean hasItemList() {
    return item!=null;
  }

  public static final class Builder extends Message.Builder<ListTab, Builder> {
    public String list_name;

    public List<ListTabItem> item;

    public Builder() {
      item = Internal.newMutableList();
    }

    public Builder setListName(String list_name) {
      this.list_name = list_name;
      return this;
    }

    public Builder addAllItem(List<ListTabItem> item) {
      Internal.checkElementsNotNull(item);
      this.item = item;
      return this;
    }

    @Override
    public ListTab build() {
      return new ListTab(list_name, item, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ListTab extends ProtoAdapter<ListTab> {
    public ProtoAdapter_ListTab() {
      super(FieldEncoding.LENGTH_DELIMITED, ListTab.class);
    }

    @Override
    public int encodedSize(ListTab value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.list_name)
          + ListTabItem.ADAPTER.asRepeated().encodedSizeWithTag(2, value.item)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ListTab value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.list_name);
      ListTabItem.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.item);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ListTab decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setListName(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.item.add(ListTabItem.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ListTab redact(ListTab value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.item, ListTabItem.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
