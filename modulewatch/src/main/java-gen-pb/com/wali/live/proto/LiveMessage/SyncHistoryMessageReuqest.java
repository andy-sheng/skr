// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 拉去某个用户的历史消息，目前只支持999号客服，最多100条
 */
public final class SyncHistoryMessageReuqest extends Message<SyncHistoryMessageReuqest, SyncHistoryMessageReuqest.Builder> {
  public static final ProtoAdapter<SyncHistoryMessageReuqest> ADAPTER = new ProtoAdapter_SyncHistoryMessageReuqest();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_FROM_USER = 0L;

  public static final Long DEFAULT_SYNC_USER = 0L;

  /**
   * 当前用户的id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long from_user;

  /**
   * 目前只支持999号客服
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long sync_user;

  public SyncHistoryMessageReuqest(Long from_user, Long sync_user) {
    this(from_user, sync_user, ByteString.EMPTY);
  }

  public SyncHistoryMessageReuqest(Long from_user, Long sync_user, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.from_user = from_user;
    this.sync_user = sync_user;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.from_user = from_user;
    builder.sync_user = sync_user;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SyncHistoryMessageReuqest)) return false;
    SyncHistoryMessageReuqest o = (SyncHistoryMessageReuqest) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(from_user, o.from_user)
        && Internal.equals(sync_user, o.sync_user);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (from_user != null ? from_user.hashCode() : 0);
      result = result * 37 + (sync_user != null ? sync_user.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (from_user != null) builder.append(", from_user=").append(from_user);
    if (sync_user != null) builder.append(", sync_user=").append(sync_user);
    return builder.replace(0, 2, "SyncHistoryMessageReuqest{").append('}').toString();
  }

  public byte[] toByteArray() {
    return SyncHistoryMessageReuqest.ADAPTER.encode(this);
  }

  public static final SyncHistoryMessageReuqest parseFrom(byte[] data) throws IOException {
    SyncHistoryMessageReuqest c = null;
       c = SyncHistoryMessageReuqest.ADAPTER.decode(data);
    return c;
  }

  /**
   * 当前用户的id
   */
  public Long getFromUser() {
    if(from_user==null){
        return DEFAULT_FROM_USER;
    }
    return from_user;
  }

  /**
   * 目前只支持999号客服
   */
  public Long getSyncUser() {
    if(sync_user==null){
        return DEFAULT_SYNC_USER;
    }
    return sync_user;
  }

  /**
   * 当前用户的id
   */
  public boolean hasFromUser() {
    return from_user!=null;
  }

  /**
   * 目前只支持999号客服
   */
  public boolean hasSyncUser() {
    return sync_user!=null;
  }

  public static final class Builder extends Message.Builder<SyncHistoryMessageReuqest, Builder> {
    public Long from_user;

    public Long sync_user;

    public Builder() {
    }

    /**
     * 当前用户的id
     */
    public Builder setFromUser(Long from_user) {
      this.from_user = from_user;
      return this;
    }

    /**
     * 目前只支持999号客服
     */
    public Builder setSyncUser(Long sync_user) {
      this.sync_user = sync_user;
      return this;
    }

    @Override
    public SyncHistoryMessageReuqest build() {
      return new SyncHistoryMessageReuqest(from_user, sync_user, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SyncHistoryMessageReuqest extends ProtoAdapter<SyncHistoryMessageReuqest> {
    public ProtoAdapter_SyncHistoryMessageReuqest() {
      super(FieldEncoding.LENGTH_DELIMITED, SyncHistoryMessageReuqest.class);
    }

    @Override
    public int encodedSize(SyncHistoryMessageReuqest value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.from_user)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.sync_user)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SyncHistoryMessageReuqest value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.from_user);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.sync_user);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SyncHistoryMessageReuqest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setFromUser(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setSyncUser(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SyncHistoryMessageReuqest redact(SyncHistoryMessageReuqest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
