// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 修改房间信息消息
 */
public final class LiveInfoChangeMsg extends Message<LiveInfoChangeMsg, LiveInfoChangeMsg.Builder> {
  public static final ProtoAdapter<LiveInfoChangeMsg> ADAPTER = new ProtoAdapter_LiveInfoChangeMsg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_MOD_FLAG = 0L;

  public static final Long DEFAULT_ZUID = 0L;

  public static final String DEFAULT_LIVE_ID = "";

  public static final Boolean DEFAULT_ENABLE_VIEWER_MIC = false;

  public static final String DEFAULT_TITLE = "";

  /**
   * 修改标记位（按位表示，从最低位起） 1-观众端发起连麦开关
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long mod_flag;

  /**
   * 主播id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long zuid;

  /**
   * 房间号
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String live_id;

  /**
   * 是否允许观众端发起连麦（true：允许）
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean enable_viewer_mic;

  /**
   * 房间标题
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  public LiveInfoChangeMsg(Long mod_flag, Long zuid, String live_id, Boolean enable_viewer_mic,
      String title) {
    this(mod_flag, zuid, live_id, enable_viewer_mic, title, ByteString.EMPTY);
  }

  public LiveInfoChangeMsg(Long mod_flag, Long zuid, String live_id, Boolean enable_viewer_mic,
      String title, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.mod_flag = mod_flag;
    this.zuid = zuid;
    this.live_id = live_id;
    this.enable_viewer_mic = enable_viewer_mic;
    this.title = title;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.mod_flag = mod_flag;
    builder.zuid = zuid;
    builder.live_id = live_id;
    builder.enable_viewer_mic = enable_viewer_mic;
    builder.title = title;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LiveInfoChangeMsg)) return false;
    LiveInfoChangeMsg o = (LiveInfoChangeMsg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(mod_flag, o.mod_flag)
        && Internal.equals(zuid, o.zuid)
        && Internal.equals(live_id, o.live_id)
        && Internal.equals(enable_viewer_mic, o.enable_viewer_mic)
        && Internal.equals(title, o.title);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (mod_flag != null ? mod_flag.hashCode() : 0);
      result = result * 37 + (zuid != null ? zuid.hashCode() : 0);
      result = result * 37 + (live_id != null ? live_id.hashCode() : 0);
      result = result * 37 + (enable_viewer_mic != null ? enable_viewer_mic.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (mod_flag != null) builder.append(", mod_flag=").append(mod_flag);
    if (zuid != null) builder.append(", zuid=").append(zuid);
    if (live_id != null) builder.append(", live_id=").append(live_id);
    if (enable_viewer_mic != null) builder.append(", enable_viewer_mic=").append(enable_viewer_mic);
    if (title != null) builder.append(", title=").append(title);
    return builder.replace(0, 2, "LiveInfoChangeMsg{").append('}').toString();
  }

  public byte[] toByteArray() {
    return LiveInfoChangeMsg.ADAPTER.encode(this);
  }

  public static final LiveInfoChangeMsg parseFrom(byte[] data) throws IOException {
    LiveInfoChangeMsg c = null;
       c = LiveInfoChangeMsg.ADAPTER.decode(data);
    return c;
  }

  /**
   * 修改标记位（按位表示，从最低位起） 1-观众端发起连麦开关
   */
  public Long getModFlag() {
    if(mod_flag==null){
        return DEFAULT_MOD_FLAG;
    }
    return mod_flag;
  }

  /**
   * 主播id
   */
  public Long getZuid() {
    if(zuid==null){
        return DEFAULT_ZUID;
    }
    return zuid;
  }

  /**
   * 房间号
   */
  public String getLiveId() {
    if(live_id==null){
        return DEFAULT_LIVE_ID;
    }
    return live_id;
  }

  /**
   * 是否允许观众端发起连麦（true：允许）
   */
  public Boolean getEnableViewerMic() {
    if(enable_viewer_mic==null){
        return DEFAULT_ENABLE_VIEWER_MIC;
    }
    return enable_viewer_mic;
  }

  /**
   * 房间标题
   */
  public String getTitle() {
    if(title==null){
        return DEFAULT_TITLE;
    }
    return title;
  }

  /**
   * 修改标记位（按位表示，从最低位起） 1-观众端发起连麦开关
   */
  public boolean hasModFlag() {
    return mod_flag!=null;
  }

  /**
   * 主播id
   */
  public boolean hasZuid() {
    return zuid!=null;
  }

  /**
   * 房间号
   */
  public boolean hasLiveId() {
    return live_id!=null;
  }

  /**
   * 是否允许观众端发起连麦（true：允许）
   */
  public boolean hasEnableViewerMic() {
    return enable_viewer_mic!=null;
  }

  /**
   * 房间标题
   */
  public boolean hasTitle() {
    return title!=null;
  }

  public static final class Builder extends Message.Builder<LiveInfoChangeMsg, Builder> {
    public Long mod_flag;

    public Long zuid;

    public String live_id;

    public Boolean enable_viewer_mic;

    public String title;

    public Builder() {
    }

    /**
     * 修改标记位（按位表示，从最低位起） 1-观众端发起连麦开关
     */
    public Builder setModFlag(Long mod_flag) {
      this.mod_flag = mod_flag;
      return this;
    }

    /**
     * 主播id
     */
    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    /**
     * 房间号
     */
    public Builder setLiveId(String live_id) {
      this.live_id = live_id;
      return this;
    }

    /**
     * 是否允许观众端发起连麦（true：允许）
     */
    public Builder setEnableViewerMic(Boolean enable_viewer_mic) {
      this.enable_viewer_mic = enable_viewer_mic;
      return this;
    }

    /**
     * 房间标题
     */
    public Builder setTitle(String title) {
      this.title = title;
      return this;
    }

    @Override
    public LiveInfoChangeMsg build() {
      return new LiveInfoChangeMsg(mod_flag, zuid, live_id, enable_viewer_mic, title, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_LiveInfoChangeMsg extends ProtoAdapter<LiveInfoChangeMsg> {
    public ProtoAdapter_LiveInfoChangeMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, LiveInfoChangeMsg.class);
    }

    @Override
    public int encodedSize(LiveInfoChangeMsg value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.mod_flag)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.zuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.live_id)
          + ProtoAdapter.BOOL.encodedSizeWithTag(4, value.enable_viewer_mic)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.title)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, LiveInfoChangeMsg value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.mod_flag);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.zuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.live_id);
      ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.enable_viewer_mic);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.title);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public LiveInfoChangeMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setModFlag(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.setLiveId(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setEnableViewerMic(ProtoAdapter.BOOL.decode(reader)); break;
          case 5: builder.setTitle(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public LiveInfoChangeMsg redact(LiveInfoChangeMsg value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
