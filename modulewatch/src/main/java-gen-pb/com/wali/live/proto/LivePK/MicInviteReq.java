// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LivePk.proto
package com.wali.live.proto.LivePK;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
 * --proto_path=./proto --java_out=./modulewatch/src/main/java-gen-pb/ LivePk.proto
 * 连麦邀请（目前仅用于场控发起连麦）
 * zhibo.live.micinvite
 */
public final class MicInviteReq extends Message<MicInviteReq, MicInviteReq.Builder> {
  public static final ProtoAdapter<MicInviteReq> ADAPTER = new ProtoAdapter_MicInviteReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ADMIN_UUID = 0L;

  public static final String DEFAULT_LIVEID = "";

  public static final Long DEFAULT_MIC_UUID = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  public static final Long DEFAULT_ZUID = 0L;

  /**
   * 场控id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long admin_uuid;

  /**
   * 发起的主播房间号（场控发起传其进入的房间号）
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String liveid;

  /**
   * 被邀请主播id（场控发起传场控邀请的主播id）
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long mic_uuid;

  /**
   * 0：未使用  1：场控发起，邀请主播1  2：场控发起，邀请主播2
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  /**
   * 场控所在房间主播id
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long zuid;

  public MicInviteReq(Long admin_uuid, String liveid, Long mic_uuid, Integer type, Long zuid) {
    this(admin_uuid, liveid, mic_uuid, type, zuid, ByteString.EMPTY);
  }

  public MicInviteReq(Long admin_uuid, String liveid, Long mic_uuid, Integer type, Long zuid,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.admin_uuid = admin_uuid;
    this.liveid = liveid;
    this.mic_uuid = mic_uuid;
    this.type = type;
    this.zuid = zuid;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.admin_uuid = admin_uuid;
    builder.liveid = liveid;
    builder.mic_uuid = mic_uuid;
    builder.type = type;
    builder.zuid = zuid;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MicInviteReq)) return false;
    MicInviteReq o = (MicInviteReq) other;
    return unknownFields().equals(o.unknownFields())
        && admin_uuid.equals(o.admin_uuid)
        && liveid.equals(o.liveid)
        && mic_uuid.equals(o.mic_uuid)
        && Internal.equals(type, o.type)
        && Internal.equals(zuid, o.zuid);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + admin_uuid.hashCode();
      result = result * 37 + liveid.hashCode();
      result = result * 37 + mic_uuid.hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (zuid != null ? zuid.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", admin_uuid=").append(admin_uuid);
    builder.append(", liveid=").append(liveid);
    builder.append(", mic_uuid=").append(mic_uuid);
    if (type != null) builder.append(", type=").append(type);
    if (zuid != null) builder.append(", zuid=").append(zuid);
    return builder.replace(0, 2, "MicInviteReq{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MicInviteReq.ADAPTER.encode(this);
  }

  public static final class Builder extends Message.Builder<MicInviteReq, Builder> {
    public Long admin_uuid;

    public String liveid;

    public Long mic_uuid;

    public Integer type;

    public Long zuid;

    public Builder() {
    }

    /**
     * 场控id
     */
    public Builder setAdminUuid(Long admin_uuid) {
      this.admin_uuid = admin_uuid;
      return this;
    }

    /**
     * 发起的主播房间号（场控发起传其进入的房间号）
     */
    public Builder setLiveid(String liveid) {
      this.liveid = liveid;
      return this;
    }

    /**
     * 被邀请主播id（场控发起传场控邀请的主播id）
     */
    public Builder setMicUuid(Long mic_uuid) {
      this.mic_uuid = mic_uuid;
      return this;
    }

    /**
     * 0：未使用  1：场控发起，邀请主播1  2：场控发起，邀请主播2
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 场控所在房间主播id
     */
    public Builder setZuid(Long zuid) {
      this.zuid = zuid;
      return this;
    }

    @Override
    public MicInviteReq build() {
      if (admin_uuid == null
          || liveid == null
          || mic_uuid == null) {
        throw Internal.missingRequiredFields(admin_uuid, "admin_uuid",
            liveid, "liveid",
            mic_uuid, "mic_uuid");
      }
      return new MicInviteReq(admin_uuid, liveid, mic_uuid, type, zuid, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MicInviteReq extends ProtoAdapter<MicInviteReq> {
    public ProtoAdapter_MicInviteReq() {
      super(FieldEncoding.LENGTH_DELIMITED, MicInviteReq.class);
    }

    @Override
    public int encodedSize(MicInviteReq value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.admin_uuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.liveid)
          + ProtoAdapter.UINT64.encodedSizeWithTag(3, value.mic_uuid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.type)
          + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.zuid)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MicInviteReq value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.admin_uuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.liveid);
      ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.mic_uuid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.type);
      ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.zuid);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MicInviteReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setAdminUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setLiveid(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setMicUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setZuid(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MicInviteReq redact(MicInviteReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
