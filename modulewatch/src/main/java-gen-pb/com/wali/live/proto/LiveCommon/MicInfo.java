// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveCommon.proto
package com.wali.live.proto.LiveCommon;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class MicInfo extends Message<MicInfo, MicInfo.Builder> {
  public static final ProtoAdapter<MicInfo> ADAPTER = new ProtoAdapter_MicInfo();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_MICUID = 0L;

  public static final String DEFAULT_MIC_LIVEID = "";

  public static final Integer DEFAULT_TYPE = 0;

  /**
   * 连麦的观众id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REQUIRED
  )
  public final Long micuid;

  /**
   * 子视图的比例位置
   */
  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LiveCommon.MicSubViewPos#ADAPTER"
  )
  public final MicSubViewPos subViewPos;

  /**
   * 连麦对方房间号
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String mic_liveid;

  /**
   * 0:主播与观众连麦 1：主播与主播连麦
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  public MicInfo(Long micuid, MicSubViewPos subViewPos, String mic_liveid, Integer type) {
    this(micuid, subViewPos, mic_liveid, type, ByteString.EMPTY);
  }

  public MicInfo(Long micuid, MicSubViewPos subViewPos, String mic_liveid, Integer type,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.micuid = micuid;
    this.subViewPos = subViewPos;
    this.mic_liveid = mic_liveid;
    this.type = type;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.micuid = micuid;
    builder.subViewPos = subViewPos;
    builder.mic_liveid = mic_liveid;
    builder.type = type;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MicInfo)) return false;
    MicInfo o = (MicInfo) other;
    return unknownFields().equals(o.unknownFields())
        && micuid.equals(o.micuid)
        && Internal.equals(subViewPos, o.subViewPos)
        && Internal.equals(mic_liveid, o.mic_liveid)
        && Internal.equals(type, o.type);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + micuid.hashCode();
      result = result * 37 + (subViewPos != null ? subViewPos.hashCode() : 0);
      result = result * 37 + (mic_liveid != null ? mic_liveid.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", micuid=").append(micuid);
    if (subViewPos != null) builder.append(", subViewPos=").append(subViewPos);
    if (mic_liveid != null) builder.append(", mic_liveid=").append(mic_liveid);
    if (type != null) builder.append(", type=").append(type);
    return builder.replace(0, 2, "MicInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MicInfo.ADAPTER.encode(this);
  }

  public static final MicInfo parseFrom(byte[] data) throws IOException {
    MicInfo c = null;
       c = MicInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 连麦的观众id
   */
  public Long getMicuid() {
    if(micuid==null){
        return DEFAULT_MICUID;
    }
    return micuid;
  }

  /**
   * 子视图的比例位置
   */
  public MicSubViewPos getSubViewPos() {
    if(subViewPos==null){
        return new MicSubViewPos.Builder().build();
    }
    return subViewPos;
  }

  /**
   * 连麦对方房间号
   */
  public String getMicLiveid() {
    if(mic_liveid==null){
        return DEFAULT_MIC_LIVEID;
    }
    return mic_liveid;
  }

  /**
   * 0:主播与观众连麦 1：主播与主播连麦
   */
  public Integer getType() {
    if(type==null){
        return DEFAULT_TYPE;
    }
    return type;
  }

  /**
   * 连麦的观众id
   */
  public boolean hasMicuid() {
    return micuid!=null;
  }

  /**
   * 子视图的比例位置
   */
  public boolean hasSubViewPos() {
    return subViewPos!=null;
  }

  /**
   * 连麦对方房间号
   */
  public boolean hasMicLiveid() {
    return mic_liveid!=null;
  }

  /**
   * 0:主播与观众连麦 1：主播与主播连麦
   */
  public boolean hasType() {
    return type!=null;
  }

  public static final class Builder extends Message.Builder<MicInfo, Builder> {
    public Long micuid;

    public MicSubViewPos subViewPos;

    public String mic_liveid;

    public Integer type;

    public Builder() {
    }

    /**
     * 连麦的观众id
     */
    public Builder setMicuid(Long micuid) {
      this.micuid = micuid;
      return this;
    }

    /**
     * 子视图的比例位置
     */
    public Builder setSubViewPos(MicSubViewPos subViewPos) {
      this.subViewPos = subViewPos;
      return this;
    }

    /**
     * 连麦对方房间号
     */
    public Builder setMicLiveid(String mic_liveid) {
      this.mic_liveid = mic_liveid;
      return this;
    }

    /**
     * 0:主播与观众连麦 1：主播与主播连麦
     */
    public Builder setType(Integer type) {
      this.type = type;
      return this;
    }

    @Override
    public MicInfo build() {
      return new MicInfo(micuid, subViewPos, mic_liveid, type, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MicInfo extends ProtoAdapter<MicInfo> {
    public ProtoAdapter_MicInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, MicInfo.class);
    }

    @Override
    public int encodedSize(MicInfo value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.micuid)
          + MicSubViewPos.ADAPTER.encodedSizeWithTag(2, value.subViewPos)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.mic_liveid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.type)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MicInfo value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.micuid);
      MicSubViewPos.ADAPTER.encodeWithTag(writer, 2, value.subViewPos);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.mic_liveid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.type);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MicInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setMicuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setSubViewPos(MicSubViewPos.ADAPTER.decode(reader)); break;
          case 3: builder.setMicLiveid(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MicInfo redact(MicInfo value) {
      Builder builder = value.newBuilder();
      if (builder.subViewPos != null) builder.subViewPos = MicSubViewPos.ADAPTER.redact(builder.subViewPos);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
