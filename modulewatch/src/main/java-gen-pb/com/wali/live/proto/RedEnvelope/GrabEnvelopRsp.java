// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: RedEnvelope.proto
package com.wali.live.proto.RedEnvelope;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 抢红包返回结果
 */
public final class GrabEnvelopRsp extends Message<GrabEnvelopRsp, GrabEnvelopRsp.Builder> {
  public static final ProtoAdapter<GrabEnvelopRsp> ADAPTER = new ProtoAdapter_GrabEnvelopRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RETCODE = 0;

  public static final String DEFAULT_ERRMSG = "";

  public static final Long DEFAULT_USERID = 0L;

  public static final String DEFAULT_REDENVELOPID = "";

  public static final Integer DEFAULT_GAIN = 0;

  public static final Long DEFAULT_TIMESTAMP = 0L;

  public static final Long DEFAULT_GEMEXPIRE = 0L;

  public static final Integer DEFAULT_IOS_USABLE_GEM_CNT = 0;

  public static final Integer DEFAULT_AND_USABLE_GEM_CNT = 0;

  public static final Long DEFAULT_USER_ASSET_TIMESTAMP = 0L;

  public static final Integer DEFAULT_USABLE_VIRTUAL_GEM_CNT = 0;

  /**
   * 返回码
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer retCode;

  /**
   * 错误提示说明
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String errMsg;

  /**
   * 用户id，uuid
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 红包id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String redEnvelopId;

  /**
   * 赚取的钻数
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gain;

  /**
   * 时间戳
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long timestamp;

  /**
   * 虚拟钻有效期
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long gemExpire;

  /**
   * -----用户账户余额------
   */
  @WireField(
      tag = 8,
      adapter = "com.wali.live.proto.RedEnvelope.GiftCard#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<GiftCard> gift_cards;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer ios_usable_gem_cnt;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer and_usable_gem_cnt;

  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long user_asset_timestamp;

  /**
   * 当前可用虚拟钻数量
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer usable_virtual_gem_cnt;

  public GrabEnvelopRsp(Integer retCode, String errMsg, Long userId, String redEnvelopId,
      Integer gain, Long timestamp, Long gemExpire, List<GiftCard> gift_cards,
      Integer ios_usable_gem_cnt, Integer and_usable_gem_cnt, Long user_asset_timestamp,
      Integer usable_virtual_gem_cnt) {
    this(retCode, errMsg, userId, redEnvelopId, gain, timestamp, gemExpire, gift_cards, ios_usable_gem_cnt, and_usable_gem_cnt, user_asset_timestamp, usable_virtual_gem_cnt, ByteString.EMPTY);
  }

  public GrabEnvelopRsp(Integer retCode, String errMsg, Long userId, String redEnvelopId,
      Integer gain, Long timestamp, Long gemExpire, List<GiftCard> gift_cards,
      Integer ios_usable_gem_cnt, Integer and_usable_gem_cnt, Long user_asset_timestamp,
      Integer usable_virtual_gem_cnt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.retCode = retCode;
    this.errMsg = errMsg;
    this.userId = userId;
    this.redEnvelopId = redEnvelopId;
    this.gain = gain;
    this.timestamp = timestamp;
    this.gemExpire = gemExpire;
    this.gift_cards = Internal.immutableCopyOf("gift_cards", gift_cards);
    this.ios_usable_gem_cnt = ios_usable_gem_cnt;
    this.and_usable_gem_cnt = and_usable_gem_cnt;
    this.user_asset_timestamp = user_asset_timestamp;
    this.usable_virtual_gem_cnt = usable_virtual_gem_cnt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.retCode = retCode;
    builder.errMsg = errMsg;
    builder.userId = userId;
    builder.redEnvelopId = redEnvelopId;
    builder.gain = gain;
    builder.timestamp = timestamp;
    builder.gemExpire = gemExpire;
    builder.gift_cards = Internal.copyOf("gift_cards", gift_cards);
    builder.ios_usable_gem_cnt = ios_usable_gem_cnt;
    builder.and_usable_gem_cnt = and_usable_gem_cnt;
    builder.user_asset_timestamp = user_asset_timestamp;
    builder.usable_virtual_gem_cnt = usable_virtual_gem_cnt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GrabEnvelopRsp)) return false;
    GrabEnvelopRsp o = (GrabEnvelopRsp) other;
    return unknownFields().equals(o.unknownFields())
        && retCode.equals(o.retCode)
        && Internal.equals(errMsg, o.errMsg)
        && Internal.equals(userId, o.userId)
        && Internal.equals(redEnvelopId, o.redEnvelopId)
        && Internal.equals(gain, o.gain)
        && Internal.equals(timestamp, o.timestamp)
        && Internal.equals(gemExpire, o.gemExpire)
        && gift_cards.equals(o.gift_cards)
        && Internal.equals(ios_usable_gem_cnt, o.ios_usable_gem_cnt)
        && Internal.equals(and_usable_gem_cnt, o.and_usable_gem_cnt)
        && Internal.equals(user_asset_timestamp, o.user_asset_timestamp)
        && Internal.equals(usable_virtual_gem_cnt, o.usable_virtual_gem_cnt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + retCode.hashCode();
      result = result * 37 + (errMsg != null ? errMsg.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (redEnvelopId != null ? redEnvelopId.hashCode() : 0);
      result = result * 37 + (gain != null ? gain.hashCode() : 0);
      result = result * 37 + (timestamp != null ? timestamp.hashCode() : 0);
      result = result * 37 + (gemExpire != null ? gemExpire.hashCode() : 0);
      result = result * 37 + gift_cards.hashCode();
      result = result * 37 + (ios_usable_gem_cnt != null ? ios_usable_gem_cnt.hashCode() : 0);
      result = result * 37 + (and_usable_gem_cnt != null ? and_usable_gem_cnt.hashCode() : 0);
      result = result * 37 + (user_asset_timestamp != null ? user_asset_timestamp.hashCode() : 0);
      result = result * 37 + (usable_virtual_gem_cnt != null ? usable_virtual_gem_cnt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", retCode=").append(retCode);
    if (errMsg != null) builder.append(", errMsg=").append(errMsg);
    if (userId != null) builder.append(", userId=").append(userId);
    if (redEnvelopId != null) builder.append(", redEnvelopId=").append(redEnvelopId);
    if (gain != null) builder.append(", gain=").append(gain);
    if (timestamp != null) builder.append(", timestamp=").append(timestamp);
    if (gemExpire != null) builder.append(", gemExpire=").append(gemExpire);
    if (!gift_cards.isEmpty()) builder.append(", gift_cards=").append(gift_cards);
    if (ios_usable_gem_cnt != null) builder.append(", ios_usable_gem_cnt=").append(ios_usable_gem_cnt);
    if (and_usable_gem_cnt != null) builder.append(", and_usable_gem_cnt=").append(and_usable_gem_cnt);
    if (user_asset_timestamp != null) builder.append(", user_asset_timestamp=").append(user_asset_timestamp);
    if (usable_virtual_gem_cnt != null) builder.append(", usable_virtual_gem_cnt=").append(usable_virtual_gem_cnt);
    return builder.replace(0, 2, "GrabEnvelopRsp{").append('}').toString();
  }

  public static final GrabEnvelopRsp parseFrom(byte[] data) throws IOException {
    GrabEnvelopRsp c = null;
       c = GrabEnvelopRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 返回码
   */
  public Integer getRetCode() {
    if(retCode==null){
        return DEFAULT_RETCODE;
    }
    return retCode;
  }

  /**
   * 错误提示说明
   */
  public String getErrMsg() {
    if(errMsg==null){
        return DEFAULT_ERRMSG;
    }
    return errMsg;
  }

  /**
   * 用户id，uuid
   */
  public Long getUserId() {
    if(userId==null){
        return DEFAULT_USERID;
    }
    return userId;
  }

  /**
   * 红包id
   */
  public String getRedEnvelopId() {
    if(redEnvelopId==null){
        return DEFAULT_REDENVELOPID;
    }
    return redEnvelopId;
  }

  /**
   * 赚取的钻数
   */
  public Integer getGain() {
    if(gain==null){
        return DEFAULT_GAIN;
    }
    return gain;
  }

  /**
   * 时间戳
   */
  public Long getTimestamp() {
    if(timestamp==null){
        return DEFAULT_TIMESTAMP;
    }
    return timestamp;
  }

  /**
   * 虚拟钻有效期
   */
  public Long getGemExpire() {
    if(gemExpire==null){
        return DEFAULT_GEMEXPIRE;
    }
    return gemExpire;
  }

  /**
   * -----用户账户余额------
   */
  public List<GiftCard> getGiftCardsList() {
    if(gift_cards==null){
        return new java.util.ArrayList<GiftCard>();
    }
    return gift_cards;
  }

  public Integer getIosUsableGemCnt() {
    if(ios_usable_gem_cnt==null){
        return DEFAULT_IOS_USABLE_GEM_CNT;
    }
    return ios_usable_gem_cnt;
  }

  public Integer getAndUsableGemCnt() {
    if(and_usable_gem_cnt==null){
        return DEFAULT_AND_USABLE_GEM_CNT;
    }
    return and_usable_gem_cnt;
  }

  public Long getUserAssetTimestamp() {
    if(user_asset_timestamp==null){
        return DEFAULT_USER_ASSET_TIMESTAMP;
    }
    return user_asset_timestamp;
  }

  /**
   * 当前可用虚拟钻数量
   */
  public Integer getUsableVirtualGemCnt() {
    if(usable_virtual_gem_cnt==null){
        return DEFAULT_USABLE_VIRTUAL_GEM_CNT;
    }
    return usable_virtual_gem_cnt;
  }

  /**
   * 返回码
   */
  public boolean hasRetCode() {
    return retCode!=null;
  }

  /**
   * 错误提示说明
   */
  public boolean hasErrMsg() {
    return errMsg!=null;
  }

  /**
   * 用户id，uuid
   */
  public boolean hasUserId() {
    return userId!=null;
  }

  /**
   * 红包id
   */
  public boolean hasRedEnvelopId() {
    return redEnvelopId!=null;
  }

  /**
   * 赚取的钻数
   */
  public boolean hasGain() {
    return gain!=null;
  }

  /**
   * 时间戳
   */
  public boolean hasTimestamp() {
    return timestamp!=null;
  }

  /**
   * 虚拟钻有效期
   */
  public boolean hasGemExpire() {
    return gemExpire!=null;
  }

  /**
   * -----用户账户余额------
   */
  public boolean hasGiftCardsList() {
    return gift_cards!=null;
  }

  public boolean hasIosUsableGemCnt() {
    return ios_usable_gem_cnt!=null;
  }

  public boolean hasAndUsableGemCnt() {
    return and_usable_gem_cnt!=null;
  }

  public boolean hasUserAssetTimestamp() {
    return user_asset_timestamp!=null;
  }

  /**
   * 当前可用虚拟钻数量
   */
  public boolean hasUsableVirtualGemCnt() {
    return usable_virtual_gem_cnt!=null;
  }

  public static final class Builder extends Message.Builder<GrabEnvelopRsp, Builder> {
    public Integer retCode;

    public String errMsg;

    public Long userId;

    public String redEnvelopId;

    public Integer gain;

    public Long timestamp;

    public Long gemExpire;

    public List<GiftCard> gift_cards;

    public Integer ios_usable_gem_cnt;

    public Integer and_usable_gem_cnt;

    public Long user_asset_timestamp;

    public Integer usable_virtual_gem_cnt;

    public Builder() {
      gift_cards = Internal.newMutableList();
    }

    /**
     * 返回码
     */
    public Builder setRetCode(Integer retCode) {
      this.retCode = retCode;
      return this;
    }

    /**
     * 错误提示说明
     */
    public Builder setErrMsg(String errMsg) {
      this.errMsg = errMsg;
      return this;
    }

    /**
     * 用户id，uuid
     */
    public Builder setUserId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 红包id
     */
    public Builder setRedEnvelopId(String redEnvelopId) {
      this.redEnvelopId = redEnvelopId;
      return this;
    }

    /**
     * 赚取的钻数
     */
    public Builder setGain(Integer gain) {
      this.gain = gain;
      return this;
    }

    /**
     * 时间戳
     */
    public Builder setTimestamp(Long timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    /**
     * 虚拟钻有效期
     */
    public Builder setGemExpire(Long gemExpire) {
      this.gemExpire = gemExpire;
      return this;
    }

    /**
     * -----用户账户余额------
     */
    public Builder addAllGiftCards(List<GiftCard> gift_cards) {
      Internal.checkElementsNotNull(gift_cards);
      this.gift_cards = gift_cards;
      return this;
    }

    public Builder setIosUsableGemCnt(Integer ios_usable_gem_cnt) {
      this.ios_usable_gem_cnt = ios_usable_gem_cnt;
      return this;
    }

    public Builder setAndUsableGemCnt(Integer and_usable_gem_cnt) {
      this.and_usable_gem_cnt = and_usable_gem_cnt;
      return this;
    }

    public Builder setUserAssetTimestamp(Long user_asset_timestamp) {
      this.user_asset_timestamp = user_asset_timestamp;
      return this;
    }

    /**
     * 当前可用虚拟钻数量
     */
    public Builder setUsableVirtualGemCnt(Integer usable_virtual_gem_cnt) {
      this.usable_virtual_gem_cnt = usable_virtual_gem_cnt;
      return this;
    }

    @Override
    public GrabEnvelopRsp build() {
      return new GrabEnvelopRsp(retCode, errMsg, userId, redEnvelopId, gain, timestamp, gemExpire, gift_cards, ios_usable_gem_cnt, and_usable_gem_cnt, user_asset_timestamp, usable_virtual_gem_cnt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GrabEnvelopRsp extends ProtoAdapter<GrabEnvelopRsp> {
    public ProtoAdapter_GrabEnvelopRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GrabEnvelopRsp.class);
    }

    @Override
    public int encodedSize(GrabEnvelopRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.retCode)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.errMsg)
          + ProtoAdapter.UINT64.encodedSizeWithTag(3, value.userId)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.redEnvelopId)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.gain)
          + ProtoAdapter.UINT64.encodedSizeWithTag(6, value.timestamp)
          + ProtoAdapter.UINT64.encodedSizeWithTag(7, value.gemExpire)
          + GiftCard.ADAPTER.asRepeated().encodedSizeWithTag(8, value.gift_cards)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.ios_usable_gem_cnt)
          + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.and_usable_gem_cnt)
          + ProtoAdapter.UINT64.encodedSizeWithTag(11, value.user_asset_timestamp)
          + ProtoAdapter.UINT32.encodedSizeWithTag(12, value.usable_virtual_gem_cnt)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GrabEnvelopRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.retCode);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.errMsg);
      ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.userId);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.redEnvelopId);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.gain);
      ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.timestamp);
      ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.gemExpire);
      GiftCard.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.gift_cards);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.ios_usable_gem_cnt);
      ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.and_usable_gem_cnt);
      ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.user_asset_timestamp);
      ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.usable_virtual_gem_cnt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GrabEnvelopRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRetCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setErrMsg(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setUserId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.setRedEnvelopId(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setGain(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setTimestamp(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.setGemExpire(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.gift_cards.add(GiftCard.ADAPTER.decode(reader)); break;
          case 9: builder.setIosUsableGemCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.setAndUsableGemCnt(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.setUserAssetTimestamp(ProtoAdapter.UINT64.decode(reader)); break;
          case 12: builder.setUsableVirtualGemCnt(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GrabEnvelopRsp redact(GrabEnvelopRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.gift_cards, GiftCard.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
