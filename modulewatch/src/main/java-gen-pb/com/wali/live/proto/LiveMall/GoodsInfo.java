// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMall.proto
package com.wali.live.proto.LiveMall;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class GoodsInfo extends Message<GoodsInfo, GoodsInfo.Builder> {
  public static final ProtoAdapter<GoodsInfo> ADAPTER = new ProtoAdapter_GoodsInfo();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_SKU = 0L;

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_CATEGORY = "";

  public static final String DEFAULT_BRAND_ID = "";

  public static final String DEFAULT_BRAND_NAME = "";

  public static final String DEFAULT_SHOP_LOGO = "";

  public static final String DEFAULT_SHOP_URL = "";

  public static final String DEFAULT_IMG = "";

  public static final Double DEFAULT_MPRICE = 0.0d;

  public static final Double DEFAULT_PRICE = 0.0d;

  public static final Integer DEFAULT_STATUS = 0;

  public static final Integer DEFAULT_STOCK_STATE = 0;

  public static final String DEFAULT_STOCK_STATE_NAME = "";

  public static final Integer DEFAULT_SHOP_TYPE = 0;

  public static final String DEFAULT_GOODS_URL = "";

  public static final Double DEFAULT_INCOME_RATE = 0.0d;

  public static final Integer DEFAULT_BUY_NUMBER = 0;

  public static final Boolean DEFAULT_IS_ADDED_GOODS = false;

  public static final String DEFAULT_SHOP_LABEL = "";

  public static final String DEFAULT_HOST_LABEL = "";

  public static final String DEFAULT_PROMOTION_LABEL = "";

  public static final String DEFAULT_LABEL = "";

  public static final String DEFAULT_PRICE_LABEL = "";

  public static final String DEFAULT_COUPON_NAME = "";

  public static final String DEFAULT_COUPON_URL = "";

  public static final String DEFAULT_MILIVE_INCOME = "";

  public static final String DEFAULT_MILIVE_HOST_INCOME = "";

  public static final String DEFAULT_MILIVE_HOST_GIFT = "";

  public static final String DEFAULT_MILIVE_USER_GIFT = "";

  /**
   * 商品id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.REQUIRED
  )
  public final Long sku;

  /**
   * 商品名
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  /**
   * 品类
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String category;

  /**
   * 品牌id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String brand_id;

  /**
   * 品牌名
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String brand_name;

  /**
   * 店铺logo
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String shop_logo;

  /**
   * 店铺
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String shop_url;

  /**
   * 商品大图
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String img;

  /**
   * 市场价
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double mprice;

  /**
   * 当前价
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double price;

  /**
   * 上下柜状态: 0 下架 1 正常 10 删除
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer status;

  /**
   * 库存:33 有货，39 有货在途 2-6天到仓库, 40 有货可配货 36 预订， 34 无货
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer stock_state;

  /**
   * 库存描述
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String stock_state_name;

  /**
   * 0 京东
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer shop_type;

  /**
   * 佣金url
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String goods_url;

  /**
   * 佣金比率
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double income_rate;

  /**
   * 购买数;
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer buy_number;

  /**
   * 标记是否已经添加过
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_added_goods;

  /**
   * 来源标签
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String shop_label;

  /**
   * 主播专有标签
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String host_label;

  /**
   * 促销活动标签
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String promotion_label;

  /**
   * 商品标签
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String label;

  /**
   * 价格标签
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String price_label;

  /**
   * 优惠券名字
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String coupon_name;

  /**
   * 优惠券地址
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String coupon_url;

  /**
   * 新增电商佣金（元）
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String milive_income;

  /**
   * 直播补贴佣金
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String milive_host_income;

  /**
   * 主播补贴钻石
   */
  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String milive_host_gift;

  /**
   * 观众补贴钻石
   */
  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String milive_user_gift;

  public GoodsInfo(Long sku, String name, String category, String brand_id, String brand_name,
      String shop_logo, String shop_url, String img, Double mprice, Double price, Integer status,
      Integer stock_state, String stock_state_name, Integer shop_type, String goods_url,
      Double income_rate, Integer buy_number, Boolean is_added_goods, String shop_label,
      String host_label, String promotion_label, String label, String price_label,
      String coupon_name, String coupon_url, String milive_income, String milive_host_income,
      String milive_host_gift, String milive_user_gift) {
    this(sku, name, category, brand_id, brand_name, shop_logo, shop_url, img, mprice, price, status, stock_state, stock_state_name, shop_type, goods_url, income_rate, buy_number, is_added_goods, shop_label, host_label, promotion_label, label, price_label, coupon_name, coupon_url, milive_income, milive_host_income, milive_host_gift, milive_user_gift, ByteString.EMPTY);
  }

  public GoodsInfo(Long sku, String name, String category, String brand_id, String brand_name,
      String shop_logo, String shop_url, String img, Double mprice, Double price, Integer status,
      Integer stock_state, String stock_state_name, Integer shop_type, String goods_url,
      Double income_rate, Integer buy_number, Boolean is_added_goods, String shop_label,
      String host_label, String promotion_label, String label, String price_label,
      String coupon_name, String coupon_url, String milive_income, String milive_host_income,
      String milive_host_gift, String milive_user_gift, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.sku = sku;
    this.name = name;
    this.category = category;
    this.brand_id = brand_id;
    this.brand_name = brand_name;
    this.shop_logo = shop_logo;
    this.shop_url = shop_url;
    this.img = img;
    this.mprice = mprice;
    this.price = price;
    this.status = status;
    this.stock_state = stock_state;
    this.stock_state_name = stock_state_name;
    this.shop_type = shop_type;
    this.goods_url = goods_url;
    this.income_rate = income_rate;
    this.buy_number = buy_number;
    this.is_added_goods = is_added_goods;
    this.shop_label = shop_label;
    this.host_label = host_label;
    this.promotion_label = promotion_label;
    this.label = label;
    this.price_label = price_label;
    this.coupon_name = coupon_name;
    this.coupon_url = coupon_url;
    this.milive_income = milive_income;
    this.milive_host_income = milive_host_income;
    this.milive_host_gift = milive_host_gift;
    this.milive_user_gift = milive_user_gift;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.sku = sku;
    builder.name = name;
    builder.category = category;
    builder.brand_id = brand_id;
    builder.brand_name = brand_name;
    builder.shop_logo = shop_logo;
    builder.shop_url = shop_url;
    builder.img = img;
    builder.mprice = mprice;
    builder.price = price;
    builder.status = status;
    builder.stock_state = stock_state;
    builder.stock_state_name = stock_state_name;
    builder.shop_type = shop_type;
    builder.goods_url = goods_url;
    builder.income_rate = income_rate;
    builder.buy_number = buy_number;
    builder.is_added_goods = is_added_goods;
    builder.shop_label = shop_label;
    builder.host_label = host_label;
    builder.promotion_label = promotion_label;
    builder.label = label;
    builder.price_label = price_label;
    builder.coupon_name = coupon_name;
    builder.coupon_url = coupon_url;
    builder.milive_income = milive_income;
    builder.milive_host_income = milive_host_income;
    builder.milive_host_gift = milive_host_gift;
    builder.milive_user_gift = milive_user_gift;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GoodsInfo)) return false;
    GoodsInfo o = (GoodsInfo) other;
    return unknownFields().equals(o.unknownFields())
        && sku.equals(o.sku)
        && Internal.equals(name, o.name)
        && Internal.equals(category, o.category)
        && Internal.equals(brand_id, o.brand_id)
        && Internal.equals(brand_name, o.brand_name)
        && Internal.equals(shop_logo, o.shop_logo)
        && Internal.equals(shop_url, o.shop_url)
        && Internal.equals(img, o.img)
        && Internal.equals(mprice, o.mprice)
        && Internal.equals(price, o.price)
        && Internal.equals(status, o.status)
        && Internal.equals(stock_state, o.stock_state)
        && Internal.equals(stock_state_name, o.stock_state_name)
        && Internal.equals(shop_type, o.shop_type)
        && Internal.equals(goods_url, o.goods_url)
        && Internal.equals(income_rate, o.income_rate)
        && Internal.equals(buy_number, o.buy_number)
        && Internal.equals(is_added_goods, o.is_added_goods)
        && Internal.equals(shop_label, o.shop_label)
        && Internal.equals(host_label, o.host_label)
        && Internal.equals(promotion_label, o.promotion_label)
        && Internal.equals(label, o.label)
        && Internal.equals(price_label, o.price_label)
        && Internal.equals(coupon_name, o.coupon_name)
        && Internal.equals(coupon_url, o.coupon_url)
        && Internal.equals(milive_income, o.milive_income)
        && Internal.equals(milive_host_income, o.milive_host_income)
        && Internal.equals(milive_host_gift, o.milive_host_gift)
        && Internal.equals(milive_user_gift, o.milive_user_gift);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + sku.hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (category != null ? category.hashCode() : 0);
      result = result * 37 + (brand_id != null ? brand_id.hashCode() : 0);
      result = result * 37 + (brand_name != null ? brand_name.hashCode() : 0);
      result = result * 37 + (shop_logo != null ? shop_logo.hashCode() : 0);
      result = result * 37 + (shop_url != null ? shop_url.hashCode() : 0);
      result = result * 37 + (img != null ? img.hashCode() : 0);
      result = result * 37 + (mprice != null ? mprice.hashCode() : 0);
      result = result * 37 + (price != null ? price.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (stock_state != null ? stock_state.hashCode() : 0);
      result = result * 37 + (stock_state_name != null ? stock_state_name.hashCode() : 0);
      result = result * 37 + (shop_type != null ? shop_type.hashCode() : 0);
      result = result * 37 + (goods_url != null ? goods_url.hashCode() : 0);
      result = result * 37 + (income_rate != null ? income_rate.hashCode() : 0);
      result = result * 37 + (buy_number != null ? buy_number.hashCode() : 0);
      result = result * 37 + (is_added_goods != null ? is_added_goods.hashCode() : 0);
      result = result * 37 + (shop_label != null ? shop_label.hashCode() : 0);
      result = result * 37 + (host_label != null ? host_label.hashCode() : 0);
      result = result * 37 + (promotion_label != null ? promotion_label.hashCode() : 0);
      result = result * 37 + (label != null ? label.hashCode() : 0);
      result = result * 37 + (price_label != null ? price_label.hashCode() : 0);
      result = result * 37 + (coupon_name != null ? coupon_name.hashCode() : 0);
      result = result * 37 + (coupon_url != null ? coupon_url.hashCode() : 0);
      result = result * 37 + (milive_income != null ? milive_income.hashCode() : 0);
      result = result * 37 + (milive_host_income != null ? milive_host_income.hashCode() : 0);
      result = result * 37 + (milive_host_gift != null ? milive_host_gift.hashCode() : 0);
      result = result * 37 + (milive_user_gift != null ? milive_user_gift.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", sku=").append(sku);
    if (name != null) builder.append(", name=").append(name);
    if (category != null) builder.append(", category=").append(category);
    if (brand_id != null) builder.append(", brand_id=").append(brand_id);
    if (brand_name != null) builder.append(", brand_name=").append(brand_name);
    if (shop_logo != null) builder.append(", shop_logo=").append(shop_logo);
    if (shop_url != null) builder.append(", shop_url=").append(shop_url);
    if (img != null) builder.append(", img=").append(img);
    if (mprice != null) builder.append(", mprice=").append(mprice);
    if (price != null) builder.append(", price=").append(price);
    if (status != null) builder.append(", status=").append(status);
    if (stock_state != null) builder.append(", stock_state=").append(stock_state);
    if (stock_state_name != null) builder.append(", stock_state_name=").append(stock_state_name);
    if (shop_type != null) builder.append(", shop_type=").append(shop_type);
    if (goods_url != null) builder.append(", goods_url=").append(goods_url);
    if (income_rate != null) builder.append(", income_rate=").append(income_rate);
    if (buy_number != null) builder.append(", buy_number=").append(buy_number);
    if (is_added_goods != null) builder.append(", is_added_goods=").append(is_added_goods);
    if (shop_label != null) builder.append(", shop_label=").append(shop_label);
    if (host_label != null) builder.append(", host_label=").append(host_label);
    if (promotion_label != null) builder.append(", promotion_label=").append(promotion_label);
    if (label != null) builder.append(", label=").append(label);
    if (price_label != null) builder.append(", price_label=").append(price_label);
    if (coupon_name != null) builder.append(", coupon_name=").append(coupon_name);
    if (coupon_url != null) builder.append(", coupon_url=").append(coupon_url);
    if (milive_income != null) builder.append(", milive_income=").append(milive_income);
    if (milive_host_income != null) builder.append(", milive_host_income=").append(milive_host_income);
    if (milive_host_gift != null) builder.append(", milive_host_gift=").append(milive_host_gift);
    if (milive_user_gift != null) builder.append(", milive_user_gift=").append(milive_user_gift);
    return builder.replace(0, 2, "GoodsInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GoodsInfo.ADAPTER.encode(this);
  }

  public static final GoodsInfo parseFrom(byte[] data) throws IOException {
    GoodsInfo c = null;
       c = GoodsInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 商品id
   */
  public Long getSku() {
    if(sku==null){
        return DEFAULT_SKU;
    }
    return sku;
  }

  /**
   * 商品名
   */
  public String getName() {
    if(name==null){
        return DEFAULT_NAME;
    }
    return name;
  }

  /**
   * 品类
   */
  public String getCategory() {
    if(category==null){
        return DEFAULT_CATEGORY;
    }
    return category;
  }

  /**
   * 品牌id
   */
  public String getBrandId() {
    if(brand_id==null){
        return DEFAULT_BRAND_ID;
    }
    return brand_id;
  }

  /**
   * 品牌名
   */
  public String getBrandName() {
    if(brand_name==null){
        return DEFAULT_BRAND_NAME;
    }
    return brand_name;
  }

  /**
   * 店铺logo
   */
  public String getShopLogo() {
    if(shop_logo==null){
        return DEFAULT_SHOP_LOGO;
    }
    return shop_logo;
  }

  /**
   * 店铺
   */
  public String getShopUrl() {
    if(shop_url==null){
        return DEFAULT_SHOP_URL;
    }
    return shop_url;
  }

  /**
   * 商品大图
   */
  public String getImg() {
    if(img==null){
        return DEFAULT_IMG;
    }
    return img;
  }

  /**
   * 市场价
   */
  public Double getMprice() {
    if(mprice==null){
        return DEFAULT_MPRICE;
    }
    return mprice;
  }

  /**
   * 当前价
   */
  public Double getPrice() {
    if(price==null){
        return DEFAULT_PRICE;
    }
    return price;
  }

  /**
   * 上下柜状态: 0 下架 1 正常 10 删除
   */
  public Integer getStatus() {
    if(status==null){
        return DEFAULT_STATUS;
    }
    return status;
  }

  /**
   * 库存:33 有货，39 有货在途 2-6天到仓库, 40 有货可配货 36 预订， 34 无货
   */
  public Integer getStockState() {
    if(stock_state==null){
        return DEFAULT_STOCK_STATE;
    }
    return stock_state;
  }

  /**
   * 库存描述
   */
  public String getStockStateName() {
    if(stock_state_name==null){
        return DEFAULT_STOCK_STATE_NAME;
    }
    return stock_state_name;
  }

  /**
   * 0 京东
   */
  public Integer getShopType() {
    if(shop_type==null){
        return DEFAULT_SHOP_TYPE;
    }
    return shop_type;
  }

  /**
   * 佣金url
   */
  public String getGoodsUrl() {
    if(goods_url==null){
        return DEFAULT_GOODS_URL;
    }
    return goods_url;
  }

  /**
   * 佣金比率
   */
  public Double getIncomeRate() {
    if(income_rate==null){
        return DEFAULT_INCOME_RATE;
    }
    return income_rate;
  }

  /**
   * 购买数;
   */
  public Integer getBuyNumber() {
    if(buy_number==null){
        return DEFAULT_BUY_NUMBER;
    }
    return buy_number;
  }

  /**
   * 标记是否已经添加过
   */
  public Boolean getIsAddedGoods() {
    if(is_added_goods==null){
        return DEFAULT_IS_ADDED_GOODS;
    }
    return is_added_goods;
  }

  /**
   * 来源标签
   */
  public String getShopLabel() {
    if(shop_label==null){
        return DEFAULT_SHOP_LABEL;
    }
    return shop_label;
  }

  /**
   * 主播专有标签
   */
  public String getHostLabel() {
    if(host_label==null){
        return DEFAULT_HOST_LABEL;
    }
    return host_label;
  }

  /**
   * 促销活动标签
   */
  public String getPromotionLabel() {
    if(promotion_label==null){
        return DEFAULT_PROMOTION_LABEL;
    }
    return promotion_label;
  }

  /**
   * 商品标签
   */
  public String getLabel() {
    if(label==null){
        return DEFAULT_LABEL;
    }
    return label;
  }

  /**
   * 价格标签
   */
  public String getPriceLabel() {
    if(price_label==null){
        return DEFAULT_PRICE_LABEL;
    }
    return price_label;
  }

  /**
   * 优惠券名字
   */
  public String getCouponName() {
    if(coupon_name==null){
        return DEFAULT_COUPON_NAME;
    }
    return coupon_name;
  }

  /**
   * 优惠券地址
   */
  public String getCouponUrl() {
    if(coupon_url==null){
        return DEFAULT_COUPON_URL;
    }
    return coupon_url;
  }

  /**
   * 新增电商佣金（元）
   */
  public String getMiliveIncome() {
    if(milive_income==null){
        return DEFAULT_MILIVE_INCOME;
    }
    return milive_income;
  }

  /**
   * 直播补贴佣金
   */
  public String getMiliveHostIncome() {
    if(milive_host_income==null){
        return DEFAULT_MILIVE_HOST_INCOME;
    }
    return milive_host_income;
  }

  /**
   * 主播补贴钻石
   */
  public String getMiliveHostGift() {
    if(milive_host_gift==null){
        return DEFAULT_MILIVE_HOST_GIFT;
    }
    return milive_host_gift;
  }

  /**
   * 观众补贴钻石
   */
  public String getMiliveUserGift() {
    if(milive_user_gift==null){
        return DEFAULT_MILIVE_USER_GIFT;
    }
    return milive_user_gift;
  }

  /**
   * 商品id
   */
  public boolean hasSku() {
    return sku!=null;
  }

  /**
   * 商品名
   */
  public boolean hasName() {
    return name!=null;
  }

  /**
   * 品类
   */
  public boolean hasCategory() {
    return category!=null;
  }

  /**
   * 品牌id
   */
  public boolean hasBrandId() {
    return brand_id!=null;
  }

  /**
   * 品牌名
   */
  public boolean hasBrandName() {
    return brand_name!=null;
  }

  /**
   * 店铺logo
   */
  public boolean hasShopLogo() {
    return shop_logo!=null;
  }

  /**
   * 店铺
   */
  public boolean hasShopUrl() {
    return shop_url!=null;
  }

  /**
   * 商品大图
   */
  public boolean hasImg() {
    return img!=null;
  }

  /**
   * 市场价
   */
  public boolean hasMprice() {
    return mprice!=null;
  }

  /**
   * 当前价
   */
  public boolean hasPrice() {
    return price!=null;
  }

  /**
   * 上下柜状态: 0 下架 1 正常 10 删除
   */
  public boolean hasStatus() {
    return status!=null;
  }

  /**
   * 库存:33 有货，39 有货在途 2-6天到仓库, 40 有货可配货 36 预订， 34 无货
   */
  public boolean hasStockState() {
    return stock_state!=null;
  }

  /**
   * 库存描述
   */
  public boolean hasStockStateName() {
    return stock_state_name!=null;
  }

  /**
   * 0 京东
   */
  public boolean hasShopType() {
    return shop_type!=null;
  }

  /**
   * 佣金url
   */
  public boolean hasGoodsUrl() {
    return goods_url!=null;
  }

  /**
   * 佣金比率
   */
  public boolean hasIncomeRate() {
    return income_rate!=null;
  }

  /**
   * 购买数;
   */
  public boolean hasBuyNumber() {
    return buy_number!=null;
  }

  /**
   * 标记是否已经添加过
   */
  public boolean hasIsAddedGoods() {
    return is_added_goods!=null;
  }

  /**
   * 来源标签
   */
  public boolean hasShopLabel() {
    return shop_label!=null;
  }

  /**
   * 主播专有标签
   */
  public boolean hasHostLabel() {
    return host_label!=null;
  }

  /**
   * 促销活动标签
   */
  public boolean hasPromotionLabel() {
    return promotion_label!=null;
  }

  /**
   * 商品标签
   */
  public boolean hasLabel() {
    return label!=null;
  }

  /**
   * 价格标签
   */
  public boolean hasPriceLabel() {
    return price_label!=null;
  }

  /**
   * 优惠券名字
   */
  public boolean hasCouponName() {
    return coupon_name!=null;
  }

  /**
   * 优惠券地址
   */
  public boolean hasCouponUrl() {
    return coupon_url!=null;
  }

  /**
   * 新增电商佣金（元）
   */
  public boolean hasMiliveIncome() {
    return milive_income!=null;
  }

  /**
   * 直播补贴佣金
   */
  public boolean hasMiliveHostIncome() {
    return milive_host_income!=null;
  }

  /**
   * 主播补贴钻石
   */
  public boolean hasMiliveHostGift() {
    return milive_host_gift!=null;
  }

  /**
   * 观众补贴钻石
   */
  public boolean hasMiliveUserGift() {
    return milive_user_gift!=null;
  }

  public static final class Builder extends Message.Builder<GoodsInfo, Builder> {
    public Long sku;

    public String name;

    public String category;

    public String brand_id;

    public String brand_name;

    public String shop_logo;

    public String shop_url;

    public String img;

    public Double mprice;

    public Double price;

    public Integer status;

    public Integer stock_state;

    public String stock_state_name;

    public Integer shop_type;

    public String goods_url;

    public Double income_rate;

    public Integer buy_number;

    public Boolean is_added_goods;

    public String shop_label;

    public String host_label;

    public String promotion_label;

    public String label;

    public String price_label;

    public String coupon_name;

    public String coupon_url;

    public String milive_income;

    public String milive_host_income;

    public String milive_host_gift;

    public String milive_user_gift;

    public Builder() {
    }

    /**
     * 商品id
     */
    public Builder setSku(Long sku) {
      this.sku = sku;
      return this;
    }

    /**
     * 商品名
     */
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * 品类
     */
    public Builder setCategory(String category) {
      this.category = category;
      return this;
    }

    /**
     * 品牌id
     */
    public Builder setBrandId(String brand_id) {
      this.brand_id = brand_id;
      return this;
    }

    /**
     * 品牌名
     */
    public Builder setBrandName(String brand_name) {
      this.brand_name = brand_name;
      return this;
    }

    /**
     * 店铺logo
     */
    public Builder setShopLogo(String shop_logo) {
      this.shop_logo = shop_logo;
      return this;
    }

    /**
     * 店铺
     */
    public Builder setShopUrl(String shop_url) {
      this.shop_url = shop_url;
      return this;
    }

    /**
     * 商品大图
     */
    public Builder setImg(String img) {
      this.img = img;
      return this;
    }

    /**
     * 市场价
     */
    public Builder setMprice(Double mprice) {
      this.mprice = mprice;
      return this;
    }

    /**
     * 当前价
     */
    public Builder setPrice(Double price) {
      this.price = price;
      return this;
    }

    /**
     * 上下柜状态: 0 下架 1 正常 10 删除
     */
    public Builder setStatus(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 库存:33 有货，39 有货在途 2-6天到仓库, 40 有货可配货 36 预订， 34 无货
     */
    public Builder setStockState(Integer stock_state) {
      this.stock_state = stock_state;
      return this;
    }

    /**
     * 库存描述
     */
    public Builder setStockStateName(String stock_state_name) {
      this.stock_state_name = stock_state_name;
      return this;
    }

    /**
     * 0 京东
     */
    public Builder setShopType(Integer shop_type) {
      this.shop_type = shop_type;
      return this;
    }

    /**
     * 佣金url
     */
    public Builder setGoodsUrl(String goods_url) {
      this.goods_url = goods_url;
      return this;
    }

    /**
     * 佣金比率
     */
    public Builder setIncomeRate(Double income_rate) {
      this.income_rate = income_rate;
      return this;
    }

    /**
     * 购买数;
     */
    public Builder setBuyNumber(Integer buy_number) {
      this.buy_number = buy_number;
      return this;
    }

    /**
     * 标记是否已经添加过
     */
    public Builder setIsAddedGoods(Boolean is_added_goods) {
      this.is_added_goods = is_added_goods;
      return this;
    }

    /**
     * 来源标签
     */
    public Builder setShopLabel(String shop_label) {
      this.shop_label = shop_label;
      return this;
    }

    /**
     * 主播专有标签
     */
    public Builder setHostLabel(String host_label) {
      this.host_label = host_label;
      return this;
    }

    /**
     * 促销活动标签
     */
    public Builder setPromotionLabel(String promotion_label) {
      this.promotion_label = promotion_label;
      return this;
    }

    /**
     * 商品标签
     */
    public Builder setLabel(String label) {
      this.label = label;
      return this;
    }

    /**
     * 价格标签
     */
    public Builder setPriceLabel(String price_label) {
      this.price_label = price_label;
      return this;
    }

    /**
     * 优惠券名字
     */
    public Builder setCouponName(String coupon_name) {
      this.coupon_name = coupon_name;
      return this;
    }

    /**
     * 优惠券地址
     */
    public Builder setCouponUrl(String coupon_url) {
      this.coupon_url = coupon_url;
      return this;
    }

    /**
     * 新增电商佣金（元）
     */
    public Builder setMiliveIncome(String milive_income) {
      this.milive_income = milive_income;
      return this;
    }

    /**
     * 直播补贴佣金
     */
    public Builder setMiliveHostIncome(String milive_host_income) {
      this.milive_host_income = milive_host_income;
      return this;
    }

    /**
     * 主播补贴钻石
     */
    public Builder setMiliveHostGift(String milive_host_gift) {
      this.milive_host_gift = milive_host_gift;
      return this;
    }

    /**
     * 观众补贴钻石
     */
    public Builder setMiliveUserGift(String milive_user_gift) {
      this.milive_user_gift = milive_user_gift;
      return this;
    }

    @Override
    public GoodsInfo build() {
      return new GoodsInfo(sku, name, category, brand_id, brand_name, shop_logo, shop_url, img, mprice, price, status, stock_state, stock_state_name, shop_type, goods_url, income_rate, buy_number, is_added_goods, shop_label, host_label, promotion_label, label, price_label, coupon_name, coupon_url, milive_income, milive_host_income, milive_host_gift, milive_user_gift, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GoodsInfo extends ProtoAdapter<GoodsInfo> {
    public ProtoAdapter_GoodsInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, GoodsInfo.class);
    }

    @Override
    public int encodedSize(GoodsInfo value) {
      return ProtoAdapter.INT64.encodedSizeWithTag(1, value.sku)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.name)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.category)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.brand_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.brand_name)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.shop_logo)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.shop_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(8, value.img)
          + ProtoAdapter.DOUBLE.encodedSizeWithTag(9, value.mprice)
          + ProtoAdapter.DOUBLE.encodedSizeWithTag(10, value.price)
          + ProtoAdapter.INT32.encodedSizeWithTag(11, value.status)
          + ProtoAdapter.INT32.encodedSizeWithTag(12, value.stock_state)
          + ProtoAdapter.STRING.encodedSizeWithTag(13, value.stock_state_name)
          + ProtoAdapter.INT32.encodedSizeWithTag(14, value.shop_type)
          + ProtoAdapter.STRING.encodedSizeWithTag(15, value.goods_url)
          + ProtoAdapter.DOUBLE.encodedSizeWithTag(16, value.income_rate)
          + ProtoAdapter.INT32.encodedSizeWithTag(17, value.buy_number)
          + ProtoAdapter.BOOL.encodedSizeWithTag(18, value.is_added_goods)
          + ProtoAdapter.STRING.encodedSizeWithTag(19, value.shop_label)
          + ProtoAdapter.STRING.encodedSizeWithTag(20, value.host_label)
          + ProtoAdapter.STRING.encodedSizeWithTag(21, value.promotion_label)
          + ProtoAdapter.STRING.encodedSizeWithTag(22, value.label)
          + ProtoAdapter.STRING.encodedSizeWithTag(23, value.price_label)
          + ProtoAdapter.STRING.encodedSizeWithTag(24, value.coupon_name)
          + ProtoAdapter.STRING.encodedSizeWithTag(25, value.coupon_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(26, value.milive_income)
          + ProtoAdapter.STRING.encodedSizeWithTag(27, value.milive_host_income)
          + ProtoAdapter.STRING.encodedSizeWithTag(28, value.milive_host_gift)
          + ProtoAdapter.STRING.encodedSizeWithTag(29, value.milive_user_gift)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GoodsInfo value) throws IOException {
      ProtoAdapter.INT64.encodeWithTag(writer, 1, value.sku);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.category);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.brand_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.brand_name);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.shop_logo);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.shop_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 8, value.img);
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 9, value.mprice);
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 10, value.price);
      ProtoAdapter.INT32.encodeWithTag(writer, 11, value.status);
      ProtoAdapter.INT32.encodeWithTag(writer, 12, value.stock_state);
      ProtoAdapter.STRING.encodeWithTag(writer, 13, value.stock_state_name);
      ProtoAdapter.INT32.encodeWithTag(writer, 14, value.shop_type);
      ProtoAdapter.STRING.encodeWithTag(writer, 15, value.goods_url);
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 16, value.income_rate);
      ProtoAdapter.INT32.encodeWithTag(writer, 17, value.buy_number);
      ProtoAdapter.BOOL.encodeWithTag(writer, 18, value.is_added_goods);
      ProtoAdapter.STRING.encodeWithTag(writer, 19, value.shop_label);
      ProtoAdapter.STRING.encodeWithTag(writer, 20, value.host_label);
      ProtoAdapter.STRING.encodeWithTag(writer, 21, value.promotion_label);
      ProtoAdapter.STRING.encodeWithTag(writer, 22, value.label);
      ProtoAdapter.STRING.encodeWithTag(writer, 23, value.price_label);
      ProtoAdapter.STRING.encodeWithTag(writer, 24, value.coupon_name);
      ProtoAdapter.STRING.encodeWithTag(writer, 25, value.coupon_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 26, value.milive_income);
      ProtoAdapter.STRING.encodeWithTag(writer, 27, value.milive_host_income);
      ProtoAdapter.STRING.encodeWithTag(writer, 28, value.milive_host_gift);
      ProtoAdapter.STRING.encodeWithTag(writer, 29, value.milive_user_gift);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GoodsInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setSku(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.setName(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setCategory(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setBrandId(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.setBrandName(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.setShopLogo(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.setShopUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.setImg(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.setMprice(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 10: builder.setPrice(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 11: builder.setStatus(ProtoAdapter.INT32.decode(reader)); break;
          case 12: builder.setStockState(ProtoAdapter.INT32.decode(reader)); break;
          case 13: builder.setStockStateName(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.setShopType(ProtoAdapter.INT32.decode(reader)); break;
          case 15: builder.setGoodsUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.setIncomeRate(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 17: builder.setBuyNumber(ProtoAdapter.INT32.decode(reader)); break;
          case 18: builder.setIsAddedGoods(ProtoAdapter.BOOL.decode(reader)); break;
          case 19: builder.setShopLabel(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.setHostLabel(ProtoAdapter.STRING.decode(reader)); break;
          case 21: builder.setPromotionLabel(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.setLabel(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.setPriceLabel(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.setCouponName(ProtoAdapter.STRING.decode(reader)); break;
          case 25: builder.setCouponUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 26: builder.setMiliveIncome(ProtoAdapter.STRING.decode(reader)); break;
          case 27: builder.setMiliveHostIncome(ProtoAdapter.STRING.decode(reader)); break;
          case 28: builder.setMiliveHostGift(ProtoAdapter.STRING.decode(reader)); break;
          case 29: builder.setMiliveUserGift(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GoodsInfo redact(GoodsInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
