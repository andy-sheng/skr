// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveCommon.proto
package com.wali.live.proto.LiveCommon;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class AnimationConfig extends Message<AnimationConfig, AnimationConfig.Builder> {
  public static final ProtoAdapter<AnimationConfig> ADAPTER = new ProtoAdapter_AnimationConfig();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ANIMATION_EFFECT = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer animation_effect;

  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LiveCommon.LevelRange#ADAPTER"
  )
  public final LevelRange level_range;

  public AnimationConfig(Integer animation_effect, LevelRange level_range) {
    this(animation_effect, level_range, ByteString.EMPTY);
  }

  public AnimationConfig(Integer animation_effect, LevelRange level_range,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.animation_effect = animation_effect;
    this.level_range = level_range;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.animation_effect = animation_effect;
    builder.level_range = level_range;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AnimationConfig)) return false;
    AnimationConfig o = (AnimationConfig) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(animation_effect, o.animation_effect)
        && Internal.equals(level_range, o.level_range);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (animation_effect != null ? animation_effect.hashCode() : 0);
      result = result * 37 + (level_range != null ? level_range.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (animation_effect != null) builder.append(", animation_effect=").append(animation_effect);
    if (level_range != null) builder.append(", level_range=").append(level_range);
    return builder.replace(0, 2, "AnimationConfig{").append('}').toString();
  }

  public byte[] toByteArray() {
    return AnimationConfig.ADAPTER.encode(this);
  }

  public static final AnimationConfig parseFrom(byte[] data) throws IOException {
    AnimationConfig c = null;
       c = AnimationConfig.ADAPTER.decode(data);
    return c;
  }

  public Integer getAnimationEffect() {
    if(animation_effect==null){
        return DEFAULT_ANIMATION_EFFECT;
    }
    return animation_effect;
  }

  public LevelRange getLevelRange() {
    if(level_range==null){
        return new LevelRange.Builder().build();
    }
    return level_range;
  }

  public boolean hasAnimationEffect() {
    return animation_effect!=null;
  }

  public boolean hasLevelRange() {
    return level_range!=null;
  }

  public static final class Builder extends Message.Builder<AnimationConfig, Builder> {
    public Integer animation_effect;

    public LevelRange level_range;

    public Builder() {
    }

    public Builder setAnimationEffect(Integer animation_effect) {
      this.animation_effect = animation_effect;
      return this;
    }

    public Builder setLevelRange(LevelRange level_range) {
      this.level_range = level_range;
      return this;
    }

    @Override
    public AnimationConfig build() {
      return new AnimationConfig(animation_effect, level_range, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_AnimationConfig extends ProtoAdapter<AnimationConfig> {
    public ProtoAdapter_AnimationConfig() {
      super(FieldEncoding.LENGTH_DELIMITED, AnimationConfig.class);
    }

    @Override
    public int encodedSize(AnimationConfig value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.animation_effect)
          + LevelRange.ADAPTER.encodedSizeWithTag(2, value.level_range)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AnimationConfig value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.animation_effect);
      LevelRange.ADAPTER.encodeWithTag(writer, 2, value.level_range);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AnimationConfig decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setAnimationEffect(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setLevelRange(LevelRange.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AnimationConfig redact(AnimationConfig value) {
      Builder builder = value.newBuilder();
      if (builder.level_range != null) builder.level_range = LevelRange.ADAPTER.redact(builder.level_range);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
