// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: RedEnvelope.proto
package com.wali.live.proto.RedEnvelope;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 拉取红包配置信息返回
 */
public final class GetRedEnvelopSettingRsp extends Message<GetRedEnvelopSettingRsp, GetRedEnvelopSettingRsp.Builder> {
  public static final ProtoAdapter<GetRedEnvelopSettingRsp> ADAPTER = new ProtoAdapter_GetRedEnvelopSettingRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RETCODE = 0;

  public static final String DEFAULT_ERRMSG = "";

  public static final Integer DEFAULT_AVGGEM = 0;

  public static final Integer DEFAULT_PACKAGECNTLIMIT = 0;

  public static final Integer DEFAULT_GEMCNTLIMIT = 0;

  public static final Integer DEFAULT_GEMCNTLOWERLIMIT = 0;

  public static final Integer DEFAULT_PACKAGECNTLOWERLIMIT = 0;

  /**
   * 返回码
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer retCode;

  /**
   * 错误提示说明
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String errMsg;

  /**
   * 红包金额列表
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> gems;

  /**
   * 红包平均金额
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer avgGem;

  /**
   * 红包个数上限
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer packageCntLimit;

  /**
   * 总钻石数上限
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gemCntLimit;

  /**
   * 总钻石数下限
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gemCntLowerLimit;

  /**
   * 红包个数下限
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer packageCntLowerLimit;

  /**
   * 红包金额对应的等级，和gems对应
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> package_leveld;

  public GetRedEnvelopSettingRsp(Integer retCode, String errMsg, List<Integer> gems, Integer avgGem,
      Integer packageCntLimit, Integer gemCntLimit, Integer gemCntLowerLimit,
      Integer packageCntLowerLimit, List<Integer> package_leveld) {
    this(retCode, errMsg, gems, avgGem, packageCntLimit, gemCntLimit, gemCntLowerLimit, packageCntLowerLimit, package_leveld, ByteString.EMPTY);
  }

  public GetRedEnvelopSettingRsp(Integer retCode, String errMsg, List<Integer> gems, Integer avgGem,
      Integer packageCntLimit, Integer gemCntLimit, Integer gemCntLowerLimit,
      Integer packageCntLowerLimit, List<Integer> package_leveld, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.retCode = retCode;
    this.errMsg = errMsg;
    this.gems = Internal.immutableCopyOf("gems", gems);
    this.avgGem = avgGem;
    this.packageCntLimit = packageCntLimit;
    this.gemCntLimit = gemCntLimit;
    this.gemCntLowerLimit = gemCntLowerLimit;
    this.packageCntLowerLimit = packageCntLowerLimit;
    this.package_leveld = Internal.immutableCopyOf("package_leveld", package_leveld);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.retCode = retCode;
    builder.errMsg = errMsg;
    builder.gems = Internal.copyOf("gems", gems);
    builder.avgGem = avgGem;
    builder.packageCntLimit = packageCntLimit;
    builder.gemCntLimit = gemCntLimit;
    builder.gemCntLowerLimit = gemCntLowerLimit;
    builder.packageCntLowerLimit = packageCntLowerLimit;
    builder.package_leveld = Internal.copyOf("package_leveld", package_leveld);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetRedEnvelopSettingRsp)) return false;
    GetRedEnvelopSettingRsp o = (GetRedEnvelopSettingRsp) other;
    return unknownFields().equals(o.unknownFields())
        && retCode.equals(o.retCode)
        && Internal.equals(errMsg, o.errMsg)
        && gems.equals(o.gems)
        && Internal.equals(avgGem, o.avgGem)
        && Internal.equals(packageCntLimit, o.packageCntLimit)
        && Internal.equals(gemCntLimit, o.gemCntLimit)
        && Internal.equals(gemCntLowerLimit, o.gemCntLowerLimit)
        && Internal.equals(packageCntLowerLimit, o.packageCntLowerLimit)
        && package_leveld.equals(o.package_leveld);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + retCode.hashCode();
      result = result * 37 + (errMsg != null ? errMsg.hashCode() : 0);
      result = result * 37 + gems.hashCode();
      result = result * 37 + (avgGem != null ? avgGem.hashCode() : 0);
      result = result * 37 + (packageCntLimit != null ? packageCntLimit.hashCode() : 0);
      result = result * 37 + (gemCntLimit != null ? gemCntLimit.hashCode() : 0);
      result = result * 37 + (gemCntLowerLimit != null ? gemCntLowerLimit.hashCode() : 0);
      result = result * 37 + (packageCntLowerLimit != null ? packageCntLowerLimit.hashCode() : 0);
      result = result * 37 + package_leveld.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", retCode=").append(retCode);
    if (errMsg != null) builder.append(", errMsg=").append(errMsg);
    if (!gems.isEmpty()) builder.append(", gems=").append(gems);
    if (avgGem != null) builder.append(", avgGem=").append(avgGem);
    if (packageCntLimit != null) builder.append(", packageCntLimit=").append(packageCntLimit);
    if (gemCntLimit != null) builder.append(", gemCntLimit=").append(gemCntLimit);
    if (gemCntLowerLimit != null) builder.append(", gemCntLowerLimit=").append(gemCntLowerLimit);
    if (packageCntLowerLimit != null) builder.append(", packageCntLowerLimit=").append(packageCntLowerLimit);
    if (!package_leveld.isEmpty()) builder.append(", package_leveld=").append(package_leveld);
    return builder.replace(0, 2, "GetRedEnvelopSettingRsp{").append('}').toString();
  }

  public static final GetRedEnvelopSettingRsp parseFrom(byte[] data) throws IOException {
    GetRedEnvelopSettingRsp c = null;
       c = GetRedEnvelopSettingRsp.ADAPTER.decode(data);
    return c;
  }

  /**
   * 返回码
   */
  public Integer getRetCode() {
    if(retCode==null){
        return DEFAULT_RETCODE;
    }
    return retCode;
  }

  /**
   * 错误提示说明
   */
  public String getErrMsg() {
    if(errMsg==null){
        return DEFAULT_ERRMSG;
    }
    return errMsg;
  }

  /**
   * 红包金额列表
   */
  public List<Integer> getGemsList() {
    if(gems==null){
        return new java.util.ArrayList<Integer>();
    }
    return gems;
  }

  /**
   * 红包平均金额
   */
  public Integer getAvgGem() {
    if(avgGem==null){
        return DEFAULT_AVGGEM;
    }
    return avgGem;
  }

  /**
   * 红包个数上限
   */
  public Integer getPackageCntLimit() {
    if(packageCntLimit==null){
        return DEFAULT_PACKAGECNTLIMIT;
    }
    return packageCntLimit;
  }

  /**
   * 总钻石数上限
   */
  public Integer getGemCntLimit() {
    if(gemCntLimit==null){
        return DEFAULT_GEMCNTLIMIT;
    }
    return gemCntLimit;
  }

  /**
   * 总钻石数下限
   */
  public Integer getGemCntLowerLimit() {
    if(gemCntLowerLimit==null){
        return DEFAULT_GEMCNTLOWERLIMIT;
    }
    return gemCntLowerLimit;
  }

  /**
   * 红包个数下限
   */
  public Integer getPackageCntLowerLimit() {
    if(packageCntLowerLimit==null){
        return DEFAULT_PACKAGECNTLOWERLIMIT;
    }
    return packageCntLowerLimit;
  }

  /**
   * 红包金额对应的等级，和gems对应
   */
  public List<Integer> getPackageLeveldList() {
    if(package_leveld==null){
        return new java.util.ArrayList<Integer>();
    }
    return package_leveld;
  }

  /**
   * 返回码
   */
  public boolean hasRetCode() {
    return retCode!=null;
  }

  /**
   * 错误提示说明
   */
  public boolean hasErrMsg() {
    return errMsg!=null;
  }

  /**
   * 红包金额列表
   */
  public boolean hasGemsList() {
    return gems!=null;
  }

  /**
   * 红包平均金额
   */
  public boolean hasAvgGem() {
    return avgGem!=null;
  }

  /**
   * 红包个数上限
   */
  public boolean hasPackageCntLimit() {
    return packageCntLimit!=null;
  }

  /**
   * 总钻石数上限
   */
  public boolean hasGemCntLimit() {
    return gemCntLimit!=null;
  }

  /**
   * 总钻石数下限
   */
  public boolean hasGemCntLowerLimit() {
    return gemCntLowerLimit!=null;
  }

  /**
   * 红包个数下限
   */
  public boolean hasPackageCntLowerLimit() {
    return packageCntLowerLimit!=null;
  }

  /**
   * 红包金额对应的等级，和gems对应
   */
  public boolean hasPackageLeveldList() {
    return package_leveld!=null;
  }

  public static final class Builder extends Message.Builder<GetRedEnvelopSettingRsp, Builder> {
    public Integer retCode;

    public String errMsg;

    public List<Integer> gems;

    public Integer avgGem;

    public Integer packageCntLimit;

    public Integer gemCntLimit;

    public Integer gemCntLowerLimit;

    public Integer packageCntLowerLimit;

    public List<Integer> package_leveld;

    public Builder() {
      gems = Internal.newMutableList();
      package_leveld = Internal.newMutableList();
    }

    /**
     * 返回码
     */
    public Builder setRetCode(Integer retCode) {
      this.retCode = retCode;
      return this;
    }

    /**
     * 错误提示说明
     */
    public Builder setErrMsg(String errMsg) {
      this.errMsg = errMsg;
      return this;
    }

    /**
     * 红包金额列表
     */
    public Builder addAllGems(List<Integer> gems) {
      Internal.checkElementsNotNull(gems);
      this.gems = gems;
      return this;
    }

    /**
     * 红包平均金额
     */
    public Builder setAvgGem(Integer avgGem) {
      this.avgGem = avgGem;
      return this;
    }

    /**
     * 红包个数上限
     */
    public Builder setPackageCntLimit(Integer packageCntLimit) {
      this.packageCntLimit = packageCntLimit;
      return this;
    }

    /**
     * 总钻石数上限
     */
    public Builder setGemCntLimit(Integer gemCntLimit) {
      this.gemCntLimit = gemCntLimit;
      return this;
    }

    /**
     * 总钻石数下限
     */
    public Builder setGemCntLowerLimit(Integer gemCntLowerLimit) {
      this.gemCntLowerLimit = gemCntLowerLimit;
      return this;
    }

    /**
     * 红包个数下限
     */
    public Builder setPackageCntLowerLimit(Integer packageCntLowerLimit) {
      this.packageCntLowerLimit = packageCntLowerLimit;
      return this;
    }

    /**
     * 红包金额对应的等级，和gems对应
     */
    public Builder addAllPackageLeveld(List<Integer> package_leveld) {
      Internal.checkElementsNotNull(package_leveld);
      this.package_leveld = package_leveld;
      return this;
    }

    @Override
    public GetRedEnvelopSettingRsp build() {
      return new GetRedEnvelopSettingRsp(retCode, errMsg, gems, avgGem, packageCntLimit, gemCntLimit, gemCntLowerLimit, packageCntLowerLimit, package_leveld, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetRedEnvelopSettingRsp extends ProtoAdapter<GetRedEnvelopSettingRsp> {
    public ProtoAdapter_GetRedEnvelopSettingRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetRedEnvelopSettingRsp.class);
    }

    @Override
    public int encodedSize(GetRedEnvelopSettingRsp value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.retCode)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.errMsg)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(3, value.gems)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.avgGem)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.packageCntLimit)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.gemCntLimit)
          + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.gemCntLowerLimit)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.packageCntLowerLimit)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(9, value.package_leveld)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetRedEnvelopSettingRsp value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.retCode);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.errMsg);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 3, value.gems);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.avgGem);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.packageCntLimit);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.gemCntLimit);
      ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.gemCntLowerLimit);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.packageCntLowerLimit);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 9, value.package_leveld);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetRedEnvelopSettingRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setRetCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setErrMsg(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.gems.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setAvgGem(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setPackageCntLimit(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setGemCntLimit(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setGemCntLowerLimit(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.setPackageCntLowerLimit(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.package_leveld.add(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetRedEnvelopSettingRsp redact(GetRedEnvelopSettingRsp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
