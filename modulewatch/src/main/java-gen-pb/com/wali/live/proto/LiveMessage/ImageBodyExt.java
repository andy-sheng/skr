// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class ImageBodyExt extends Message<ImageBodyExt, ImageBodyExt.Builder> {
  public static final ProtoAdapter<ImageBodyExt> ADAPTER = new ProtoAdapter_ImageBodyExt();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_MIMETYPE = "";

  public static final String DEFAULT_URL = "";

  public static final Integer DEFAULT_WIDTH = 0;

  public static final Integer DEFAULT_HEIGHT = 0;

  public static final Integer DEFAULT_SIZE = 0;

  public static final Boolean DEFAULT_IS_ORIGINAL = false;

  public static final String DEFAULT_MD5 = "";

  /**
   * 强调一下 如果图片是 jpeg ,则使用 "image/jpeg"
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String mimeType;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String url;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer width;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer height;

  /**
   * 文件大小，单位  byte
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer size;

  /**
   * 是否是原图
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_original;

  /**
   * 图片md5
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String md5;

  public ImageBodyExt(String mimeType, String url, Integer width, Integer height, Integer size,
      Boolean is_original, String md5) {
    this(mimeType, url, width, height, size, is_original, md5, ByteString.EMPTY);
  }

  public ImageBodyExt(String mimeType, String url, Integer width, Integer height, Integer size,
      Boolean is_original, String md5, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.mimeType = mimeType;
    this.url = url;
    this.width = width;
    this.height = height;
    this.size = size;
    this.is_original = is_original;
    this.md5 = md5;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.mimeType = mimeType;
    builder.url = url;
    builder.width = width;
    builder.height = height;
    builder.size = size;
    builder.is_original = is_original;
    builder.md5 = md5;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ImageBodyExt)) return false;
    ImageBodyExt o = (ImageBodyExt) other;
    return unknownFields().equals(o.unknownFields())
        && mimeType.equals(o.mimeType)
        && url.equals(o.url)
        && width.equals(o.width)
        && height.equals(o.height)
        && size.equals(o.size)
        && Internal.equals(is_original, o.is_original)
        && Internal.equals(md5, o.md5);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + mimeType.hashCode();
      result = result * 37 + url.hashCode();
      result = result * 37 + width.hashCode();
      result = result * 37 + height.hashCode();
      result = result * 37 + size.hashCode();
      result = result * 37 + (is_original != null ? is_original.hashCode() : 0);
      result = result * 37 + (md5 != null ? md5.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", mimeType=").append(mimeType);
    builder.append(", url=").append(url);
    builder.append(", width=").append(width);
    builder.append(", height=").append(height);
    builder.append(", size=").append(size);
    if (is_original != null) builder.append(", is_original=").append(is_original);
    if (md5 != null) builder.append(", md5=").append(md5);
    return builder.replace(0, 2, "ImageBodyExt{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ImageBodyExt.ADAPTER.encode(this);
  }

  public static final ImageBodyExt parseFrom(byte[] data) throws IOException {
    ImageBodyExt c = null;
       c = ImageBodyExt.ADAPTER.decode(data);
    return c;
  }

  /**
   * 强调一下 如果图片是 jpeg ,则使用 "image/jpeg"
   */
  public String getMimeType() {
    if(mimeType==null){
        return DEFAULT_MIMETYPE;
    }
    return mimeType;
  }

  public String getUrl() {
    if(url==null){
        return DEFAULT_URL;
    }
    return url;
  }

  public Integer getWidth() {
    if(width==null){
        return DEFAULT_WIDTH;
    }
    return width;
  }

  public Integer getHeight() {
    if(height==null){
        return DEFAULT_HEIGHT;
    }
    return height;
  }

  /**
   * 文件大小，单位  byte
   */
  public Integer getSize() {
    if(size==null){
        return DEFAULT_SIZE;
    }
    return size;
  }

  /**
   * 是否是原图
   */
  public Boolean getIsOriginal() {
    if(is_original==null){
        return DEFAULT_IS_ORIGINAL;
    }
    return is_original;
  }

  /**
   * 图片md5
   */
  public String getMd5() {
    if(md5==null){
        return DEFAULT_MD5;
    }
    return md5;
  }

  /**
   * 强调一下 如果图片是 jpeg ,则使用 "image/jpeg"
   */
  public boolean hasMimeType() {
    return mimeType!=null;
  }

  public boolean hasUrl() {
    return url!=null;
  }

  public boolean hasWidth() {
    return width!=null;
  }

  public boolean hasHeight() {
    return height!=null;
  }

  /**
   * 文件大小，单位  byte
   */
  public boolean hasSize() {
    return size!=null;
  }

  /**
   * 是否是原图
   */
  public boolean hasIsOriginal() {
    return is_original!=null;
  }

  /**
   * 图片md5
   */
  public boolean hasMd5() {
    return md5!=null;
  }

  public static final class Builder extends Message.Builder<ImageBodyExt, Builder> {
    public String mimeType;

    public String url;

    public Integer width;

    public Integer height;

    public Integer size;

    public Boolean is_original;

    public String md5;

    public Builder() {
    }

    /**
     * 强调一下 如果图片是 jpeg ,则使用 "image/jpeg"
     */
    public Builder setMimeType(String mimeType) {
      this.mimeType = mimeType;
      return this;
    }

    public Builder setUrl(String url) {
      this.url = url;
      return this;
    }

    public Builder setWidth(Integer width) {
      this.width = width;
      return this;
    }

    public Builder setHeight(Integer height) {
      this.height = height;
      return this;
    }

    /**
     * 文件大小，单位  byte
     */
    public Builder setSize(Integer size) {
      this.size = size;
      return this;
    }

    /**
     * 是否是原图
     */
    public Builder setIsOriginal(Boolean is_original) {
      this.is_original = is_original;
      return this;
    }

    /**
     * 图片md5
     */
    public Builder setMd5(String md5) {
      this.md5 = md5;
      return this;
    }

    @Override
    public ImageBodyExt build() {
      return new ImageBodyExt(mimeType, url, width, height, size, is_original, md5, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ImageBodyExt extends ProtoAdapter<ImageBodyExt> {
    public ProtoAdapter_ImageBodyExt() {
      super(FieldEncoding.LENGTH_DELIMITED, ImageBodyExt.class);
    }

    @Override
    public int encodedSize(ImageBodyExt value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.mimeType)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.url)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.width)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.height)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.size)
          + ProtoAdapter.BOOL.encodedSizeWithTag(6, value.is_original)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.md5)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ImageBodyExt value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.mimeType);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.url);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.width);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.height);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.size);
      ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.is_original);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.md5);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ImageBodyExt decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setMimeType(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.setUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setWidth(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setHeight(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setSize(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.setIsOriginal(ProtoAdapter.BOOL.decode(reader)); break;
          case 7: builder.setMd5(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ImageBodyExt redact(ImageBodyExt value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
