// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveCommon.proto
package com.wali.live.proto.LiveCommon;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PKInfo extends Message<PKInfo, PKInfo.Builder> {
  public static final ProtoAdapter<PKInfo> ADAPTER = new ProtoAdapter_PKInfo();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UUID = 0L;

  public static final String DEFAULT_LIVEID = "";

  public static final Integer DEFAULT_PKINITTICKET = 0;

  /**
   * 用户id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long uuid;

  /**
   * 房间号
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String liveId;

  /**
   * pk初始票值
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer pkInitTicket;

  public PKInfo(Long uuid, String liveId, Integer pkInitTicket) {
    this(uuid, liveId, pkInitTicket, ByteString.EMPTY);
  }

  public PKInfo(Long uuid, String liveId, Integer pkInitTicket, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.uuid = uuid;
    this.liveId = liveId;
    this.pkInitTicket = pkInitTicket;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.uuid = uuid;
    builder.liveId = liveId;
    builder.pkInitTicket = pkInitTicket;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PKInfo)) return false;
    PKInfo o = (PKInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(uuid, o.uuid)
        && Internal.equals(liveId, o.liveId)
        && Internal.equals(pkInitTicket, o.pkInitTicket);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (uuid != null ? uuid.hashCode() : 0);
      result = result * 37 + (liveId != null ? liveId.hashCode() : 0);
      result = result * 37 + (pkInitTicket != null ? pkInitTicket.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (uuid != null) builder.append(", uuid=").append(uuid);
    if (liveId != null) builder.append(", liveId=").append(liveId);
    if (pkInitTicket != null) builder.append(", pkInitTicket=").append(pkInitTicket);
    return builder.replace(0, 2, "PKInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return PKInfo.ADAPTER.encode(this);
  }

  public static final PKInfo parseFrom(byte[] data) throws IOException {
    PKInfo c = null;
       c = PKInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 用户id
   */
  public Long getUuid() {
    if(uuid==null){
        return DEFAULT_UUID;
    }
    return uuid;
  }

  /**
   * 房间号
   */
  public String getLiveId() {
    if(liveId==null){
        return DEFAULT_LIVEID;
    }
    return liveId;
  }

  /**
   * pk初始票值
   */
  public Integer getPkInitTicket() {
    if(pkInitTicket==null){
        return DEFAULT_PKINITTICKET;
    }
    return pkInitTicket;
  }

  /**
   * 用户id
   */
  public boolean hasUuid() {
    return uuid!=null;
  }

  /**
   * 房间号
   */
  public boolean hasLiveId() {
    return liveId!=null;
  }

  /**
   * pk初始票值
   */
  public boolean hasPkInitTicket() {
    return pkInitTicket!=null;
  }

  public static final class Builder extends Message.Builder<PKInfo, Builder> {
    public Long uuid;

    public String liveId;

    public Integer pkInitTicket;

    public Builder() {
    }

    /**
     * 用户id
     */
    public Builder setUuid(Long uuid) {
      this.uuid = uuid;
      return this;
    }

    /**
     * 房间号
     */
    public Builder setLiveId(String liveId) {
      this.liveId = liveId;
      return this;
    }

    /**
     * pk初始票值
     */
    public Builder setPkInitTicket(Integer pkInitTicket) {
      this.pkInitTicket = pkInitTicket;
      return this;
    }

    @Override
    public PKInfo build() {
      return new PKInfo(uuid, liveId, pkInitTicket, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PKInfo extends ProtoAdapter<PKInfo> {
    public ProtoAdapter_PKInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, PKInfo.class);
    }

    @Override
    public int encodedSize(PKInfo value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.uuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.liveId)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.pkInitTicket)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PKInfo value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.uuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.liveId);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.pkInitTicket);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PKInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setLiveId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setPkInitTicket(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PKInfo redact(PKInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
