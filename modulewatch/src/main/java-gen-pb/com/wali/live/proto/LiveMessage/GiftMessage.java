// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMessage.proto
package com.wali.live.proto.LiveMessage;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 礼物消息
 */
public final class GiftMessage extends Message<GiftMessage, GiftMessage.Builder> {
  public static final ProtoAdapter<GiftMessage> ADAPTER = new ProtoAdapter_GiftMessage();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_GIFTID = 0;

  public static final String DEFAULT_GIFT_NAME = "";

  public static final Integer DEFAULT_GIFT_COUNT = 0;

  public static final Integer DEFAULT_ZHUBO_ASSET = 0;

  public static final Long DEFAULT_ZHUBO_ASSET_TIMESTAMP = 0L;

  public static final Integer DEFAULT_GIFT_VALUE = 0;

  public static final Long DEFAULT_AVATAR_TIMESTAMP = 0L;

  public static final String DEFAULT_IP = "";

  public static final Long DEFAULT_CONTINUEID = 0L;

  public static final Integer DEFAULT_GIFT_TYPE = 0;

  public static final String DEFAULT_MSG_BODY = "";

  public static final String DEFAULT_RED_ENVELOP_ID = "";

  public static final String DEFAULT_ORDER_ID = "";

  public static final String DEFAULT_LIVE_STREAM_URL = "";

  public static final Integer DEFAULT_BATCH_COUNT = 0;

  public static final Integer DEFAULT_POPULARITY = 0;

  public static final Long DEFAULT_POPULARITY_TIMESTAMP = 0L;

  public static final Integer DEFAULT_INCR_POPULARITY = 0;

  /**
   * 礼物id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer giftId;

  /**
   * 礼物名称
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String gift_name;

  /**
   * 礼物个数
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gift_count;

  /**
   * 主播当前的收益资产
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer zhubo_asset;

  /**
   * 主播当前资产时间戳
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long zhubo_asset_timestamp;

  /**
   * 礼物价值(钻石数)
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gift_value;

  /**
   * 购买礼物者头像时间戳
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long avatar_timestamp;

  /**
   * 购买礼物者IP
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String ip;

  /**
   * 标记此次送礼的属于哪一次连送，一组连送的continueId相同，一般为X1时的时间戳
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long continueId;

  /**
   * 礼物类型，1=普通礼物，2=弹幕礼物，3=红包礼物
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gift_type;

  /**
   * 弹幕礼物的文字内容
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String msg_body;

  /**
   * 红包id
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String red_envelop_id;

  /**
   * 订单号，retcode非0时必有
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String order_id;

  /**
   * 全局礼物的直播流地址
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String live_stream_url;

  /**
   * 批量购买个数，对应于客户端的gift_count，由于此处第三个字段已经使用，故改名
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer batch_count;

  /**
   * 人气值
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer popularity;

  /**
   * 人气值时间戳
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long popularity_timestamp;

  /**
   * 本次增长的人气值
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer incr_popularity;

  public GiftMessage(Integer giftId, String gift_name, Integer gift_count, Integer zhubo_asset,
      Long zhubo_asset_timestamp, Integer gift_value, Long avatar_timestamp, String ip,
      Long continueId, Integer gift_type, String msg_body, String red_envelop_id, String order_id,
      String live_stream_url, Integer batch_count, Integer popularity, Long popularity_timestamp,
      Integer incr_popularity) {
    this(giftId, gift_name, gift_count, zhubo_asset, zhubo_asset_timestamp, gift_value, avatar_timestamp, ip, continueId, gift_type, msg_body, red_envelop_id, order_id, live_stream_url, batch_count, popularity, popularity_timestamp, incr_popularity, ByteString.EMPTY);
  }

  public GiftMessage(Integer giftId, String gift_name, Integer gift_count, Integer zhubo_asset,
      Long zhubo_asset_timestamp, Integer gift_value, Long avatar_timestamp, String ip,
      Long continueId, Integer gift_type, String msg_body, String red_envelop_id, String order_id,
      String live_stream_url, Integer batch_count, Integer popularity, Long popularity_timestamp,
      Integer incr_popularity, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.giftId = giftId;
    this.gift_name = gift_name;
    this.gift_count = gift_count;
    this.zhubo_asset = zhubo_asset;
    this.zhubo_asset_timestamp = zhubo_asset_timestamp;
    this.gift_value = gift_value;
    this.avatar_timestamp = avatar_timestamp;
    this.ip = ip;
    this.continueId = continueId;
    this.gift_type = gift_type;
    this.msg_body = msg_body;
    this.red_envelop_id = red_envelop_id;
    this.order_id = order_id;
    this.live_stream_url = live_stream_url;
    this.batch_count = batch_count;
    this.popularity = popularity;
    this.popularity_timestamp = popularity_timestamp;
    this.incr_popularity = incr_popularity;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.giftId = giftId;
    builder.gift_name = gift_name;
    builder.gift_count = gift_count;
    builder.zhubo_asset = zhubo_asset;
    builder.zhubo_asset_timestamp = zhubo_asset_timestamp;
    builder.gift_value = gift_value;
    builder.avatar_timestamp = avatar_timestamp;
    builder.ip = ip;
    builder.continueId = continueId;
    builder.gift_type = gift_type;
    builder.msg_body = msg_body;
    builder.red_envelop_id = red_envelop_id;
    builder.order_id = order_id;
    builder.live_stream_url = live_stream_url;
    builder.batch_count = batch_count;
    builder.popularity = popularity;
    builder.popularity_timestamp = popularity_timestamp;
    builder.incr_popularity = incr_popularity;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GiftMessage)) return false;
    GiftMessage o = (GiftMessage) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(giftId, o.giftId)
        && Internal.equals(gift_name, o.gift_name)
        && Internal.equals(gift_count, o.gift_count)
        && Internal.equals(zhubo_asset, o.zhubo_asset)
        && Internal.equals(zhubo_asset_timestamp, o.zhubo_asset_timestamp)
        && Internal.equals(gift_value, o.gift_value)
        && Internal.equals(avatar_timestamp, o.avatar_timestamp)
        && Internal.equals(ip, o.ip)
        && Internal.equals(continueId, o.continueId)
        && Internal.equals(gift_type, o.gift_type)
        && Internal.equals(msg_body, o.msg_body)
        && Internal.equals(red_envelop_id, o.red_envelop_id)
        && Internal.equals(order_id, o.order_id)
        && Internal.equals(live_stream_url, o.live_stream_url)
        && Internal.equals(batch_count, o.batch_count)
        && Internal.equals(popularity, o.popularity)
        && Internal.equals(popularity_timestamp, o.popularity_timestamp)
        && Internal.equals(incr_popularity, o.incr_popularity);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (giftId != null ? giftId.hashCode() : 0);
      result = result * 37 + (gift_name != null ? gift_name.hashCode() : 0);
      result = result * 37 + (gift_count != null ? gift_count.hashCode() : 0);
      result = result * 37 + (zhubo_asset != null ? zhubo_asset.hashCode() : 0);
      result = result * 37 + (zhubo_asset_timestamp != null ? zhubo_asset_timestamp.hashCode() : 0);
      result = result * 37 + (gift_value != null ? gift_value.hashCode() : 0);
      result = result * 37 + (avatar_timestamp != null ? avatar_timestamp.hashCode() : 0);
      result = result * 37 + (ip != null ? ip.hashCode() : 0);
      result = result * 37 + (continueId != null ? continueId.hashCode() : 0);
      result = result * 37 + (gift_type != null ? gift_type.hashCode() : 0);
      result = result * 37 + (msg_body != null ? msg_body.hashCode() : 0);
      result = result * 37 + (red_envelop_id != null ? red_envelop_id.hashCode() : 0);
      result = result * 37 + (order_id != null ? order_id.hashCode() : 0);
      result = result * 37 + (live_stream_url != null ? live_stream_url.hashCode() : 0);
      result = result * 37 + (batch_count != null ? batch_count.hashCode() : 0);
      result = result * 37 + (popularity != null ? popularity.hashCode() : 0);
      result = result * 37 + (popularity_timestamp != null ? popularity_timestamp.hashCode() : 0);
      result = result * 37 + (incr_popularity != null ? incr_popularity.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (giftId != null) builder.append(", giftId=").append(giftId);
    if (gift_name != null) builder.append(", gift_name=").append(gift_name);
    if (gift_count != null) builder.append(", gift_count=").append(gift_count);
    if (zhubo_asset != null) builder.append(", zhubo_asset=").append(zhubo_asset);
    if (zhubo_asset_timestamp != null) builder.append(", zhubo_asset_timestamp=").append(zhubo_asset_timestamp);
    if (gift_value != null) builder.append(", gift_value=").append(gift_value);
    if (avatar_timestamp != null) builder.append(", avatar_timestamp=").append(avatar_timestamp);
    if (ip != null) builder.append(", ip=").append(ip);
    if (continueId != null) builder.append(", continueId=").append(continueId);
    if (gift_type != null) builder.append(", gift_type=").append(gift_type);
    if (msg_body != null) builder.append(", msg_body=").append(msg_body);
    if (red_envelop_id != null) builder.append(", red_envelop_id=").append(red_envelop_id);
    if (order_id != null) builder.append(", order_id=").append(order_id);
    if (live_stream_url != null) builder.append(", live_stream_url=").append(live_stream_url);
    if (batch_count != null) builder.append(", batch_count=").append(batch_count);
    if (popularity != null) builder.append(", popularity=").append(popularity);
    if (popularity_timestamp != null) builder.append(", popularity_timestamp=").append(popularity_timestamp);
    if (incr_popularity != null) builder.append(", incr_popularity=").append(incr_popularity);
    return builder.replace(0, 2, "GiftMessage{").append('}').toString();
  }

  public byte[] toByteArray() {
    return GiftMessage.ADAPTER.encode(this);
  }

  public static final GiftMessage parseFrom(byte[] data) throws IOException {
    GiftMessage c = null;
       c = GiftMessage.ADAPTER.decode(data);
    return c;
  }

  /**
   * 礼物id
   */
  public Integer getGiftId() {
    if(giftId==null){
        return DEFAULT_GIFTID;
    }
    return giftId;
  }

  /**
   * 礼物名称
   */
  public String getGiftName() {
    if(gift_name==null){
        return DEFAULT_GIFT_NAME;
    }
    return gift_name;
  }

  /**
   * 礼物个数
   */
  public Integer getGiftCount() {
    if(gift_count==null){
        return DEFAULT_GIFT_COUNT;
    }
    return gift_count;
  }

  /**
   * 主播当前的收益资产
   */
  public Integer getZhuboAsset() {
    if(zhubo_asset==null){
        return DEFAULT_ZHUBO_ASSET;
    }
    return zhubo_asset;
  }

  /**
   * 主播当前资产时间戳
   */
  public Long getZhuboAssetTimestamp() {
    if(zhubo_asset_timestamp==null){
        return DEFAULT_ZHUBO_ASSET_TIMESTAMP;
    }
    return zhubo_asset_timestamp;
  }

  /**
   * 礼物价值(钻石数)
   */
  public Integer getGiftValue() {
    if(gift_value==null){
        return DEFAULT_GIFT_VALUE;
    }
    return gift_value;
  }

  /**
   * 购买礼物者头像时间戳
   */
  public Long getAvatarTimestamp() {
    if(avatar_timestamp==null){
        return DEFAULT_AVATAR_TIMESTAMP;
    }
    return avatar_timestamp;
  }

  /**
   * 购买礼物者IP
   */
  public String getIp() {
    if(ip==null){
        return DEFAULT_IP;
    }
    return ip;
  }

  /**
   * 标记此次送礼的属于哪一次连送，一组连送的continueId相同，一般为X1时的时间戳
   */
  public Long getContinueId() {
    if(continueId==null){
        return DEFAULT_CONTINUEID;
    }
    return continueId;
  }

  /**
   * 礼物类型，1=普通礼物，2=弹幕礼物，3=红包礼物
   */
  public Integer getGiftType() {
    if(gift_type==null){
        return DEFAULT_GIFT_TYPE;
    }
    return gift_type;
  }

  /**
   * 弹幕礼物的文字内容
   */
  public String getMsgBody() {
    if(msg_body==null){
        return DEFAULT_MSG_BODY;
    }
    return msg_body;
  }

  /**
   * 红包id
   */
  public String getRedEnvelopId() {
    if(red_envelop_id==null){
        return DEFAULT_RED_ENVELOP_ID;
    }
    return red_envelop_id;
  }

  /**
   * 订单号，retcode非0时必有
   */
  public String getOrderId() {
    if(order_id==null){
        return DEFAULT_ORDER_ID;
    }
    return order_id;
  }

  /**
   * 全局礼物的直播流地址
   */
  public String getLiveStreamUrl() {
    if(live_stream_url==null){
        return DEFAULT_LIVE_STREAM_URL;
    }
    return live_stream_url;
  }

  /**
   * 批量购买个数，对应于客户端的gift_count，由于此处第三个字段已经使用，故改名
   */
  public Integer getBatchCount() {
    if(batch_count==null){
        return DEFAULT_BATCH_COUNT;
    }
    return batch_count;
  }

  /**
   * 人气值
   */
  public Integer getPopularity() {
    if(popularity==null){
        return DEFAULT_POPULARITY;
    }
    return popularity;
  }

  /**
   * 人气值时间戳
   */
  public Long getPopularityTimestamp() {
    if(popularity_timestamp==null){
        return DEFAULT_POPULARITY_TIMESTAMP;
    }
    return popularity_timestamp;
  }

  /**
   * 本次增长的人气值
   */
  public Integer getIncrPopularity() {
    if(incr_popularity==null){
        return DEFAULT_INCR_POPULARITY;
    }
    return incr_popularity;
  }

  /**
   * 礼物id
   */
  public boolean hasGiftId() {
    return giftId!=null;
  }

  /**
   * 礼物名称
   */
  public boolean hasGiftName() {
    return gift_name!=null;
  }

  /**
   * 礼物个数
   */
  public boolean hasGiftCount() {
    return gift_count!=null;
  }

  /**
   * 主播当前的收益资产
   */
  public boolean hasZhuboAsset() {
    return zhubo_asset!=null;
  }

  /**
   * 主播当前资产时间戳
   */
  public boolean hasZhuboAssetTimestamp() {
    return zhubo_asset_timestamp!=null;
  }

  /**
   * 礼物价值(钻石数)
   */
  public boolean hasGiftValue() {
    return gift_value!=null;
  }

  /**
   * 购买礼物者头像时间戳
   */
  public boolean hasAvatarTimestamp() {
    return avatar_timestamp!=null;
  }

  /**
   * 购买礼物者IP
   */
  public boolean hasIp() {
    return ip!=null;
  }

  /**
   * 标记此次送礼的属于哪一次连送，一组连送的continueId相同，一般为X1时的时间戳
   */
  public boolean hasContinueId() {
    return continueId!=null;
  }

  /**
   * 礼物类型，1=普通礼物，2=弹幕礼物，3=红包礼物
   */
  public boolean hasGiftType() {
    return gift_type!=null;
  }

  /**
   * 弹幕礼物的文字内容
   */
  public boolean hasMsgBody() {
    return msg_body!=null;
  }

  /**
   * 红包id
   */
  public boolean hasRedEnvelopId() {
    return red_envelop_id!=null;
  }

  /**
   * 订单号，retcode非0时必有
   */
  public boolean hasOrderId() {
    return order_id!=null;
  }

  /**
   * 全局礼物的直播流地址
   */
  public boolean hasLiveStreamUrl() {
    return live_stream_url!=null;
  }

  /**
   * 批量购买个数，对应于客户端的gift_count，由于此处第三个字段已经使用，故改名
   */
  public boolean hasBatchCount() {
    return batch_count!=null;
  }

  /**
   * 人气值
   */
  public boolean hasPopularity() {
    return popularity!=null;
  }

  /**
   * 人气值时间戳
   */
  public boolean hasPopularityTimestamp() {
    return popularity_timestamp!=null;
  }

  /**
   * 本次增长的人气值
   */
  public boolean hasIncrPopularity() {
    return incr_popularity!=null;
  }

  public static final class Builder extends Message.Builder<GiftMessage, Builder> {
    public Integer giftId;

    public String gift_name;

    public Integer gift_count;

    public Integer zhubo_asset;

    public Long zhubo_asset_timestamp;

    public Integer gift_value;

    public Long avatar_timestamp;

    public String ip;

    public Long continueId;

    public Integer gift_type;

    public String msg_body;

    public String red_envelop_id;

    public String order_id;

    public String live_stream_url;

    public Integer batch_count;

    public Integer popularity;

    public Long popularity_timestamp;

    public Integer incr_popularity;

    public Builder() {
    }

    /**
     * 礼物id
     */
    public Builder setGiftId(Integer giftId) {
      this.giftId = giftId;
      return this;
    }

    /**
     * 礼物名称
     */
    public Builder setGiftName(String gift_name) {
      this.gift_name = gift_name;
      return this;
    }

    /**
     * 礼物个数
     */
    public Builder setGiftCount(Integer gift_count) {
      this.gift_count = gift_count;
      return this;
    }

    /**
     * 主播当前的收益资产
     */
    public Builder setZhuboAsset(Integer zhubo_asset) {
      this.zhubo_asset = zhubo_asset;
      return this;
    }

    /**
     * 主播当前资产时间戳
     */
    public Builder setZhuboAssetTimestamp(Long zhubo_asset_timestamp) {
      this.zhubo_asset_timestamp = zhubo_asset_timestamp;
      return this;
    }

    /**
     * 礼物价值(钻石数)
     */
    public Builder setGiftValue(Integer gift_value) {
      this.gift_value = gift_value;
      return this;
    }

    /**
     * 购买礼物者头像时间戳
     */
    public Builder setAvatarTimestamp(Long avatar_timestamp) {
      this.avatar_timestamp = avatar_timestamp;
      return this;
    }

    /**
     * 购买礼物者IP
     */
    public Builder setIp(String ip) {
      this.ip = ip;
      return this;
    }

    /**
     * 标记此次送礼的属于哪一次连送，一组连送的continueId相同，一般为X1时的时间戳
     */
    public Builder setContinueId(Long continueId) {
      this.continueId = continueId;
      return this;
    }

    /**
     * 礼物类型，1=普通礼物，2=弹幕礼物，3=红包礼物
     */
    public Builder setGiftType(Integer gift_type) {
      this.gift_type = gift_type;
      return this;
    }

    /**
     * 弹幕礼物的文字内容
     */
    public Builder setMsgBody(String msg_body) {
      this.msg_body = msg_body;
      return this;
    }

    /**
     * 红包id
     */
    public Builder setRedEnvelopId(String red_envelop_id) {
      this.red_envelop_id = red_envelop_id;
      return this;
    }

    /**
     * 订单号，retcode非0时必有
     */
    public Builder setOrderId(String order_id) {
      this.order_id = order_id;
      return this;
    }

    /**
     * 全局礼物的直播流地址
     */
    public Builder setLiveStreamUrl(String live_stream_url) {
      this.live_stream_url = live_stream_url;
      return this;
    }

    /**
     * 批量购买个数，对应于客户端的gift_count，由于此处第三个字段已经使用，故改名
     */
    public Builder setBatchCount(Integer batch_count) {
      this.batch_count = batch_count;
      return this;
    }

    /**
     * 人气值
     */
    public Builder setPopularity(Integer popularity) {
      this.popularity = popularity;
      return this;
    }

    /**
     * 人气值时间戳
     */
    public Builder setPopularityTimestamp(Long popularity_timestamp) {
      this.popularity_timestamp = popularity_timestamp;
      return this;
    }

    /**
     * 本次增长的人气值
     */
    public Builder setIncrPopularity(Integer incr_popularity) {
      this.incr_popularity = incr_popularity;
      return this;
    }

    @Override
    public GiftMessage build() {
      return new GiftMessage(giftId, gift_name, gift_count, zhubo_asset, zhubo_asset_timestamp, gift_value, avatar_timestamp, ip, continueId, gift_type, msg_body, red_envelop_id, order_id, live_stream_url, batch_count, popularity, popularity_timestamp, incr_popularity, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GiftMessage extends ProtoAdapter<GiftMessage> {
    public ProtoAdapter_GiftMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, GiftMessage.class);
    }

    @Override
    public int encodedSize(GiftMessage value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.giftId)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.gift_name)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.gift_count)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.zhubo_asset)
          + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.zhubo_asset_timestamp)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.gift_value)
          + ProtoAdapter.UINT64.encodedSizeWithTag(7, value.avatar_timestamp)
          + ProtoAdapter.STRING.encodedSizeWithTag(8, value.ip)
          + ProtoAdapter.UINT64.encodedSizeWithTag(9, value.continueId)
          + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.gift_type)
          + ProtoAdapter.STRING.encodedSizeWithTag(11, value.msg_body)
          + ProtoAdapter.STRING.encodedSizeWithTag(12, value.red_envelop_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(13, value.order_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(14, value.live_stream_url)
          + ProtoAdapter.UINT32.encodedSizeWithTag(15, value.batch_count)
          + ProtoAdapter.UINT32.encodedSizeWithTag(16, value.popularity)
          + ProtoAdapter.UINT64.encodedSizeWithTag(17, value.popularity_timestamp)
          + ProtoAdapter.UINT32.encodedSizeWithTag(19, value.incr_popularity)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GiftMessage value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.giftId);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.gift_name);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.gift_count);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.zhubo_asset);
      ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.zhubo_asset_timestamp);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.gift_value);
      ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.avatar_timestamp);
      ProtoAdapter.STRING.encodeWithTag(writer, 8, value.ip);
      ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.continueId);
      ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.gift_type);
      ProtoAdapter.STRING.encodeWithTag(writer, 11, value.msg_body);
      ProtoAdapter.STRING.encodeWithTag(writer, 12, value.red_envelop_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 13, value.order_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 14, value.live_stream_url);
      ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.batch_count);
      ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.popularity);
      ProtoAdapter.UINT64.encodeWithTag(writer, 17, value.popularity_timestamp);
      ProtoAdapter.UINT32.encodeWithTag(writer, 19, value.incr_popularity);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GiftMessage decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setGiftId(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.setGiftName(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setGiftCount(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.setZhuboAsset(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.setZhuboAssetTimestamp(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.setGiftValue(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.setAvatarTimestamp(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.setIp(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.setContinueId(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.setGiftType(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.setMsgBody(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.setRedEnvelopId(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.setOrderId(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.setLiveStreamUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.setBatchCount(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.setPopularity(ProtoAdapter.UINT32.decode(reader)); break;
          case 17: builder.setPopularityTimestamp(ProtoAdapter.UINT64.decode(reader)); break;
          case 19: builder.setIncrPopularity(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GiftMessage redact(GiftMessage value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
