// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Live.proto
package com.wali.live.proto.Live;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
 * --proto_path=./proto --java_out=./modulewatch/src/main/java-gen-pb/ Live.proto
 */
public final class ThirdPartyInfo extends Message<ThirdPartyInfo, ThirdPartyInfo.Builder> {
  public static final ProtoAdapter<ThirdPartyInfo> ADAPTER = new ProtoAdapter_ThirdPartyInfo();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UUID = 0L;

  public static final String DEFAULT_DOWNSTREAMURL = "";

  public static final String DEFAULT_LOGOURL = "";

  public static final Integer DEFAULT_SOURCE = 0;

  /**
   * 第三方id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long uuid;

  /**
   * 第三方直播拉流地址
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String downStreamUrl;

  /**
   * logo url
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String logoUrl;

  /**
   * 第三方来源 0：虎牙
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer source;

  public ThirdPartyInfo(Long uuid, String downStreamUrl, String logoUrl, Integer source) {
    this(uuid, downStreamUrl, logoUrl, source, ByteString.EMPTY);
  }

  public ThirdPartyInfo(Long uuid, String downStreamUrl, String logoUrl, Integer source,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.uuid = uuid;
    this.downStreamUrl = downStreamUrl;
    this.logoUrl = logoUrl;
    this.source = source;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.uuid = uuid;
    builder.downStreamUrl = downStreamUrl;
    builder.logoUrl = logoUrl;
    builder.source = source;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ThirdPartyInfo)) return false;
    ThirdPartyInfo o = (ThirdPartyInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(uuid, o.uuid)
        && Internal.equals(downStreamUrl, o.downStreamUrl)
        && Internal.equals(logoUrl, o.logoUrl)
        && Internal.equals(source, o.source);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (uuid != null ? uuid.hashCode() : 0);
      result = result * 37 + (downStreamUrl != null ? downStreamUrl.hashCode() : 0);
      result = result * 37 + (logoUrl != null ? logoUrl.hashCode() : 0);
      result = result * 37 + (source != null ? source.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (uuid != null) builder.append(", uuid=").append(uuid);
    if (downStreamUrl != null) builder.append(", downStreamUrl=").append(downStreamUrl);
    if (logoUrl != null) builder.append(", logoUrl=").append(logoUrl);
    if (source != null) builder.append(", source=").append(source);
    return builder.replace(0, 2, "ThirdPartyInfo{").append('}').toString();
  }

  public byte[] toByteArray() {
    return ThirdPartyInfo.ADAPTER.encode(this);
  }

  public static final ThirdPartyInfo parseFrom(byte[] data) throws IOException {
    ThirdPartyInfo c = null;
       c = ThirdPartyInfo.ADAPTER.decode(data);
    return c;
  }

  /**
   * 第三方id
   */
  public Long getUuid() {
    if(uuid==null){
        return DEFAULT_UUID;
    }
    return uuid;
  }

  /**
   * 第三方直播拉流地址
   */
  public String getDownStreamUrl() {
    if(downStreamUrl==null){
        return DEFAULT_DOWNSTREAMURL;
    }
    return downStreamUrl;
  }

  /**
   * logo url
   */
  public String getLogoUrl() {
    if(logoUrl==null){
        return DEFAULT_LOGOURL;
    }
    return logoUrl;
  }

  /**
   * 第三方来源 0：虎牙
   */
  public Integer getSource() {
    if(source==null){
        return DEFAULT_SOURCE;
    }
    return source;
  }

  /**
   * 第三方id
   */
  public boolean hasUuid() {
    return uuid!=null;
  }

  /**
   * 第三方直播拉流地址
   */
  public boolean hasDownStreamUrl() {
    return downStreamUrl!=null;
  }

  /**
   * logo url
   */
  public boolean hasLogoUrl() {
    return logoUrl!=null;
  }

  /**
   * 第三方来源 0：虎牙
   */
  public boolean hasSource() {
    return source!=null;
  }

  public static final class Builder extends Message.Builder<ThirdPartyInfo, Builder> {
    public Long uuid;

    public String downStreamUrl;

    public String logoUrl;

    public Integer source;

    public Builder() {
    }

    /**
     * 第三方id
     */
    public Builder setUuid(Long uuid) {
      this.uuid = uuid;
      return this;
    }

    /**
     * 第三方直播拉流地址
     */
    public Builder setDownStreamUrl(String downStreamUrl) {
      this.downStreamUrl = downStreamUrl;
      return this;
    }

    /**
     * logo url
     */
    public Builder setLogoUrl(String logoUrl) {
      this.logoUrl = logoUrl;
      return this;
    }

    /**
     * 第三方来源 0：虎牙
     */
    public Builder setSource(Integer source) {
      this.source = source;
      return this;
    }

    @Override
    public ThirdPartyInfo build() {
      return new ThirdPartyInfo(uuid, downStreamUrl, logoUrl, source, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ThirdPartyInfo extends ProtoAdapter<ThirdPartyInfo> {
    public ProtoAdapter_ThirdPartyInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, ThirdPartyInfo.class);
    }

    @Override
    public int encodedSize(ThirdPartyInfo value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.uuid)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.downStreamUrl)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.logoUrl)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.source)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ThirdPartyInfo value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.uuid);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.downStreamUrl);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.logoUrl);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.source);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ThirdPartyInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setUuid(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.setDownStreamUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.setLogoUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.setSource(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ThirdPartyInfo redact(ThirdPartyInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
