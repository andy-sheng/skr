// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMall.proto
package com.wali.live.proto.LiveMall;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 导购
 */
public final class OrderInfoList extends Message<OrderInfoList, OrderInfoList.Builder> {
  public static final ProtoAdapter<OrderInfoList> ADAPTER = new ProtoAdapter_OrderInfoList();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_SHOP_TYPE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer shop_type;

  @WireField(
      tag = 2,
      adapter = "com.wali.live.proto.LiveMall.OrderInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<OrderInfo> order_info;

  public OrderInfoList(Integer shop_type, List<OrderInfo> order_info) {
    this(shop_type, order_info, ByteString.EMPTY);
  }

  public OrderInfoList(Integer shop_type, List<OrderInfo> order_info, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.shop_type = shop_type;
    this.order_info = Internal.immutableCopyOf("order_info", order_info);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.shop_type = shop_type;
    builder.order_info = Internal.copyOf("order_info", order_info);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OrderInfoList)) return false;
    OrderInfoList o = (OrderInfoList) other;
    return unknownFields().equals(o.unknownFields())
        && shop_type.equals(o.shop_type)
        && order_info.equals(o.order_info);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + shop_type.hashCode();
      result = result * 37 + order_info.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", shop_type=").append(shop_type);
    if (!order_info.isEmpty()) builder.append(", order_info=").append(order_info);
    return builder.replace(0, 2, "OrderInfoList{").append('}').toString();
  }

  public byte[] toByteArray() {
    return OrderInfoList.ADAPTER.encode(this);
  }

  public static final OrderInfoList parseFrom(byte[] data) throws IOException {
    OrderInfoList c = null;
       c = OrderInfoList.ADAPTER.decode(data);
    return c;
  }

  public Integer getShopType() {
    if(shop_type==null){
        return DEFAULT_SHOP_TYPE;
    }
    return shop_type;
  }

  public List<OrderInfo> getOrderInfoList() {
    if(order_info==null){
        return new java.util.ArrayList<OrderInfo>();
    }
    return order_info;
  }

  public boolean hasShopType() {
    return shop_type!=null;
  }

  public boolean hasOrderInfoList() {
    return order_info!=null;
  }

  public static final class Builder extends Message.Builder<OrderInfoList, Builder> {
    public Integer shop_type;

    public List<OrderInfo> order_info;

    public Builder() {
      order_info = Internal.newMutableList();
    }

    public Builder setShopType(Integer shop_type) {
      this.shop_type = shop_type;
      return this;
    }

    public Builder addAllOrderInfo(List<OrderInfo> order_info) {
      Internal.checkElementsNotNull(order_info);
      this.order_info = order_info;
      return this;
    }

    @Override
    public OrderInfoList build() {
      return new OrderInfoList(shop_type, order_info, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OrderInfoList extends ProtoAdapter<OrderInfoList> {
    public ProtoAdapter_OrderInfoList() {
      super(FieldEncoding.LENGTH_DELIMITED, OrderInfoList.class);
    }

    @Override
    public int encodedSize(OrderInfoList value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.shop_type)
          + OrderInfo.ADAPTER.asRepeated().encodedSizeWithTag(2, value.order_info)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OrderInfoList value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.shop_type);
      OrderInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.order_info);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OrderInfoList decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setShopType(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.order_info.add(OrderInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OrderInfoList redact(OrderInfoList value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.order_info, OrderInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
