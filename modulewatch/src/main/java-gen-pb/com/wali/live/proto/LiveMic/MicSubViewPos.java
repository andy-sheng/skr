// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: LiveMic.proto
package com.wali.live.proto.LiveMic;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import java.io.IOException;
import java.lang.Float;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * java -jar -Dfile.encoding=UTF-8 ./proto/wire-compiler-2.3.0-SNAPSHOT-jar-with-dependencies.jar \
 * --proto_path=./proto --java_out=./modulewatch/src/main/java-gen-pb/ LiveMic.proto
 */
public final class MicSubViewPos extends Message<MicSubViewPos, MicSubViewPos.Builder> {
  public static final ProtoAdapter<MicSubViewPos> ADAPTER = new ProtoAdapter_MicSubViewPos();

  private static final long serialVersionUID = 0L;

  public static final Float DEFAULT_TOPXSCALE = 0.0f;

  public static final Float DEFAULT_TOPYSCALE = 0.0f;

  public static final Float DEFAULT_WIDTHSCALE = 0.0f;

  public static final Float DEFAULT_HEIGHTSCALE = 0.0f;

  /**
   * 子视图左上角X在实际推流视频中的比例
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      label = WireField.Label.REQUIRED
  )
  public final Float topXScale;

  /**
   * 子视图左上角Y在实际推流视频中的比例
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      label = WireField.Label.REQUIRED
  )
  public final Float topYScale;

  /**
   * 子视图宽度在实际推流视频中的比例
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      label = WireField.Label.REQUIRED
  )
  public final Float widthScale;

  /**
   * 子视图高度左上角在推流视频中的比例
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      label = WireField.Label.REQUIRED
  )
  public final Float heightScale;

  public MicSubViewPos(Float topXScale, Float topYScale, Float widthScale, Float heightScale) {
    this(topXScale, topYScale, widthScale, heightScale, ByteString.EMPTY);
  }

  public MicSubViewPos(Float topXScale, Float topYScale, Float widthScale, Float heightScale,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.topXScale = topXScale;
    this.topYScale = topYScale;
    this.widthScale = widthScale;
    this.heightScale = heightScale;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.topXScale = topXScale;
    builder.topYScale = topYScale;
    builder.widthScale = widthScale;
    builder.heightScale = heightScale;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MicSubViewPos)) return false;
    MicSubViewPos o = (MicSubViewPos) other;
    return unknownFields().equals(o.unknownFields())
        && topXScale.equals(o.topXScale)
        && topYScale.equals(o.topYScale)
        && widthScale.equals(o.widthScale)
        && heightScale.equals(o.heightScale);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + topXScale.hashCode();
      result = result * 37 + topYScale.hashCode();
      result = result * 37 + widthScale.hashCode();
      result = result * 37 + heightScale.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", topXScale=").append(topXScale);
    builder.append(", topYScale=").append(topYScale);
    builder.append(", widthScale=").append(widthScale);
    builder.append(", heightScale=").append(heightScale);
    return builder.replace(0, 2, "MicSubViewPos{").append('}').toString();
  }

  public byte[] toByteArray() {
    return MicSubViewPos.ADAPTER.encode(this);
  }

  public static final MicSubViewPos parseFrom(byte[] data) throws IOException {
    MicSubViewPos c = null;
       c = MicSubViewPos.ADAPTER.decode(data);
    return c;
  }

  /**
   * 子视图左上角X在实际推流视频中的比例
   */
  public Float getTopXScale() {
    if(topXScale==null){
        return DEFAULT_TOPXSCALE;
    }
    return topXScale;
  }

  /**
   * 子视图左上角Y在实际推流视频中的比例
   */
  public Float getTopYScale() {
    if(topYScale==null){
        return DEFAULT_TOPYSCALE;
    }
    return topYScale;
  }

  /**
   * 子视图宽度在实际推流视频中的比例
   */
  public Float getWidthScale() {
    if(widthScale==null){
        return DEFAULT_WIDTHSCALE;
    }
    return widthScale;
  }

  /**
   * 子视图高度左上角在推流视频中的比例
   */
  public Float getHeightScale() {
    if(heightScale==null){
        return DEFAULT_HEIGHTSCALE;
    }
    return heightScale;
  }

  /**
   * 子视图左上角X在实际推流视频中的比例
   */
  public boolean hasTopXScale() {
    return topXScale!=null;
  }

  /**
   * 子视图左上角Y在实际推流视频中的比例
   */
  public boolean hasTopYScale() {
    return topYScale!=null;
  }

  /**
   * 子视图宽度在实际推流视频中的比例
   */
  public boolean hasWidthScale() {
    return widthScale!=null;
  }

  /**
   * 子视图高度左上角在推流视频中的比例
   */
  public boolean hasHeightScale() {
    return heightScale!=null;
  }

  public static final class Builder extends Message.Builder<MicSubViewPos, Builder> {
    public Float topXScale;

    public Float topYScale;

    public Float widthScale;

    public Float heightScale;

    public Builder() {
    }

    /**
     * 子视图左上角X在实际推流视频中的比例
     */
    public Builder setTopXScale(Float topXScale) {
      this.topXScale = topXScale;
      return this;
    }

    /**
     * 子视图左上角Y在实际推流视频中的比例
     */
    public Builder setTopYScale(Float topYScale) {
      this.topYScale = topYScale;
      return this;
    }

    /**
     * 子视图宽度在实际推流视频中的比例
     */
    public Builder setWidthScale(Float widthScale) {
      this.widthScale = widthScale;
      return this;
    }

    /**
     * 子视图高度左上角在推流视频中的比例
     */
    public Builder setHeightScale(Float heightScale) {
      this.heightScale = heightScale;
      return this;
    }

    @Override
    public MicSubViewPos build() {
      return new MicSubViewPos(topXScale, topYScale, widthScale, heightScale, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MicSubViewPos extends ProtoAdapter<MicSubViewPos> {
    public ProtoAdapter_MicSubViewPos() {
      super(FieldEncoding.LENGTH_DELIMITED, MicSubViewPos.class);
    }

    @Override
    public int encodedSize(MicSubViewPos value) {
      return ProtoAdapter.FLOAT.encodedSizeWithTag(1, value.topXScale)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(2, value.topYScale)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(3, value.widthScale)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(4, value.heightScale)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MicSubViewPos value) throws IOException {
      ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.topXScale);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.topYScale);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 3, value.widthScale);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 4, value.heightScale);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MicSubViewPos decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.setTopXScale(ProtoAdapter.FLOAT.decode(reader)); break;
          case 2: builder.setTopYScale(ProtoAdapter.FLOAT.decode(reader)); break;
          case 3: builder.setWidthScale(ProtoAdapter.FLOAT.decode(reader)); break;
          case 4: builder.setHeightScale(ProtoAdapter.FLOAT.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MicSubViewPos redact(MicSubViewPos value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
